
vFinaleProjet442_JeuVoiture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000169d8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000d0410  08016ba8  08016ba8  00017ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080e6fb8  080e6fb8  000e8104  2**0
                  CONTENTS
  4 .ARM          00000008  080e6fb8  080e6fb8  000e7fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080e6fc0  080e6fc0  000e8104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080e6fc0  080e6fc0  000e7fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080e6fc4  080e6fc4  000e7fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  080e6fc8  000e8000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009a6c  20000104  080e70cc  000e8104  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20009b70  080e70cc  000e8b70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000e8104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034e39  00000000  00000000  000e8134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000072e7  00000000  00000000  0011cf6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c20  00000000  00000000  00124258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000220a  00000000  00000000  00126e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003142e  00000000  00000000  00129082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000377b9  00000000  00000000  0015a4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118d98  00000000  00000000  00191c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002aaa01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bec0  00000000  00000000  002aaa44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  002b6904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000104 	.word	0x20000104
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016b90 	.word	0x08016b90

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000108 	.word	0x20000108
 800020c:	08016b90 	.word	0x08016b90

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	@ 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2iz>:
 800087c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000884:	d215      	bcs.n	80008b2 <__aeabi_d2iz+0x36>
 8000886:	d511      	bpl.n	80008ac <__aeabi_d2iz+0x30>
 8000888:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d912      	bls.n	80008b8 <__aeabi_d2iz+0x3c>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80008a2:	fa23 f002 	lsr.w	r0, r3, r2
 80008a6:	bf18      	it	ne
 80008a8:	4240      	negne	r0, r0
 80008aa:	4770      	bx	lr
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	4770      	bx	lr
 80008b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008b6:	d105      	bne.n	80008c4 <__aeabi_d2iz+0x48>
 80008b8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80008bc:	bf08      	it	eq
 80008be:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80008c2:	4770      	bx	lr
 80008c4:	f04f 0000 	mov.w	r0, #0
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80008e0:	f000 b96a 	b.w	8000bb8 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	460c      	mov	r4, r1
 8000904:	2b00      	cmp	r3, #0
 8000906:	d14e      	bne.n	80009a6 <__udivmoddi4+0xaa>
 8000908:	4694      	mov	ip, r2
 800090a:	458c      	cmp	ip, r1
 800090c:	4686      	mov	lr, r0
 800090e:	fab2 f282 	clz	r2, r2
 8000912:	d962      	bls.n	80009da <__udivmoddi4+0xde>
 8000914:	b14a      	cbz	r2, 800092a <__udivmoddi4+0x2e>
 8000916:	f1c2 0320 	rsb	r3, r2, #32
 800091a:	4091      	lsls	r1, r2
 800091c:	fa20 f303 	lsr.w	r3, r0, r3
 8000920:	fa0c fc02 	lsl.w	ip, ip, r2
 8000924:	4319      	orrs	r1, r3
 8000926:	fa00 fe02 	lsl.w	lr, r0, r2
 800092a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800092e:	fa1f f68c 	uxth.w	r6, ip
 8000932:	fbb1 f4f7 	udiv	r4, r1, r7
 8000936:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800093a:	fb07 1114 	mls	r1, r7, r4, r1
 800093e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000942:	fb04 f106 	mul.w	r1, r4, r6
 8000946:	4299      	cmp	r1, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x64>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000952:	f080 8112 	bcs.w	8000b7a <__udivmoddi4+0x27e>
 8000956:	4299      	cmp	r1, r3
 8000958:	f240 810f 	bls.w	8000b7a <__udivmoddi4+0x27e>
 800095c:	3c02      	subs	r4, #2
 800095e:	4463      	add	r3, ip
 8000960:	1a59      	subs	r1, r3, r1
 8000962:	fa1f f38e 	uxth.w	r3, lr
 8000966:	fbb1 f0f7 	udiv	r0, r1, r7
 800096a:	fb07 1110 	mls	r1, r7, r0, r1
 800096e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000972:	fb00 f606 	mul.w	r6, r0, r6
 8000976:	429e      	cmp	r6, r3
 8000978:	d90a      	bls.n	8000990 <__udivmoddi4+0x94>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000982:	f080 80fc 	bcs.w	8000b7e <__udivmoddi4+0x282>
 8000986:	429e      	cmp	r6, r3
 8000988:	f240 80f9 	bls.w	8000b7e <__udivmoddi4+0x282>
 800098c:	4463      	add	r3, ip
 800098e:	3802      	subs	r0, #2
 8000990:	1b9b      	subs	r3, r3, r6
 8000992:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000996:	2100      	movs	r1, #0
 8000998:	b11d      	cbz	r5, 80009a2 <__udivmoddi4+0xa6>
 800099a:	40d3      	lsrs	r3, r2
 800099c:	2200      	movs	r2, #0
 800099e:	e9c5 3200 	strd	r3, r2, [r5]
 80009a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d905      	bls.n	80009b6 <__udivmoddi4+0xba>
 80009aa:	b10d      	cbz	r5, 80009b0 <__udivmoddi4+0xb4>
 80009ac:	e9c5 0100 	strd	r0, r1, [r5]
 80009b0:	2100      	movs	r1, #0
 80009b2:	4608      	mov	r0, r1
 80009b4:	e7f5      	b.n	80009a2 <__udivmoddi4+0xa6>
 80009b6:	fab3 f183 	clz	r1, r3
 80009ba:	2900      	cmp	r1, #0
 80009bc:	d146      	bne.n	8000a4c <__udivmoddi4+0x150>
 80009be:	42a3      	cmp	r3, r4
 80009c0:	d302      	bcc.n	80009c8 <__udivmoddi4+0xcc>
 80009c2:	4290      	cmp	r0, r2
 80009c4:	f0c0 80f0 	bcc.w	8000ba8 <__udivmoddi4+0x2ac>
 80009c8:	1a86      	subs	r6, r0, r2
 80009ca:	eb64 0303 	sbc.w	r3, r4, r3
 80009ce:	2001      	movs	r0, #1
 80009d0:	2d00      	cmp	r5, #0
 80009d2:	d0e6      	beq.n	80009a2 <__udivmoddi4+0xa6>
 80009d4:	e9c5 6300 	strd	r6, r3, [r5]
 80009d8:	e7e3      	b.n	80009a2 <__udivmoddi4+0xa6>
 80009da:	2a00      	cmp	r2, #0
 80009dc:	f040 8090 	bne.w	8000b00 <__udivmoddi4+0x204>
 80009e0:	eba1 040c 	sub.w	r4, r1, ip
 80009e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e8:	fa1f f78c 	uxth.w	r7, ip
 80009ec:	2101      	movs	r1, #1
 80009ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80009f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009f6:	fb08 4416 	mls	r4, r8, r6, r4
 80009fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009fe:	fb07 f006 	mul.w	r0, r7, r6
 8000a02:	4298      	cmp	r0, r3
 8000a04:	d908      	bls.n	8000a18 <__udivmoddi4+0x11c>
 8000a06:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000a0e:	d202      	bcs.n	8000a16 <__udivmoddi4+0x11a>
 8000a10:	4298      	cmp	r0, r3
 8000a12:	f200 80cd 	bhi.w	8000bb0 <__udivmoddi4+0x2b4>
 8000a16:	4626      	mov	r6, r4
 8000a18:	1a1c      	subs	r4, r3, r0
 8000a1a:	fa1f f38e 	uxth.w	r3, lr
 8000a1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a22:	fb08 4410 	mls	r4, r8, r0, r4
 8000a26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a2a:	fb00 f707 	mul.w	r7, r0, r7
 8000a2e:	429f      	cmp	r7, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x148>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000a3a:	d202      	bcs.n	8000a42 <__udivmoddi4+0x146>
 8000a3c:	429f      	cmp	r7, r3
 8000a3e:	f200 80b0 	bhi.w	8000ba2 <__udivmoddi4+0x2a6>
 8000a42:	4620      	mov	r0, r4
 8000a44:	1bdb      	subs	r3, r3, r7
 8000a46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a4a:	e7a5      	b.n	8000998 <__udivmoddi4+0x9c>
 8000a4c:	f1c1 0620 	rsb	r6, r1, #32
 8000a50:	408b      	lsls	r3, r1
 8000a52:	fa22 f706 	lsr.w	r7, r2, r6
 8000a56:	431f      	orrs	r7, r3
 8000a58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a60:	ea43 030c 	orr.w	r3, r3, ip
 8000a64:	40f4      	lsrs	r4, r6
 8000a66:	fa00 f801 	lsl.w	r8, r0, r1
 8000a6a:	0c38      	lsrs	r0, r7, #16
 8000a6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a70:	fbb4 fef0 	udiv	lr, r4, r0
 8000a74:	fa1f fc87 	uxth.w	ip, r7
 8000a78:	fb00 441e 	mls	r4, r0, lr, r4
 8000a7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a80:	fb0e f90c 	mul.w	r9, lr, ip
 8000a84:	45a1      	cmp	r9, r4
 8000a86:	fa02 f201 	lsl.w	r2, r2, r1
 8000a8a:	d90a      	bls.n	8000aa2 <__udivmoddi4+0x1a6>
 8000a8c:	193c      	adds	r4, r7, r4
 8000a8e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000a92:	f080 8084 	bcs.w	8000b9e <__udivmoddi4+0x2a2>
 8000a96:	45a1      	cmp	r9, r4
 8000a98:	f240 8081 	bls.w	8000b9e <__udivmoddi4+0x2a2>
 8000a9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000aa0:	443c      	add	r4, r7
 8000aa2:	eba4 0409 	sub.w	r4, r4, r9
 8000aa6:	fa1f f983 	uxth.w	r9, r3
 8000aaa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000aae:	fb00 4413 	mls	r4, r0, r3, r4
 8000ab2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ab6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aba:	45a4      	cmp	ip, r4
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x1d2>
 8000abe:	193c      	adds	r4, r7, r4
 8000ac0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ac4:	d267      	bcs.n	8000b96 <__udivmoddi4+0x29a>
 8000ac6:	45a4      	cmp	ip, r4
 8000ac8:	d965      	bls.n	8000b96 <__udivmoddi4+0x29a>
 8000aca:	3b02      	subs	r3, #2
 8000acc:	443c      	add	r4, r7
 8000ace:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ad2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ad6:	eba4 040c 	sub.w	r4, r4, ip
 8000ada:	429c      	cmp	r4, r3
 8000adc:	46ce      	mov	lr, r9
 8000ade:	469c      	mov	ip, r3
 8000ae0:	d351      	bcc.n	8000b86 <__udivmoddi4+0x28a>
 8000ae2:	d04e      	beq.n	8000b82 <__udivmoddi4+0x286>
 8000ae4:	b155      	cbz	r5, 8000afc <__udivmoddi4+0x200>
 8000ae6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aea:	eb64 040c 	sbc.w	r4, r4, ip
 8000aee:	fa04 f606 	lsl.w	r6, r4, r6
 8000af2:	40cb      	lsrs	r3, r1
 8000af4:	431e      	orrs	r6, r3
 8000af6:	40cc      	lsrs	r4, r1
 8000af8:	e9c5 6400 	strd	r6, r4, [r5]
 8000afc:	2100      	movs	r1, #0
 8000afe:	e750      	b.n	80009a2 <__udivmoddi4+0xa6>
 8000b00:	f1c2 0320 	rsb	r3, r2, #32
 8000b04:	fa20 f103 	lsr.w	r1, r0, r3
 8000b08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b10:	4094      	lsls	r4, r2
 8000b12:	430c      	orrs	r4, r1
 8000b14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1c:	fa1f f78c 	uxth.w	r7, ip
 8000b20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b24:	fb08 3110 	mls	r1, r8, r0, r3
 8000b28:	0c23      	lsrs	r3, r4, #16
 8000b2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b2e:	fb00 f107 	mul.w	r1, r0, r7
 8000b32:	4299      	cmp	r1, r3
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x24c>
 8000b36:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000b3e:	d22c      	bcs.n	8000b9a <__udivmoddi4+0x29e>
 8000b40:	4299      	cmp	r1, r3
 8000b42:	d92a      	bls.n	8000b9a <__udivmoddi4+0x29e>
 8000b44:	3802      	subs	r0, #2
 8000b46:	4463      	add	r3, ip
 8000b48:	1a5b      	subs	r3, r3, r1
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b50:	fb08 3311 	mls	r3, r8, r1, r3
 8000b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b58:	fb01 f307 	mul.w	r3, r1, r7
 8000b5c:	42a3      	cmp	r3, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x276>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b68:	d213      	bcs.n	8000b92 <__udivmoddi4+0x296>
 8000b6a:	42a3      	cmp	r3, r4
 8000b6c:	d911      	bls.n	8000b92 <__udivmoddi4+0x296>
 8000b6e:	3902      	subs	r1, #2
 8000b70:	4464      	add	r4, ip
 8000b72:	1ae4      	subs	r4, r4, r3
 8000b74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b78:	e739      	b.n	80009ee <__udivmoddi4+0xf2>
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	e6f0      	b.n	8000960 <__udivmoddi4+0x64>
 8000b7e:	4608      	mov	r0, r1
 8000b80:	e706      	b.n	8000990 <__udivmoddi4+0x94>
 8000b82:	45c8      	cmp	r8, r9
 8000b84:	d2ae      	bcs.n	8000ae4 <__udivmoddi4+0x1e8>
 8000b86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b8e:	3801      	subs	r0, #1
 8000b90:	e7a8      	b.n	8000ae4 <__udivmoddi4+0x1e8>
 8000b92:	4631      	mov	r1, r6
 8000b94:	e7ed      	b.n	8000b72 <__udivmoddi4+0x276>
 8000b96:	4603      	mov	r3, r0
 8000b98:	e799      	b.n	8000ace <__udivmoddi4+0x1d2>
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	e7d4      	b.n	8000b48 <__udivmoddi4+0x24c>
 8000b9e:	46d6      	mov	lr, sl
 8000ba0:	e77f      	b.n	8000aa2 <__udivmoddi4+0x1a6>
 8000ba2:	4463      	add	r3, ip
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	e74d      	b.n	8000a44 <__udivmoddi4+0x148>
 8000ba8:	4606      	mov	r6, r0
 8000baa:	4623      	mov	r3, r4
 8000bac:	4608      	mov	r0, r1
 8000bae:	e70f      	b.n	80009d0 <__udivmoddi4+0xd4>
 8000bb0:	3e02      	subs	r6, #2
 8000bb2:	4463      	add	r3, ip
 8000bb4:	e730      	b.n	8000a18 <__udivmoddi4+0x11c>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_idiv0>:
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <Storage_OpenReadFile>:
  * @param  BufferAddress: A pointer to a buffer to copy the file to
  * @param  FileLen: the File lenght
  * @retval err: Error status (0=> success, 1=> fail)
  */
uint32_t Storage_OpenReadFile(uint8_t *Address, const char* BmpName)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000bc8:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000bcc:	6018      	str	r0, [r3, #0]
 8000bce:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000bd2:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8000bd6:	6019      	str	r1, [r3, #0]
  uint32_t index = 0, size = 0, i1 = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8000bde:	2300      	movs	r3, #0
 8000be0:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8000be4:	2300      	movs	r3, #0
 8000be6:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  uint32_t BmpAddress;
  FIL F1;

  if (f_open(&F1, (TCHAR const*)BmpName, FA_READ) != FR_OK)
 8000bea:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000bee:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8000bf2:	f107 0008 	add.w	r0, r7, #8
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	6819      	ldr	r1, [r3, #0]
 8000bfa:	f011 f99f 	bl	8011f3c <f_open>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <Storage_OpenReadFile+0x4c>
  {
    while(1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <Storage_OpenReadFile+0x48>
    {
    } 
  }
  if (f_read (&F1, sector, 30, (UINT *)&BytesRead) != FR_OK)
 8000c08:	f107 0008 	add.w	r0, r7, #8
 8000c0c:	4b49      	ldr	r3, [pc, #292]	@ (8000d34 <Storage_OpenReadFile+0x178>)
 8000c0e:	221e      	movs	r2, #30
 8000c10:	4949      	ldr	r1, [pc, #292]	@ (8000d38 <Storage_OpenReadFile+0x17c>)
 8000c12:	f011 fb54 	bl	80122be <f_read>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <Storage_OpenReadFile+0x64>
  {
    while(1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <Storage_OpenReadFile+0x60>
    {
    } 
  }
  
  BmpAddress = (uint32_t)sector;
 8000c20:	4b45      	ldr	r3, [pc, #276]	@ (8000d38 <Storage_OpenReadFile+0x17c>)
 8000c22:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238

  /* Read bitmap size */
  size = *(uint16_t *) (BmpAddress + 2);
 8000c26:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8000c2a:	3302      	adds	r3, #2
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
  size |= (*(uint16_t *) (BmpAddress + 4)) << 16;  
 8000c32:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8000c36:	3304      	adds	r3, #4
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	041b      	lsls	r3, r3, #16
 8000c3c:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 8000c40:	4313      	orrs	r3, r2
 8000c42:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 
  /* Get bitmap data address offset */
  index = *(uint16_t *) (BmpAddress + 10);
 8000c46:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8000c4a:	330a      	adds	r3, #10
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  index |= (*(uint16_t *) (BmpAddress + 12)) << 16;  
 8000c52:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8000c56:	330c      	adds	r3, #12
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	041b      	lsls	r3, r3, #16
 8000c5c:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8000c60:	4313      	orrs	r3, r2
 8000c62:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  
  f_close (&F1);
 8000c66:	f107 0308 	add.w	r3, r7, #8
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f011 fd1e 	bl	80126ac <f_close>
  
  f_open (&F1, (TCHAR const*)BmpName, FA_READ);
 8000c70:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000c74:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8000c78:	f107 0008 	add.w	r0, r7, #8
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	6819      	ldr	r1, [r3, #0]
 8000c80:	f011 f95c 	bl	8011f3c <f_open>

  do
  {
    if (size < 256*2)
 8000c84:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8000c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c8c:	d204      	bcs.n	8000c98 <Storage_OpenReadFile+0xdc>
    {
      i1 = size;
 8000c8e:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8000c92:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 8000c96:	e003      	b.n	8000ca0 <Storage_OpenReadFile+0xe4>
    }
    else
    {
      i1 = 256*2;
 8000c98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c9c:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    }
    size -= i1;
 8000ca0:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 8000ca4:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
    f_read (&F1, sector, i1, (UINT *)&BytesRead);
 8000cae:	f107 0008 	add.w	r0, r7, #8
 8000cb2:	4b20      	ldr	r3, [pc, #128]	@ (8000d34 <Storage_OpenReadFile+0x178>)
 8000cb4:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8000cb8:	491f      	ldr	r1, [pc, #124]	@ (8000d38 <Storage_OpenReadFile+0x17c>)
 8000cba:	f011 fb00 	bl	80122be <f_read>

    for (index = 0; index < i1; index++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8000cc4:	e01e      	b.n	8000d04 <Storage_OpenReadFile+0x148>
    {
      *(__IO uint8_t*) (Address) = *(__IO uint8_t *)BmpAddress;
 8000cc6:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000cd2:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	701a      	strb	r2, [r3, #0]
      
      BmpAddress++;  
 8000cda:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8000cde:	3301      	adds	r3, #1
 8000ce0:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
      Address++;
 8000ce4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000ce8:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000cec:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8000cf0:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 8000cf4:	6812      	ldr	r2, [r2, #0]
 8000cf6:	3201      	adds	r2, #1
 8000cf8:	601a      	str	r2, [r3, #0]
    for (index = 0; index < i1; index++)
 8000cfa:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000cfe:	3301      	adds	r3, #1
 8000d00:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8000d04:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8000d08:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d3da      	bcc.n	8000cc6 <Storage_OpenReadFile+0x10a>
    }  
    
    BmpAddress = (uint32_t)sector;
 8000d10:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <Storage_OpenReadFile+0x17c>)
 8000d12:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  }
  while (size > 0);
 8000d16:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1b2      	bne.n	8000c84 <Storage_OpenReadFile+0xc8>

  f_close (&F1);
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	4618      	mov	r0, r3
 8000d24:	f011 fcc2 	bl	80126ac <f_close>
  
  return 1;
 8000d28:	2301      	movs	r3, #1
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	200005a0 	.word	0x200005a0
 8000d38:	20000120 	.word	0x20000120

08000d3c <Storage_GetDirectoryBitmapFiles>:
  * @retval The number of the found files
  */


uint32_t Storage_GetDirectoryBitmapFiles (const char* DirName, char* Files[])
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  FRESULT res;
  uint32_t index = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]

  /* Open filesystem */
  if(f_mount(&fs, (TCHAR const*)"",0) != FR_OK)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	491c      	ldr	r1, [pc, #112]	@ (8000dc0 <Storage_GetDirectoryBitmapFiles+0x84>)
 8000d4e:	481d      	ldr	r0, [pc, #116]	@ (8000dc4 <Storage_GetDirectoryBitmapFiles+0x88>)
 8000d50:	f011 f890 	bl	8011e74 <f_mount>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <Storage_GetDirectoryBitmapFiles+0x22>
  {
    return 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e02c      	b.n	8000db8 <Storage_GetDirectoryBitmapFiles+0x7c>
  }

  /* Start to search for wave files */
  res = f_findfirst(&dir, &fno, DirName, "*.bmp");
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc8 <Storage_GetDirectoryBitmapFiles+0x8c>)
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	491a      	ldr	r1, [pc, #104]	@ (8000dcc <Storage_GetDirectoryBitmapFiles+0x90>)
 8000d64:	481a      	ldr	r0, [pc, #104]	@ (8000dd0 <Storage_GetDirectoryBitmapFiles+0x94>)
 8000d66:	f012 f832 	bl	8012dce <f_findfirst>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	73fb      	strb	r3, [r7, #15]

  /* Repeat while an item is found */
  while (fno.fname[0])
 8000d6e:	e01b      	b.n	8000da8 <Storage_GetDirectoryBitmapFiles+0x6c>
  {
    if(res == FR_OK)
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d115      	bne.n	8000da2 <Storage_GetDirectoryBitmapFiles+0x66>
    {
      if(index < MAX_BMP_FILES)
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	2b18      	cmp	r3, #24
 8000d7a:	d80b      	bhi.n	8000d94 <Storage_GetDirectoryBitmapFiles+0x58>
      {
        sprintf (Files[index++], "%s", fno.fname);
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	1c5a      	adds	r2, r3, #1
 8000d80:	60ba      	str	r2, [r7, #8]
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	683a      	ldr	r2, [r7, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a12      	ldr	r2, [pc, #72]	@ (8000dd4 <Storage_GetDirectoryBitmapFiles+0x98>)
 8000d8c:	4912      	ldr	r1, [pc, #72]	@ (8000dd8 <Storage_GetDirectoryBitmapFiles+0x9c>)
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f015 fab6 	bl	8016300 <siprintf>
      }
      /* Search for next item */
      res = f_findnext(&dir, &fno);
 8000d94:	490d      	ldr	r1, [pc, #52]	@ (8000dcc <Storage_GetDirectoryBitmapFiles+0x90>)
 8000d96:	480e      	ldr	r0, [pc, #56]	@ (8000dd0 <Storage_GetDirectoryBitmapFiles+0x94>)
 8000d98:	f011 fff1 	bl	8012d7e <f_findnext>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	e002      	b.n	8000da8 <Storage_GetDirectoryBitmapFiles+0x6c>
    }
    else
    {
      index = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
      break;
 8000da6:	e003      	b.n	8000db0 <Storage_GetDirectoryBitmapFiles+0x74>
  while (fno.fname[0])
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <Storage_GetDirectoryBitmapFiles+0x90>)
 8000daa:	7a5b      	ldrb	r3, [r3, #9]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1df      	bne.n	8000d70 <Storage_GetDirectoryBitmapFiles+0x34>
    }
  }

  f_closedir(&dir);
 8000db0:	4807      	ldr	r0, [pc, #28]	@ (8000dd0 <Storage_GetDirectoryBitmapFiles+0x94>)
 8000db2:	f011 ff76 	bl	8012ca2 <f_closedir>

  return index;
 8000db6:	68bb      	ldr	r3, [r7, #8]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	08016ba8 	.word	0x08016ba8
 8000dc4:	20000320 	.word	0x20000320
 8000dc8:	08016bac 	.word	0x08016bac
 8000dcc:	20000554 	.word	0x20000554
 8000dd0:	2000056c 	.word	0x2000056c
 8000dd4:	2000055d 	.word	0x2000055d
 8000dd8:	08016bb4 	.word	0x08016bb4

08000ddc <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4a07      	ldr	r2, [pc, #28]	@ (8000e3c <vApplicationGetIdleTaskMemory+0x2c>)
 8000e20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	4a06      	ldr	r2, [pc, #24]	@ (8000e40 <vApplicationGetIdleTaskMemory+0x30>)
 8000e26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2280      	movs	r2, #128	@ 0x80
 8000e2c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e2e:	bf00      	nop
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	200005a4 	.word	0x200005a4
 8000e40:	20000644 	.word	0x20000644

08000e44 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000e4e:	20c8      	movs	r0, #200	@ 0xc8
 8000e50:	f002 fb88 	bl	8003564 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000e54:	f000 f9b4 	bl	80011c0 <ft5336_I2C_InitializeIfRequired>
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000e88:	2300      	movs	r3, #0
 8000e8a:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000e8c:	f000 f998 	bl	80011c0 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000e90:	2300      	movs	r3, #0
 8000e92:	73fb      	strb	r3, [r7, #15]
 8000e94:	e010      	b.n	8000eb8 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	21a8      	movs	r1, #168	@ 0xa8
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f002 fb43 	bl	8003528 <TS_IO_Read>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000ea6:	7b7b      	ldrb	r3, [r7, #13]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b51      	cmp	r3, #81	@ 0x51
 8000eac:	d101      	bne.n	8000eb2 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d802      	bhi.n	8000ec4 <ft5336_ReadID+0x4e>
 8000ebe:	7bbb      	ldrb	r3, [r7, #14]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0e8      	beq.n	8000e96 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000ec4:	7b7b      	ldrb	r3, [r7, #13]
 8000ec6:	b2db      	uxtb	r3, r3
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 f97f 	bl	80011e0 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 f933 	bl	8001150 <ft5336_TS_DisableIT>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000f02:	88fb      	ldrh	r3, [r7, #6]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2102      	movs	r1, #2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f002 fb0d 	bl	8003528 <TS_IO_Read>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b05      	cmp	r3, #5
 8000f24:	d901      	bls.n	8000f2a <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <ft5336_TS_DetectTouch+0x50>)
 8000f30:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000f32:	4b04      	ldr	r3, [pc, #16]	@ (8000f44 <ft5336_TS_DetectTouch+0x50>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	b2db      	uxtb	r3, r3
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000844 	.word	0x20000844

08000f48 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000f6a:	4b6d      	ldr	r3, [pc, #436]	@ (8001120 <ft5336_TS_GetXY+0x1d8>)
 8000f6c:	789a      	ldrb	r2, [r3, #2]
 8000f6e:	4b6c      	ldr	r3, [pc, #432]	@ (8001120 <ft5336_TS_GetXY+0x1d8>)
 8000f70:	785b      	ldrb	r3, [r3, #1]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	f080 80cf 	bcs.w	8001116 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000f78:	4b69      	ldr	r3, [pc, #420]	@ (8001120 <ft5336_TS_GetXY+0x1d8>)
 8000f7a:	789b      	ldrb	r3, [r3, #2]
 8000f7c:	2b09      	cmp	r3, #9
 8000f7e:	d871      	bhi.n	8001064 <ft5336_TS_GetXY+0x11c>
 8000f80:	a201      	add	r2, pc, #4	@ (adr r2, 8000f88 <ft5336_TS_GetXY+0x40>)
 8000f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f86:	bf00      	nop
 8000f88:	08000fb1 	.word	0x08000fb1
 8000f8c:	08000fc3 	.word	0x08000fc3
 8000f90:	08000fd5 	.word	0x08000fd5
 8000f94:	08000fe7 	.word	0x08000fe7
 8000f98:	08000ff9 	.word	0x08000ff9
 8000f9c:	0800100b 	.word	0x0800100b
 8000fa0:	0800101d 	.word	0x0800101d
 8000fa4:	0800102f 	.word	0x0800102f
 8000fa8:	08001041 	.word	0x08001041
 8000fac:	08001053 	.word	0x08001053
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000fb8:	2306      	movs	r3, #6
 8000fba:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000fbc:	2305      	movs	r3, #5
 8000fbe:	753b      	strb	r3, [r7, #20]
      break;
 8000fc0:	e051      	b.n	8001066 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000fc2:	230a      	movs	r3, #10
 8000fc4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000fc6:	2309      	movs	r3, #9
 8000fc8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000fca:	230c      	movs	r3, #12
 8000fcc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000fce:	230b      	movs	r3, #11
 8000fd0:	753b      	strb	r3, [r7, #20]
      break;
 8000fd2:	e048      	b.n	8001066 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000fd4:	2310      	movs	r3, #16
 8000fd6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000fd8:	230f      	movs	r3, #15
 8000fda:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000fdc:	2312      	movs	r3, #18
 8000fde:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000fe0:	2311      	movs	r3, #17
 8000fe2:	753b      	strb	r3, [r7, #20]
      break;
 8000fe4:	e03f      	b.n	8001066 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000fe6:	2316      	movs	r3, #22
 8000fe8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000fea:	2315      	movs	r3, #21
 8000fec:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8000fee:	2318      	movs	r3, #24
 8000ff0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8000ff2:	2317      	movs	r3, #23
 8000ff4:	753b      	strb	r3, [r7, #20]
      break;
 8000ff6:	e036      	b.n	8001066 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000ff8:	231c      	movs	r3, #28
 8000ffa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000ffc:	231b      	movs	r3, #27
 8000ffe:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8001000:	231e      	movs	r3, #30
 8001002:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8001004:	231d      	movs	r3, #29
 8001006:	753b      	strb	r3, [r7, #20]
      break;
 8001008:	e02d      	b.n	8001066 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800100a:	2322      	movs	r3, #34	@ 0x22
 800100c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800100e:	2321      	movs	r3, #33	@ 0x21
 8001010:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8001012:	2324      	movs	r3, #36	@ 0x24
 8001014:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8001016:	2323      	movs	r3, #35	@ 0x23
 8001018:	753b      	strb	r3, [r7, #20]
      break;
 800101a:	e024      	b.n	8001066 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 800101c:	2328      	movs	r3, #40	@ 0x28
 800101e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8001020:	2327      	movs	r3, #39	@ 0x27
 8001022:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8001024:	232a      	movs	r3, #42	@ 0x2a
 8001026:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8001028:	2329      	movs	r3, #41	@ 0x29
 800102a:	753b      	strb	r3, [r7, #20]
      break;
 800102c:	e01b      	b.n	8001066 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800102e:	232e      	movs	r3, #46	@ 0x2e
 8001030:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8001032:	232d      	movs	r3, #45	@ 0x2d
 8001034:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8001036:	2330      	movs	r3, #48	@ 0x30
 8001038:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800103a:	232f      	movs	r3, #47	@ 0x2f
 800103c:	753b      	strb	r3, [r7, #20]
      break;
 800103e:	e012      	b.n	8001066 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8001040:	2334      	movs	r3, #52	@ 0x34
 8001042:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8001044:	2333      	movs	r3, #51	@ 0x33
 8001046:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8001048:	2336      	movs	r3, #54	@ 0x36
 800104a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 800104c:	2335      	movs	r3, #53	@ 0x35
 800104e:	753b      	strb	r3, [r7, #20]
      break;
 8001050:	e009      	b.n	8001066 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8001052:	233a      	movs	r3, #58	@ 0x3a
 8001054:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8001056:	2339      	movs	r3, #57	@ 0x39
 8001058:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800105a:	233c      	movs	r3, #60	@ 0x3c
 800105c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800105e:	233b      	movs	r3, #59	@ 0x3b
 8001060:	753b      	strb	r3, [r7, #20]
      break;
 8001062:	e000      	b.n	8001066 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8001064:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8001066:	89fb      	ldrh	r3, [r7, #14]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	7dfa      	ldrb	r2, [r7, #23]
 800106c:	4611      	mov	r1, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f002 fa5a 	bl	8003528 <TS_IO_Read>
 8001074:	4603      	mov	r3, r0
 8001076:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001078:	7cfb      	ldrb	r3, [r7, #19]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	461a      	mov	r2, r3
 800107e:	4b29      	ldr	r3, [pc, #164]	@ (8001124 <ft5336_TS_GetXY+0x1dc>)
 8001080:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001082:	89fb      	ldrh	r3, [r7, #14]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	7dba      	ldrb	r2, [r7, #22]
 8001088:	4611      	mov	r1, r2
 800108a:	4618      	mov	r0, r3
 800108c:	f002 fa4c 	bl	8003528 <TS_IO_Read>
 8001090:	4603      	mov	r3, r0
 8001092:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001094:	7cfb      	ldrb	r3, [r7, #19]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800109e:	b21a      	sxth	r2, r3
 80010a0:	4b20      	ldr	r3, [pc, #128]	@ (8001124 <ft5336_TS_GetXY+0x1dc>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001124 <ft5336_TS_GetXY+0x1dc>)
 80010ae:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80010b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <ft5336_TS_GetXY+0x1dc>)
 80010b2:	881a      	ldrh	r2, [r3, #0]
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80010b8:	89fb      	ldrh	r3, [r7, #14]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	7d7a      	ldrb	r2, [r7, #21]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f002 fa31 	bl	8003528 <TS_IO_Read>
 80010c6:	4603      	mov	r3, r0
 80010c8:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80010ca:	7cfb      	ldrb	r3, [r7, #19]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <ft5336_TS_GetXY+0x1dc>)
 80010d2:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80010d4:	89fb      	ldrh	r3, [r7, #14]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	7d3a      	ldrb	r2, [r7, #20]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 fa23 	bl	8003528 <TS_IO_Read>
 80010e2:	4603      	mov	r3, r0
 80010e4:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80010e6:	7cfb      	ldrb	r3, [r7, #19]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <ft5336_TS_GetXY+0x1dc>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <ft5336_TS_GetXY+0x1dc>)
 8001100:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8001102:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <ft5336_TS_GetXY+0x1dc>)
 8001104:	881a      	ldrh	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800110a:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <ft5336_TS_GetXY+0x1d8>)
 800110c:	789b      	ldrb	r3, [r3, #2]
 800110e:	3301      	adds	r3, #1
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b03      	ldr	r3, [pc, #12]	@ (8001120 <ft5336_TS_GetXY+0x1d8>)
 8001114:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000844 	.word	0x20000844
 8001124:	20000848 	.word	0x20000848

08001128 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001136:	2301      	movs	r3, #1
 8001138:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	21a4      	movs	r1, #164	@ 0xa4
 8001142:	4618      	mov	r0, r3
 8001144:	f002 f9d6 	bl	80034f4 <TS_IO_Write>
}
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800115e:	2300      	movs	r3, #0
 8001160:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	21a4      	movs	r1, #164	@ 0xa4
 800116a:	4618      	mov	r0, r3
 800116c:	f002 f9c2 	bl	80034f4 <TS_IO_Write>
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80011ac:	4b03      	ldr	r3, [pc, #12]	@ (80011bc <ft5336_Get_I2C_InitializedStatus+0x14>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000844 	.word	0x20000844

080011c0 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80011c4:	f7ff fff0 	bl	80011a8 <ft5336_Get_I2C_InitializedStatus>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d104      	bne.n	80011d8 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80011ce:	f002 f987 	bl	80034e0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80011d2:	4b02      	ldr	r3, [pc, #8]	@ (80011dc <ft5336_I2C_InitializeIfRequired+0x1c>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
  }
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000844 	.word	0x20000844

080011e0 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80011ee:	68fb      	ldr	r3, [r7, #12]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001200:	f3bf 8f4f 	dsb	sy
}
 8001204:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001206:	f3bf 8f6f 	isb	sy
}
 800120a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800120c:	4b0d      	ldr	r3, [pc, #52]	@ (8001244 <SCB_EnableICache+0x48>)
 800120e:	2200      	movs	r2, #0
 8001210:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001214:	f3bf 8f4f 	dsb	sy
}
 8001218:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800121a:	f3bf 8f6f 	isb	sy
}
 800121e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001220:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <SCB_EnableICache+0x48>)
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	4a07      	ldr	r2, [pc, #28]	@ (8001244 <SCB_EnableICache+0x48>)
 8001226:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800122a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800122c:	f3bf 8f4f 	dsb	sy
}
 8001230:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001232:	f3bf 8f6f 	isb	sy
}
 8001236:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800124e:	4b1f      	ldr	r3, [pc, #124]	@ (80012cc <SCB_EnableDCache+0x84>)
 8001250:	2200      	movs	r2, #0
 8001252:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001256:	f3bf 8f4f 	dsb	sy
}
 800125a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800125c:	4b1b      	ldr	r3, [pc, #108]	@ (80012cc <SCB_EnableDCache+0x84>)
 800125e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001262:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	0b5b      	lsrs	r3, r3, #13
 8001268:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800126c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	08db      	lsrs	r3, r3, #3
 8001272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001276:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	015a      	lsls	r2, r3, #5
 800127c:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001280:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001286:	4911      	ldr	r1, [pc, #68]	@ (80012cc <SCB_EnableDCache+0x84>)
 8001288:	4313      	orrs	r3, r2
 800128a:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1e5a      	subs	r2, r3, #1
 8001292:	60ba      	str	r2, [r7, #8]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1ef      	bne.n	8001278 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	1e5a      	subs	r2, r3, #1
 800129c:	60fa      	str	r2, [r7, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1e5      	bne.n	800126e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80012a2:	f3bf 8f4f 	dsb	sy
}
 80012a6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80012a8:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <SCB_EnableDCache+0x84>)
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	4a07      	ldr	r2, [pc, #28]	@ (80012cc <SCB_EnableDCache+0x84>)
 80012ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012b2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012b4:	f3bf 8f4f 	dsb	sy
}
 80012b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012ba:	f3bf 8f6f 	isb	sy
}
 80012be:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	uint8_t Message;
	//	HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,!HAL_GPIO_ReadPin(LED14_GPIO_Port,LED14_Pin)); //Debug si souhaité
	if (huart->Instance == UART7) {
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0b      	ldr	r2, [pc, #44]	@ (800130c <HAL_UART_RxCpltCallback+0x3c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d10f      	bne.n	8001302 <HAL_UART_RxCpltCallback+0x32>
		//	HAL_GPIO_WritePin(LED15_GPIO_Port,LED15_Pin,1);
		HAL_UART_Receive_IT(huart, rxData, 2);
 80012e2:	2202      	movs	r2, #2
 80012e4:	490a      	ldr	r1, [pc, #40]	@ (8001310 <HAL_UART_RxCpltCallback+0x40>)
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f00c fc2c 	bl	800db44 <HAL_UART_Receive_IT>
		Message = rxData[0];
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <HAL_UART_RxCpltCallback+0x40>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	73fb      	strb	r3, [r7, #15]
		// Envoi de la commande à la tâche Display
		xQueueSendFromISR(uartReceiverQueueHandle, &Message, 0); // 0 indique pas d'attente si la queue est pleine
 80012f2:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <HAL_UART_RxCpltCallback+0x44>)
 80012f4:	6818      	ldr	r0, [r3, #0]
 80012f6:	f107 010f 	add.w	r1, r7, #15
 80012fa:	2300      	movs	r3, #0
 80012fc:	2200      	movs	r2, #0
 80012fe:	f012 fbf7 	bl	8013af0 <xQueueGenericSendFromISR>
	}
	else{
		//	HAL_GPIO_WritePin(LED16_GPIO_Port,LED16_Pin,1); //Debug si souhaité
		//	HAL_GPIO_WritePin(LED15_GPIO_Port,LED15_Pin,0);
	}
}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40007800 	.word	0x40007800
 8001310:	20000ed0 	.word	0x20000ed0
 8001314:	20000e54 	.word	0x20000e54

08001318 <initializeSD>:

void initializeSD()
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 800131c:	2200      	movs	r2, #0
 800131e:	4905      	ldr	r1, [pc, #20]	@ (8001334 <initializeSD+0x1c>)
 8001320:	4805      	ldr	r0, [pc, #20]	@ (8001338 <initializeSD+0x20>)
 8001322:	f010 fda7 	bl	8011e74 <f_mount>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <initializeSD+0x18>
	{
		Error_Handler();
 800132c:	f001 ff08 	bl	8003140 <Error_Handler>
	}
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200013fc 	.word	0x200013fc
 8001338:	20001400 	.word	0x20001400

0800133c <initMusique>:

void initMusique(uint32_t freq)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af02      	add	r7, sp, #8
 8001342:	6078      	str	r0, [r7, #4]
	// Initialisation de l'audio
	if (BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_INPUT_LINE_1,
 8001344:	2302      	movs	r3, #2
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2310      	movs	r3, #16
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	2102      	movs	r1, #2
 800134e:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8001352:	f002 fae7 	bl	8003924 <BSP_AUDIO_IN_OUT_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <initMusique+0x24>
			OUTPUT_DEVICE_HEADPHONE, freq,
			DEFAULT_AUDIO_IN_BIT_RESOLUTION,
			DEFAULT_AUDIO_IN_CHANNEL_NBR) != AUDIO_OK)
	{
		Error_Handler();
 800135c:	f001 fef0 	bl	8003140 <Error_Handler>
	}

	// Initialisation du buffer audio
	memset((uint16_t *)AUDIO_BUFFER_OUT, 0, AUDIO_BLOCK_SIZE * 2);
 8001360:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001364:	2100      	movs	r1, #0
 8001366:	480b      	ldr	r0, [pc, #44]	@ (8001394 <initMusique+0x58>)
 8001368:	f014 ffea 	bl	8016340 <memset>

	// Démarrage de l'audio
	BSP_AUDIO_OUT_SetVolume(50);
 800136c:	2032      	movs	r0, #50	@ 0x32
 800136e:	f002 f92f 	bl	80035d0 <BSP_AUDIO_OUT_SetVolume>
	BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8001372:	2005      	movs	r0, #5
 8001374:	f002 f944 	bl	8003600 <BSP_AUDIO_OUT_SetAudioFrameSlot>

	if (BSP_AUDIO_OUT_Play((uint16_t *)AUDIO_BUFFER_OUT,
 8001378:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800137c:	4805      	ldr	r0, [pc, #20]	@ (8001394 <initMusique+0x58>)
 800137e:	f002 f8fd 	bl	800357c <BSP_AUDIO_OUT_Play>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <initMusique+0x50>
			AUDIO_BLOCK_SIZE * 2) != AUDIO_OK)
	{
		Error_Handler();
 8001388:	f001 feda 	bl	8003140 <Error_Handler>
	}
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	c007fc00 	.word	0xc007fc00

08001398 <lanceMusique>:

void lanceMusique()
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	f_close(&SDFile);
 800139c:	480a      	ldr	r0, [pc, #40]	@ (80013c8 <lanceMusique+0x30>)
 800139e:	f011 f985 	bl	80126ac <f_close>
	f_open(&SDFile, SONG1, FA_READ);
 80013a2:	2201      	movs	r2, #1
 80013a4:	4909      	ldr	r1, [pc, #36]	@ (80013cc <lanceMusique+0x34>)
 80013a6:	4808      	ldr	r0, [pc, #32]	@ (80013c8 <lanceMusique+0x30>)
 80013a8:	f010 fdc8 	bl	8011f3c <f_open>

	headerWav();
 80013ac:	f000 f812 	bl	80013d4 <headerWav>
	initMusique(freqAudio);
 80013b0:	4b07      	ldr	r3, [pc, #28]	@ (80013d0 <lanceMusique+0x38>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ffc1 	bl	800133c <initMusique>

	//On avance jsuqu'à la fin du header
	f_lseek(&SDFile, 44);
 80013ba:	212c      	movs	r1, #44	@ 0x2c
 80013bc:	4802      	ldr	r0, [pc, #8]	@ (80013c8 <lanceMusique+0x30>)
 80013be:	f011 f9a4 	bl	801270a <f_lseek>
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20001634 	.word	0x20001634
 80013cc:	08016bc0 	.word	0x08016bc0
 80013d0:	20000038 	.word	0x20000038

080013d4 <headerWav>:


void headerWav()
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
	uint32_t data = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
	uint32_t bytesread;
	uint8_t *texte;

	// Lecture de la taille du fichier
	f_lseek(&SDFile, 04);
 80013de:	2104      	movs	r1, #4
 80013e0:	4818      	ldr	r0, [pc, #96]	@ (8001444 <headerWav+0x70>)
 80013e2:	f011 f992 	bl	801270a <f_lseek>
	f_read(&SDFile, &data, 4, (void *)&bytesread);
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	f107 0108 	add.w	r1, r7, #8
 80013ec:	2204      	movs	r2, #4
 80013ee:	4815      	ldr	r0, [pc, #84]	@ (8001444 <headerWav+0x70>)
 80013f0:	f010 ff65 	bl	80122be <f_read>
	nbBlocs = data / 512;
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	0a5b      	lsrs	r3, r3, #9
 80013f8:	4a13      	ldr	r2, [pc, #76]	@ (8001448 <headerWav+0x74>)
 80013fa:	6013      	str	r3, [r2, #0]
	data = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]

	// Lecture de la fréquence d'échantillonnage
	f_lseek(&SDFile, 24);
 8001400:	2118      	movs	r1, #24
 8001402:	4810      	ldr	r0, [pc, #64]	@ (8001444 <headerWav+0x70>)
 8001404:	f011 f981 	bl	801270a <f_lseek>
	f_read(&SDFile, &data, 4, (void *)&bytesread);
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	f107 0108 	add.w	r1, r7, #8
 800140e:	2204      	movs	r2, #4
 8001410:	480c      	ldr	r0, [pc, #48]	@ (8001444 <headerWav+0x70>)
 8001412:	f010 ff54 	bl	80122be <f_read>
	freqAudio = data;
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	4a0c      	ldr	r2, [pc, #48]	@ (800144c <headerWav+0x78>)
 800141a:	6013      	str	r3, [r2, #0]
	data = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]

	sprintf(texte, "Frequence d'echantillonnage : %lu ", freqAudio);
 8001420:	4b0a      	ldr	r3, [pc, #40]	@ (800144c <headerWav+0x78>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	490a      	ldr	r1, [pc, #40]	@ (8001450 <headerWav+0x7c>)
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f014 ff69 	bl	8016300 <siprintf>
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800142e:	4809      	ldr	r0, [pc, #36]	@ (8001454 <headerWav+0x80>)
 8001430:	f002 fd96 	bl	8003f60 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(0, (uint8_t*) texte);
 8001434:	68f9      	ldr	r1, [r7, #12]
 8001436:	2000      	movs	r0, #0
 8001438:	f002 ffce 	bl	80043d8 <BSP_LCD_DisplayStringAtLine>
}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20001634 	.word	0x20001634
 8001448:	20000e60 	.word	0x20000e60
 800144c:	20000038 	.word	0x20000038
 8001450:	08016bcc 	.word	0x08016bcc
 8001454:	ffff0000 	.word	0xffff0000

08001458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b0a0      	sub	sp, #128	@ 0x80
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800145e:	f7ff fecd 	bl	80011fc <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001462:	f7ff fef1 	bl	8001248 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001466:	f006 f8d4 	bl	8007612 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146a:	f000 f8db 	bl	8001624 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800146e:	f000 f949 	bl	8001704 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001472:	f000 fcb7 	bl	8001de4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001476:	f000 fbf7 	bl	8001c68 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 800147a:	f000 fb75 	bl	8001b68 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800147e:	f00e fb9f 	bl	800fbc0 <MX_FATFS_Init>
  MX_FMC_Init();
 8001482:	f000 fc27 	bl	8001cd4 <MX_FMC_Init>
  MX_LTDC_Init();
 8001486:	f000 fa45 	bl	8001914 <MX_LTDC_Init>
  MX_USART1_UART_Init();
 800148a:	f000 fbbd 	bl	8001c08 <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 800148e:	f000 fa0f 	bl	80018b0 <MX_DMA2D_Init>
  MX_SAI2_Init();
 8001492:	f000 fac1 	bl	8001a18 <MX_SAI2_Init>
  MX_ADC1_Init();
 8001496:	f000 f967 	bl	8001768 <MX_ADC1_Init>
  MX_ADC3_Init();
 800149a:	f000 f9b7 	bl	800180c <MX_ADC3_Init>
  MX_UART7_Init();
 800149e:	f000 fb83 	bl	8001ba8 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

	// Initialisation de l'écran LCD
	BSP_LCD_Init();
 80014a2:	f002 fc43 	bl	8003d2c <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80014a6:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 80014aa:	2000      	movs	r0, #0
 80014ac:	f002 fcd6 	bl	8003e5c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 80014b0:	f002 fcac 	bl	8003e0c <BSP_LCD_GetXSize>
 80014b4:	4604      	mov	r4, r0
 80014b6:	f002 fcbd 	bl	8003e34 <BSP_LCD_GetYSize>
 80014ba:	4603      	mov	r3, r0
 80014bc:	fb04 f303 	mul.w	r3, r4, r3
 80014c0:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4619      	mov	r1, r3
 80014c8:	2001      	movs	r0, #1
 80014ca:	f002 fcc7 	bl	8003e5c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 80014ce:	f003 f90f 	bl	80046f0 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(0);
 80014d2:	2000      	movs	r0, #0
 80014d4:	f002 fd22 	bl	8003f1c <BSP_LCD_SelectLayer>
	BSP_LCD_Clear((uint32_t)LCD_COLOR_WHITE);
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014dc:	f002 fe48 	bl	8004170 <BSP_LCD_Clear>
	BSP_LCD_SelectLayer(1);
 80014e0:	2001      	movs	r0, #1
 80014e2:	f002 fd1b 	bl	8003f1c <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(00);
 80014e6:	2000      	movs	r0, #0
 80014e8:	f002 fe42 	bl	8004170 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font16);
 80014ec:	483e      	ldr	r0, [pc, #248]	@ (80015e8 <main+0x190>)
 80014ee:	f002 fd69 	bl	8003fc4 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80014f2:	483e      	ldr	r0, [pc, #248]	@ (80015ec <main+0x194>)
 80014f4:	f002 fd34 	bl	8003f60 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(00);
 80014f8:	2000      	movs	r0, #0
 80014fa:	f002 fd49 	bl	8003f90 <BSP_LCD_SetBackColor>
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80014fe:	f002 fc85 	bl	8003e0c <BSP_LCD_GetXSize>
 8001502:	4604      	mov	r4, r0
 8001504:	f002 fc96 	bl	8003e34 <BSP_LCD_GetYSize>
 8001508:	4603      	mov	r3, r0
 800150a:	4619      	mov	r1, r3
 800150c:	4620      	mov	r0, r4
 800150e:	f003 fd49 	bl	8004fa4 <BSP_TS_Init>

	HAL_UART_Receive_IT(&huart7,&rxData,2);
 8001512:	2202      	movs	r2, #2
 8001514:	4936      	ldr	r1, [pc, #216]	@ (80015f0 <main+0x198>)
 8001516:	4837      	ldr	r0, [pc, #220]	@ (80015f4 <main+0x19c>)
 8001518:	f00c fb14 	bl	800db44 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of displayMutex */
  osMutexDef(displayMutex);
 800151c:	2300      	movs	r3, #0
 800151e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001520:	2300      	movs	r3, #0
 8001522:	67fb      	str	r3, [r7, #124]	@ 0x7c
  displayMutexHandle = osMutexCreate(osMutex(displayMutex));
 8001524:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001528:	4618      	mov	r0, r3
 800152a:	f011 fdc3 	bl	80130b4 <osMutexCreate>
 800152e:	4603      	mov	r3, r0
 8001530:	4a31      	ldr	r2, [pc, #196]	@ (80015f8 <main+0x1a0>)
 8001532:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of uartReceiverQueue */
  osMessageQDef(uartReceiverQueue, 16, uint8_t);
 8001534:	4b31      	ldr	r3, [pc, #196]	@ (80015fc <main+0x1a4>)
 8001536:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 800153a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800153c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uartReceiverQueueHandle = osMessageCreate(osMessageQ(uartReceiverQueue), NULL);
 8001540:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f011 fe95 	bl	8013276 <osMessageCreate>
 800154c:	4603      	mov	r3, r0
 800154e:	4a2c      	ldr	r2, [pc, #176]	@ (8001600 <main+0x1a8>)
 8001550:	6013      	str	r3, [r2, #0]

  /* definition and creation of musicFlag */
  osMessageQDef(musicFlag, 1, uint8_t);
 8001552:	4b2c      	ldr	r3, [pc, #176]	@ (8001604 <main+0x1ac>)
 8001554:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001558:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800155a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  musicFlagHandle = osMessageCreate(osMessageQ(musicFlag), NULL);
 800155e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f011 fe86 	bl	8013276 <osMessageCreate>
 800156a:	4603      	mov	r3, r0
 800156c:	4a26      	ldr	r2, [pc, #152]	@ (8001608 <main+0x1b0>)
 800156e:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8001570:	4b26      	ldr	r3, [pc, #152]	@ (800160c <main+0x1b4>)
 8001572:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001576:	461d      	mov	r5, r3
 8001578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800157a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800157c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001580:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001584:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f011 fd32 	bl	8012ff4 <osThreadCreate>
 8001590:	4603      	mov	r3, r0
 8001592:	4a1f      	ldr	r2, [pc, #124]	@ (8001610 <main+0x1b8>)
 8001594:	6013      	str	r3, [r2, #0]

  /* definition and creation of affichageFond */
  osThreadDef(affichageFond, funcAffichageBackground, osPriorityAboveNormal, 0, 2048);
 8001596:	4b1f      	ldr	r3, [pc, #124]	@ (8001614 <main+0x1bc>)
 8001598:	f107 0420 	add.w	r4, r7, #32
 800159c:	461d      	mov	r5, r3
 800159e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  affichageFondHandle = osThreadCreate(osThread(affichageFond), NULL);
 80015aa:	f107 0320 	add.w	r3, r7, #32
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f011 fd1f 	bl	8012ff4 <osThreadCreate>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4a17      	ldr	r2, [pc, #92]	@ (8001618 <main+0x1c0>)
 80015ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of startMusique */
  osThreadDef(startMusique, startMusiqueFunc, osPriorityHigh, 0, 256);
 80015bc:	4b17      	ldr	r3, [pc, #92]	@ (800161c <main+0x1c4>)
 80015be:	1d3c      	adds	r4, r7, #4
 80015c0:	461d      	mov	r5, r3
 80015c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  startMusiqueHandle = osThreadCreate(osThread(startMusique), NULL);
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f011 fd0e 	bl	8012ff4 <osThreadCreate>
 80015d8:	4603      	mov	r3, r0
 80015da:	4a11      	ldr	r2, [pc, #68]	@ (8001620 <main+0x1c8>)
 80015dc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80015de:	f011 fce6 	bl	8012fae <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80015e2:	bf00      	nop
 80015e4:	e7fd      	b.n	80015e2 <main+0x18a>
 80015e6:	bf00      	nop
 80015e8:	20000000 	.word	0x20000000
 80015ec:	ffa52a2a 	.word	0xffa52a2a
 80015f0:	20000ed0 	.word	0x20000ed0
 80015f4:	20000cd0 	.word	0x20000cd0
 80015f8:	20000e5c 	.word	0x20000e5c
 80015fc:	08016bf0 	.word	0x08016bf0
 8001600:	20000e54 	.word	0x20000e54
 8001604:	08016c00 	.word	0x08016c00
 8001608:	20000e58 	.word	0x20000e58
 800160c:	08016c1c 	.word	0x08016c1c
 8001610:	20000e48 	.word	0x20000e48
 8001614:	08016c48 	.word	0x08016c48
 8001618:	20000e4c 	.word	0x20000e4c
 800161c:	08016c74 	.word	0x08016c74
 8001620:	20000e50 	.word	0x20000e50

08001624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b094      	sub	sp, #80	@ 0x50
 8001628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162a:	f107 0320 	add.w	r3, r7, #32
 800162e:	2230      	movs	r2, #48	@ 0x30
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f014 fe84 	bl	8016340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001648:	f008 feec 	bl	800a424 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800164c:	4b2b      	ldr	r3, [pc, #172]	@ (80016fc <SystemClock_Config+0xd8>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001650:	4a2a      	ldr	r2, [pc, #168]	@ (80016fc <SystemClock_Config+0xd8>)
 8001652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001656:	6413      	str	r3, [r2, #64]	@ 0x40
 8001658:	4b28      	ldr	r3, [pc, #160]	@ (80016fc <SystemClock_Config+0xd8>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001664:	4b26      	ldr	r3, [pc, #152]	@ (8001700 <SystemClock_Config+0xdc>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a25      	ldr	r2, [pc, #148]	@ (8001700 <SystemClock_Config+0xdc>)
 800166a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b23      	ldr	r3, [pc, #140]	@ (8001700 <SystemClock_Config+0xdc>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800167c:	2301      	movs	r3, #1
 800167e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001680:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001684:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001686:	2302      	movs	r3, #2
 8001688:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800168a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800168e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001690:	2319      	movs	r3, #25
 8001692:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001694:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001698:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800169a:	2302      	movs	r3, #2
 800169c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800169e:	2309      	movs	r3, #9
 80016a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a2:	f107 0320 	add.w	r3, r7, #32
 80016a6:	4618      	mov	r0, r3
 80016a8:	f008 ff1c 	bl	800a4e4 <HAL_RCC_OscConfig>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80016b2:	f001 fd45 	bl	8003140 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016b6:	f008 fec5 	bl	800a444 <HAL_PWREx_EnableOverDrive>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80016c0:	f001 fd3e 	bl	8003140 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c4:	230f      	movs	r3, #15
 80016c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c8:	2302      	movs	r3, #2
 80016ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	2106      	movs	r1, #6
 80016e2:	4618      	mov	r0, r3
 80016e4:	f009 f9a2 	bl	800aa2c <HAL_RCC_ClockConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80016ee:	f001 fd27 	bl	8003140 <Error_Handler>
  }
}
 80016f2:	bf00      	nop
 80016f4:	3750      	adds	r7, #80	@ 0x50
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800
 8001700:	40007000 	.word	0x40007000

08001704 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b0a2      	sub	sp, #136	@ 0x88
 8001708:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2284      	movs	r2, #132	@ 0x84
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f014 fe15 	bl	8016340 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8001716:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <PeriphCommonClock_Config+0x60>)
 8001718:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800171a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800171e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001720:	2305      	movs	r3, #5
 8001722:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001724:	2302      	movs	r3, #2
 8001726:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001728:	2303      	movs	r3, #3
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800172c:	2301      	movs	r3, #1
 800172e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001730:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001734:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001736:	2300      	movs	r3, #0
 8001738:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800173a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800173e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	4618      	mov	r0, r3
 800174c:	f009 fb86 	bl	800ae5c <HAL_RCCEx_PeriphCLKConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001756:	f001 fcf3 	bl	8003140 <Error_Handler>
  }
}
 800175a:	bf00      	nop
 800175c:	3788      	adds	r7, #136	@ 0x88
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	00b00008 	.word	0x00b00008

08001768 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800176e:	463b      	mov	r3, r7
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800177a:	4b21      	ldr	r3, [pc, #132]	@ (8001800 <MX_ADC1_Init+0x98>)
 800177c:	4a21      	ldr	r2, [pc, #132]	@ (8001804 <MX_ADC1_Init+0x9c>)
 800177e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001780:	4b1f      	ldr	r3, [pc, #124]	@ (8001800 <MX_ADC1_Init+0x98>)
 8001782:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001786:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001788:	4b1d      	ldr	r3, [pc, #116]	@ (8001800 <MX_ADC1_Init+0x98>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800178e:	4b1c      	ldr	r3, [pc, #112]	@ (8001800 <MX_ADC1_Init+0x98>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001794:	4b1a      	ldr	r3, [pc, #104]	@ (8001800 <MX_ADC1_Init+0x98>)
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800179a:	4b19      	ldr	r3, [pc, #100]	@ (8001800 <MX_ADC1_Init+0x98>)
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017a2:	4b17      	ldr	r3, [pc, #92]	@ (8001800 <MX_ADC1_Init+0x98>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017a8:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <MX_ADC1_Init+0x98>)
 80017aa:	4a17      	ldr	r2, [pc, #92]	@ (8001808 <MX_ADC1_Init+0xa0>)
 80017ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017ae:	4b14      	ldr	r3, [pc, #80]	@ (8001800 <MX_ADC1_Init+0x98>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017b4:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <MX_ADC1_Init+0x98>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017ba:	4b11      	ldr	r3, [pc, #68]	@ (8001800 <MX_ADC1_Init+0x98>)
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001800 <MX_ADC1_Init+0x98>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017c8:	480d      	ldr	r0, [pc, #52]	@ (8001800 <MX_ADC1_Init+0x98>)
 80017ca:	f005 ff73 	bl	80076b4 <HAL_ADC_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017d4:	f001 fcb4 	bl	8003140 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017d8:	2300      	movs	r3, #0
 80017da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017dc:	2301      	movs	r3, #1
 80017de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017e4:	463b      	mov	r3, r7
 80017e6:	4619      	mov	r1, r3
 80017e8:	4805      	ldr	r0, [pc, #20]	@ (8001800 <MX_ADC1_Init+0x98>)
 80017ea:	f005 ffa7 	bl	800773c <HAL_ADC_ConfigChannel>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017f4:	f001 fca4 	bl	8003140 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	2000084c 	.word	0x2000084c
 8001804:	40012000 	.word	0x40012000
 8001808:	0f000001 	.word	0x0f000001

0800180c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001812:	463b      	mov	r3, r7
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800181e:	4b21      	ldr	r3, [pc, #132]	@ (80018a4 <MX_ADC3_Init+0x98>)
 8001820:	4a21      	ldr	r2, [pc, #132]	@ (80018a8 <MX_ADC3_Init+0x9c>)
 8001822:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001824:	4b1f      	ldr	r3, [pc, #124]	@ (80018a4 <MX_ADC3_Init+0x98>)
 8001826:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800182a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800182c:	4b1d      	ldr	r3, [pc, #116]	@ (80018a4 <MX_ADC3_Init+0x98>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001832:	4b1c      	ldr	r3, [pc, #112]	@ (80018a4 <MX_ADC3_Init+0x98>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001838:	4b1a      	ldr	r3, [pc, #104]	@ (80018a4 <MX_ADC3_Init+0x98>)
 800183a:	2200      	movs	r2, #0
 800183c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800183e:	4b19      	ldr	r3, [pc, #100]	@ (80018a4 <MX_ADC3_Init+0x98>)
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001846:	4b17      	ldr	r3, [pc, #92]	@ (80018a4 <MX_ADC3_Init+0x98>)
 8001848:	2200      	movs	r2, #0
 800184a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800184c:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <MX_ADC3_Init+0x98>)
 800184e:	4a17      	ldr	r2, [pc, #92]	@ (80018ac <MX_ADC3_Init+0xa0>)
 8001850:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001852:	4b14      	ldr	r3, [pc, #80]	@ (80018a4 <MX_ADC3_Init+0x98>)
 8001854:	2200      	movs	r2, #0
 8001856:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001858:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <MX_ADC3_Init+0x98>)
 800185a:	2201      	movs	r2, #1
 800185c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800185e:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <MX_ADC3_Init+0x98>)
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001866:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <MX_ADC3_Init+0x98>)
 8001868:	2201      	movs	r2, #1
 800186a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800186c:	480d      	ldr	r0, [pc, #52]	@ (80018a4 <MX_ADC3_Init+0x98>)
 800186e:	f005 ff21 	bl	80076b4 <HAL_ADC_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001878:	f001 fc62 	bl	8003140 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800187c:	2306      	movs	r3, #6
 800187e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001880:	2301      	movs	r3, #1
 8001882:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001888:	463b      	mov	r3, r7
 800188a:	4619      	mov	r1, r3
 800188c:	4805      	ldr	r0, [pc, #20]	@ (80018a4 <MX_ADC3_Init+0x98>)
 800188e:	f005 ff55 	bl	800773c <HAL_ADC_ConfigChannel>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001898:	f001 fc52 	bl	8003140 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000894 	.word	0x20000894
 80018a8:	40012200 	.word	0x40012200
 80018ac:	0f000001 	.word	0x0f000001

080018b0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80018b4:	4b15      	ldr	r3, [pc, #84]	@ (800190c <MX_DMA2D_Init+0x5c>)
 80018b6:	4a16      	ldr	r2, [pc, #88]	@ (8001910 <MX_DMA2D_Init+0x60>)
 80018b8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80018ba:	4b14      	ldr	r3, [pc, #80]	@ (800190c <MX_DMA2D_Init+0x5c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80018c0:	4b12      	ldr	r3, [pc, #72]	@ (800190c <MX_DMA2D_Init+0x5c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80018c6:	4b11      	ldr	r3, [pc, #68]	@ (800190c <MX_DMA2D_Init+0x5c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <MX_DMA2D_Init+0x5c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <MX_DMA2D_Init+0x5c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <MX_DMA2D_Init+0x5c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80018de:	4b0b      	ldr	r3, [pc, #44]	@ (800190c <MX_DMA2D_Init+0x5c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80018e4:	4809      	ldr	r0, [pc, #36]	@ (800190c <MX_DMA2D_Init+0x5c>)
 80018e6:	f006 fecf 	bl	8008688 <HAL_DMA2D_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80018f0:	f001 fc26 	bl	8003140 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80018f4:	2101      	movs	r1, #1
 80018f6:	4805      	ldr	r0, [pc, #20]	@ (800190c <MX_DMA2D_Init+0x5c>)
 80018f8:	f007 f824 	bl	8008944 <HAL_DMA2D_ConfigLayer>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001902:	f001 fc1d 	bl	8003140 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200008dc 	.word	0x200008dc
 8001910:	4002b000 	.word	0x4002b000

08001914 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08e      	sub	sp, #56	@ 0x38
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2234      	movs	r2, #52	@ 0x34
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f014 fd0d 	bl	8016340 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001926:	4b3a      	ldr	r3, [pc, #232]	@ (8001a10 <MX_LTDC_Init+0xfc>)
 8001928:	4a3a      	ldr	r2, [pc, #232]	@ (8001a14 <MX_LTDC_Init+0x100>)
 800192a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800192c:	4b38      	ldr	r3, [pc, #224]	@ (8001a10 <MX_LTDC_Init+0xfc>)
 800192e:	2200      	movs	r2, #0
 8001930:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001932:	4b37      	ldr	r3, [pc, #220]	@ (8001a10 <MX_LTDC_Init+0xfc>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001938:	4b35      	ldr	r3, [pc, #212]	@ (8001a10 <MX_LTDC_Init+0xfc>)
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800193e:	4b34      	ldr	r3, [pc, #208]	@ (8001a10 <MX_LTDC_Init+0xfc>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001944:	4b32      	ldr	r3, [pc, #200]	@ (8001a10 <MX_LTDC_Init+0xfc>)
 8001946:	2228      	movs	r2, #40	@ 0x28
 8001948:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800194a:	4b31      	ldr	r3, [pc, #196]	@ (8001a10 <MX_LTDC_Init+0xfc>)
 800194c:	2209      	movs	r2, #9
 800194e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001950:	4b2f      	ldr	r3, [pc, #188]	@ (8001a10 <MX_LTDC_Init+0xfc>)
 8001952:	2235      	movs	r2, #53	@ 0x35
 8001954:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001956:	4b2e      	ldr	r3, [pc, #184]	@ (8001a10 <MX_LTDC_Init+0xfc>)
 8001958:	220b      	movs	r2, #11
 800195a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800195c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a10 <MX_LTDC_Init+0xfc>)
 800195e:	f240 2215 	movw	r2, #533	@ 0x215
 8001962:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001964:	4b2a      	ldr	r3, [pc, #168]	@ (8001a10 <MX_LTDC_Init+0xfc>)
 8001966:	f240 121b 	movw	r2, #283	@ 0x11b
 800196a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 800196c:	4b28      	ldr	r3, [pc, #160]	@ (8001a10 <MX_LTDC_Init+0xfc>)
 800196e:	f240 2235 	movw	r2, #565	@ 0x235
 8001972:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001974:	4b26      	ldr	r3, [pc, #152]	@ (8001a10 <MX_LTDC_Init+0xfc>)
 8001976:	f240 121d 	movw	r2, #285	@ 0x11d
 800197a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800197c:	4b24      	ldr	r3, [pc, #144]	@ (8001a10 <MX_LTDC_Init+0xfc>)
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001984:	4b22      	ldr	r3, [pc, #136]	@ (8001a10 <MX_LTDC_Init+0xfc>)
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800198c:	4b20      	ldr	r3, [pc, #128]	@ (8001a10 <MX_LTDC_Init+0xfc>)
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001994:	481e      	ldr	r0, [pc, #120]	@ (8001a10 <MX_LTDC_Init+0xfc>)
 8001996:	f008 f997 	bl	8009cc8 <HAL_LTDC_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80019a0:	f001 fbce 	bl	8003140 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80019a8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80019ac:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80019b2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80019b6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80019b8:	2302      	movs	r3, #2
 80019ba:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80019bc:	23ff      	movs	r3, #255	@ 0xff
 80019be:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80019c4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019c8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80019ca:	2307      	movs	r3, #7
 80019cc:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80019ce:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80019d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 80019d4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80019d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 80019da:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80019de:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	2200      	movs	r2, #0
 80019f6:	4619      	mov	r1, r3
 80019f8:	4805      	ldr	r0, [pc, #20]	@ (8001a10 <MX_LTDC_Init+0xfc>)
 80019fa:	f008 faf7 	bl	8009fec <HAL_LTDC_ConfigLayer>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001a04:	f001 fb9c 	bl	8003140 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001a08:	bf00      	nop
 8001a0a:	3738      	adds	r7, #56	@ 0x38
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	2000091c 	.word	0x2000091c
 8001a14:	40016800 	.word	0x40016800

08001a18 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001a1c:	4b4e      	ldr	r3, [pc, #312]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001a1e:	4a4f      	ldr	r2, [pc, #316]	@ (8001b5c <MX_SAI2_Init+0x144>)
 8001a20:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001a22:	4b4d      	ldr	r3, [pc, #308]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001a28:	4b4b      	ldr	r3, [pc, #300]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001a2e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001a30:	2240      	movs	r2, #64	@ 0x40
 8001a32:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001a34:	4b48      	ldr	r3, [pc, #288]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001a3a:	4b47      	ldr	r3, [pc, #284]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001a40:	4b45      	ldr	r3, [pc, #276]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001a46:	4b44      	ldr	r3, [pc, #272]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001a4c:	4b42      	ldr	r3, [pc, #264]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001a52:	4b41      	ldr	r3, [pc, #260]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001a58:	4b3f      	ldr	r3, [pc, #252]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001a5a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001a5e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001a60:	4b3d      	ldr	r3, [pc, #244]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001a66:	4b3c      	ldr	r3, [pc, #240]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001a6c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001a72:	4b39      	ldr	r3, [pc, #228]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001a78:	4b37      	ldr	r3, [pc, #220]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001a7a:	2208      	movs	r2, #8
 8001a7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001a7e:	4b36      	ldr	r3, [pc, #216]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001a84:	4b34      	ldr	r3, [pc, #208]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001a8a:	4b33      	ldr	r3, [pc, #204]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001a90:	4b31      	ldr	r3, [pc, #196]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001a96:	4b30      	ldr	r3, [pc, #192]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001a9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001aae:	482a      	ldr	r0, [pc, #168]	@ (8001b58 <MX_SAI2_Init+0x140>)
 8001ab0:	f00a f810 	bl	800bad4 <HAL_SAI_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_SAI2_Init+0xa6>
  {
    Error_Handler();
 8001aba:	f001 fb41 	bl	8003140 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001abe:	4b28      	ldr	r3, [pc, #160]	@ (8001b60 <MX_SAI2_Init+0x148>)
 8001ac0:	4a28      	ldr	r2, [pc, #160]	@ (8001b64 <MX_SAI2_Init+0x14c>)
 8001ac2:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001ac4:	4b26      	ldr	r3, [pc, #152]	@ (8001b60 <MX_SAI2_Init+0x148>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001aca:	4b25      	ldr	r3, [pc, #148]	@ (8001b60 <MX_SAI2_Init+0x148>)
 8001acc:	2203      	movs	r2, #3
 8001ace:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001ad0:	4b23      	ldr	r3, [pc, #140]	@ (8001b60 <MX_SAI2_Init+0x148>)
 8001ad2:	2240      	movs	r2, #64	@ 0x40
 8001ad4:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001ad6:	4b22      	ldr	r3, [pc, #136]	@ (8001b60 <MX_SAI2_Init+0x148>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001adc:	4b20      	ldr	r3, [pc, #128]	@ (8001b60 <MX_SAI2_Init+0x148>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b60 <MX_SAI2_Init+0x148>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b60 <MX_SAI2_Init+0x148>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001aee:	4b1c      	ldr	r3, [pc, #112]	@ (8001b60 <MX_SAI2_Init+0x148>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001af4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b60 <MX_SAI2_Init+0x148>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001afa:	4b19      	ldr	r3, [pc, #100]	@ (8001b60 <MX_SAI2_Init+0x148>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b00:	4b17      	ldr	r3, [pc, #92]	@ (8001b60 <MX_SAI2_Init+0x148>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b06:	4b16      	ldr	r3, [pc, #88]	@ (8001b60 <MX_SAI2_Init+0x148>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001b0c:	4b14      	ldr	r3, [pc, #80]	@ (8001b60 <MX_SAI2_Init+0x148>)
 8001b0e:	2208      	movs	r2, #8
 8001b10:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001b12:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <MX_SAI2_Init+0x148>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001b18:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <MX_SAI2_Init+0x148>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b1e:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <MX_SAI2_Init+0x148>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001b24:	4b0e      	ldr	r3, [pc, #56]	@ (8001b60 <MX_SAI2_Init+0x148>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b60 <MX_SAI2_Init+0x148>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b30:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <MX_SAI2_Init+0x148>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001b36:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <MX_SAI2_Init+0x148>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001b3c:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <MX_SAI2_Init+0x148>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001b42:	4807      	ldr	r0, [pc, #28]	@ (8001b60 <MX_SAI2_Init+0x148>)
 8001b44:	f009 ffc6 	bl	800bad4 <HAL_SAI_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_SAI2_Init+0x13a>
  {
    Error_Handler();
 8001b4e:	f001 faf7 	bl	8003140 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200009c4 	.word	0x200009c4
 8001b5c:	40015c04 	.word	0x40015c04
 8001b60:	20000a48 	.word	0x20000a48
 8001b64:	40015c24 	.word	0x40015c24

08001b68 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <MX_SDMMC1_SD_Init+0x38>)
 8001b6e:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba4 <MX_SDMMC1_SD_Init+0x3c>)
 8001b70:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <MX_SDMMC1_SD_Init+0x38>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001b78:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <MX_SDMMC1_SD_Init+0x38>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	@ (8001ba0 <MX_SDMMC1_SD_Init+0x38>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001b84:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <MX_SDMMC1_SD_Init+0x38>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001b8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <MX_SDMMC1_SD_Init+0x38>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001b90:	4b03      	ldr	r3, [pc, #12]	@ (8001ba0 <MX_SDMMC1_SD_Init+0x38>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	20000b8c 	.word	0x20000b8c
 8001ba4:	40012c00 	.word	0x40012c00

08001ba8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001bac:	4b14      	ldr	r3, [pc, #80]	@ (8001c00 <MX_UART7_Init+0x58>)
 8001bae:	4a15      	ldr	r2, [pc, #84]	@ (8001c04 <MX_UART7_Init+0x5c>)
 8001bb0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001bb2:	4b13      	ldr	r3, [pc, #76]	@ (8001c00 <MX_UART7_Init+0x58>)
 8001bb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bb8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001bba:	4b11      	ldr	r3, [pc, #68]	@ (8001c00 <MX_UART7_Init+0x58>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c00 <MX_UART7_Init+0x58>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c00 <MX_UART7_Init+0x58>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c00 <MX_UART7_Init+0x58>)
 8001bce:	220c      	movs	r2, #12
 8001bd0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <MX_UART7_Init+0x58>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd8:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <MX_UART7_Init+0x58>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bde:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <MX_UART7_Init+0x58>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001be4:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <MX_UART7_Init+0x58>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001bea:	4805      	ldr	r0, [pc, #20]	@ (8001c00 <MX_UART7_Init+0x58>)
 8001bec:	f00b ff5c 	bl	800daa8 <HAL_UART_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001bf6:	f001 faa3 	bl	8003140 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000cd0 	.word	0x20000cd0
 8001c04:	40007800 	.word	0x40007800

08001c08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c0e:	4a15      	ldr	r2, [pc, #84]	@ (8001c64 <MX_USART1_UART_Init+0x5c>)
 8001c10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c12:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1a:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c2e:	220c      	movs	r2, #12
 8001c30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c32:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c38:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c3e:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c44:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c4a:	4805      	ldr	r0, [pc, #20]	@ (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c4c:	f00b ff2c 	bl	800daa8 <HAL_UART_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c56:	f001 fa73 	bl	8003140 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000d58 	.word	0x20000d58
 8001c64:	40011000 	.word	0x40011000

08001c68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c6e:	4b18      	ldr	r3, [pc, #96]	@ (8001cd0 <MX_DMA_Init+0x68>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	4a17      	ldr	r2, [pc, #92]	@ (8001cd0 <MX_DMA_Init+0x68>)
 8001c74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7a:	4b15      	ldr	r3, [pc, #84]	@ (8001cd0 <MX_DMA_Init+0x68>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2105      	movs	r1, #5
 8001c8a:	203b      	movs	r0, #59	@ 0x3b
 8001c8c:	f006 f85e 	bl	8007d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001c90:	203b      	movs	r0, #59	@ 0x3b
 8001c92:	f006 f877 	bl	8007d84 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2105      	movs	r1, #5
 8001c9a:	203c      	movs	r0, #60	@ 0x3c
 8001c9c:	f006 f856 	bl	8007d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001ca0:	203c      	movs	r0, #60	@ 0x3c
 8001ca2:	f006 f86f 	bl	8007d84 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2105      	movs	r1, #5
 8001caa:	2045      	movs	r0, #69	@ 0x45
 8001cac:	f006 f84e 	bl	8007d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001cb0:	2045      	movs	r0, #69	@ 0x45
 8001cb2:	f006 f867 	bl	8007d84 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2105      	movs	r1, #5
 8001cba:	2046      	movs	r0, #70	@ 0x46
 8001cbc:	f006 f846 	bl	8007d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001cc0:	2046      	movs	r0, #70	@ 0x46
 8001cc2:	f006 f85f 	bl	8007d84 <HAL_NVIC_EnableIRQ>

}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800

08001cd4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
 8001ce8:	615a      	str	r2, [r3, #20]
 8001cea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001cec:	4b3a      	ldr	r3, [pc, #232]	@ (8001dd8 <MX_FMC_Init+0x104>)
 8001cee:	4a3b      	ldr	r2, [pc, #236]	@ (8001ddc <MX_FMC_Init+0x108>)
 8001cf0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001cf2:	4b39      	ldr	r3, [pc, #228]	@ (8001dd8 <MX_FMC_Init+0x104>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001cf8:	4b37      	ldr	r3, [pc, #220]	@ (8001dd8 <MX_FMC_Init+0x104>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001cfe:	4b36      	ldr	r3, [pc, #216]	@ (8001dd8 <MX_FMC_Init+0x104>)
 8001d00:	2204      	movs	r2, #4
 8001d02:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001d04:	4b34      	ldr	r3, [pc, #208]	@ (8001dd8 <MX_FMC_Init+0x104>)
 8001d06:	2210      	movs	r2, #16
 8001d08:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001d0a:	4b33      	ldr	r3, [pc, #204]	@ (8001dd8 <MX_FMC_Init+0x104>)
 8001d0c:	2240      	movs	r2, #64	@ 0x40
 8001d0e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001d10:	4b31      	ldr	r3, [pc, #196]	@ (8001dd8 <MX_FMC_Init+0x104>)
 8001d12:	2280      	movs	r2, #128	@ 0x80
 8001d14:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001d16:	4b30      	ldr	r3, [pc, #192]	@ (8001dd8 <MX_FMC_Init+0x104>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001d1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd8 <MX_FMC_Init+0x104>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001d22:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd8 <MX_FMC_Init+0x104>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001d28:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd8 <MX_FMC_Init+0x104>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001d2e:	2310      	movs	r3, #16
 8001d30:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001d32:	2310      	movs	r3, #16
 8001d34:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001d36:	2310      	movs	r3, #16
 8001d38:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001d3a:	2310      	movs	r3, #16
 8001d3c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001d3e:	2310      	movs	r3, #16
 8001d40:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001d42:	2310      	movs	r3, #16
 8001d44:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001d46:	2310      	movs	r3, #16
 8001d48:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4822      	ldr	r0, [pc, #136]	@ (8001dd8 <MX_FMC_Init+0x104>)
 8001d50:	f00b fb3a 	bl	800d3c8 <HAL_SDRAM_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001d5a:	f001 f9f1 	bl	8003140 <Error_Handler>
  }

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8001d5e:	4b20      	ldr	r3, [pc, #128]	@ (8001de0 <MX_FMC_Init+0x10c>)
 8001d60:	4a1e      	ldr	r2, [pc, #120]	@ (8001ddc <MX_FMC_Init+0x108>)
 8001d62:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8001d64:	4b1e      	ldr	r3, [pc, #120]	@ (8001de0 <MX_FMC_Init+0x10c>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001de0 <MX_FMC_Init+0x10c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001d70:	4b1b      	ldr	r3, [pc, #108]	@ (8001de0 <MX_FMC_Init+0x10c>)
 8001d72:	2204      	movs	r2, #4
 8001d74:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001d76:	4b1a      	ldr	r3, [pc, #104]	@ (8001de0 <MX_FMC_Init+0x10c>)
 8001d78:	2210      	movs	r2, #16
 8001d7a:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001d7c:	4b18      	ldr	r3, [pc, #96]	@ (8001de0 <MX_FMC_Init+0x10c>)
 8001d7e:	2240      	movs	r2, #64	@ 0x40
 8001d80:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001d82:	4b17      	ldr	r3, [pc, #92]	@ (8001de0 <MX_FMC_Init+0x10c>)
 8001d84:	2280      	movs	r2, #128	@ 0x80
 8001d86:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001d88:	4b15      	ldr	r3, [pc, #84]	@ (8001de0 <MX_FMC_Init+0x10c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001d8e:	4b14      	ldr	r3, [pc, #80]	@ (8001de0 <MX_FMC_Init+0x10c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001d94:	4b12      	ldr	r3, [pc, #72]	@ (8001de0 <MX_FMC_Init+0x10c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001d9a:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <MX_FMC_Init+0x10c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001da0:	2310      	movs	r3, #16
 8001da2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001da4:	2310      	movs	r3, #16
 8001da6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001da8:	2310      	movs	r3, #16
 8001daa:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001dac:	2310      	movs	r3, #16
 8001dae:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001db0:	2310      	movs	r3, #16
 8001db2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001db4:	2310      	movs	r3, #16
 8001db6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001db8:	2310      	movs	r3, #16
 8001dba:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8001dbc:	1d3b      	adds	r3, r7, #4
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4807      	ldr	r0, [pc, #28]	@ (8001de0 <MX_FMC_Init+0x10c>)
 8001dc2:	f00b fb01 	bl	800d3c8 <HAL_SDRAM_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_FMC_Init+0xfc>
  {
    Error_Handler( );
 8001dcc:	f001 f9b8 	bl	8003140 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001dd0:	bf00      	nop
 8001dd2:	3720      	adds	r7, #32
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000de0 	.word	0x20000de0
 8001ddc:	a0000140 	.word	0xa0000140
 8001de0:	20000e14 	.word	0x20000e14

08001de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b090      	sub	sp, #64	@ 0x40
 8001de8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]
 8001df8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dfa:	4bae      	ldr	r3, [pc, #696]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	4aad      	ldr	r2, [pc, #692]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001e00:	f043 0310 	orr.w	r3, r3, #16
 8001e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e06:	4bab      	ldr	r3, [pc, #684]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e12:	4ba8      	ldr	r3, [pc, #672]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	4aa7      	ldr	r2, [pc, #668]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001e18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1e:	4ba5      	ldr	r3, [pc, #660]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e26:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2a:	4ba2      	ldr	r3, [pc, #648]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	4aa1      	ldr	r2, [pc, #644]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001e30:	f043 0302 	orr.w	r3, r3, #2
 8001e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e36:	4b9f      	ldr	r3, [pc, #636]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	623b      	str	r3, [r7, #32]
 8001e40:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e42:	4b9c      	ldr	r3, [pc, #624]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	4a9b      	ldr	r2, [pc, #620]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001e48:	f043 0308 	orr.w	r3, r3, #8
 8001e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4e:	4b99      	ldr	r3, [pc, #612]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	61fb      	str	r3, [r7, #28]
 8001e58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5a:	4b96      	ldr	r3, [pc, #600]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	4a95      	ldr	r2, [pc, #596]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001e60:	f043 0304 	orr.w	r3, r3, #4
 8001e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e66:	4b93      	ldr	r3, [pc, #588]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	61bb      	str	r3, [r7, #24]
 8001e70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	4b90      	ldr	r3, [pc, #576]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	4a8f      	ldr	r2, [pc, #572]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7e:	4b8d      	ldr	r3, [pc, #564]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001e8a:	4b8a      	ldr	r3, [pc, #552]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	4a89      	ldr	r2, [pc, #548]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001e90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e96:	4b87      	ldr	r3, [pc, #540]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ea2:	4b84      	ldr	r3, [pc, #528]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	4a83      	ldr	r2, [pc, #524]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001ea8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eae:	4b81      	ldr	r3, [pc, #516]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001eba:	4b7e      	ldr	r3, [pc, #504]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	4a7d      	ldr	r2, [pc, #500]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001ec0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec6:	4b7b      	ldr	r3, [pc, #492]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ed2:	4b78      	ldr	r3, [pc, #480]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	4a77      	ldr	r2, [pc, #476]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001ed8:	f043 0320 	orr.w	r3, r3, #32
 8001edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ede:	4b75      	ldr	r3, [pc, #468]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	f003 0320 	and.w	r3, r3, #32
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eea:	4b72      	ldr	r3, [pc, #456]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	4a71      	ldr	r2, [pc, #452]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001ef0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef6:	4b6f      	ldr	r3, [pc, #444]	@ (80020b4 <MX_GPIO_Init+0x2d0>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001f02:	2201      	movs	r2, #1
 8001f04:	2120      	movs	r1, #32
 8001f06:	486c      	ldr	r0, [pc, #432]	@ (80020b8 <MX_GPIO_Init+0x2d4>)
 8001f08:	f007 f91a 	bl	8009140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f241 010c 	movw	r1, #4108	@ 0x100c
 8001f12:	486a      	ldr	r0, [pc, #424]	@ (80020bc <MX_GPIO_Init+0x2d8>)
 8001f14:	f007 f914 	bl	8009140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2108      	movs	r1, #8
 8001f1c:	4868      	ldr	r0, [pc, #416]	@ (80020c0 <MX_GPIO_Init+0x2dc>)
 8001f1e:	f007 f90f 	bl	8009140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|LED2_Pin|LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001f22:	2200      	movs	r2, #0
 8001f24:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 8001f28:	4866      	ldr	r0, [pc, #408]	@ (80020c4 <MX_GPIO_Init+0x2e0>)
 8001f2a:	f007 f909 	bl	8009140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	21c8      	movs	r1, #200	@ 0xc8
 8001f32:	4865      	ldr	r0, [pc, #404]	@ (80020c8 <MX_GPIO_Init+0x2e4>)
 8001f34:	f007 f904 	bl	8009140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001f38:	2308      	movs	r3, #8
 8001f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4860      	ldr	r0, [pc, #384]	@ (80020cc <MX_GPIO_Init+0x2e8>)
 8001f4c:	f006 fe28 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001f50:	2304      	movs	r3, #4
 8001f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f60:	2309      	movs	r3, #9
 8001f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001f64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4858      	ldr	r0, [pc, #352]	@ (80020cc <MX_GPIO_Init+0x2e8>)
 8001f6c:	f006 fe18 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001f70:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f82:	230b      	movs	r3, #11
 8001f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	484e      	ldr	r0, [pc, #312]	@ (80020c8 <MX_GPIO_Init+0x2e4>)
 8001f8e:	f006 fe07 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001f92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f98:	2312      	movs	r3, #18
 8001f9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fa4:	2304      	movs	r3, #4
 8001fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fac:	4619      	mov	r1, r3
 8001fae:	4848      	ldr	r0, [pc, #288]	@ (80020d0 <MX_GPIO_Init+0x2ec>)
 8001fb0:	f006 fdf6 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001fb4:	2310      	movs	r3, #16
 8001fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001fc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4840      	ldr	r0, [pc, #256]	@ (80020d0 <MX_GPIO_Init+0x2ec>)
 8001fd0:	f006 fde6 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001fd4:	2380      	movs	r3, #128	@ 0x80
 8001fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001fe4:	2308      	movs	r3, #8
 8001fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001fe8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fec:	4619      	mov	r1, r3
 8001fee:	4832      	ldr	r0, [pc, #200]	@ (80020b8 <MX_GPIO_Init+0x2d4>)
 8001ff0:	f006 fdd6 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001ff4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002006:	2301      	movs	r3, #1
 8002008:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800200a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800200e:	4619      	mov	r1, r3
 8002010:	4830      	ldr	r0, [pc, #192]	@ (80020d4 <MX_GPIO_Init+0x2f0>)
 8002012:	f006 fdc5 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002016:	2360      	movs	r3, #96	@ 0x60
 8002018:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201a:	2302      	movs	r3, #2
 800201c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	2300      	movs	r3, #0
 8002024:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002026:	230d      	movs	r3, #13
 8002028:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800202a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800202e:	4619      	mov	r1, r3
 8002030:	4826      	ldr	r0, [pc, #152]	@ (80020cc <MX_GPIO_Init+0x2e8>)
 8002032:	f006 fdb5 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002036:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800203a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800203c:	2300      	movs	r3, #0
 800203e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002044:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002048:	4619      	mov	r1, r3
 800204a:	4823      	ldr	r0, [pc, #140]	@ (80020d8 <MX_GPIO_Init+0x2f4>)
 800204c:	f006 fda8 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002050:	2340      	movs	r3, #64	@ 0x40
 8002052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002054:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002058:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800205e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002062:	4619      	mov	r1, r3
 8002064:	4814      	ldr	r0, [pc, #80]	@ (80020b8 <MX_GPIO_Init+0x2d4>)
 8002066:	f006 fd9b 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800206a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800206e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002070:	2302      	movs	r3, #2
 8002072:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002078:	2303      	movs	r3, #3
 800207a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800207c:	230a      	movs	r3, #10
 800207e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002080:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002084:	4619      	mov	r1, r3
 8002086:	4813      	ldr	r0, [pc, #76]	@ (80020d4 <MX_GPIO_Init+0x2f0>)
 8002088:	f006 fd8a 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800208c:	2320      	movs	r3, #32
 800208e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002090:	2301      	movs	r3, #1
 8002092:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800209c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020a0:	4619      	mov	r1, r3
 80020a2:	4805      	ldr	r0, [pc, #20]	@ (80020b8 <MX_GPIO_Init+0x2d4>)
 80020a4:	f006 fd7c 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80020a8:	2308      	movs	r3, #8
 80020aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e013      	b.n	80020dc <MX_GPIO_Init+0x2f8>
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020c00 	.word	0x40020c00
 80020bc:	40022000 	.word	0x40022000
 80020c0:	40022800 	.word	0x40022800
 80020c4:	40021c00 	.word	0x40021c00
 80020c8:	40021800 	.word	0x40021800
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40020400 	.word	0x40020400
 80020d4:	40020000 	.word	0x40020000
 80020d8:	40022400 	.word	0x40022400
 80020dc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2300      	movs	r3, #0
 80020e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80020e2:	230d      	movs	r3, #13
 80020e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80020e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020ea:	4619      	mov	r1, r3
 80020ec:	48bb      	ldr	r0, [pc, #748]	@ (80023dc <MX_GPIO_Init+0x5f8>)
 80020ee:	f006 fd57 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80020f2:	f241 030c 	movw	r3, #4108	@ 0x100c
 80020f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f8:	2301      	movs	r3, #1
 80020fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002100:	2300      	movs	r3, #0
 8002102:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002104:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002108:	4619      	mov	r1, r3
 800210a:	48b5      	ldr	r0, [pc, #724]	@ (80023e0 <MX_GPIO_Init+0x5fc>)
 800210c:	f006 fd48 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002110:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002116:	2300      	movs	r3, #0
 8002118:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002122:	4619      	mov	r1, r3
 8002124:	48af      	ldr	r0, [pc, #700]	@ (80023e4 <MX_GPIO_Init+0x600>)
 8002126:	f006 fd3b 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800212a:	2308      	movs	r3, #8
 800212c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212e:	2301      	movs	r3, #1
 8002130:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800213a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800213e:	4619      	mov	r1, r3
 8002140:	48a9      	ldr	r0, [pc, #676]	@ (80023e8 <MX_GPIO_Init+0x604>)
 8002142:	f006 fd2d 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002146:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800214a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002154:	2300      	movs	r3, #0
 8002156:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002158:	230d      	movs	r3, #13
 800215a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800215c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002160:	4619      	mov	r1, r3
 8002162:	48a2      	ldr	r0, [pc, #648]	@ (80023ec <MX_GPIO_Init+0x608>)
 8002164:	f006 fd1c 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002168:	2310      	movs	r3, #16
 800216a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800216c:	2300      	movs	r3, #0
 800216e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002174:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002178:	4619      	mov	r1, r3
 800217a:	4898      	ldr	r0, [pc, #608]	@ (80023dc <MX_GPIO_Init+0x5f8>)
 800217c:	f006 fd10 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002180:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002184:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002186:	2300      	movs	r3, #0
 8002188:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800218e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002192:	4619      	mov	r1, r3
 8002194:	4896      	ldr	r0, [pc, #600]	@ (80023f0 <MX_GPIO_Init+0x60c>)
 8002196:	f006 fd03 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800219a:	2302      	movs	r3, #2
 800219c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a6:	2300      	movs	r3, #0
 80021a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021aa:	2305      	movs	r3, #5
 80021ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80021ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021b2:	4619      	mov	r1, r3
 80021b4:	488a      	ldr	r0, [pc, #552]	@ (80023e0 <MX_GPIO_Init+0x5fc>)
 80021b6:	f006 fcf3 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_PWR_EN_Pin LED2_Pin LED1_Pin LED3_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin|LED2_Pin|LED1_Pin|LED3_Pin;
 80021ba:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80021be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c0:	2301      	movs	r3, #1
 80021c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80021cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021d0:	4619      	mov	r1, r3
 80021d2:	4887      	ldr	r0, [pc, #540]	@ (80023f0 <MX_GPIO_Init+0x60c>)
 80021d4:	f006 fce4 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D0_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D0_Pin;
 80021d8:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80021dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e6:	2300      	movs	r3, #0
 80021e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80021ea:	230d      	movs	r3, #13
 80021ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80021ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021f2:	4619      	mov	r1, r3
 80021f4:	487e      	ldr	r0, [pc, #504]	@ (80023f0 <MX_GPIO_Init+0x60c>)
 80021f6:	f006 fcd3 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80021fa:	2301      	movs	r3, #1
 80021fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800220a:	2302      	movs	r3, #2
 800220c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800220e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002212:	4619      	mov	r1, r3
 8002214:	4872      	ldr	r0, [pc, #456]	@ (80023e0 <MX_GPIO_Init+0x5fc>)
 8002216:	f006 fcc3 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800221a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800221e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800222c:	2301      	movs	r3, #1
 800222e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002230:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002234:	4619      	mov	r1, r3
 8002236:	486f      	ldr	r0, [pc, #444]	@ (80023f4 <MX_GPIO_Init+0x610>)
 8002238:	f006 fcb2 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800223c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002240:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002242:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002246:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800224c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002250:	4619      	mov	r1, r3
 8002252:	4863      	ldr	r0, [pc, #396]	@ (80023e0 <MX_GPIO_Init+0x5fc>)
 8002254:	f006 fca4 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002258:	23c0      	movs	r3, #192	@ 0xc0
 800225a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002264:	2303      	movs	r3, #3
 8002266:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002268:	2308      	movs	r3, #8
 800226a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800226c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002270:	4619      	mov	r1, r3
 8002272:	485c      	ldr	r0, [pc, #368]	@ (80023e4 <MX_GPIO_Init+0x600>)
 8002274:	f006 fc94 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002278:	2310      	movs	r3, #16
 800227a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002284:	2303      	movs	r3, #3
 8002286:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002288:	230a      	movs	r3, #10
 800228a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800228c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002290:	4619      	mov	r1, r3
 8002292:	4857      	ldr	r0, [pc, #348]	@ (80023f0 <MX_GPIO_Init+0x60c>)
 8002294:	f006 fc84 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002298:	23c8      	movs	r3, #200	@ 0xc8
 800229a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229c:	2301      	movs	r3, #1
 800229e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a4:	2300      	movs	r3, #0
 80022a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022ac:	4619      	mov	r1, r3
 80022ae:	484f      	ldr	r0, [pc, #316]	@ (80023ec <MX_GPIO_Init+0x608>)
 80022b0:	f006 fc76 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin|ULPI_D2_Pin
 80022b4:	f643 4303 	movw	r3, #15363	@ 0x3c03
 80022b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ba:	2302      	movs	r3, #2
 80022bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c2:	2303      	movs	r3, #3
 80022c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80022c6:	230a      	movs	r3, #10
 80022c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022ce:	4619      	mov	r1, r3
 80022d0:	4849      	ldr	r0, [pc, #292]	@ (80023f8 <MX_GPIO_Init+0x614>)
 80022d2:	f006 fc65 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80022d6:	2305      	movs	r3, #5
 80022d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e2:	2303      	movs	r3, #3
 80022e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80022e6:	230a      	movs	r3, #10
 80022e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022ee:	4619      	mov	r1, r3
 80022f0:	483c      	ldr	r0, [pc, #240]	@ (80023e4 <MX_GPIO_Init+0x600>)
 80022f2:	f006 fc55 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80022f6:	2332      	movs	r3, #50	@ 0x32
 80022f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002302:	2303      	movs	r3, #3
 8002304:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002306:	230b      	movs	r3, #11
 8002308:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800230a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800230e:	4619      	mov	r1, r3
 8002310:	4834      	ldr	r0, [pc, #208]	@ (80023e4 <MX_GPIO_Init+0x600>)
 8002312:	f006 fc45 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002316:	2304      	movs	r3, #4
 8002318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231a:	2302      	movs	r3, #2
 800231c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002322:	2303      	movs	r3, #3
 8002324:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002326:	2309      	movs	r3, #9
 8002328:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800232e:	4619      	mov	r1, r3
 8002330:	4831      	ldr	r0, [pc, #196]	@ (80023f8 <MX_GPIO_Init+0x614>)
 8002332:	f006 fc35 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002336:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800233a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002344:	2303      	movs	r3, #3
 8002346:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002348:	2309      	movs	r3, #9
 800234a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800234c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002350:	4619      	mov	r1, r3
 8002352:	4822      	ldr	r0, [pc, #136]	@ (80023dc <MX_GPIO_Init+0x5f8>)
 8002354:	f006 fc24 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002358:	2304      	movs	r3, #4
 800235a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800235c:	2300      	movs	r3, #0
 800235e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002364:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002368:	4619      	mov	r1, r3
 800236a:	4820      	ldr	r0, [pc, #128]	@ (80023ec <MX_GPIO_Init+0x608>)
 800236c:	f006 fc18 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002370:	2386      	movs	r3, #134	@ 0x86
 8002372:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237c:	2303      	movs	r3, #3
 800237e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002380:	230b      	movs	r3, #11
 8002382:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002384:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002388:	4619      	mov	r1, r3
 800238a:	481a      	ldr	r0, [pc, #104]	@ (80023f4 <MX_GPIO_Init+0x610>)
 800238c:	f006 fc08 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002390:	2350      	movs	r3, #80	@ 0x50
 8002392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	2302      	movs	r3, #2
 8002396:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239c:	2300      	movs	r3, #0
 800239e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80023a0:	230d      	movs	r3, #13
 80023a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023a8:	4619      	mov	r1, r3
 80023aa:	4812      	ldr	r0, [pc, #72]	@ (80023f4 <MX_GPIO_Init+0x610>)
 80023ac:	f006 fbf8 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80023b0:	2328      	movs	r3, #40	@ 0x28
 80023b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b4:	2302      	movs	r3, #2
 80023b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023bc:	2303      	movs	r3, #3
 80023be:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80023c0:	230a      	movs	r3, #10
 80023c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023c8:	4619      	mov	r1, r3
 80023ca:	480a      	ldr	r0, [pc, #40]	@ (80023f4 <MX_GPIO_Init+0x610>)
 80023cc:	f006 fbe8 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SDA_Pin;
 80023d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023d6:	2312      	movs	r3, #18
 80023d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80023da:	e00f      	b.n	80023fc <MX_GPIO_Init+0x618>
 80023dc:	40020c00 	.word	0x40020c00
 80023e0:	40022000 	.word	0x40022000
 80023e4:	40020800 	.word	0x40020800
 80023e8:	40022800 	.word	0x40022800
 80023ec:	40021800 	.word	0x40021800
 80023f0:	40021c00 	.word	0x40021c00
 80023f4:	40020000 	.word	0x40020000
 80023f8:	40020400 	.word	0x40020400
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002400:	2303      	movs	r3, #3
 8002402:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002404:	2304      	movs	r3, #4
 8002406:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_SDA_GPIO_Port, &GPIO_InitStruct);
 8002408:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800240c:	4619      	mov	r1, r3
 800240e:	480c      	ldr	r0, [pc, #48]	@ (8002440 <MX_GPIO_Init+0x65c>)
 8002410:	f006 fbc6 	bl	8008ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002414:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002418:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2300      	movs	r3, #0
 8002424:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002426:	2305      	movs	r3, #5
 8002428:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800242e:	4619      	mov	r1, r3
 8002430:	4804      	ldr	r0, [pc, #16]	@ (8002444 <MX_GPIO_Init+0x660>)
 8002432:	f006 fbb5 	bl	8008ba0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002436:	bf00      	nop
 8002438:	3740      	adds	r7, #64	@ 0x40
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40021c00 	.word	0x40021c00
 8002444:	40020400 	.word	0x40020400

08002448 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/* USER CODE BEGIN 4 */

void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
	char a = 1;
 800244e:	2301      	movs	r3, #1
 8002450:	71fb      	strb	r3, [r7, #7]
	xQueueSendFromISR(musicFlagHandle, &a, 0);
 8002452:	4b05      	ldr	r3, [pc, #20]	@ (8002468 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	1df9      	adds	r1, r7, #7
 8002458:	2300      	movs	r3, #0
 800245a:	2200      	movs	r2, #0
 800245c:	f011 fb48 	bl	8013af0 <xQueueGenericSendFromISR>
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20000e58 	.word	0x20000e58

0800246c <BSP_AUDIO_OUT_HalfTransfer_CallBack>:

void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
	char a = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	71fb      	strb	r3, [r7, #7]
	xQueueSendFromISR(musicFlagHandle, &a, 0);
 8002476:	4b05      	ldr	r3, [pc, #20]	@ (800248c <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	1df9      	adds	r1, r7, #7
 800247c:	2300      	movs	r3, #0
 800247e:	2200      	movs	r2, #0
 8002480:	f011 fb36 	bl	8013af0 <xQueueGenericSendFromISR>
}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000e58 	.word	0x20000e58

08002490 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		osDelay(10);
 8002498:	200a      	movs	r0, #10
 800249a:	f010 fdf7 	bl	801308c <osDelay>
 800249e:	e7fb      	b.n	8002498 <StartDefaultTask+0x8>

080024a0 <funcAffichageBackground>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_funcAffichageBackground */
void funcAffichageBackground(void const * argument)
{
 80024a0:	b5b0      	push	{r4, r5, r7, lr}
 80024a2:	b0b8      	sub	sp, #224	@ 0xe0
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN funcAffichageBackground */

	uint32_t counter = 0, fini = 0, depart = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80024ae:	2300      	movs	r3, #0
 80024b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	uwInternelBuffer = (uint8_t*) 0xC0260000;
 80024ba:	4b49      	ldr	r3, [pc, #292]	@ (80025e0 <funcAffichageBackground+0x140>)
 80024bc:	4a49      	ldr	r2, [pc, #292]	@ (80025e4 <funcAffichageBackground+0x144>)
 80024be:	601a      	str	r2, [r3, #0]
	uint8_t buf[64];
	uint8_t initialisationJeu = 1;
 80024c0:	2301      	movs	r3, #1
 80024c2:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
	uint8_t cpt = 0, cptOld = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
 80024cc:	2300      	movs	r3, #0
 80024ce:	f887 30c9 	strb.w	r3, [r7, #201]	@ 0xc9
	short vitesse = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
	uint8_t commande;

	uint8_t numeroPiste = 1;
 80024d8:	2301      	movs	r3, #1
 80024da:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5
	uint8_t deblocage = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
	uint32_t startTime = 0, tempsEcoule = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

	uint32_t bytesWritten;

	short decalageVerifPenaliteY = 0, decalageVerifPenaliteX = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
 80024f6:	2300      	movs	r3, #0
 80024f8:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae

	uint32_t penaliteTemps = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	uint8_t largeurVoiture = 26, longueurVoiture = 66;
 8002502:	231a      	movs	r3, #26
 8002504:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
 8002508:	2342      	movs	r3, #66	@ 0x42
 800250a:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac


	ADC_ChannelConfTypeDef sConfig = {0};
 800250e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800251c:	2301      	movs	r3, #1
 800251e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002520:	2300      	movs	r3, #0
 8002522:	663b      	str	r3, [r7, #96]	@ 0x60


	vTaskSuspend(startMusiqueHandle);
 8002524:	4b30      	ldr	r3, [pc, #192]	@ (80025e8 <funcAffichageBackground+0x148>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f012 fa15 	bl	8014958 <vTaskSuspend>
	vTaskDelay(100);
 800252e:	2064      	movs	r0, #100	@ 0x64
 8002530:	f012 f9da 	bl	80148e8 <vTaskDelay>

	uwInternelBuffer = (uint8_t *)0xC0260000;
 8002534:	4b2a      	ldr	r3, [pc, #168]	@ (80025e0 <funcAffichageBackground+0x140>)
 8002536:	4a2b      	ldr	r2, [pc, #172]	@ (80025e4 <funcAffichageBackground+0x144>)
 8002538:	601a      	str	r2, [r3, #0]

	//uint8_t counter;

	/*##- Initialize the Directory Files pointers (heap) ###################*/
	for (counter = 0; counter < MAX_BMP_FILES; counter++)
 800253a:	2300      	movs	r3, #0
 800253c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002540:	e01e      	b.n	8002580 <funcAffichageBackground+0xe0>
	{
		pDirectoryFiles[counter] = malloc(MAX_BMP_FILE_NAME);
 8002542:	200b      	movs	r0, #11
 8002544:	f013 fe1e 	bl	8016184 <malloc>
 8002548:	4603      	mov	r3, r0
 800254a:	4619      	mov	r1, r3
 800254c:	4a27      	ldr	r2, [pc, #156]	@ (80025ec <funcAffichageBackground+0x14c>)
 800254e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002552:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (pDirectoryFiles[counter] == NULL)
 8002556:	4a25      	ldr	r2, [pc, #148]	@ (80025ec <funcAffichageBackground+0x14c>)
 8002558:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800255c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d108      	bne.n	8002576 <funcAffichageBackground+0xd6>
		{
			/* Set the Text Color */
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002564:	4822      	ldr	r0, [pc, #136]	@ (80025f0 <funcAffichageBackground+0x150>)
 8002566:	f001 fcfb 	bl	8003f60 <BSP_LCD_SetTextColor>

			BSP_LCD_DisplayStringAtLine(8, (uint8_t *)"  Cannot allocate memory ");
 800256a:	4922      	ldr	r1, [pc, #136]	@ (80025f4 <funcAffichageBackground+0x154>)
 800256c:	2008      	movs	r0, #8
 800256e:	f001 ff33 	bl	80043d8 <BSP_LCD_DisplayStringAtLine>

			while (1)
 8002572:	bf00      	nop
 8002574:	e7fd      	b.n	8002572 <funcAffichageBackground+0xd2>
	for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8002576:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800257a:	3301      	adds	r3, #1
 800257c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002580:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002584:	2b18      	cmp	r3, #24
 8002586:	d9dc      	bls.n	8002542 <funcAffichageBackground+0xa2>
			}
		}
	}

	/* Get the BMP file names on root directory */
	ubNumberOfFiles = Storage_GetDirectoryBitmapFiles("/Media",pDirectoryFiles);
 8002588:	4918      	ldr	r1, [pc, #96]	@ (80025ec <funcAffichageBackground+0x14c>)
 800258a:	481b      	ldr	r0, [pc, #108]	@ (80025f8 <funcAffichageBackground+0x158>)
 800258c:	f7fe fbd6 	bl	8000d3c <Storage_GetDirectoryBitmapFiles>
 8002590:	4603      	mov	r3, r0
 8002592:	b2da      	uxtb	r2, r3
 8002594:	4b19      	ldr	r3, [pc, #100]	@ (80025fc <funcAffichageBackground+0x15c>)
 8002596:	701a      	strb	r2, [r3, #0]
	if (ubNumberOfFiles == 0) {
 8002598:	4b18      	ldr	r3, [pc, #96]	@ (80025fc <funcAffichageBackground+0x15c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d11a      	bne.n	80025d6 <funcAffichageBackground+0x136>
		for (counter = 0; counter < MAX_BMP_FILES; counter++) {
 80025a0:	2300      	movs	r3, #0
 80025a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80025a6:	e00c      	b.n	80025c2 <funcAffichageBackground+0x122>
			free(pDirectoryFiles[counter]);
 80025a8:	4a10      	ldr	r2, [pc, #64]	@ (80025ec <funcAffichageBackground+0x14c>)
 80025aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f013 fdee 	bl	8016194 <free>
		for (counter = 0; counter < MAX_BMP_FILES; counter++) {
 80025b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025bc:	3301      	adds	r3, #1
 80025be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80025c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025c6:	2b18      	cmp	r3, #24
 80025c8:	d9ee      	bls.n	80025a8 <funcAffichageBackground+0x108>
		}
		BSP_LCD_DisplayStringAtLine(4,(uint8_t*) " Pas de fichiers Bitmap ou pas de carte SD inseree... Redemarrer ");
 80025ca:	490d      	ldr	r1, [pc, #52]	@ (8002600 <funcAffichageBackground+0x160>)
 80025cc:	2004      	movs	r0, #4
 80025ce:	f001 ff03 	bl	80043d8 <BSP_LCD_DisplayStringAtLine>
		while (1) {
 80025d2:	bf00      	nop
 80025d4:	e7fd      	b.n	80025d2 <funcAffichageBackground+0x132>
		}
	}

	for (int i =0;i< ubNumberOfFiles;i++){
 80025d6:	2300      	movs	r3, #0
 80025d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025dc:	e02d      	b.n	800263a <funcAffichageBackground+0x19a>
 80025de:	bf00      	nop
 80025e0:	20000ecc 	.word	0x20000ecc
 80025e4:	c0260000 	.word	0xc0260000
 80025e8:	20000e50 	.word	0x20000e50
 80025ec:	20000e68 	.word	0x20000e68
 80025f0:	ffff0000 	.word	0xffff0000
 80025f4:	08016c90 	.word	0x08016c90
 80025f8:	08016cac 	.word	0x08016cac
 80025fc:	20000ed2 	.word	0x20000ed2
 8002600:	08016cb4 	.word	0x08016cb4
		// Afficher le nom du fichier BMP
		sprintf((char*) buf, "Media/%-11.11s", pDirectoryFiles[i]); //On affiche le nom du fichier
 8002604:	4ab6      	ldr	r2, [pc, #728]	@ (80028e0 <funcAffichageBackground+0x440>)
 8002606:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800260a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800260e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002612:	49b4      	ldr	r1, [pc, #720]	@ (80028e4 <funcAffichageBackground+0x444>)
 8002614:	4618      	mov	r0, r3
 8002616:	f013 fe73 	bl	8016300 <siprintf>
		BSP_LCD_DisplayStringAtLine(i+10, (uint8_t*)buf);
 800261a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800261e:	b29b      	uxth	r3, r3
 8002620:	330a      	adds	r3, #10
 8002622:	b29b      	uxth	r3, r3
 8002624:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f001 fed4 	bl	80043d8 <BSP_LCD_DisplayStringAtLine>
	for (int i =0;i< ubNumberOfFiles;i++){
 8002630:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002634:	3301      	adds	r3, #1
 8002636:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800263a:	4bab      	ldr	r3, [pc, #684]	@ (80028e8 <funcAffichageBackground+0x448>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002644:	4293      	cmp	r3, r2
 8002646:	dbdd      	blt.n	8002604 <funcAffichageBackground+0x164>
	}

	/* Format the string */
	//On charge les images
	sprintf((char*) nomFichierPiste1, "Media/%-11.11s",pDirectoryFiles[1]);
 8002648:	4ba5      	ldr	r3, [pc, #660]	@ (80028e0 <funcAffichageBackground+0x440>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	461a      	mov	r2, r3
 800264e:	49a5      	ldr	r1, [pc, #660]	@ (80028e4 <funcAffichageBackground+0x444>)
 8002650:	48a6      	ldr	r0, [pc, #664]	@ (80028ec <funcAffichageBackground+0x44c>)
 8002652:	f013 fe55 	bl	8016300 <siprintf>
	sprintf((char*) nomFichierPiste2, "Media/%-11.11s",pDirectoryFiles[2]);
 8002656:	4ba2      	ldr	r3, [pc, #648]	@ (80028e0 <funcAffichageBackground+0x440>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	461a      	mov	r2, r3
 800265c:	49a1      	ldr	r1, [pc, #644]	@ (80028e4 <funcAffichageBackground+0x444>)
 800265e:	48a4      	ldr	r0, [pc, #656]	@ (80028f0 <funcAffichageBackground+0x450>)
 8002660:	f013 fe4e 	bl	8016300 <siprintf>

	// Lancement de la musique
	initializeSD();
 8002664:	f7fe fe58 	bl	8001318 <initializeSD>
	lanceMusique(0);
 8002668:	2000      	movs	r0, #0
 800266a:	f7fe fe95 	bl	8001398 <lanceMusique>

	vTaskResume(startMusiqueHandle);
 800266e:	4ba1      	ldr	r3, [pc, #644]	@ (80028f4 <funcAffichageBackground+0x454>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f012 fa3a 	bl	8014aec <vTaskResume>

	vTaskDelay(1000);
 8002678:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800267c:	f012 f934 	bl	80148e8 <vTaskDelay>


	/* Infinite loop */
	for (;;) {
		//if(start){
		if((rxData[0]=='A') || start){//Condition start
 8002680:	4b9d      	ldr	r3, [pc, #628]	@ (80028f8 <funcAffichageBackground+0x458>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b41      	cmp	r3, #65	@ 0x41
 8002686:	d004      	beq.n	8002692 <funcAffichageBackground+0x1f2>
 8002688:	4b9c      	ldr	r3, [pc, #624]	@ (80028fc <funcAffichageBackground+0x45c>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 84e1 	beq.w	8003054 <funcAffichageBackground+0xbb4>
			start = 1;
 8002692:	4b9a      	ldr	r3, [pc, #616]	@ (80028fc <funcAffichageBackground+0x45c>)
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]


			if(initialisationJeu){
 8002698:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800269c:	2b00      	cmp	r3, #0
 800269e:	d02c      	beq.n	80026fa <funcAffichageBackground+0x25a>

				startTime = HAL_GetTick(); //temps de début
 80026a0:	f004 ffd8 	bl	8007654 <HAL_GetTick>
 80026a4:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

				/* On affiche la piste */
				BSP_LCD_SelectLayer(0);
 80026a8:	2000      	movs	r0, #0
 80026aa:	f001 fc37 	bl	8003f1c <BSP_LCD_SelectLayer>
				BSP_LCD_SetTransparency(0, 255);
 80026ae:	21ff      	movs	r1, #255	@ 0xff
 80026b0:	2000      	movs	r0, #0
 80026b2:	f001 fc43 	bl	8003f3c <BSP_LCD_SetTransparency>

				/* Open a file and copy its content to an internal buffer */
				Storage_OpenReadFile(uwInternelBuffer, (const char*) nomFichierPiste1);
 80026b6:	4b92      	ldr	r3, [pc, #584]	@ (8002900 <funcAffichageBackground+0x460>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	498c      	ldr	r1, [pc, #560]	@ (80028ec <funcAffichageBackground+0x44c>)
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe fa7d 	bl	8000bbc <Storage_OpenReadFile>

				/* Write bmp file on LCD frame buffer */
				BSP_LCD_DrawBitmap(0, 0, uwInternelBuffer);
 80026c2:	4b8f      	ldr	r3, [pc, #572]	@ (8002900 <funcAffichageBackground+0x460>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	2100      	movs	r1, #0
 80026ca:	2000      	movs	r0, #0
 80026cc:	f001 fee4 	bl	8004498 <BSP_LCD_DrawBitmap>


				initialisationJeu = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb

				/* On met à jour l'affichage dela F1 sur la piste*/
				BSP_LCD_SelectLayer(1);
 80026d6:	2001      	movs	r0, #1
 80026d8:	f001 fc20 	bl	8003f1c <BSP_LCD_SelectLayer>
				BSP_LCD_SetTransparency(1, 255);
 80026dc:	21ff      	movs	r1, #255	@ 0xff
 80026de:	2001      	movs	r0, #1
 80026e0:	f001 fc2c 	bl	8003f3c <BSP_LCD_SetTransparency>

				BSP_LCD_SetTextColor(LCD_COLOR_TRANSPARENT);
 80026e4:	2000      	movs	r0, #0
 80026e6:	f001 fc3b 	bl	8003f60 <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(0, 0, 480, 272);
 80026ea:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80026ee:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80026f2:	2100      	movs	r1, #0
 80026f4:	2000      	movs	r0, #0
 80026f6:	f001 ff81 	bl	80045fc <BSP_LCD_FillRect>
			}

			if((vitesse || depart) && (!fini)){
 80026fa:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d103      	bne.n	800270a <funcAffichageBackground+0x26a>
 8002702:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002706:	2b00      	cmp	r3, #0
 8002708:	d012      	beq.n	8002730 <funcAffichageBackground+0x290>
 800270a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10e      	bne.n	8002730 <funcAffichageBackground+0x290>
				depart = 1;
 8002712:	2301      	movs	r3, #1
 8002714:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
				if(fini == 0) tempsEcoule = HAL_GetTick() - startTime; // MAJ du temps écoulé
 8002718:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d107      	bne.n	8002730 <funcAffichageBackground+0x290>
 8002720:	f004 ff98 	bl	8007654 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			}

			BSP_LCD_DrawBitmap(DepartX+deltaX, DepartY+deltaY, (uint8_t*)nomVoitures[cpt]);
 8002730:	2328      	movs	r3, #40	@ 0x28
 8002732:	461a      	mov	r2, r3
 8002734:	4b73      	ldr	r3, [pc, #460]	@ (8002904 <funcAffichageBackground+0x464>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4413      	add	r3, r2
 800273a:	4618      	mov	r0, r3
 800273c:	23a0      	movs	r3, #160	@ 0xa0
 800273e:	461a      	mov	r2, r3
 8002740:	4b71      	ldr	r3, [pc, #452]	@ (8002908 <funcAffichageBackground+0x468>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4413      	add	r3, r2
 8002746:	4619      	mov	r1, r3
 8002748:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 800274c:	4a6f      	ldr	r2, [pc, #444]	@ (800290c <funcAffichageBackground+0x46c>)
 800274e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002752:	461a      	mov	r2, r3
 8002754:	f001 fea0 	bl	8004498 <BSP_LCD_DrawBitmap>


			char timeBuffer[16];
			if(!fini) sprintf(timeBuffer, "Temps: %lu:%02lu - Penalites : +%lu s ", tempsEcoule / 1000, (tempsEcoule % 1000) / 10, penaliteTemps*10);//10 secondes en plus par pénalité
 8002758:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d122      	bne.n	80027a6 <funcAffichageBackground+0x306>
 8002760:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002764:	4a6a      	ldr	r2, [pc, #424]	@ (8002910 <funcAffichageBackground+0x470>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	0999      	lsrs	r1, r3, #6
 800276c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002770:	4b67      	ldr	r3, [pc, #412]	@ (8002910 <funcAffichageBackground+0x470>)
 8002772:	fba3 0302 	umull	r0, r3, r3, r2
 8002776:	099b      	lsrs	r3, r3, #6
 8002778:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800277c:	fb00 f303 	mul.w	r3, r0, r3
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	4a64      	ldr	r2, [pc, #400]	@ (8002914 <funcAffichageBackground+0x474>)
 8002784:	fba2 2303 	umull	r2, r3, r2, r3
 8002788:	08dc      	lsrs	r4, r3, #3
 800278a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	4623      	mov	r3, r4
 800279e:	460a      	mov	r2, r1
 80027a0:	495d      	ldr	r1, [pc, #372]	@ (8002918 <funcAffichageBackground+0x478>)
 80027a2:	f013 fdad 	bl	8016300 <siprintf>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80027a6:	485d      	ldr	r0, [pc, #372]	@ (800291c <funcAffichageBackground+0x47c>)
 80027a8:	f001 fbda 	bl	8003f60 <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAtLine(0, (uint8_t*) timeBuffer); // Afficher le temps écoulé
 80027ac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80027b0:	4619      	mov	r1, r3
 80027b2:	2000      	movs	r0, #0
 80027b4:	f001 fe10 	bl	80043d8 <BSP_LCD_DisplayStringAtLine>

			BSP_LCD_SelectLayer(0);
 80027b8:	2000      	movs	r0, #0
 80027ba:	f001 fbaf 	bl	8003f1c <BSP_LCD_SelectLayer>
			couleurPixelsousVoiture = BSP_LCD_ReadPixel(DepartX+deltaX, DepartY+deltaY);
 80027be:	2328      	movs	r3, #40	@ 0x28
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b50      	ldr	r3, [pc, #320]	@ (8002904 <funcAffichageBackground+0x464>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	23a0      	movs	r3, #160	@ 0xa0
 80027ce:	4619      	mov	r1, r3
 80027d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002908 <funcAffichageBackground+0x468>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	440b      	add	r3, r1
 80027d8:	b29b      	uxth	r3, r3
 80027da:	4619      	mov	r1, r3
 80027dc:	4610      	mov	r0, r2
 80027de:	f001 fc21 	bl	8004024 <BSP_LCD_ReadPixel>
 80027e2:	4603      	mov	r3, r0
 80027e4:	4a4e      	ldr	r2, [pc, #312]	@ (8002920 <funcAffichageBackground+0x480>)
 80027e6:	6013      	str	r3, [r2, #0]
			BSP_LCD_SelectLayer(1);
 80027e8:	2001      	movs	r0, #1
 80027ea:	f001 fb97 	bl	8003f1c <BSP_LCD_SelectLayer>

			if((couleurPixelsousVoiture >= 4290000000) ||(couleurPixelsousVoiture <= 4280000000)){ //Si le pixel sous le devant de la voiture n'est pas gris, donc si ce n'est pas la piste
 80027ee:	4b4c      	ldr	r3, [pc, #304]	@ (8002920 <funcAffichageBackground+0x480>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a4c      	ldr	r2, [pc, #304]	@ (8002924 <funcAffichageBackground+0x484>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d804      	bhi.n	8002802 <funcAffichageBackground+0x362>
 80027f8:	4b49      	ldr	r3, [pc, #292]	@ (8002920 <funcAffichageBackground+0x480>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a4a      	ldr	r2, [pc, #296]	@ (8002928 <funcAffichageBackground+0x488>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d804      	bhi.n	800280c <funcAffichageBackground+0x36c>
				penaliteTemps++; //On rajoute une pénalité de temps
 8002802:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002806:	3301      	adds	r3, #1
 8002808:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			}

			//Marge 5 px

			//Période de 41ms -> 24 FPS
			osDelay(41);
 800280c:	2029      	movs	r0, #41	@ 0x29
 800280e:	f010 fc3d 	bl	801308c <osDelay>

			/* Infinite loop */

			switch(numeroPiste){
 8002812:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8002816:	3b01      	subs	r3, #1
 8002818:	2b03      	cmp	r3, #3
 800281a:	f200 815f 	bhi.w	8002adc <funcAffichageBackground+0x63c>
 800281e:	a201      	add	r2, pc, #4	@ (adr r2, 8002824 <funcAffichageBackground+0x384>)
 8002820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002824:	08002835 	.word	0x08002835
 8002828:	0800292d 	.word	0x0800292d
 800282c:	080029a1 	.word	0x080029a1
 8002830:	08002a11 	.word	0x08002a11
			case 1:
				if(fini){
 8002834:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d011      	beq.n	8002860 <funcAffichageBackground+0x3c0>
					vitesse = 0; //On a fait le tour du circuit
 800283c:	2300      	movs	r3, #0
 800283e:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
					depart = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
					tempsEcoule = tempsEcoule + penaliteTemps*10;
 8002848:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	461a      	mov	r2, r3
 8002856:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800285a:	4413      	add	r3, r2
 800285c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
				}

				if((DepartX+deltaX >= 430) && (DepartY+deltaY >= 0) && ((DepartY+deltaY <= 50))){
 8002860:	2328      	movs	r3, #40	@ 0x28
 8002862:	461a      	mov	r2, r3
 8002864:	4b27      	ldr	r3, [pc, #156]	@ (8002904 <funcAffichageBackground+0x464>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4413      	add	r3, r2
 800286a:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 800286e:	f2c0 812e 	blt.w	8002ace <funcAffichageBackground+0x62e>
 8002872:	23a0      	movs	r3, #160	@ 0xa0
 8002874:	461a      	mov	r2, r3
 8002876:	4b24      	ldr	r3, [pc, #144]	@ (8002908 <funcAffichageBackground+0x468>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4413      	add	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	f2c0 8126 	blt.w	8002ace <funcAffichageBackground+0x62e>
 8002882:	23a0      	movs	r3, #160	@ 0xa0
 8002884:	461a      	mov	r2, r3
 8002886:	4b20      	ldr	r3, [pc, #128]	@ (8002908 <funcAffichageBackground+0x468>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4413      	add	r3, r2
 800288c:	2b32      	cmp	r3, #50	@ 0x32
 800288e:	f300 811e 	bgt.w	8002ace <funcAffichageBackground+0x62e>
					/* On affiche la piste */
					BSP_LCD_SelectLayer(0);
 8002892:	2000      	movs	r0, #0
 8002894:	f001 fb42 	bl	8003f1c <BSP_LCD_SelectLayer>

					/* Open a file and copy its content to an internal buffer */
					Storage_OpenReadFile(uwInternelBuffer, (const char*) nomFichierPiste2);
 8002898:	4b19      	ldr	r3, [pc, #100]	@ (8002900 <funcAffichageBackground+0x460>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4914      	ldr	r1, [pc, #80]	@ (80028f0 <funcAffichageBackground+0x450>)
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe f98c 	bl	8000bbc <Storage_OpenReadFile>

					/* Write bmp file on LCD frame buffer */
					BSP_LCD_DrawBitmap(0, 0, uwInternelBuffer);
 80028a4:	4b16      	ldr	r3, [pc, #88]	@ (8002900 <funcAffichageBackground+0x460>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	2100      	movs	r1, #0
 80028ac:	2000      	movs	r0, #0
 80028ae:	f001 fdf3 	bl	8004498 <BSP_LCD_DrawBitmap>


					BSP_LCD_SelectLayer(1);
 80028b2:	2001      	movs	r0, #1
 80028b4:	f001 fb32 	bl	8003f1c <BSP_LCD_SelectLayer>
					BSP_LCD_SetTextColor(LCD_COLOR_TRANSPARENT);
 80028b8:	2000      	movs	r0, #0
 80028ba:	f001 fb51 	bl	8003f60 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0, 0, 480, 272);
 80028be:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80028c2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80028c6:	2100      	movs	r1, #0
 80028c8:	2000      	movs	r0, #0
 80028ca:	f001 fe97 	bl	80045fc <BSP_LCD_FillRect>


					deltaX = -20; //On remet la voiture à gauche
 80028ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002904 <funcAffichageBackground+0x464>)
 80028d0:	f06f 0213 	mvn.w	r2, #19
 80028d4:	601a      	str	r2, [r3, #0]
					numeroPiste=2;
 80028d6:	2302      	movs	r3, #2
 80028d8:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5
				}
				break;
 80028dc:	e0f7      	b.n	8002ace <funcAffichageBackground+0x62e>
 80028de:	bf00      	nop
 80028e0:	20000e68 	.word	0x20000e68
 80028e4:	08016cf8 	.word	0x08016cf8
 80028e8:	20000ed2 	.word	0x20000ed2
 80028ec:	20000ed8 	.word	0x20000ed8
 80028f0:	20000ef8 	.word	0x20000ef8
 80028f4:	20000e50 	.word	0x20000e50
 80028f8:	20000ed0 	.word	0x20000ed0
 80028fc:	20000ed3 	.word	0x20000ed3
 8002900:	20000ecc 	.word	0x20000ecc
 8002904:	20000f18 	.word	0x20000f18
 8002908:	20000f1c 	.word	0x20000f1c
 800290c:	2000003c 	.word	0x2000003c
 8002910:	10624dd3 	.word	0x10624dd3
 8002914:	cccccccd 	.word	0xcccccccd
 8002918:	08016d08 	.word	0x08016d08
 800291c:	ffff0000 	.word	0xffff0000
 8002920:	20000ed4 	.word	0x20000ed4
 8002924:	ffb4347f 	.word	0xffb4347f
 8002928:	ff1b9e00 	.word	0xff1b9e00
			case 2:
				if((DepartX+deltaX >= 340) && (DepartX+deltaX <= 400) && (DepartY+deltaY >= 230)){
 800292c:	2328      	movs	r3, #40	@ 0x28
 800292e:	461a      	mov	r2, r3
 8002930:	4bc6      	ldr	r3, [pc, #792]	@ (8002c4c <funcAffichageBackground+0x7ac>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4413      	add	r3, r2
 8002936:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800293a:	f2c0 80ca 	blt.w	8002ad2 <funcAffichageBackground+0x632>
 800293e:	2328      	movs	r3, #40	@ 0x28
 8002940:	461a      	mov	r2, r3
 8002942:	4bc2      	ldr	r3, [pc, #776]	@ (8002c4c <funcAffichageBackground+0x7ac>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4413      	add	r3, r2
 8002948:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800294c:	f300 80c1 	bgt.w	8002ad2 <funcAffichageBackground+0x632>
 8002950:	23a0      	movs	r3, #160	@ 0xa0
 8002952:	461a      	mov	r2, r3
 8002954:	4bbe      	ldr	r3, [pc, #760]	@ (8002c50 <funcAffichageBackground+0x7b0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4413      	add	r3, r2
 800295a:	2be5      	cmp	r3, #229	@ 0xe5
 800295c:	f340 80b9 	ble.w	8002ad2 <funcAffichageBackground+0x632>
					/* On affiche la piste */
					BSP_LCD_SelectLayer(0);
 8002960:	2000      	movs	r0, #0
 8002962:	f001 fadb 	bl	8003f1c <BSP_LCD_SelectLayer>

					BSP_LCD_DrawBitmap(0, 0, (uint8_t*)nomCircuits[0]);
 8002966:	4bbb      	ldr	r3, [pc, #748]	@ (8002c54 <funcAffichageBackground+0x7b4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	2100      	movs	r1, #0
 800296e:	2000      	movs	r0, #0
 8002970:	f001 fd92 	bl	8004498 <BSP_LCD_DrawBitmap>

					BSP_LCD_SelectLayer(1);
 8002974:	2001      	movs	r0, #1
 8002976:	f001 fad1 	bl	8003f1c <BSP_LCD_SelectLayer>
					BSP_LCD_SetTextColor(LCD_COLOR_TRANSPARENT);
 800297a:	2000      	movs	r0, #0
 800297c:	f001 faf0 	bl	8003f60 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0, 0, 480, 272);
 8002980:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002984:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002988:	2100      	movs	r1, #0
 800298a:	2000      	movs	r0, #0
 800298c:	f001 fe36 	bl	80045fc <BSP_LCD_FillRect>


					deltaY = -140; //On remet la voiture en haut
 8002990:	4baf      	ldr	r3, [pc, #700]	@ (8002c50 <funcAffichageBackground+0x7b0>)
 8002992:	f06f 028b 	mvn.w	r2, #139	@ 0x8b
 8002996:	601a      	str	r2, [r3, #0]
					numeroPiste=3;
 8002998:	2303      	movs	r3, #3
 800299a:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5
				}
				break;
 800299e:	e098      	b.n	8002ad2 <funcAffichageBackground+0x632>
			case 3:
				if((DepartX+deltaX <= 16) && (DepartY+deltaY <= 180) && ((DepartY+deltaY >= 120))){
 80029a0:	2328      	movs	r3, #40	@ 0x28
 80029a2:	461a      	mov	r2, r3
 80029a4:	4ba9      	ldr	r3, [pc, #676]	@ (8002c4c <funcAffichageBackground+0x7ac>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4413      	add	r3, r2
 80029aa:	2b10      	cmp	r3, #16
 80029ac:	f300 8093 	bgt.w	8002ad6 <funcAffichageBackground+0x636>
 80029b0:	23a0      	movs	r3, #160	@ 0xa0
 80029b2:	461a      	mov	r2, r3
 80029b4:	4ba6      	ldr	r3, [pc, #664]	@ (8002c50 <funcAffichageBackground+0x7b0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4413      	add	r3, r2
 80029ba:	2bb4      	cmp	r3, #180	@ 0xb4
 80029bc:	f300 808b 	bgt.w	8002ad6 <funcAffichageBackground+0x636>
 80029c0:	23a0      	movs	r3, #160	@ 0xa0
 80029c2:	461a      	mov	r2, r3
 80029c4:	4ba2      	ldr	r3, [pc, #648]	@ (8002c50 <funcAffichageBackground+0x7b0>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4413      	add	r3, r2
 80029ca:	2b77      	cmp	r3, #119	@ 0x77
 80029cc:	f340 8083 	ble.w	8002ad6 <funcAffichageBackground+0x636>
					/* On affiche la piste */
					BSP_LCD_SelectLayer(0);
 80029d0:	2000      	movs	r0, #0
 80029d2:	f001 faa3 	bl	8003f1c <BSP_LCD_SelectLayer>

					BSP_LCD_DrawBitmap(0, 0, (uint8_t*)nomCircuits[1]);
 80029d6:	4b9f      	ldr	r3, [pc, #636]	@ (8002c54 <funcAffichageBackground+0x7b4>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	461a      	mov	r2, r3
 80029dc:	2100      	movs	r1, #0
 80029de:	2000      	movs	r0, #0
 80029e0:	f001 fd5a 	bl	8004498 <BSP_LCD_DrawBitmap>

					BSP_LCD_SelectLayer(1);
 80029e4:	2001      	movs	r0, #1
 80029e6:	f001 fa99 	bl	8003f1c <BSP_LCD_SelectLayer>
					BSP_LCD_SetTextColor(LCD_COLOR_TRANSPARENT);
 80029ea:	2000      	movs	r0, #0
 80029ec:	f001 fab8 	bl	8003f60 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0, 0, 480, 272);
 80029f0:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80029f4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80029f8:	2100      	movs	r1, #0
 80029fa:	2000      	movs	r0, #0
 80029fc:	f001 fdfe 	bl	80045fc <BSP_LCD_FillRect>

					deltaX = 380;
 8002a00:	4b92      	ldr	r3, [pc, #584]	@ (8002c4c <funcAffichageBackground+0x7ac>)
 8002a02:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8002a06:	601a      	str	r2, [r3, #0]
					numeroPiste=4;
 8002a08:	2304      	movs	r3, #4
 8002a0a:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5
				}
				break;
 8002a0e:	e062      	b.n	8002ad6 <funcAffichageBackground+0x636>
			case 4:
				if((DepartX+deltaX >= 16) && (DepartX+deltaX <= 80) && ((DepartY+deltaY <= 16))){
 8002a10:	2328      	movs	r3, #40	@ 0x28
 8002a12:	461a      	mov	r2, r3
 8002a14:	4b8d      	ldr	r3, [pc, #564]	@ (8002c4c <funcAffichageBackground+0x7ac>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4413      	add	r3, r2
 8002a1a:	2b0f      	cmp	r3, #15
 8002a1c:	dd5d      	ble.n	8002ada <funcAffichageBackground+0x63a>
 8002a1e:	2328      	movs	r3, #40	@ 0x28
 8002a20:	461a      	mov	r2, r3
 8002a22:	4b8a      	ldr	r3, [pc, #552]	@ (8002c4c <funcAffichageBackground+0x7ac>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4413      	add	r3, r2
 8002a28:	2b50      	cmp	r3, #80	@ 0x50
 8002a2a:	dc56      	bgt.n	8002ada <funcAffichageBackground+0x63a>
 8002a2c:	23a0      	movs	r3, #160	@ 0xa0
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4b87      	ldr	r3, [pc, #540]	@ (8002c50 <funcAffichageBackground+0x7b0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4413      	add	r3, r2
 8002a36:	2b10      	cmp	r3, #16
 8002a38:	dc4f      	bgt.n	8002ada <funcAffichageBackground+0x63a>
					/* On affiche la piste */
					BSP_LCD_SelectLayer(0);
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f001 fa6e 	bl	8003f1c <BSP_LCD_SelectLayer>

					BSP_LCD_DrawBitmap(0, 0, (uint8_t*)men_bmp);
 8002a40:	4a85      	ldr	r2, [pc, #532]	@ (8002c58 <funcAffichageBackground+0x7b8>)
 8002a42:	2100      	movs	r1, #0
 8002a44:	2000      	movs	r0, #0
 8002a46:	f001 fd27 	bl	8004498 <BSP_LCD_DrawBitmap>



					BSP_LCD_SelectLayer(1);
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	f001 fa66 	bl	8003f1c <BSP_LCD_SelectLayer>
					BSP_LCD_SetTextColor(LCD_COLOR_TRANSPARENT);
 8002a50:	2000      	movs	r0, #0
 8002a52:	f001 fa85 	bl	8003f60 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0, 0, 480, 272);
 8002a56:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002a5a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002a5e:	2100      	movs	r1, #0
 8002a60:	2000      	movs	r0, #0
 8002a62:	f001 fdcb 	bl	80045fc <BSP_LCD_FillRect>


					deltaY = 100; //On remet la voiture en bas
 8002a66:	4b7a      	ldr	r3, [pc, #488]	@ (8002c50 <funcAffichageBackground+0x7b0>)
 8002a68:	2264      	movs	r2, #100	@ 0x64
 8002a6a:	601a      	str	r2, [r3, #0]
					numeroPiste = 1;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5
					fini = 1;
 8002a72:	2301      	movs	r3, #1
 8002a74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
					start = 0;
 8002a78:	4b78      	ldr	r3, [pc, #480]	@ (8002c5c <funcAffichageBackground+0x7bc>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	701a      	strb	r2, [r3, #0]

					// Enregistrement du score
					tempsEcoule = tempsEcoule + penaliteTemps*10;
 8002a7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a90:	4413      	add	r3, r2
 8002a92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
					char scoreBuffer[64];
					sprintf(scoreBuffer, "Score: %lu:%02lu\n", tempsEcoule / 1000, (tempsEcoule % 1000) / 10);
 8002a96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a9a:	4a71      	ldr	r2, [pc, #452]	@ (8002c60 <funcAffichageBackground+0x7c0>)
 8002a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa0:	0999      	lsrs	r1, r3, #6
 8002aa2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002aa6:	4b6e      	ldr	r3, [pc, #440]	@ (8002c60 <funcAffichageBackground+0x7c0>)
 8002aa8:	fba3 0302 	umull	r0, r3, r3, r2
 8002aac:	099b      	lsrs	r3, r3, #6
 8002aae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ab2:	fb00 f303 	mul.w	r3, r0, r3
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	4a6a      	ldr	r2, [pc, #424]	@ (8002c64 <funcAffichageBackground+0x7c4>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	08db      	lsrs	r3, r3, #3
 8002ac0:	f107 0008 	add.w	r0, r7, #8
 8002ac4:	460a      	mov	r2, r1
 8002ac6:	4968      	ldr	r1, [pc, #416]	@ (8002c68 <funcAffichageBackground+0x7c8>)
 8002ac8:	f013 fc1a 	bl	8016300 <siprintf>
					//	f_sync(&SDFile);
					// Fermer le fichier
					//	f_close(&SDFile);

				}
				break;
 8002acc:	e005      	b.n	8002ada <funcAffichageBackground+0x63a>
				break;
 8002ace:	bf00      	nop
 8002ad0:	e004      	b.n	8002adc <funcAffichageBackground+0x63c>
				break;
 8002ad2:	bf00      	nop
 8002ad4:	e002      	b.n	8002adc <funcAffichageBackground+0x63c>
				break;
 8002ad6:	bf00      	nop
 8002ad8:	e000      	b.n	8002adc <funcAffichageBackground+0x63c>
				break;
 8002ada:	bf00      	nop
			}

			if (xQueueReceive(uartReceiverQueueHandle, &commande, 0) == pdPASS) { //Si on reçoit l'heure, 0 car attente non bloquante !
 8002adc:	4b63      	ldr	r3, [pc, #396]	@ (8002c6c <funcAffichageBackground+0x7cc>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f107 016b 	add.w	r1, r7, #107	@ 0x6b
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f011 f93e 	bl	8013d68 <xQueueReceive>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d17b      	bne.n	8002bea <funcAffichageBackground+0x74a>

				switch(commande){
 8002af2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8002af6:	3b4c      	subs	r3, #76	@ 0x4c
 8002af8:	2b0c      	cmp	r3, #12
 8002afa:	d868      	bhi.n	8002bce <funcAffichageBackground+0x72e>
 8002afc:	a201      	add	r2, pc, #4	@ (adr r2, 8002b04 <funcAffichageBackground+0x664>)
 8002afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b02:	bf00      	nop
 8002b04:	08002b39 	.word	0x08002b39
 8002b08:	08002bcf 	.word	0x08002bcf
 8002b0c:	08002bcf 	.word	0x08002bcf
 8002b10:	08002bcf 	.word	0x08002bcf
 8002b14:	08002bcf 	.word	0x08002bcf
 8002b18:	08002bcf 	.word	0x08002bcf
 8002b1c:	08002b65 	.word	0x08002b65
 8002b20:	08002bcf 	.word	0x08002bcf
 8002b24:	08002b91 	.word	0x08002b91
 8002b28:	08002bcf 	.word	0x08002bcf
 8002b2c:	08002bcf 	.word	0x08002bcf
 8002b30:	08002bcf 	.word	0x08002bcf
 8002b34:	08002ba9 	.word	0x08002ba9
				case 'L':
					if(vitesse || deblocage){//Si la voiture roule ou si elle roule pas mais est arrêtée car sur une bordure de la map
 8002b38:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d103      	bne.n	8002b48 <funcAffichageBackground+0x6a8>
 8002b40:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d03b      	beq.n	8002bc0 <funcAffichageBackground+0x720>
						if(cpt == 0) cpt = 7;
 8002b48:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d103      	bne.n	8002b58 <funcAffichageBackground+0x6b8>
 8002b50:	2307      	movs	r3, #7
 8002b52:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
						else cpt--; //Permet de gérer l'angle d'inclinaison de l'image affichée de la ferrari
					}
					break;
 8002b56:	e033      	b.n	8002bc0 <funcAffichageBackground+0x720>
						else cpt--; //Permet de gérer l'angle d'inclinaison de l'image affichée de la ferrari
 8002b58:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
					break;
 8002b62:	e02d      	b.n	8002bc0 <funcAffichageBackground+0x720>

				case 'R':
					if(vitesse || deblocage){//Si la voiture roule
 8002b64:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d103      	bne.n	8002b74 <funcAffichageBackground+0x6d4>
 8002b6c:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d027      	beq.n	8002bc4 <funcAffichageBackground+0x724>
						if(cpt == 7) cpt = 0;
 8002b74:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 8002b78:	2b07      	cmp	r3, #7
 8002b7a:	d103      	bne.n	8002b84 <funcAffichageBackground+0x6e4>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
						else cpt++;
					}
					break;
 8002b82:	e01f      	b.n	8002bc4 <funcAffichageBackground+0x724>
						else cpt++;
 8002b84:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 8002b88:	3301      	adds	r3, #1
 8002b8a:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
					break;
 8002b8e:	e019      	b.n	8002bc4 <funcAffichageBackground+0x724>
				case 'T':
					//	if((DepartX+deltaX <= 480) && (DepartX+deltaX >=0) && (DepartY+deltaY <= 0) && (DepartY+deltaY >= 272)){ //Si la voiture n'est pas dans une frontiere de l'image
					if(vitesse < 4) vitesse++;
 8002b90:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	dc17      	bgt.n	8002bc8 <funcAffichageBackground+0x728>
 8002b98:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
					//	deblocage = 0;
					//	}
					//else deblocage = 1;

					break;
 8002ba6:	e00f      	b.n	8002bc8 <funcAffichageBackground+0x728>

				case 'X':
					if(vitesse > -1) vitesse--;
 8002ba8:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	db0d      	blt.n	8002bcc <funcAffichageBackground+0x72c>
 8002bb0:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
					break;
 8002bbe:	e005      	b.n	8002bcc <funcAffichageBackground+0x72c>
					break;
 8002bc0:	bf00      	nop
 8002bc2:	e004      	b.n	8002bce <funcAffichageBackground+0x72e>
					break;
 8002bc4:	bf00      	nop
 8002bc6:	e002      	b.n	8002bce <funcAffichageBackground+0x72e>
					break;
 8002bc8:	bf00      	nop
 8002bca:	e000      	b.n	8002bce <funcAffichageBackground+0x72e>
					break;
 8002bcc:	bf00      	nop

				}


				if (cpt%2 !=0) largeurVoiture = 65;
 8002bce:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <funcAffichageBackground+0x744>
 8002bdc:	2341      	movs	r3, #65	@ 0x41
 8002bde:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
 8002be2:	e002      	b.n	8002bea <funcAffichageBackground+0x74a>
				else largeurVoiture = 26;
 8002be4:	231a      	movs	r3, #26
 8002be6:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad

			}

			//Si l'utilisateur avance
			if(vitesse)
 8002bea:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8248 	beq.w	8003084 <funcAffichageBackground+0xbe4>
			{


				//if(joystick_h > 3000){//Si il va a gauche
				if(cptOld != cpt){ //Si la voiture change de direction
 8002bf4:	f897 20c9 	ldrb.w	r2, [r7, #201]	@ 0xc9
 8002bf8:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d00d      	beq.n	8002c1c <funcAffichageBackground+0x77c>
					BSP_LCD_SelectLayer(1);
 8002c00:	2001      	movs	r0, #1
 8002c02:	f001 f98b 	bl	8003f1c <BSP_LCD_SelectLayer>
					BSP_LCD_SetTextColor(LCD_COLOR_TRANSPARENT);
 8002c06:	2000      	movs	r0, #0
 8002c08:	f001 f9aa 	bl	8003f60 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0, 0, 480, 272);
 8002c0c:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002c10:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002c14:	2100      	movs	r1, #0
 8002c16:	2000      	movs	r0, #0
 8002c18:	f001 fcf0 	bl	80045fc <BSP_LCD_FillRect>
				}

				switch(cpt){
 8002c1c:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 8002c20:	2b07      	cmp	r3, #7
 8002c22:	f200 822f 	bhi.w	8003084 <funcAffichageBackground+0xbe4>
 8002c26:	a201      	add	r2, pc, #4	@ (adr r2, 8002c2c <funcAffichageBackground+0x78c>)
 8002c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2c:	08002c71 	.word	0x08002c71
 8002c30:	08002c95 	.word	0x08002c95
 8002c34:	08002d65 	.word	0x08002d65
 8002c38:	08002d89 	.word	0x08002d89
 8002c3c:	08002e57 	.word	0x08002e57
 8002c40:	08002e7b 	.word	0x08002e7b
 8002c44:	08002f49 	.word	0x08002f49
 8002c48:	08002f85 	.word	0x08002f85
 8002c4c:	20000f18 	.word	0x20000f18
 8002c50:	20000f1c 	.word	0x20000f1c
 8002c54:	2000005c 	.word	0x2000005c
 8002c58:	08019438 	.word	0x08019438
 8002c5c:	20000ed3 	.word	0x20000ed3
 8002c60:	10624dd3 	.word	0x10624dd3
 8002c64:	cccccccd 	.word	0xcccccccd
 8002c68:	08016d30 	.word	0x08016d30
 8002c6c:	20000e54 	.word	0x20000e54
				case 0:
					deltaX = deltaX;
 8002c70:	4bc1      	ldr	r3, [pc, #772]	@ (8002f78 <funcAffichageBackground+0xad8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4ac0      	ldr	r2, [pc, #768]	@ (8002f78 <funcAffichageBackground+0xad8>)
 8002c76:	6013      	str	r3, [r2, #0]
					deltaY = deltaY - vitesse;
 8002c78:	4bc0      	ldr	r3, [pc, #768]	@ (8002f7c <funcAffichageBackground+0xadc>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	4abe      	ldr	r2, [pc, #760]	@ (8002f7c <funcAffichageBackground+0xadc>)
 8002c84:	6013      	str	r3, [r2, #0]

					decalageVerifPenaliteY = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
					decalageVerifPenaliteX = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
					break;
 8002c92:	e1de      	b.n	8003052 <funcAffichageBackground+0xbb2>
				case 1:
					deltaX = deltaX + (vitesse/abs(vitesse))*(short)(0.65*abs(vitesse)+0.5);
 8002c94:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002c98:	f9b7 20c6 	ldrsh.w	r2, [r7, #198]	@ 0xc6
 8002c9c:	2a00      	cmp	r2, #0
 8002c9e:	bfb8      	it	lt
 8002ca0:	4252      	neglt	r2, r2
 8002ca2:	b292      	uxth	r2, r2
 8002ca4:	fb93 f4f2 	sdiv	r4, r3, r2
 8002ca8:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bfb8      	it	lt
 8002cb0:	425b      	neglt	r3, r3
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fd fd77 	bl	80007a8 <__aeabi_i2d>
 8002cba:	a3ad      	add	r3, pc, #692	@ (adr r3, 8002f70 <funcAffichageBackground+0xad0>)
 8002cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc0:	f7fd faf6 	bl	80002b0 <__aeabi_dmul>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	4bab      	ldr	r3, [pc, #684]	@ (8002f80 <funcAffichageBackground+0xae0>)
 8002cd2:	f7fd fc1d 	bl	8000510 <__adddf3>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f7fd fdcd 	bl	800087c <__aeabi_d2iz>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	b21b      	sxth	r3, r3
 8002ce6:	fb03 f204 	mul.w	r2, r3, r4
 8002cea:	4ba3      	ldr	r3, [pc, #652]	@ (8002f78 <funcAffichageBackground+0xad8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4413      	add	r3, r2
 8002cf0:	4aa1      	ldr	r2, [pc, #644]	@ (8002f78 <funcAffichageBackground+0xad8>)
 8002cf2:	6013      	str	r3, [r2, #0]
					deltaY = deltaY - (vitesse/abs(vitesse))*(short)(0.65*abs(vitesse)+0.5);
 8002cf4:	4ba1      	ldr	r3, [pc, #644]	@ (8002f7c <funcAffichageBackground+0xadc>)
 8002cf6:	681c      	ldr	r4, [r3, #0]
 8002cf8:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002cfc:	f9b7 20c6 	ldrsh.w	r2, [r7, #198]	@ 0xc6
 8002d00:	2a00      	cmp	r2, #0
 8002d02:	bfb8      	it	lt
 8002d04:	4252      	neglt	r2, r2
 8002d06:	b292      	uxth	r2, r2
 8002d08:	fb93 f5f2 	sdiv	r5, r3, r2
 8002d0c:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bfb8      	it	lt
 8002d14:	425b      	neglt	r3, r3
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd fd45 	bl	80007a8 <__aeabi_i2d>
 8002d1e:	a394      	add	r3, pc, #592	@ (adr r3, 8002f70 <funcAffichageBackground+0xad0>)
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	f7fd fac4 	bl	80002b0 <__aeabi_dmul>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	4619      	mov	r1, r3
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	4b92      	ldr	r3, [pc, #584]	@ (8002f80 <funcAffichageBackground+0xae0>)
 8002d36:	f7fd fbeb 	bl	8000510 <__adddf3>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4610      	mov	r0, r2
 8002d40:	4619      	mov	r1, r3
 8002d42:	f7fd fd9b 	bl	800087c <__aeabi_d2iz>
 8002d46:	4603      	mov	r3, r0
 8002d48:	b21b      	sxth	r3, r3
 8002d4a:	fb05 f303 	mul.w	r3, r5, r3
 8002d4e:	1ae3      	subs	r3, r4, r3
 8002d50:	4a8a      	ldr	r2, [pc, #552]	@ (8002f7c <funcAffichageBackground+0xadc>)
 8002d52:	6013      	str	r3, [r2, #0]

					decalageVerifPenaliteY = -5;
 8002d54:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 8002d58:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
					decalageVerifPenaliteX = 50;
 8002d5c:	2332      	movs	r3, #50	@ 0x32
 8002d5e:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
					break;
 8002d62:	e176      	b.n	8003052 <funcAffichageBackground+0xbb2>

				case 2:
					deltaX = deltaX + vitesse;
 8002d64:	f9b7 20c6 	ldrsh.w	r2, [r7, #198]	@ 0xc6
 8002d68:	4b83      	ldr	r3, [pc, #524]	@ (8002f78 <funcAffichageBackground+0xad8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	4a82      	ldr	r2, [pc, #520]	@ (8002f78 <funcAffichageBackground+0xad8>)
 8002d70:	6013      	str	r3, [r2, #0]
					deltaY = deltaY;
 8002d72:	4b82      	ldr	r3, [pc, #520]	@ (8002f7c <funcAffichageBackground+0xadc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a81      	ldr	r2, [pc, #516]	@ (8002f7c <funcAffichageBackground+0xadc>)
 8002d78:	6013      	str	r3, [r2, #0]

					decalageVerifPenaliteY = 17;
 8002d7a:	2311      	movs	r3, #17
 8002d7c:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
					decalageVerifPenaliteX = 52;
 8002d80:	2334      	movs	r3, #52	@ 0x34
 8002d82:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
					break;
 8002d86:	e164      	b.n	8003052 <funcAffichageBackground+0xbb2>
				case 3:
					deltaX = deltaX + (vitesse/abs(vitesse))*(short)(0.65*abs(vitesse)+0.5);
 8002d88:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002d8c:	f9b7 20c6 	ldrsh.w	r2, [r7, #198]	@ 0xc6
 8002d90:	2a00      	cmp	r2, #0
 8002d92:	bfb8      	it	lt
 8002d94:	4252      	neglt	r2, r2
 8002d96:	b292      	uxth	r2, r2
 8002d98:	fb93 f4f2 	sdiv	r4, r3, r2
 8002d9c:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bfb8      	it	lt
 8002da4:	425b      	neglt	r3, r3
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fd fcfd 	bl	80007a8 <__aeabi_i2d>
 8002dae:	a370      	add	r3, pc, #448	@ (adr r3, 8002f70 <funcAffichageBackground+0xad0>)
 8002db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db4:	f7fd fa7c 	bl	80002b0 <__aeabi_dmul>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	4b6e      	ldr	r3, [pc, #440]	@ (8002f80 <funcAffichageBackground+0xae0>)
 8002dc6:	f7fd fba3 	bl	8000510 <__adddf3>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4610      	mov	r0, r2
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f7fd fd53 	bl	800087c <__aeabi_d2iz>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	b21b      	sxth	r3, r3
 8002dda:	fb03 f204 	mul.w	r2, r3, r4
 8002dde:	4b66      	ldr	r3, [pc, #408]	@ (8002f78 <funcAffichageBackground+0xad8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4413      	add	r3, r2
 8002de4:	4a64      	ldr	r2, [pc, #400]	@ (8002f78 <funcAffichageBackground+0xad8>)
 8002de6:	6013      	str	r3, [r2, #0]
					deltaY = deltaY +(vitesse/abs(vitesse))*(short)(0.65*abs(vitesse)+0.5);
 8002de8:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002dec:	f9b7 20c6 	ldrsh.w	r2, [r7, #198]	@ 0xc6
 8002df0:	2a00      	cmp	r2, #0
 8002df2:	bfb8      	it	lt
 8002df4:	4252      	neglt	r2, r2
 8002df6:	b292      	uxth	r2, r2
 8002df8:	fb93 f4f2 	sdiv	r4, r3, r2
 8002dfc:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bfb8      	it	lt
 8002e04:	425b      	neglt	r3, r3
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fd fccd 	bl	80007a8 <__aeabi_i2d>
 8002e0e:	a358      	add	r3, pc, #352	@ (adr r3, 8002f70 <funcAffichageBackground+0xad0>)
 8002e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e14:	f7fd fa4c 	bl	80002b0 <__aeabi_dmul>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	4b56      	ldr	r3, [pc, #344]	@ (8002f80 <funcAffichageBackground+0xae0>)
 8002e26:	f7fd fb73 	bl	8000510 <__adddf3>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4610      	mov	r0, r2
 8002e30:	4619      	mov	r1, r3
 8002e32:	f7fd fd23 	bl	800087c <__aeabi_d2iz>
 8002e36:	4603      	mov	r3, r0
 8002e38:	b21b      	sxth	r3, r3
 8002e3a:	fb03 f204 	mul.w	r2, r3, r4
 8002e3e:	4b4f      	ldr	r3, [pc, #316]	@ (8002f7c <funcAffichageBackground+0xadc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4413      	add	r3, r2
 8002e44:	4a4d      	ldr	r2, [pc, #308]	@ (8002f7c <funcAffichageBackground+0xadc>)
 8002e46:	6013      	str	r3, [r2, #0]

					decalageVerifPenaliteY = 30;
 8002e48:	231e      	movs	r3, #30
 8002e4a:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
					decalageVerifPenaliteX = 30;
 8002e4e:	231e      	movs	r3, #30
 8002e50:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
					break;
 8002e54:	e0fd      	b.n	8003052 <funcAffichageBackground+0xbb2>
				case 4:
					deltaX = deltaX;
 8002e56:	4b48      	ldr	r3, [pc, #288]	@ (8002f78 <funcAffichageBackground+0xad8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a47      	ldr	r2, [pc, #284]	@ (8002f78 <funcAffichageBackground+0xad8>)
 8002e5c:	6013      	str	r3, [r2, #0]
					deltaY = deltaY + vitesse;
 8002e5e:	f9b7 20c6 	ldrsh.w	r2, [r7, #198]	@ 0xc6
 8002e62:	4b46      	ldr	r3, [pc, #280]	@ (8002f7c <funcAffichageBackground+0xadc>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4413      	add	r3, r2
 8002e68:	4a44      	ldr	r2, [pc, #272]	@ (8002f7c <funcAffichageBackground+0xadc>)
 8002e6a:	6013      	str	r3, [r2, #0]

					decalageVerifPenaliteY = 35;
 8002e6c:	2323      	movs	r3, #35	@ 0x23
 8002e6e:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
					decalageVerifPenaliteX = 20;
 8002e72:	2314      	movs	r3, #20
 8002e74:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
					break;
 8002e78:	e0eb      	b.n	8003052 <funcAffichageBackground+0xbb2>
				case 5:
					deltaX = deltaX - (vitesse/abs(vitesse))*(short)(0.65*abs(vitesse)+0.5);
 8002e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8002f78 <funcAffichageBackground+0xad8>)
 8002e7c:	681c      	ldr	r4, [r3, #0]
 8002e7e:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002e82:	f9b7 20c6 	ldrsh.w	r2, [r7, #198]	@ 0xc6
 8002e86:	2a00      	cmp	r2, #0
 8002e88:	bfb8      	it	lt
 8002e8a:	4252      	neglt	r2, r2
 8002e8c:	b292      	uxth	r2, r2
 8002e8e:	fb93 f5f2 	sdiv	r5, r3, r2
 8002e92:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	bfb8      	it	lt
 8002e9a:	425b      	neglt	r3, r3
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fd fc82 	bl	80007a8 <__aeabi_i2d>
 8002ea4:	a332      	add	r3, pc, #200	@ (adr r3, 8002f70 <funcAffichageBackground+0xad0>)
 8002ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eaa:	f7fd fa01 	bl	80002b0 <__aeabi_dmul>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	4b31      	ldr	r3, [pc, #196]	@ (8002f80 <funcAffichageBackground+0xae0>)
 8002ebc:	f7fd fb28 	bl	8000510 <__adddf3>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f7fd fcd8 	bl	800087c <__aeabi_d2iz>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	b21b      	sxth	r3, r3
 8002ed0:	fb05 f303 	mul.w	r3, r5, r3
 8002ed4:	1ae3      	subs	r3, r4, r3
 8002ed6:	4a28      	ldr	r2, [pc, #160]	@ (8002f78 <funcAffichageBackground+0xad8>)
 8002ed8:	6013      	str	r3, [r2, #0]
					deltaY = deltaY +(vitesse/abs(vitesse))*(short)(0.65*abs(vitesse)+0.5);
 8002eda:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002ede:	f9b7 20c6 	ldrsh.w	r2, [r7, #198]	@ 0xc6
 8002ee2:	2a00      	cmp	r2, #0
 8002ee4:	bfb8      	it	lt
 8002ee6:	4252      	neglt	r2, r2
 8002ee8:	b292      	uxth	r2, r2
 8002eea:	fb93 f4f2 	sdiv	r4, r3, r2
 8002eee:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	bfb8      	it	lt
 8002ef6:	425b      	neglt	r3, r3
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fd fc54 	bl	80007a8 <__aeabi_i2d>
 8002f00:	a31b      	add	r3, pc, #108	@ (adr r3, 8002f70 <funcAffichageBackground+0xad0>)
 8002f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f06:	f7fd f9d3 	bl	80002b0 <__aeabi_dmul>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4610      	mov	r0, r2
 8002f10:	4619      	mov	r1, r3
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	4b1a      	ldr	r3, [pc, #104]	@ (8002f80 <funcAffichageBackground+0xae0>)
 8002f18:	f7fd fafa 	bl	8000510 <__adddf3>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4610      	mov	r0, r2
 8002f22:	4619      	mov	r1, r3
 8002f24:	f7fd fcaa 	bl	800087c <__aeabi_d2iz>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	b21b      	sxth	r3, r3
 8002f2c:	fb03 f204 	mul.w	r2, r3, r4
 8002f30:	4b12      	ldr	r3, [pc, #72]	@ (8002f7c <funcAffichageBackground+0xadc>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4413      	add	r3, r2
 8002f36:	4a11      	ldr	r2, [pc, #68]	@ (8002f7c <funcAffichageBackground+0xadc>)
 8002f38:	6013      	str	r3, [r2, #0]

					decalageVerifPenaliteY = 50;
 8002f3a:	2332      	movs	r3, #50	@ 0x32
 8002f3c:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
					decalageVerifPenaliteX = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
					break;
 8002f46:	e084      	b.n	8003052 <funcAffichageBackground+0xbb2>
				case 6:
					deltaX = deltaX - vitesse;
 8002f48:	4b0b      	ldr	r3, [pc, #44]	@ (8002f78 <funcAffichageBackground+0xad8>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	4a09      	ldr	r2, [pc, #36]	@ (8002f78 <funcAffichageBackground+0xad8>)
 8002f54:	6013      	str	r3, [r2, #0]
					deltaY = deltaY;
 8002f56:	4b09      	ldr	r3, [pc, #36]	@ (8002f7c <funcAffichageBackground+0xadc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a08      	ldr	r2, [pc, #32]	@ (8002f7c <funcAffichageBackground+0xadc>)
 8002f5c:	6013      	str	r3, [r2, #0]

					decalageVerifPenaliteY = 35;
 8002f5e:	2323      	movs	r3, #35	@ 0x23
 8002f60:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
					decalageVerifPenaliteX = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
					break;
 8002f6a:	e072      	b.n	8003052 <funcAffichageBackground+0xbb2>
 8002f6c:	f3af 8000 	nop.w
 8002f70:	cccccccd 	.word	0xcccccccd
 8002f74:	3fe4cccc 	.word	0x3fe4cccc
 8002f78:	20000f18 	.word	0x20000f18
 8002f7c:	20000f1c 	.word	0x20000f1c
 8002f80:	3fe00000 	.word	0x3fe00000
				case 7:
					deltaX = deltaX - (vitesse/abs(vitesse))*(short)(0.65*abs(vitesse)+0.5);
 8002f84:	4b46      	ldr	r3, [pc, #280]	@ (80030a0 <funcAffichageBackground+0xc00>)
 8002f86:	681c      	ldr	r4, [r3, #0]
 8002f88:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002f8c:	f9b7 20c6 	ldrsh.w	r2, [r7, #198]	@ 0xc6
 8002f90:	2a00      	cmp	r2, #0
 8002f92:	bfb8      	it	lt
 8002f94:	4252      	neglt	r2, r2
 8002f96:	b292      	uxth	r2, r2
 8002f98:	fb93 f5f2 	sdiv	r5, r3, r2
 8002f9c:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bfb8      	it	lt
 8002fa4:	425b      	neglt	r3, r3
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fd fbfd 	bl	80007a8 <__aeabi_i2d>
 8002fae:	a33a      	add	r3, pc, #232	@ (adr r3, 8003098 <funcAffichageBackground+0xbf8>)
 8002fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb4:	f7fd f97c 	bl	80002b0 <__aeabi_dmul>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	4b37      	ldr	r3, [pc, #220]	@ (80030a4 <funcAffichageBackground+0xc04>)
 8002fc6:	f7fd faa3 	bl	8000510 <__adddf3>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f7fd fc53 	bl	800087c <__aeabi_d2iz>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	b21b      	sxth	r3, r3
 8002fda:	fb05 f303 	mul.w	r3, r5, r3
 8002fde:	1ae3      	subs	r3, r4, r3
 8002fe0:	4a2f      	ldr	r2, [pc, #188]	@ (80030a0 <funcAffichageBackground+0xc00>)
 8002fe2:	6013      	str	r3, [r2, #0]
					deltaY = deltaY -(vitesse/abs(vitesse))*(short)(0.65*abs(vitesse)+0.5);
 8002fe4:	4b30      	ldr	r3, [pc, #192]	@ (80030a8 <funcAffichageBackground+0xc08>)
 8002fe6:	681c      	ldr	r4, [r3, #0]
 8002fe8:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002fec:	f9b7 20c6 	ldrsh.w	r2, [r7, #198]	@ 0xc6
 8002ff0:	2a00      	cmp	r2, #0
 8002ff2:	bfb8      	it	lt
 8002ff4:	4252      	neglt	r2, r2
 8002ff6:	b292      	uxth	r2, r2
 8002ff8:	fb93 f5f2 	sdiv	r5, r3, r2
 8002ffc:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8003000:	2b00      	cmp	r3, #0
 8003002:	bfb8      	it	lt
 8003004:	425b      	neglt	r3, r3
 8003006:	b29b      	uxth	r3, r3
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd fbcd 	bl	80007a8 <__aeabi_i2d>
 800300e:	a322      	add	r3, pc, #136	@ (adr r3, 8003098 <funcAffichageBackground+0xbf8>)
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	f7fd f94c 	bl	80002b0 <__aeabi_dmul>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4610      	mov	r0, r2
 800301e:	4619      	mov	r1, r3
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	4b1f      	ldr	r3, [pc, #124]	@ (80030a4 <funcAffichageBackground+0xc04>)
 8003026:	f7fd fa73 	bl	8000510 <__adddf3>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4610      	mov	r0, r2
 8003030:	4619      	mov	r1, r3
 8003032:	f7fd fc23 	bl	800087c <__aeabi_d2iz>
 8003036:	4603      	mov	r3, r0
 8003038:	b21b      	sxth	r3, r3
 800303a:	fb05 f303 	mul.w	r3, r5, r3
 800303e:	1ae3      	subs	r3, r4, r3
 8003040:	4a19      	ldr	r2, [pc, #100]	@ (80030a8 <funcAffichageBackground+0xc08>)
 8003042:	6013      	str	r3, [r2, #0]

					decalageVerifPenaliteY = 4;
 8003044:	2304      	movs	r3, #4
 8003046:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
					decalageVerifPenaliteX = 4;
 800304a:	2304      	movs	r3, #4
 800304c:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
					break;
 8003050:	bf00      	nop
		if((rxData[0]=='A') || start){//Condition start
 8003052:	e017      	b.n	8003084 <funcAffichageBackground+0xbe4>

			/* Insert a delay of display */
		}
		else{

			BSP_LCD_SelectLayer(1);
 8003054:	2001      	movs	r0, #1
 8003056:	f000 ff61 	bl	8003f1c <BSP_LCD_SelectLayer>
			// Effacer l'ancienne position en rendant la zone transparente
			BSP_LCD_SetTransparency(1, 0); // Rendre la zone complètement transparente
 800305a:	2100      	movs	r1, #0
 800305c:	2001      	movs	r0, #1
 800305e:	f000 ff6d 	bl	8003f3c <BSP_LCD_SetTransparency>

			/* On affiche le menu */
			BSP_LCD_SelectLayer(0);
 8003062:	2000      	movs	r0, #0
 8003064:	f000 ff5a 	bl	8003f1c <BSP_LCD_SelectLayer>
			BSP_LCD_SetTransparency(0, 255);
 8003068:	21ff      	movs	r1, #255	@ 0xff
 800306a:	2000      	movs	r0, #0
 800306c:	f000 ff66 	bl	8003f3c <BSP_LCD_SetTransparency>

			BSP_LCD_DrawBitmap(0, 0, (uint8_t*)men_bmp);
 8003070:	4a0e      	ldr	r2, [pc, #56]	@ (80030ac <funcAffichageBackground+0xc0c>)
 8003072:	2100      	movs	r1, #0
 8003074:	2000      	movs	r0, #0
 8003076:	f001 fa0f 	bl	8004498 <BSP_LCD_DrawBitmap>



			osDelay(500);
 800307a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800307e:	f010 f805 	bl	801308c <osDelay>
 8003082:	e000      	b.n	8003086 <funcAffichageBackground+0xbe6>
		if((rxData[0]=='A') || start){//Condition start
 8003084:	bf00      	nop
		}




		cptOld = cpt;
 8003086:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 800308a:	f887 30c9 	strb.w	r3, [r7, #201]	@ 0xc9
		if((rxData[0]=='A') || start){//Condition start
 800308e:	f7ff baf7 	b.w	8002680 <funcAffichageBackground+0x1e0>
 8003092:	bf00      	nop
 8003094:	f3af 8000 	nop.w
 8003098:	cccccccd 	.word	0xcccccccd
 800309c:	3fe4cccc 	.word	0x3fe4cccc
 80030a0:	20000f18 	.word	0x20000f18
 80030a4:	3fe00000 	.word	0x3fe00000
 80030a8:	20000f1c 	.word	0x20000f1c
 80030ac:	08019438 	.word	0x08019438

080030b0 <startMusiqueFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMusiqueFunc */
void startMusiqueFunc(void const * argument)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
	uint32_t bytesread;

	/* Infinite loop */
	for (;;) {
		// On attend le signal de réveil
		xQueueReceive(musicFlagHandle, &i, portMAX_DELAY);
 80030b8:	4b12      	ldr	r3, [pc, #72]	@ (8003104 <startMusiqueFunc+0x54>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f107 0113 	add.w	r1, r7, #19
 80030c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030c4:	4618      	mov	r0, r3
 80030c6:	f010 fe4f 	bl	8013d68 <xQueueReceive>

		// On arrive ici si la musique est terminée
		if (numBloc++ == nbBlocs - 1) {
 80030ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003108 <startMusiqueFunc+0x58>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	490d      	ldr	r1, [pc, #52]	@ (8003108 <startMusiqueFunc+0x58>)
 80030d2:	600a      	str	r2, [r1, #0]
 80030d4:	4a0d      	ldr	r2, [pc, #52]	@ (800310c <startMusiqueFunc+0x5c>)
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	3a01      	subs	r2, #1
 80030da:	4293      	cmp	r3, r2
 80030dc:	d101      	bne.n	80030e2 <startMusiqueFunc+0x32>
			lanceMusique();
 80030de:	f7fe f95b 	bl	8001398 <lanceMusique>
		}

		// On détermine la position du buffer à remplir
		uint8_t *bufferPosition = (i == 0) ? AUDIO_BUFFER_OUT : (AUDIO_BUFFER_OUT + AUDIO_BLOCK_SIZE);
 80030e2:	7cfb      	ldrb	r3, [r7, #19]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <startMusiqueFunc+0x3c>
 80030e8:	4b09      	ldr	r3, [pc, #36]	@ (8003110 <startMusiqueFunc+0x60>)
 80030ea:	e000      	b.n	80030ee <startMusiqueFunc+0x3e>
 80030ec:	4b09      	ldr	r3, [pc, #36]	@ (8003114 <startMusiqueFunc+0x64>)
 80030ee:	617b      	str	r3, [r7, #20]

		// On lit le bloc de données
		f_read(&SDFile, bufferPosition, AUDIO_BLOCK_SIZE, (void *)&bytesread);
 80030f0:	f107 030c 	add.w	r3, r7, #12
 80030f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030f8:	6979      	ldr	r1, [r7, #20]
 80030fa:	4807      	ldr	r0, [pc, #28]	@ (8003118 <startMusiqueFunc+0x68>)
 80030fc:	f00f f8df 	bl	80122be <f_read>
	for (;;) {
 8003100:	e7da      	b.n	80030b8 <startMusiqueFunc+0x8>
 8003102:	bf00      	nop
 8003104:	20000e58 	.word	0x20000e58
 8003108:	20000e64 	.word	0x20000e64
 800310c:	20000e60 	.word	0x20000e60
 8003110:	c007fc00 	.word	0xc007fc00
 8003114:	c007fe00 	.word	0xc007fe00
 8003118:	20001634 	.word	0x20001634

0800311c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a04      	ldr	r2, [pc, #16]	@ (800313c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d101      	bne.n	8003132 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800312e:	f004 fa7d 	bl	800762c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40001000 	.word	0x40001000

08003140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003144:	b672      	cpsid	i
}
 8003146:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003148:	bf00      	nop
 800314a:	e7fd      	b.n	8003148 <Error_Handler+0x8>

0800314c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08c      	sub	sp, #48	@ 0x30
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a51      	ldr	r2, [pc, #324]	@ (800329c <I2Cx_MspInit+0x150>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d14d      	bne.n	80031f8 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800315c:	4b50      	ldr	r3, [pc, #320]	@ (80032a0 <I2Cx_MspInit+0x154>)
 800315e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003160:	4a4f      	ldr	r2, [pc, #316]	@ (80032a0 <I2Cx_MspInit+0x154>)
 8003162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003166:	6313      	str	r3, [r2, #48]	@ 0x30
 8003168:	4b4d      	ldr	r3, [pc, #308]	@ (80032a0 <I2Cx_MspInit+0x154>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003170:	61bb      	str	r3, [r7, #24]
 8003172:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003174:	2380      	movs	r3, #128	@ 0x80
 8003176:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003178:	2312      	movs	r3, #18
 800317a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800317c:	2300      	movs	r3, #0
 800317e:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003180:	2302      	movs	r3, #2
 8003182:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003184:	2304      	movs	r3, #4
 8003186:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003188:	f107 031c 	add.w	r3, r7, #28
 800318c:	4619      	mov	r1, r3
 800318e:	4845      	ldr	r0, [pc, #276]	@ (80032a4 <I2Cx_MspInit+0x158>)
 8003190:	f005 fd06 	bl	8008ba0 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003194:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003198:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800319a:	f107 031c 	add.w	r3, r7, #28
 800319e:	4619      	mov	r1, r3
 80031a0:	4840      	ldr	r0, [pc, #256]	@ (80032a4 <I2Cx_MspInit+0x158>)
 80031a2:	f005 fcfd 	bl	8008ba0 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80031a6:	4b3e      	ldr	r3, [pc, #248]	@ (80032a0 <I2Cx_MspInit+0x154>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031aa:	4a3d      	ldr	r2, [pc, #244]	@ (80032a0 <I2Cx_MspInit+0x154>)
 80031ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80031b2:	4b3b      	ldr	r3, [pc, #236]	@ (80032a0 <I2Cx_MspInit+0x154>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80031be:	4b38      	ldr	r3, [pc, #224]	@ (80032a0 <I2Cx_MspInit+0x154>)
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	4a37      	ldr	r2, [pc, #220]	@ (80032a0 <I2Cx_MspInit+0x154>)
 80031c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031c8:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80031ca:	4b35      	ldr	r3, [pc, #212]	@ (80032a0 <I2Cx_MspInit+0x154>)
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	4a34      	ldr	r2, [pc, #208]	@ (80032a0 <I2Cx_MspInit+0x154>)
 80031d0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80031d4:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	210f      	movs	r1, #15
 80031da:	2048      	movs	r0, #72	@ 0x48
 80031dc:	f004 fdb6 	bl	8007d4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80031e0:	2048      	movs	r0, #72	@ 0x48
 80031e2:	f004 fdcf 	bl	8007d84 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80031e6:	2200      	movs	r2, #0
 80031e8:	210f      	movs	r1, #15
 80031ea:	2049      	movs	r0, #73	@ 0x49
 80031ec:	f004 fdae 	bl	8007d4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80031f0:	2049      	movs	r0, #73	@ 0x49
 80031f2:	f004 fdc7 	bl	8007d84 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80031f6:	e04d      	b.n	8003294 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80031f8:	4b29      	ldr	r3, [pc, #164]	@ (80032a0 <I2Cx_MspInit+0x154>)
 80031fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fc:	4a28      	ldr	r2, [pc, #160]	@ (80032a0 <I2Cx_MspInit+0x154>)
 80031fe:	f043 0302 	orr.w	r3, r3, #2
 8003202:	6313      	str	r3, [r2, #48]	@ 0x30
 8003204:	4b26      	ldr	r3, [pc, #152]	@ (80032a0 <I2Cx_MspInit+0x154>)
 8003206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003210:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003214:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003216:	2312      	movs	r3, #18
 8003218:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800321a:	2300      	movs	r3, #0
 800321c:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800321e:	2302      	movs	r3, #2
 8003220:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003222:	2304      	movs	r3, #4
 8003224:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003226:	f107 031c 	add.w	r3, r7, #28
 800322a:	4619      	mov	r1, r3
 800322c:	481e      	ldr	r0, [pc, #120]	@ (80032a8 <I2Cx_MspInit+0x15c>)
 800322e:	f005 fcb7 	bl	8008ba0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003232:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003236:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003238:	f107 031c 	add.w	r3, r7, #28
 800323c:	4619      	mov	r1, r3
 800323e:	481a      	ldr	r0, [pc, #104]	@ (80032a8 <I2Cx_MspInit+0x15c>)
 8003240:	f005 fcae 	bl	8008ba0 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003244:	4b16      	ldr	r3, [pc, #88]	@ (80032a0 <I2Cx_MspInit+0x154>)
 8003246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003248:	4a15      	ldr	r2, [pc, #84]	@ (80032a0 <I2Cx_MspInit+0x154>)
 800324a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800324e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003250:	4b13      	ldr	r3, [pc, #76]	@ (80032a0 <I2Cx_MspInit+0x154>)
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800325c:	4b10      	ldr	r3, [pc, #64]	@ (80032a0 <I2Cx_MspInit+0x154>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	4a0f      	ldr	r2, [pc, #60]	@ (80032a0 <I2Cx_MspInit+0x154>)
 8003262:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003266:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003268:	4b0d      	ldr	r3, [pc, #52]	@ (80032a0 <I2Cx_MspInit+0x154>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	4a0c      	ldr	r2, [pc, #48]	@ (80032a0 <I2Cx_MspInit+0x154>)
 800326e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003272:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003274:	2200      	movs	r2, #0
 8003276:	210f      	movs	r1, #15
 8003278:	201f      	movs	r0, #31
 800327a:	f004 fd67 	bl	8007d4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800327e:	201f      	movs	r0, #31
 8003280:	f004 fd80 	bl	8007d84 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003284:	2200      	movs	r2, #0
 8003286:	210f      	movs	r1, #15
 8003288:	2020      	movs	r0, #32
 800328a:	f004 fd5f 	bl	8007d4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800328e:	2020      	movs	r0, #32
 8003290:	f004 fd78 	bl	8007d84 <HAL_NVIC_EnableIRQ>
}
 8003294:	bf00      	nop
 8003296:	3730      	adds	r7, #48	@ 0x30
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20000f20 	.word	0x20000f20
 80032a0:	40023800 	.word	0x40023800
 80032a4:	40021c00 	.word	0x40021c00
 80032a8:	40020400 	.word	0x40020400

080032ac <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f006 fa5f 	bl	8009778 <HAL_I2C_GetState>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d125      	bne.n	800330c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a14      	ldr	r2, [pc, #80]	@ (8003314 <I2Cx_Init+0x68>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d103      	bne.n	80032d0 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a13      	ldr	r2, [pc, #76]	@ (8003318 <I2Cx_Init+0x6c>)
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	e002      	b.n	80032d6 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a12      	ldr	r2, [pc, #72]	@ (800331c <I2Cx_Init+0x70>)
 80032d4:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a11      	ldr	r2, [pc, #68]	@ (8003320 <I2Cx_Init+0x74>)
 80032da:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff ff23 	bl	800314c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f005 ff34 	bl	8009174 <HAL_I2C_Init>
  }
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	20000f20 	.word	0x20000f20
 8003318:	40005c00 	.word	0x40005c00
 800331c:	40005400 	.word	0x40005400
 8003320:	40912732 	.word	0x40912732

08003324 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08a      	sub	sp, #40	@ 0x28
 8003328:	af04      	add	r7, sp, #16
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	4608      	mov	r0, r1
 800332e:	4611      	mov	r1, r2
 8003330:	461a      	mov	r2, r3
 8003332:	4603      	mov	r3, r0
 8003334:	72fb      	strb	r3, [r7, #11]
 8003336:	460b      	mov	r3, r1
 8003338:	813b      	strh	r3, [r7, #8]
 800333a:	4613      	mov	r3, r2
 800333c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003342:	7afb      	ldrb	r3, [r7, #11]
 8003344:	b299      	uxth	r1, r3
 8003346:	88f8      	ldrh	r0, [r7, #6]
 8003348:	893a      	ldrh	r2, [r7, #8]
 800334a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800334e:	9302      	str	r3, [sp, #8]
 8003350:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003352:	9301      	str	r3, [sp, #4]
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	4603      	mov	r3, r0
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f006 f8f2 	bl	8009544 <HAL_I2C_Mem_Read>
 8003360:	4603      	mov	r3, r0
 8003362:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003364:	7dfb      	ldrb	r3, [r7, #23]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d004      	beq.n	8003374 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800336a:	7afb      	ldrb	r3, [r7, #11]
 800336c:	4619      	mov	r1, r3
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f832 	bl	80033d8 <I2Cx_Error>
  }
  return status;    
 8003374:	7dfb      	ldrb	r3, [r7, #23]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b08a      	sub	sp, #40	@ 0x28
 8003382:	af04      	add	r7, sp, #16
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	4608      	mov	r0, r1
 8003388:	4611      	mov	r1, r2
 800338a:	461a      	mov	r2, r3
 800338c:	4603      	mov	r3, r0
 800338e:	72fb      	strb	r3, [r7, #11]
 8003390:	460b      	mov	r3, r1
 8003392:	813b      	strh	r3, [r7, #8]
 8003394:	4613      	mov	r3, r2
 8003396:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003398:	2300      	movs	r3, #0
 800339a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800339c:	7afb      	ldrb	r3, [r7, #11]
 800339e:	b299      	uxth	r1, r3
 80033a0:	88f8      	ldrh	r0, [r7, #6]
 80033a2:	893a      	ldrh	r2, [r7, #8]
 80033a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033a8:	9302      	str	r3, [sp, #8]
 80033aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	4603      	mov	r3, r0
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f005 ffb1 	bl	800931c <HAL_I2C_Mem_Write>
 80033ba:	4603      	mov	r3, r0
 80033bc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80033be:	7dfb      	ldrb	r3, [r7, #23]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d004      	beq.n	80033ce <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80033c4:	7afb      	ldrb	r3, [r7, #11]
 80033c6:	4619      	mov	r1, r3
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f805 	bl	80033d8 <I2Cx_Error>
  }
  return status;
 80033ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f005 ff55 	bl	8009294 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff ff5e 	bl	80032ac <I2Cx_Init>
}
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80033fc:	4802      	ldr	r0, [pc, #8]	@ (8003408 <AUDIO_IO_Init+0x10>)
 80033fe:	f7ff ff55 	bl	80032ac <I2Cx_Init>
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000f20 	.word	0x20000f20

0800340c <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
}
 8003410:	bf00      	nop
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
	...

0800341c <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af02      	add	r7, sp, #8
 8003422:	4603      	mov	r3, r0
 8003424:	71fb      	strb	r3, [r7, #7]
 8003426:	460b      	mov	r3, r1
 8003428:	80bb      	strh	r3, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 800342e:	887b      	ldrh	r3, [r7, #2]
 8003430:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8003432:	89fb      	ldrh	r3, [r7, #14]
 8003434:	0a1b      	lsrs	r3, r3, #8
 8003436:	b29b      	uxth	r3, r3
 8003438:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800343a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800343e:	021b      	lsls	r3, r3, #8
 8003440:	b21a      	sxth	r2, r3
 8003442:	887b      	ldrh	r3, [r7, #2]
 8003444:	b21b      	sxth	r3, r3
 8003446:	4313      	orrs	r3, r2
 8003448:	b21b      	sxth	r3, r3
 800344a:	b29b      	uxth	r3, r3
 800344c:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 800344e:	88ba      	ldrh	r2, [r7, #4]
 8003450:	79f9      	ldrb	r1, [r7, #7]
 8003452:	2302      	movs	r3, #2
 8003454:	9301      	str	r3, [sp, #4]
 8003456:	1cbb      	adds	r3, r7, #2
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	2302      	movs	r3, #2
 800345c:	4803      	ldr	r0, [pc, #12]	@ (800346c <AUDIO_IO_Write+0x50>)
 800345e:	f7ff ff8e 	bl	800337e <I2Cx_WriteMultiple>
}
 8003462:	bf00      	nop
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000f20 	.word	0x20000f20

08003470 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af02      	add	r7, sp, #8
 8003476:	4603      	mov	r3, r0
 8003478:	460a      	mov	r2, r1
 800347a:	71fb      	strb	r3, [r7, #7]
 800347c:	4613      	mov	r3, r2
 800347e:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	81bb      	strh	r3, [r7, #12]
 8003484:	2300      	movs	r3, #0
 8003486:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8003488:	88ba      	ldrh	r2, [r7, #4]
 800348a:	79f9      	ldrb	r1, [r7, #7]
 800348c:	2302      	movs	r3, #2
 800348e:	9301      	str	r3, [sp, #4]
 8003490:	f107 030c 	add.w	r3, r7, #12
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	2302      	movs	r3, #2
 8003498:	480a      	ldr	r0, [pc, #40]	@ (80034c4 <AUDIO_IO_Read+0x54>)
 800349a:	f7ff ff43 	bl	8003324 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 800349e:	89bb      	ldrh	r3, [r7, #12]
 80034a0:	0a1b      	lsrs	r3, r3, #8
 80034a2:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80034a4:	89bb      	ldrh	r3, [r7, #12]
 80034a6:	b21b      	sxth	r3, r3
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	b21a      	sxth	r2, r3
 80034ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	b21b      	sxth	r3, r3
 80034b4:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 80034b6:	89fb      	ldrh	r3, [r7, #14]
 80034b8:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 80034ba:	89bb      	ldrh	r3, [r7, #12]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	20000f20 	.word	0x20000f20

080034c8 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f004 f8cb 	bl	800766c <HAL_Delay>
}
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80034e4:	4802      	ldr	r0, [pc, #8]	@ (80034f0 <TS_IO_Init+0x10>)
 80034e6:	f7ff fee1 	bl	80032ac <I2Cx_Init>
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20000f20 	.word	0x20000f20

080034f4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	4603      	mov	r3, r0
 80034fc:	71fb      	strb	r3, [r7, #7]
 80034fe:	460b      	mov	r3, r1
 8003500:	71bb      	strb	r3, [r7, #6]
 8003502:	4613      	mov	r3, r2
 8003504:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003506:	79bb      	ldrb	r3, [r7, #6]
 8003508:	b29a      	uxth	r2, r3
 800350a:	79f9      	ldrb	r1, [r7, #7]
 800350c:	2301      	movs	r3, #1
 800350e:	9301      	str	r3, [sp, #4]
 8003510:	1d7b      	adds	r3, r7, #5
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	2301      	movs	r3, #1
 8003516:	4803      	ldr	r0, [pc, #12]	@ (8003524 <TS_IO_Write+0x30>)
 8003518:	f7ff ff31 	bl	800337e <I2Cx_WriteMultiple>
}
 800351c:	bf00      	nop
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	20000f20 	.word	0x20000f20

08003528 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af02      	add	r7, sp, #8
 800352e:	4603      	mov	r3, r0
 8003530:	460a      	mov	r2, r1
 8003532:	71fb      	strb	r3, [r7, #7]
 8003534:	4613      	mov	r3, r2
 8003536:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800353c:	79bb      	ldrb	r3, [r7, #6]
 800353e:	b29a      	uxth	r2, r3
 8003540:	79f9      	ldrb	r1, [r7, #7]
 8003542:	2301      	movs	r3, #1
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	f107 030f 	add.w	r3, r7, #15
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	2301      	movs	r3, #1
 800354e:	4804      	ldr	r0, [pc, #16]	@ (8003560 <TS_IO_Read+0x38>)
 8003550:	f7ff fee8 	bl	8003324 <I2Cx_ReadMultiple>

  return read_value;
 8003554:	7bfb      	ldrb	r3, [r7, #15]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000f20 	.word	0x20000f20

08003564 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f004 f87d 	bl	800766c <HAL_Delay>
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <BSP_AUDIO_OUT_Play>:
 * @param  pBuffer: Pointer to the buffer
 * @param  Size: Number of audio data in BYTES unit.
 *         In memory, first element is for left channel, second element is for right channel
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_Play(uint16_t *pBuffer, uint32_t Size) {
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
	/* Call the audio Codec Play function */
	if (audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0) {
 8003586:	4b10      	ldr	r3, [pc, #64]	@ (80035c8 <BSP_AUDIO_OUT_Play+0x4c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	b292      	uxth	r2, r2
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	2034      	movs	r0, #52	@ 0x34
 8003594:	4798      	blx	r3
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <BSP_AUDIO_OUT_Play+0x24>
		return AUDIO_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e00f      	b.n	80035c0 <BSP_AUDIO_OUT_Play+0x44>
	} else {
		/* Update the Media layer and enable it for play */
		HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer,
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035a6:	d203      	bcs.n	80035b0 <BSP_AUDIO_OUT_Play+0x34>
				DMA_MAX(Size / AUDIODATA_SIZE));
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	085b      	lsrs	r3, r3, #1
		HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer,
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	e001      	b.n	80035b4 <BSP_AUDIO_OUT_Play+0x38>
 80035b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035b4:	461a      	mov	r2, r3
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4804      	ldr	r0, [pc, #16]	@ (80035cc <BSP_AUDIO_OUT_Play+0x50>)
 80035ba:	f008 fc3f 	bl	800be3c <HAL_SAI_Transmit_DMA>

		return AUDIO_OK;
 80035be:	2300      	movs	r3, #0
	}
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20000f74 	.word	0x20000f74
 80035cc:	20000f78 	.word	0x20000f78

080035d0 <BSP_AUDIO_OUT_SetVolume>:
 * @brief  Controls the current audio volume level.
 * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for
 *         Mute and 100 for Max volume level).
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume) {
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	71fb      	strb	r3, [r7, #7]
	/* Call the codec volume control function with converted volume value */
	if (audio_drv->SetVolumeOut(AUDIO_I2C_ADDRESS, Volume) != 0) {
 80035da:	4b08      	ldr	r3, [pc, #32]	@ (80035fc <BSP_AUDIO_OUT_SetVolume+0x2c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e0:	79fa      	ldrb	r2, [r7, #7]
 80035e2:	4611      	mov	r1, r2
 80035e4:	2034      	movs	r0, #52	@ 0x34
 80035e6:	4798      	blx	r3
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <BSP_AUDIO_OUT_SetVolume+0x22>
		return AUDIO_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <BSP_AUDIO_OUT_SetVolume+0x24>
	} else {
		/* Return AUDIO_OK when all operations are correctly done */
		return AUDIO_OK;
 80035f2:	2300      	movs	r3, #0
	}
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	20000f74 	.word	0x20000f74

08003600 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
 *            @arg CODEC_AUDIOFRAME_SLOT_13
 * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
 *         audio frame slot.
 * @retval None
 */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot) {
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 8003608:	4b0c      	ldr	r3, [pc, #48]	@ (800363c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	4b0b      	ldr	r3, [pc, #44]	@ (800363c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003616:	601a      	str	r2, [r3, #0]

	/* Update the SAI audio frame slot configuration */
	haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 8003618:	4a08      	ldr	r2, [pc, #32]	@ (800363c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6613      	str	r3, [r2, #96]	@ 0x60
	HAL_SAI_Init(&haudio_out_sai);
 800361e:	4807      	ldr	r0, [pc, #28]	@ (800363c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003620:	f008 fa58 	bl	800bad4 <HAL_SAI_Init>

	/* Enable SAI peripheral to generate MCLK */
	__HAL_SAI_ENABLE(&haudio_out_sai);
 8003624:	4b05      	ldr	r3, [pc, #20]	@ (800363c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4b04      	ldr	r3, [pc, #16]	@ (800363c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003632:	601a      	str	r2, [r3, #0]
}
 8003634:	bf00      	nop
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20000f78 	.word	0x20000f78

08003640 <HAL_SAI_TxCpltCallback>:
/**
 * @brief  Tx Transfer completed callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
	BSP_AUDIO_OUT_TransferComplete_CallBack();
 8003648:	f7fe fefe 	bl	8002448 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 800364c:	bf00      	nop
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_SAI_TxHalfCpltCallback>:
/**
 * @brief  Tx Half Transfer completed callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
	BSP_AUDIO_OUT_HalfTransfer_CallBack();
 800365c:	f7fe ff06 	bl	800246c <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8003660:	bf00      	nop
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_SAI_ErrorCallback>:
/**
 * @brief  SAI error callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
	HAL_SAI_StateTypeDef audio_out_state;
	HAL_SAI_StateTypeDef audio_in_state;

	audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8003670:	480e      	ldr	r0, [pc, #56]	@ (80036ac <HAL_SAI_ErrorCallback+0x44>)
 8003672:	f008 fc93 	bl	800bf9c <HAL_SAI_GetState>
 8003676:	4603      	mov	r3, r0
 8003678:	73fb      	strb	r3, [r7, #15]
	audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 800367a:	480d      	ldr	r0, [pc, #52]	@ (80036b0 <HAL_SAI_ErrorCallback+0x48>)
 800367c:	f008 fc8e 	bl	800bf9c <HAL_SAI_GetState>
 8003680:	4603      	mov	r3, r0
 8003682:	73bb      	strb	r3, [r7, #14]

	/* Determines if it is an audio out or audio in error */
	if ((audio_out_state == HAL_SAI_STATE_BUSY)
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d002      	beq.n	8003690 <HAL_SAI_ErrorCallback+0x28>
			|| (audio_out_state == HAL_SAI_STATE_BUSY_TX)) {
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	2b12      	cmp	r3, #18
 800368e:	d101      	bne.n	8003694 <HAL_SAI_ErrorCallback+0x2c>
		BSP_AUDIO_OUT_Error_CallBack();
 8003690:	f000 f810 	bl	80036b4 <BSP_AUDIO_OUT_Error_CallBack>
	}

	if ((audio_in_state == HAL_SAI_STATE_BUSY)
 8003694:	7bbb      	ldrb	r3, [r7, #14]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d002      	beq.n	80036a0 <HAL_SAI_ErrorCallback+0x38>
			|| (audio_in_state == HAL_SAI_STATE_BUSY_RX)) {
 800369a:	7bbb      	ldrb	r3, [r7, #14]
 800369c:	2b22      	cmp	r3, #34	@ 0x22
 800369e:	d101      	bne.n	80036a4 <HAL_SAI_ErrorCallback+0x3c>
		BSP_AUDIO_IN_Error_CallBack();
 80036a0:	f000 f9be 	bl	8003a20 <BSP_AUDIO_IN_Error_CallBack>
	}
}
 80036a4:	bf00      	nop
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20000f78 	.word	0x20000f78
 80036b0:	20000ffc 	.word	0x20000ffc

080036b4 <BSP_AUDIO_OUT_Error_CallBack>:

/**
 * @brief  Manages the DMA FIFO error event.
 * @retval None
 */
__weak void BSP_AUDIO_OUT_Error_CallBack(void) {
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
}
 80036b8:	bf00      	nop
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
	...

080036c4 <BSP_AUDIO_OUT_MspInit>:
 * @brief  Initializes BSP_AUDIO_OUT MSP.
 * @param  hsai: SAI handle
 * @param  Params
 * @retval None
 */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params) {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08c      	sub	sp, #48	@ 0x30
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_sai_tx;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable SAI clock */
	AUDIO_OUT_SAIx_CLK_ENABLE();
 80036ce:	4b63      	ldr	r3, [pc, #396]	@ (800385c <BSP_AUDIO_OUT_MspInit+0x198>)
 80036d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d2:	4a62      	ldr	r2, [pc, #392]	@ (800385c <BSP_AUDIO_OUT_MspInit+0x198>)
 80036d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80036da:	4b60      	ldr	r3, [pc, #384]	@ (800385c <BSP_AUDIO_OUT_MspInit+0x198>)
 80036dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036e2:	61bb      	str	r3, [r7, #24]
 80036e4:	69bb      	ldr	r3, [r7, #24]

	/* Enable GPIO clock */
	AUDIO_OUT_SAIx_MCLK_ENABLE();
 80036e6:	4b5d      	ldr	r3, [pc, #372]	@ (800385c <BSP_AUDIO_OUT_MspInit+0x198>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ea:	4a5c      	ldr	r2, [pc, #368]	@ (800385c <BSP_AUDIO_OUT_MspInit+0x198>)
 80036ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036f2:	4b5a      	ldr	r3, [pc, #360]	@ (800385c <BSP_AUDIO_OUT_MspInit+0x198>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	697b      	ldr	r3, [r7, #20]
	AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 80036fe:	4b57      	ldr	r3, [pc, #348]	@ (800385c <BSP_AUDIO_OUT_MspInit+0x198>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003702:	4a56      	ldr	r2, [pc, #344]	@ (800385c <BSP_AUDIO_OUT_MspInit+0x198>)
 8003704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003708:	6313      	str	r3, [r2, #48]	@ 0x30
 800370a:	4b54      	ldr	r3, [pc, #336]	@ (800385c <BSP_AUDIO_OUT_MspInit+0x198>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	693b      	ldr	r3, [r7, #16]
	AUDIO_OUT_SAIx_FS_ENABLE();
 8003716:	4b51      	ldr	r3, [pc, #324]	@ (800385c <BSP_AUDIO_OUT_MspInit+0x198>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371a:	4a50      	ldr	r2, [pc, #320]	@ (800385c <BSP_AUDIO_OUT_MspInit+0x198>)
 800371c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003720:	6313      	str	r3, [r2, #48]	@ 0x30
 8003722:	4b4e      	ldr	r3, [pc, #312]	@ (800385c <BSP_AUDIO_OUT_MspInit+0x198>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
	/* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
	gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 800372e:	2380      	movs	r3, #128	@ 0x80
 8003730:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003732:	2302      	movs	r3, #2
 8003734:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8003736:	2300      	movs	r3, #0
 8003738:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800373a:	2303      	movs	r3, #3
 800373c:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800373e:	230a      	movs	r3, #10
 8003740:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8003742:	f107 031c 	add.w	r3, r7, #28
 8003746:	4619      	mov	r1, r3
 8003748:	4845      	ldr	r0, [pc, #276]	@ (8003860 <BSP_AUDIO_OUT_MspInit+0x19c>)
 800374a:	f005 fa29 	bl	8008ba0 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 800374e:	2320      	movs	r3, #32
 8003750:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003752:	2302      	movs	r3, #2
 8003754:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8003756:	2300      	movs	r3, #0
 8003758:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800375a:	2303      	movs	r3, #3
 800375c:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 800375e:	230a      	movs	r3, #10
 8003760:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8003762:	f107 031c 	add.w	r3, r7, #28
 8003766:	4619      	mov	r1, r3
 8003768:	483d      	ldr	r0, [pc, #244]	@ (8003860 <BSP_AUDIO_OUT_MspInit+0x19c>)
 800376a:	f005 fa19 	bl	8008ba0 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_SD_PIN;
 800376e:	2340      	movs	r3, #64	@ 0x40
 8003770:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003772:	2302      	movs	r3, #2
 8003774:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8003776:	2300      	movs	r3, #0
 8003778:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800377a:	2303      	movs	r3, #3
 800377c:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800377e:	230a      	movs	r3, #10
 8003780:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8003782:	f107 031c 	add.w	r3, r7, #28
 8003786:	4619      	mov	r1, r3
 8003788:	4835      	ldr	r0, [pc, #212]	@ (8003860 <BSP_AUDIO_OUT_MspInit+0x19c>)
 800378a:	f005 fa09 	bl	8008ba0 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800378e:	2310      	movs	r3, #16
 8003790:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003792:	2302      	movs	r3, #2
 8003794:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8003796:	2300      	movs	r3, #0
 8003798:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800379a:	2303      	movs	r3, #3
 800379c:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800379e:	230a      	movs	r3, #10
 80037a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 80037a2:	f107 031c 	add.w	r3, r7, #28
 80037a6:	4619      	mov	r1, r3
 80037a8:	482d      	ldr	r0, [pc, #180]	@ (8003860 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80037aa:	f005 f9f9 	bl	8008ba0 <HAL_GPIO_Init>

	/* Enable the DMA clock */
	AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 80037ae:	4b2b      	ldr	r3, [pc, #172]	@ (800385c <BSP_AUDIO_OUT_MspInit+0x198>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	4a2a      	ldr	r2, [pc, #168]	@ (800385c <BSP_AUDIO_OUT_MspInit+0x198>)
 80037b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ba:	4b28      	ldr	r3, [pc, #160]	@ (800385c <BSP_AUDIO_OUT_MspInit+0x198>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037c2:	60bb      	str	r3, [r7, #8]
 80037c4:	68bb      	ldr	r3, [r7, #8]

	if (hsai->Instance == AUDIO_OUT_SAIx) {
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a26      	ldr	r2, [pc, #152]	@ (8003864 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d138      	bne.n	8003842 <BSP_AUDIO_OUT_MspInit+0x17e>
		/* Configure the hdma_saiTx handle parameters */
		hdma_sai_tx.Init.Channel = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 80037d0:	4b25      	ldr	r3, [pc, #148]	@ (8003868 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80037d2:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80037d6:	605a      	str	r2, [r3, #4]
		hdma_sai_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037d8:	4b23      	ldr	r3, [pc, #140]	@ (8003868 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80037da:	2240      	movs	r2, #64	@ 0x40
 80037dc:	609a      	str	r2, [r3, #8]
		hdma_sai_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037de:	4b22      	ldr	r3, [pc, #136]	@ (8003868 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	60da      	str	r2, [r3, #12]
		hdma_sai_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037e4:	4b20      	ldr	r3, [pc, #128]	@ (8003868 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80037e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037ea:	611a      	str	r2, [r3, #16]
		hdma_sai_tx.Init.PeriphDataAlignment =
 80037ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003868 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80037ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037f2:	615a      	str	r2, [r3, #20]
				AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
		hdma_sai_tx.Init.MemDataAlignment = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 80037f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003868 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80037f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037fa:	619a      	str	r2, [r3, #24]
		hdma_sai_tx.Init.Mode = DMA_CIRCULAR;
 80037fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003868 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80037fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003802:	61da      	str	r2, [r3, #28]
		hdma_sai_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003804:	4b18      	ldr	r3, [pc, #96]	@ (8003868 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003806:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800380a:	621a      	str	r2, [r3, #32]
		hdma_sai_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800380c:	4b16      	ldr	r3, [pc, #88]	@ (8003868 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800380e:	2204      	movs	r2, #4
 8003810:	625a      	str	r2, [r3, #36]	@ 0x24
		hdma_sai_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003812:	4b15      	ldr	r3, [pc, #84]	@ (8003868 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003814:	2203      	movs	r2, #3
 8003816:	629a      	str	r2, [r3, #40]	@ 0x28
		hdma_sai_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003818:	4b13      	ldr	r3, [pc, #76]	@ (8003868 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800381a:	2200      	movs	r2, #0
 800381c:	62da      	str	r2, [r3, #44]	@ 0x2c
		hdma_sai_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800381e:	4b12      	ldr	r3, [pc, #72]	@ (8003868 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003820:	2200      	movs	r2, #0
 8003822:	631a      	str	r2, [r3, #48]	@ 0x30

		hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8003824:	4b10      	ldr	r3, [pc, #64]	@ (8003868 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003826:	4a11      	ldr	r2, [pc, #68]	@ (800386c <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8003828:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a0e      	ldr	r2, [pc, #56]	@ (8003868 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800382e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003830:	4a0d      	ldr	r2, [pc, #52]	@ (8003868 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6393      	str	r3, [r2, #56]	@ 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_sai_tx);
 8003836:	480c      	ldr	r0, [pc, #48]	@ (8003868 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003838:	f004 fb60 	bl	8007efc <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_sai_tx);
 800383c:	480a      	ldr	r0, [pc, #40]	@ (8003868 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800383e:	f004 faaf 	bl	8007da0 <HAL_DMA_Init>
	}

	/* SAI DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8003842:	2200      	movs	r2, #0
 8003844:	210e      	movs	r1, #14
 8003846:	203c      	movs	r0, #60	@ 0x3c
 8003848:	f004 fa80 	bl	8007d4c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 800384c:	203c      	movs	r0, #60	@ 0x3c
 800384e:	f004 fa99 	bl	8007d84 <HAL_NVIC_EnableIRQ>
}
 8003852:	bf00      	nop
 8003854:	3730      	adds	r7, #48	@ 0x30
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40023800 	.word	0x40023800
 8003860:	40022000 	.word	0x40022000
 8003864:	40015c04 	.word	0x40015c04
 8003868:	20001080 	.word	0x20001080
 800386c:	40026470 	.word	0x40026470

08003870 <BSP_AUDIO_OUT_ClockConfig>:
 * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
 *         Being __weak it can be overwritten by the application
 * @retval None
 */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai,
		uint32_t AudioFreq, void *Params) {
 8003870:	b580      	push	{r7, lr}
 8003872:	b0a6      	sub	sp, #152	@ 0x98
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
	RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

	HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 800387c:	f107 0314 	add.w	r3, r7, #20
 8003880:	4618      	mov	r0, r3
 8003882:	f007 fedb 	bl	800b63c <HAL_RCCEx_GetPeriphCLKConfig>

	/* Set the PLL configuration according to the audio frequency */
	if ((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800388c:	4293      	cmp	r3, r2
 800388e:	d009      	beq.n	80038a4 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003896:	4293      	cmp	r3, r2
 8003898:	d004      	beq.n	80038a4 <BSP_AUDIO_OUT_ClockConfig+0x34>
			|| (AudioFreq == AUDIO_FREQUENCY_44K)) {
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d112      	bne.n	80038ca <BSP_AUDIO_OUT_ClockConfig+0x5a>
		/* Configure PLLI2S prescalers */
		/* PLLI2S_VCO: VCO_429M
		 I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
		 I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
		rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80038a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80038a8:	617b      	str	r3, [r7, #20]
		rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80038aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80038ae:	657b      	str	r3, [r7, #84]	@ 0x54
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 80038b0:	f240 13ad 	movw	r3, #429	@ 0x1ad
 80038b4:	61bb      	str	r3, [r7, #24]
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 80038b6:	2302      	movs	r3, #2
 80038b8:	623b      	str	r3, [r7, #32]
		rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 80038ba:	2313      	movs	r3, #19
 80038bc:	63bb      	str	r3, [r7, #56]	@ 0x38

		HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80038be:	f107 0314 	add.w	r3, r7, #20
 80038c2:	4618      	mov	r0, r3
 80038c4:	f007 faca 	bl	800ae5c <HAL_RCCEx_PeriphCLKConfig>
 80038c8:	e012      	b.n	80038f0 <BSP_AUDIO_OUT_ClockConfig+0x80>
	{
		/* I2S clock config
		 PLLI2S_VCO: VCO_344M
		 I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
		 I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
		rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80038ca:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80038ce:	617b      	str	r3, [r7, #20]
		rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80038d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80038d4:	657b      	str	r3, [r7, #84]	@ 0x54
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 80038d6:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 80038da:	61bb      	str	r3, [r7, #24]
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 80038dc:	2307      	movs	r3, #7
 80038de:	623b      	str	r3, [r7, #32]
		rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 80038e0:	2301      	movs	r3, #1
 80038e2:	63bb      	str	r3, [r7, #56]	@ 0x38

		HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80038e4:	f107 0314 	add.w	r3, r7, #20
 80038e8:	4618      	mov	r0, r3
 80038ea:	f007 fab7 	bl	800ae5c <HAL_RCCEx_PeriphCLKConfig>
	}
}
 80038ee:	bf00      	nop
 80038f0:	bf00      	nop
 80038f2:	3798      	adds	r7, #152	@ 0x98
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <SAIx_Out_DeInit>:

/**
 * @brief  Deinitializes the output Audio Codec audio interface (SAI).
 * @retval None
 */
static void SAIx_Out_DeInit(void) {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
	/* Initialize the haudio_out_sai Instance parameter */
	haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80038fc:	4b07      	ldr	r3, [pc, #28]	@ (800391c <SAIx_Out_DeInit+0x24>)
 80038fe:	4a08      	ldr	r2, [pc, #32]	@ (8003920 <SAIx_Out_DeInit+0x28>)
 8003900:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 8003902:	4b06      	ldr	r3, [pc, #24]	@ (800391c <SAIx_Out_DeInit+0x24>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4b04      	ldr	r3, [pc, #16]	@ (800391c <SAIx_Out_DeInit+0x24>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003910:	601a      	str	r2, [r3, #0]

	HAL_SAI_DeInit(&haudio_out_sai);
 8003912:	4802      	ldr	r0, [pc, #8]	@ (800391c <SAIx_Out_DeInit+0x24>)
 8003914:	f008 fa5c 	bl	800bdd0 <HAL_SAI_DeInit>
}
 8003918:	bf00      	nop
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20000f78 	.word	0x20000f78
 8003920:	40015c04 	.word	0x40015c04

08003924 <BSP_AUDIO_IN_OUT_Init>:
 * @param  BitRes: Audio frequency to be configured.
 * @param  ChnlNbr: Channel number.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_OUT_Init(uint16_t InputDevice, uint16_t OutputDevice,
		uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr) {
 8003924:	b590      	push	{r4, r7, lr}
 8003926:	b089      	sub	sp, #36	@ 0x24
 8003928:	af00      	add	r7, sp, #0
 800392a:	60ba      	str	r2, [r7, #8]
 800392c:	607b      	str	r3, [r7, #4]
 800392e:	4603      	mov	r3, r0
 8003930:	81fb      	strh	r3, [r7, #14]
 8003932:	460b      	mov	r3, r1
 8003934:	81bb      	strh	r3, [r7, #12]
	uint8_t ret = AUDIO_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	77fb      	strb	r3, [r7, #31]
	uint32_t deviceid = 0x00;
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
	uint32_t slot_active;

	if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1)
 800393e:	89fb      	ldrh	r3, [r7, #14]
 8003940:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003944:	d006      	beq.n	8003954 <BSP_AUDIO_IN_OUT_Init+0x30>
			&& (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)) /* Only MICROPHONE_2 input supported */
 8003946:	89fb      	ldrh	r3, [r7, #14]
 8003948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800394c:	d002      	beq.n	8003954 <BSP_AUDIO_IN_OUT_Init+0x30>
			{
		ret = AUDIO_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	77fb      	strb	r3, [r7, #31]
 8003952:	e054      	b.n	80039fe <BSP_AUDIO_IN_OUT_Init+0xda>
	} else {
		/* Disable SAI */
		SAIx_In_DeInit();
 8003954:	f000 f9d4 	bl	8003d00 <SAIx_In_DeInit>
		SAIx_Out_DeInit();
 8003958:	f7ff ffce 	bl	80038f8 <SAIx_Out_DeInit>

		/* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
		BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 800395c:	2200      	movs	r2, #0
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	4829      	ldr	r0, [pc, #164]	@ (8003a08 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8003962:	f7ff ff85 	bl	8003870 <BSP_AUDIO_OUT_ClockConfig>

		/* SAI data transfer preparation:
		 Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
		haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8003966:	4b28      	ldr	r3, [pc, #160]	@ (8003a08 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8003968:	4a28      	ldr	r2, [pc, #160]	@ (8003a0c <BSP_AUDIO_IN_OUT_Init+0xe8>)
 800396a:	601a      	str	r2, [r3, #0]
		if (HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET) {
 800396c:	4826      	ldr	r0, [pc, #152]	@ (8003a08 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 800396e:	f008 fb15 	bl	800bf9c <HAL_SAI_GetState>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d103      	bne.n	8003980 <BSP_AUDIO_IN_OUT_Init+0x5c>
			/* Init the SAI MSP: this __weak function can be redefined by the application*/
			BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8003978:	2100      	movs	r1, #0
 800397a:	4823      	ldr	r0, [pc, #140]	@ (8003a08 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 800397c:	f000 f858 	bl	8003a30 <BSP_AUDIO_IN_MspInit>
		}

		/* SAI data transfer preparation:
		 Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
		haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8003980:	4b23      	ldr	r3, [pc, #140]	@ (8003a10 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8003982:	4a24      	ldr	r2, [pc, #144]	@ (8003a14 <BSP_AUDIO_IN_OUT_Init+0xf0>)
 8003984:	601a      	str	r2, [r3, #0]
		if (HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET) {
 8003986:	4822      	ldr	r0, [pc, #136]	@ (8003a10 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8003988:	f008 fb08 	bl	800bf9c <HAL_SAI_GetState>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d103      	bne.n	800399a <BSP_AUDIO_IN_OUT_Init+0x76>
			/* Init the SAI MSP: this __weak function can be redefined by the application*/
			BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8003992:	2100      	movs	r1, #0
 8003994:	481e      	ldr	r0, [pc, #120]	@ (8003a10 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8003996:	f7ff fe95 	bl	80036c4 <BSP_AUDIO_OUT_MspInit>

		/* Configure SAI in master mode :
		 *   - SAI2_block_A in master TX mode
		 *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
		 */
		if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2) {
 800399a:	89fb      	ldrh	r3, [r7, #14]
 800399c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039a0:	d102      	bne.n	80039a8 <BSP_AUDIO_IN_OUT_Init+0x84>
			slot_active = CODEC_AUDIOFRAME_SLOT_13;
 80039a2:	230a      	movs	r3, #10
 80039a4:	61bb      	str	r3, [r7, #24]
 80039a6:	e001      	b.n	80039ac <BSP_AUDIO_IN_OUT_Init+0x88>
		} else {
			slot_active = CODEC_AUDIOFRAME_SLOT_02;
 80039a8:	2305      	movs	r3, #5
 80039aa:	61bb      	str	r3, [r7, #24]
		}
		SAIx_In_Init(SAI_MODEMASTER_TX, slot_active, AudioFreq);
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	69b9      	ldr	r1, [r7, #24]
 80039b0:	2000      	movs	r0, #0
 80039b2:	f000 f8ef 	bl	8003b94 <SAIx_In_Init>

		/* wm8994 codec initialization */
		deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80039b6:	4b18      	ldr	r3, [pc, #96]	@ (8003a18 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2034      	movs	r0, #52	@ 0x34
 80039bc:	4798      	blx	r3
 80039be:	6178      	str	r0, [r7, #20]

		if ((deviceid) == WM8994_ID) {
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f648 1294 	movw	r2, #35220	@ 0x8994
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d109      	bne.n	80039de <BSP_AUDIO_IN_OUT_Init+0xba>
			/* Reset the Codec Registers */
			wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 80039ca:	4b13      	ldr	r3, [pc, #76]	@ (8003a18 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 80039cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ce:	2034      	movs	r0, #52	@ 0x34
 80039d0:	4798      	blx	r3
			/* Initialize the audio driver structure */
			audio_drv = &wm8994_drv;
 80039d2:	4b12      	ldr	r3, [pc, #72]	@ (8003a1c <BSP_AUDIO_IN_OUT_Init+0xf8>)
 80039d4:	4a10      	ldr	r2, [pc, #64]	@ (8003a18 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 80039d6:	601a      	str	r2, [r3, #0]
			ret = AUDIO_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	e001      	b.n	80039e2 <BSP_AUDIO_IN_OUT_Init+0xbe>
		} else {
			ret = AUDIO_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	77fb      	strb	r3, [r7, #31]
		}

		if (ret == AUDIO_OK) {
 80039e2:	7ffb      	ldrb	r3, [r7, #31]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10a      	bne.n	80039fe <BSP_AUDIO_IN_OUT_Init+0xda>
			/* Initialize the codec internal registers */
			audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, 100,
 80039e8:	4b0c      	ldr	r3, [pc, #48]	@ (8003a1c <BSP_AUDIO_IN_OUT_Init+0xf8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681c      	ldr	r4, [r3, #0]
 80039ee:	89fa      	ldrh	r2, [r7, #14]
 80039f0:	89bb      	ldrh	r3, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	b299      	uxth	r1, r3
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2264      	movs	r2, #100	@ 0x64
 80039fa:	2034      	movs	r0, #52	@ 0x34
 80039fc:	47a0      	blx	r4
					AudioFreq);
		}
	}
	return ret;
 80039fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3724      	adds	r7, #36	@ 0x24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd90      	pop	{r4, r7, pc}
 8003a08:	20000ffc 	.word	0x20000ffc
 8003a0c:	40015c24 	.word	0x40015c24
 8003a10:	20000f78 	.word	0x20000f78
 8003a14:	40015c04 	.word	0x40015c04
 8003a18:	2000006c 	.word	0x2000006c
 8003a1c:	20000f74 	.word	0x20000f74

08003a20 <BSP_AUDIO_IN_Error_CallBack>:

/**
 * @brief  Audio IN Error callback function.
 * @retval None
 */
__weak void BSP_AUDIO_IN_Error_CallBack(void) {
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
	/* This function is called when an Interrupt due to transfer error on or peripheral
	 error occurs. */
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <BSP_AUDIO_IN_MspInit>:
 * @brief  Initializes BSP_AUDIO_IN MSP.
 * @param  hsai: SAI handle
 * @param  Params
 * @retval None
 */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params) {
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08c      	sub	sp, #48	@ 0x30
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_sai_rx;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable SAI clock */
	AUDIO_IN_SAIx_CLK_ENABLE();
 8003a3a:	4b50      	ldr	r3, [pc, #320]	@ (8003b7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3e:	4a4f      	ldr	r2, [pc, #316]	@ (8003b7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8003a40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a44:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a46:	4b4d      	ldr	r3, [pc, #308]	@ (8003b7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8003a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a4e:	61bb      	str	r3, [r7, #24]
 8003a50:	69bb      	ldr	r3, [r7, #24]

	/* Enable SD GPIO clock */
	AUDIO_IN_SAIx_SD_ENABLE();
 8003a52:	4b4a      	ldr	r3, [pc, #296]	@ (8003b7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a56:	4a49      	ldr	r2, [pc, #292]	@ (8003b7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8003a58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a5e:	4b47      	ldr	r3, [pc, #284]	@ (8003b7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	697b      	ldr	r3, [r7, #20]
	/* CODEC_SAI pin configuration: SD pin */
	gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8003a6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a6e:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003a70:	2302      	movs	r3, #2
 8003a72:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8003a7c:	230a      	movs	r3, #10
 8003a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8003a80:	f107 031c 	add.w	r3, r7, #28
 8003a84:	4619      	mov	r1, r3
 8003a86:	483e      	ldr	r0, [pc, #248]	@ (8003b80 <BSP_AUDIO_IN_MspInit+0x150>)
 8003a88:	f005 f88a 	bl	8008ba0 <HAL_GPIO_Init>

	/* Enable Audio INT GPIO clock */
	AUDIO_IN_INT_GPIO_ENABLE();
 8003a8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a90:	4a3a      	ldr	r2, [pc, #232]	@ (8003b7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8003a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a96:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a98:	4b38      	ldr	r3, [pc, #224]	@ (8003b7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	693b      	ldr	r3, [r7, #16]
	/* Audio INT pin configuration: input */
	gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8003aa4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aa8:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8003ab6:	f107 031c 	add.w	r3, r7, #28
 8003aba:	4619      	mov	r1, r3
 8003abc:	4831      	ldr	r0, [pc, #196]	@ (8003b84 <BSP_AUDIO_IN_MspInit+0x154>)
 8003abe:	f005 f86f 	bl	8008ba0 <HAL_GPIO_Init>

	/* Enable the DMA clock */
	AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8003ac2:	4b2e      	ldr	r3, [pc, #184]	@ (8003b7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac6:	4a2d      	ldr	r2, [pc, #180]	@ (8003b7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8003ac8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ace:	4b2b      	ldr	r3, [pc, #172]	@ (8003b7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]

	if (hsai->Instance == AUDIO_IN_SAIx) {
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a2a      	ldr	r2, [pc, #168]	@ (8003b88 <BSP_AUDIO_IN_MspInit+0x158>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d137      	bne.n	8003b54 <BSP_AUDIO_IN_MspInit+0x124>
		/* Configure the hdma_sai_rx handle parameters */
		hdma_sai_rx.Init.Channel = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8003ae4:	4b29      	ldr	r3, [pc, #164]	@ (8003b8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	605a      	str	r2, [r3, #4]
		hdma_sai_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003aea:	4b28      	ldr	r3, [pc, #160]	@ (8003b8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	609a      	str	r2, [r3, #8]
		hdma_sai_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003af0:	4b26      	ldr	r3, [pc, #152]	@ (8003b8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	60da      	str	r2, [r3, #12]
		hdma_sai_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003af6:	4b25      	ldr	r3, [pc, #148]	@ (8003b8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8003af8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003afc:	611a      	str	r2, [r3, #16]
		hdma_sai_rx.Init.PeriphDataAlignment =
 8003afe:	4b23      	ldr	r3, [pc, #140]	@ (8003b8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8003b00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b04:	615a      	str	r2, [r3, #20]
				AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
		hdma_sai_rx.Init.MemDataAlignment = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8003b06:	4b21      	ldr	r3, [pc, #132]	@ (8003b8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8003b08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b0c:	619a      	str	r2, [r3, #24]
		hdma_sai_rx.Init.Mode = DMA_CIRCULAR;
 8003b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8003b8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8003b10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b14:	61da      	str	r2, [r3, #28]
		hdma_sai_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003b16:	4b1d      	ldr	r3, [pc, #116]	@ (8003b8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8003b18:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b1c:	621a      	str	r2, [r3, #32]
		hdma_sai_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003b8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	625a      	str	r2, [r3, #36]	@ 0x24
		hdma_sai_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003b24:	4b19      	ldr	r3, [pc, #100]	@ (8003b8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8003b26:	2203      	movs	r2, #3
 8003b28:	629a      	str	r2, [r3, #40]	@ 0x28
		hdma_sai_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003b2a:	4b18      	ldr	r3, [pc, #96]	@ (8003b8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
		hdma_sai_rx.Init.PeriphBurst = DMA_MBURST_SINGLE;
 8003b30:	4b16      	ldr	r3, [pc, #88]	@ (8003b8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	631a      	str	r2, [r3, #48]	@ 0x30

		hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8003b36:	4b15      	ldr	r3, [pc, #84]	@ (8003b8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8003b38:	4a15      	ldr	r2, [pc, #84]	@ (8003b90 <BSP_AUDIO_IN_MspInit+0x160>)
 8003b3a:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a13      	ldr	r2, [pc, #76]	@ (8003b8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8003b40:	671a      	str	r2, [r3, #112]	@ 0x70
 8003b42:	4a12      	ldr	r2, [pc, #72]	@ (8003b8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6393      	str	r3, [r2, #56]	@ 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_sai_rx);
 8003b48:	4810      	ldr	r0, [pc, #64]	@ (8003b8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8003b4a:	f004 f9d7 	bl	8007efc <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_sai_rx);
 8003b4e:	480f      	ldr	r0, [pc, #60]	@ (8003b8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8003b50:	f004 f926 	bl	8007da0 <HAL_DMA_Init>
	}

	/* SAI DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8003b54:	2200      	movs	r2, #0
 8003b56:	210f      	movs	r1, #15
 8003b58:	2046      	movs	r0, #70	@ 0x46
 8003b5a:	f004 f8f7 	bl	8007d4c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8003b5e:	2046      	movs	r0, #70	@ 0x46
 8003b60:	f004 f910 	bl	8007d84 <HAL_NVIC_EnableIRQ>

	/* Audio INT IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8003b64:	2200      	movs	r2, #0
 8003b66:	210f      	movs	r1, #15
 8003b68:	2028      	movs	r0, #40	@ 0x28
 8003b6a:	f004 f8ef 	bl	8007d4c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8003b6e:	2028      	movs	r0, #40	@ 0x28
 8003b70:	f004 f908 	bl	8007d84 <HAL_NVIC_EnableIRQ>
}
 8003b74:	bf00      	nop
 8003b76:	3730      	adds	r7, #48	@ 0x30
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	40021800 	.word	0x40021800
 8003b84:	40021c00 	.word	0x40021c00
 8003b88:	40015c24 	.word	0x40015c24
 8003b8c:	200010e0 	.word	0x200010e0
 8003b90:	400264b8 	.word	0x400264b8

08003b94 <SAIx_In_Init>:
 * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
 * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
 * @retval None
 */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive,
		uint32_t AudioFreq) {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
	/* Initialize SAI2 block A in MASTER RX */
	/* Initialize the haudio_out_sai Instance parameter */
	haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8003ba0:	4b53      	ldr	r3, [pc, #332]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003ba2:	4a54      	ldr	r2, [pc, #336]	@ (8003cf4 <SAIx_In_Init+0x160>)
 8003ba4:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 8003ba6:	4b52      	ldr	r3, [pc, #328]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	4b50      	ldr	r3, [pc, #320]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003bb4:	601a      	str	r2, [r3, #0]

	/* Configure SAI_Block_x
	 LSBFirst: Disabled
	 DataSize: 16 */
	haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8003bb6:	4a4e      	ldr	r2, [pc, #312]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	61d3      	str	r3, [r2, #28]
	haudio_out_sai.Init.AudioMode = SaiOutMode;
 8003bbc:	4a4c      	ldr	r2, [pc, #304]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6053      	str	r3, [r2, #4]
	haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8003bc2:	4b4b      	ldr	r3, [pc, #300]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	615a      	str	r2, [r3, #20]
	haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8003bc8:	4b49      	ldr	r3, [pc, #292]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	631a      	str	r2, [r3, #48]	@ 0x30
	haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8003bce:	4b48      	ldr	r3, [pc, #288]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003bd0:	2280      	movs	r2, #128	@ 0x80
 8003bd2:	635a      	str	r2, [r3, #52]	@ 0x34
	haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003bd4:	4b46      	ldr	r3, [pc, #280]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	639a      	str	r2, [r3, #56]	@ 0x38
	haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8003bda:	4b45      	ldr	r3, [pc, #276]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	63da      	str	r2, [r3, #60]	@ 0x3c
	haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8003be0:	4b43      	ldr	r3, [pc, #268]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	609a      	str	r2, [r3, #8]
	haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8003be6:	4b42      	ldr	r3, [pc, #264]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003be8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003bec:	611a      	str	r2, [r3, #16]
	haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8003bee:	4b40      	ldr	r3, [pc, #256]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	619a      	str	r2, [r3, #24]
	 Frame Length: 64
	 Frame active Length: 32
	 FS Definition: Start frame + Channel Side identification
	 FS Polarity: FS active Low
	 FS Offset: FS asserted one bit before the first bit of slot 0 */
	haudio_out_sai.FrameInit.FrameLength = 64;
 8003bf4:	4b3e      	ldr	r3, [pc, #248]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003bf6:	2240      	movs	r2, #64	@ 0x40
 8003bf8:	641a      	str	r2, [r3, #64]	@ 0x40
	haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8003bfa:	4b3d      	ldr	r3, [pc, #244]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	645a      	str	r2, [r3, #68]	@ 0x44
	haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8003c00:	4b3b      	ldr	r3, [pc, #236]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003c02:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003c06:	649a      	str	r2, [r3, #72]	@ 0x48
	haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003c08:	4b39      	ldr	r3, [pc, #228]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	64da      	str	r2, [r3, #76]	@ 0x4c
	haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8003c0e:	4b38      	ldr	r3, [pc, #224]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003c10:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003c14:	651a      	str	r2, [r3, #80]	@ 0x50
	/* Configure SAI Block_x Slot
	 Slot First Bit Offset: 0
	 Slot Size  : 16
	 Slot Number: 4
	 Slot Active: All slot actives */
	haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8003c16:	4b36      	ldr	r3, [pc, #216]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	655a      	str	r2, [r3, #84]	@ 0x54
	haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003c1c:	4b34      	ldr	r3, [pc, #208]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	659a      	str	r2, [r3, #88]	@ 0x58
	haudio_out_sai.SlotInit.SlotNumber = 4;
 8003c22:	4b33      	ldr	r3, [pc, #204]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003c24:	2204      	movs	r2, #4
 8003c26:	65da      	str	r2, [r3, #92]	@ 0x5c
	haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8003c28:	4a31      	ldr	r2, [pc, #196]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	6613      	str	r3, [r2, #96]	@ 0x60

	HAL_SAI_Init(&haudio_out_sai);
 8003c2e:	4830      	ldr	r0, [pc, #192]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003c30:	f007 ff50 	bl	800bad4 <HAL_SAI_Init>

	/* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
	/* Initialize the haudio_in_sai Instance parameter */
	haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8003c34:	4b30      	ldr	r3, [pc, #192]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003c36:	4a31      	ldr	r2, [pc, #196]	@ (8003cfc <SAIx_In_Init+0x168>)
 8003c38:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_in_sai);
 8003c3a:	4b2f      	ldr	r3, [pc, #188]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003c48:	601a      	str	r2, [r3, #0]

	/* Configure SAI_Block_x
	 LSBFirst: Disabled
	 DataSize: 16 */
	haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8003c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	61d3      	str	r3, [r2, #28]
	haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8003c50:	4b29      	ldr	r3, [pc, #164]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003c52:	2203      	movs	r2, #3
 8003c54:	605a      	str	r2, [r3, #4]
	haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8003c56:	4b28      	ldr	r3, [pc, #160]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	615a      	str	r2, [r3, #20]
	haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8003c5c:	4b26      	ldr	r3, [pc, #152]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	631a      	str	r2, [r3, #48]	@ 0x30
	haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8003c62:	4b25      	ldr	r3, [pc, #148]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003c64:	2280      	movs	r2, #128	@ 0x80
 8003c66:	635a      	str	r2, [r3, #52]	@ 0x34
	haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003c68:	4b23      	ldr	r3, [pc, #140]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	639a      	str	r2, [r3, #56]	@ 0x38
	haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8003c6e:	4b22      	ldr	r3, [pc, #136]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	63da      	str	r2, [r3, #60]	@ 0x3c
	haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8003c74:	4b20      	ldr	r3, [pc, #128]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	609a      	str	r2, [r3, #8]
	haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8003c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	611a      	str	r2, [r3, #16]
	haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8003c80:	4b1d      	ldr	r3, [pc, #116]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	619a      	str	r2, [r3, #24]
	 Frame Length: 64
	 Frame active Length: 32
	 FS Definition: Start frame + Channel Side identification
	 FS Polarity: FS active Low
	 FS Offset: FS asserted one bit before the first bit of slot 0 */
	haudio_in_sai.FrameInit.FrameLength = 64;
 8003c86:	4b1c      	ldr	r3, [pc, #112]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003c88:	2240      	movs	r2, #64	@ 0x40
 8003c8a:	641a      	str	r2, [r3, #64]	@ 0x40
	haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8003c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003c8e:	2220      	movs	r2, #32
 8003c90:	645a      	str	r2, [r3, #68]	@ 0x44
	haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8003c92:	4b19      	ldr	r3, [pc, #100]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003c94:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003c98:	649a      	str	r2, [r3, #72]	@ 0x48
	haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003c9a:	4b17      	ldr	r3, [pc, #92]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	64da      	str	r2, [r3, #76]	@ 0x4c
	haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8003ca0:	4b15      	ldr	r3, [pc, #84]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003ca2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003ca6:	651a      	str	r2, [r3, #80]	@ 0x50
	/* Configure SAI Block_x Slot
	 Slot First Bit Offset: 0
	 Slot Size  : 16
	 Slot Number: 4
	 Slot Active: All slot active */
	haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8003ca8:	4b13      	ldr	r3, [pc, #76]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	655a      	str	r2, [r3, #84]	@ 0x54
	haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003cae:	4b12      	ldr	r3, [pc, #72]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	659a      	str	r2, [r3, #88]	@ 0x58
	haudio_in_sai.SlotInit.SlotNumber = 4;
 8003cb4:	4b10      	ldr	r3, [pc, #64]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003cb6:	2204      	movs	r2, #4
 8003cb8:	65da      	str	r2, [r3, #92]	@ 0x5c
	haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8003cba:	4a0f      	ldr	r2, [pc, #60]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	6613      	str	r3, [r2, #96]	@ 0x60

	HAL_SAI_Init(&haudio_in_sai);
 8003cc0:	480d      	ldr	r0, [pc, #52]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003cc2:	f007 ff07 	bl	800bad4 <HAL_SAI_Init>

	/* Enable SAI peripheral to generate MCLK */
	__HAL_SAI_ENABLE(&haudio_out_sai);
 8003cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	4b08      	ldr	r3, [pc, #32]	@ (8003cf0 <SAIx_In_Init+0x15c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003cd4:	601a      	str	r2, [r3, #0]

	/* Enable SAI peripheral */
	__HAL_SAI_ENABLE(&haudio_in_sai);
 8003cd6:	4b08      	ldr	r3, [pc, #32]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4b06      	ldr	r3, [pc, #24]	@ (8003cf8 <SAIx_In_Init+0x164>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003ce4:	601a      	str	r2, [r3, #0]
}
 8003ce6:	bf00      	nop
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	20000f78 	.word	0x20000f78
 8003cf4:	40015c04 	.word	0x40015c04
 8003cf8:	20000ffc 	.word	0x20000ffc
 8003cfc:	40015c24 	.word	0x40015c24

08003d00 <SAIx_In_DeInit>:

/**
 * @brief  Deinitializes the output Audio Codec audio interface (SAI).
 * @retval None
 */
static void SAIx_In_DeInit(void) {
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
	/* Initialize the haudio_in_sai Instance parameter */
	haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8003d04:	4b07      	ldr	r3, [pc, #28]	@ (8003d24 <SAIx_In_DeInit+0x24>)
 8003d06:	4a08      	ldr	r2, [pc, #32]	@ (8003d28 <SAIx_In_DeInit+0x28>)
 8003d08:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral */
	__HAL_SAI_DISABLE(&haudio_in_sai);
 8003d0a:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <SAIx_In_DeInit+0x24>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	4b04      	ldr	r3, [pc, #16]	@ (8003d24 <SAIx_In_DeInit+0x24>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003d18:	601a      	str	r2, [r3, #0]

	HAL_SAI_DeInit(&haudio_in_sai);
 8003d1a:	4802      	ldr	r0, [pc, #8]	@ (8003d24 <SAIx_In_DeInit+0x24>)
 8003d1c:	f008 f858 	bl	800bdd0 <HAL_SAI_DeInit>
}
 8003d20:	bf00      	nop
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20000ffc 	.word	0x20000ffc
 8003d28:	40015c24 	.word	0x40015c24

08003d2c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8003d30:	4b31      	ldr	r3, [pc, #196]	@ (8003df8 <BSP_LCD_Init+0xcc>)
 8003d32:	2228      	movs	r2, #40	@ 0x28
 8003d34:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003d36:	4b30      	ldr	r3, [pc, #192]	@ (8003df8 <BSP_LCD_Init+0xcc>)
 8003d38:	2209      	movs	r2, #9
 8003d3a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003d3c:	4b2e      	ldr	r3, [pc, #184]	@ (8003df8 <BSP_LCD_Init+0xcc>)
 8003d3e:	2235      	movs	r2, #53	@ 0x35
 8003d40:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003d42:	4b2d      	ldr	r3, [pc, #180]	@ (8003df8 <BSP_LCD_Init+0xcc>)
 8003d44:	220b      	movs	r2, #11
 8003d46:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003d48:	4b2b      	ldr	r3, [pc, #172]	@ (8003df8 <BSP_LCD_Init+0xcc>)
 8003d4a:	f240 121b 	movw	r2, #283	@ 0x11b
 8003d4e:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003d50:	4b29      	ldr	r3, [pc, #164]	@ (8003df8 <BSP_LCD_Init+0xcc>)
 8003d52:	f240 2215 	movw	r2, #533	@ 0x215
 8003d56:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003d58:	4b27      	ldr	r3, [pc, #156]	@ (8003df8 <BSP_LCD_Init+0xcc>)
 8003d5a:	f240 121d 	movw	r2, #285	@ 0x11d
 8003d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003d60:	4b25      	ldr	r3, [pc, #148]	@ (8003df8 <BSP_LCD_Init+0xcc>)
 8003d62:	f240 2235 	movw	r2, #565	@ 0x235
 8003d66:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4823      	ldr	r0, [pc, #140]	@ (8003df8 <BSP_LCD_Init+0xcc>)
 8003d6c:	f000 fdb8 	bl	80048e0 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8003d70:	4b21      	ldr	r3, [pc, #132]	@ (8003df8 <BSP_LCD_Init+0xcc>)
 8003d72:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003d76:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003d78:	4b1f      	ldr	r3, [pc, #124]	@ (8003df8 <BSP_LCD_Init+0xcc>)
 8003d7a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8003d7e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003d80:	4b1d      	ldr	r3, [pc, #116]	@ (8003df8 <BSP_LCD_Init+0xcc>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003d88:	4b1b      	ldr	r3, [pc, #108]	@ (8003df8 <BSP_LCD_Init+0xcc>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8003d90:	4b19      	ldr	r3, [pc, #100]	@ (8003df8 <BSP_LCD_Init+0xcc>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003d98:	4b17      	ldr	r3, [pc, #92]	@ (8003df8 <BSP_LCD_Init+0xcc>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8003d9e:	4b16      	ldr	r3, [pc, #88]	@ (8003df8 <BSP_LCD_Init+0xcc>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8003da4:	4b14      	ldr	r3, [pc, #80]	@ (8003df8 <BSP_LCD_Init+0xcc>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003daa:	4b13      	ldr	r3, [pc, #76]	@ (8003df8 <BSP_LCD_Init+0xcc>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003db0:	4b11      	ldr	r3, [pc, #68]	@ (8003df8 <BSP_LCD_Init+0xcc>)
 8003db2:	4a12      	ldr	r2, [pc, #72]	@ (8003dfc <BSP_LCD_Init+0xd0>)
 8003db4:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8003db6:	4810      	ldr	r0, [pc, #64]	@ (8003df8 <BSP_LCD_Init+0xcc>)
 8003db8:	f006 f98c 	bl	800a0d4 <HAL_LTDC_GetState>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d103      	bne.n	8003dca <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	480c      	ldr	r0, [pc, #48]	@ (8003df8 <BSP_LCD_Init+0xcc>)
 8003dc6:	f000 fcb1 	bl	800472c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8003dca:	480b      	ldr	r0, [pc, #44]	@ (8003df8 <BSP_LCD_Init+0xcc>)
 8003dcc:	f005 ff7c 	bl	8009cc8 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003dd6:	480a      	ldr	r0, [pc, #40]	@ (8003e00 <BSP_LCD_Init+0xd4>)
 8003dd8:	f005 f9b2 	bl	8009140 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003ddc:	2201      	movs	r2, #1
 8003dde:	2108      	movs	r1, #8
 8003de0:	4808      	ldr	r0, [pc, #32]	@ (8003e04 <BSP_LCD_Init+0xd8>)
 8003de2:	f005 f9ad 	bl	8009140 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8003de6:	f000 ff27 	bl	8004c38 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003dea:	4807      	ldr	r0, [pc, #28]	@ (8003e08 <BSP_LCD_Init+0xdc>)
 8003dec:	f000 f8ea 	bl	8003fc4 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20001140 	.word	0x20001140
 8003dfc:	40016800 	.word	0x40016800
 8003e00:	40022000 	.word	0x40022000
 8003e04:	40022800 	.word	0x40022800
 8003e08:	20000008 	.word	0x20000008

08003e0c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003e10:	4b06      	ldr	r3, [pc, #24]	@ (8003e2c <BSP_LCD_GetXSize+0x20>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a06      	ldr	r2, [pc, #24]	@ (8003e30 <BSP_LCD_GetXSize+0x24>)
 8003e16:	2134      	movs	r1, #52	@ 0x34
 8003e18:	fb01 f303 	mul.w	r3, r1, r3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	3360      	adds	r3, #96	@ 0x60
 8003e20:	681b      	ldr	r3, [r3, #0]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	20001228 	.word	0x20001228
 8003e30:	20001140 	.word	0x20001140

08003e34 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8003e38:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <BSP_LCD_GetYSize+0x20>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a06      	ldr	r2, [pc, #24]	@ (8003e58 <BSP_LCD_GetYSize+0x24>)
 8003e3e:	2134      	movs	r1, #52	@ 0x34
 8003e40:	fb01 f303 	mul.w	r3, r1, r3
 8003e44:	4413      	add	r3, r2
 8003e46:	3364      	adds	r3, #100	@ 0x64
 8003e48:	681b      	ldr	r3, [r3, #0]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	20001228 	.word	0x20001228
 8003e58:	20001140 	.word	0x20001140

08003e5c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b090      	sub	sp, #64	@ 0x40
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	6039      	str	r1, [r7, #0]
 8003e66:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003e6c:	f7ff ffce 	bl	8003e0c <BSP_LCD_GetXSize>
 8003e70:	4603      	mov	r3, r0
 8003e72:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003e78:	f7ff ffdc 	bl	8003e34 <BSP_LCD_GetYSize>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003e80:	2300      	movs	r3, #0
 8003e82:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8003e88:	23ff      	movs	r3, #255	@ 0xff
 8003e8a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003e90:	2300      	movs	r3, #0
 8003e92:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8003e96:	2300      	movs	r3, #0
 8003e98:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003ea2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003ea8:	2307      	movs	r3, #7
 8003eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003eac:	f7ff ffae 	bl	8003e0c <BSP_LCD_GetXSize>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8003eb4:	f7ff ffbe 	bl	8003e34 <BSP_LCD_GetYSize>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003ebc:	88fa      	ldrh	r2, [r7, #6]
 8003ebe:	f107 030c 	add.w	r3, r7, #12
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4812      	ldr	r0, [pc, #72]	@ (8003f10 <BSP_LCD_LayerDefaultInit+0xb4>)
 8003ec6:	f006 f891 	bl	8009fec <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003eca:	88fa      	ldrh	r2, [r7, #6]
 8003ecc:	4911      	ldr	r1, [pc, #68]	@ (8003f14 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003ece:	4613      	mov	r3, r2
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	3304      	adds	r3, #4
 8003eda:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ede:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003ee0:	88fa      	ldrh	r2, [r7, #6]
 8003ee2:	490c      	ldr	r1, [pc, #48]	@ (8003f14 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	3308      	adds	r3, #8
 8003ef0:	4a09      	ldr	r2, [pc, #36]	@ (8003f18 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003ef2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003ef4:	88fa      	ldrh	r2, [r7, #6]
 8003ef6:	4907      	ldr	r1, [pc, #28]	@ (8003f14 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003ef8:	4613      	mov	r3, r2
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8003f06:	601a      	str	r2, [r3, #0]
}
 8003f08:	bf00      	nop
 8003f0a:	3740      	adds	r7, #64	@ 0x40
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20001140 	.word	0x20001140
 8003f14:	2000122c 	.word	0x2000122c
 8003f18:	20000008 	.word	0x20000008

08003f1c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003f24:	4a04      	ldr	r2, [pc, #16]	@ (8003f38 <BSP_LCD_SelectLayer+0x1c>)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6013      	str	r3, [r2, #0]
} 
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	20001228 	.word	0x20001228

08003f3c <BSP_LCD_SetTransparency>:
  * @param  Transparency: Transparency
  *           This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF 
  * @retval None
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{    
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	70fb      	strb	r3, [r7, #3]
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 8003f48:	78fb      	ldrb	r3, [r7, #3]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4803      	ldr	r0, [pc, #12]	@ (8003f5c <BSP_LCD_SetTransparency+0x20>)
 8003f50:	f006 f88a 	bl	800a068 <HAL_LTDC_SetAlpha>
}
 8003f54:	bf00      	nop
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	20001140 	.word	0x20001140

08003f60 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003f68:	4b07      	ldr	r3, [pc, #28]	@ (8003f88 <BSP_LCD_SetTextColor+0x28>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	4907      	ldr	r1, [pc, #28]	@ (8003f8c <BSP_LCD_SetTextColor+0x2c>)
 8003f6e:	4613      	mov	r3, r2
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	601a      	str	r2, [r3, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	20001228 	.word	0x20001228
 8003f8c:	2000122c 	.word	0x2000122c

08003f90 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003f98:	4b08      	ldr	r3, [pc, #32]	@ (8003fbc <BSP_LCD_SetBackColor+0x2c>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	4908      	ldr	r1, [pc, #32]	@ (8003fc0 <BSP_LCD_SetBackColor+0x30>)
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	3304      	adds	r3, #4
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	601a      	str	r2, [r3, #0]
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20001228 	.word	0x20001228
 8003fc0:	2000122c 	.word	0x2000122c

08003fc4 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003fcc:	4b08      	ldr	r3, [pc, #32]	@ (8003ff0 <BSP_LCD_SetFont+0x2c>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4908      	ldr	r1, [pc, #32]	@ (8003ff4 <BSP_LCD_SetFont+0x30>)
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	3308      	adds	r3, #8
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	601a      	str	r2, [r3, #0]
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	20001228 	.word	0x20001228
 8003ff4:	2000122c 	.word	0x2000122c

08003ff8 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8003ffc:	4b07      	ldr	r3, [pc, #28]	@ (800401c <BSP_LCD_GetFont+0x24>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	4907      	ldr	r1, [pc, #28]	@ (8004020 <BSP_LCD_GetFont+0x28>)
 8004002:	4613      	mov	r3, r2
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	3308      	adds	r3, #8
 800400e:	681b      	ldr	r3, [r3, #0]
}
 8004010:	4618      	mov	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	20001228 	.word	0x20001228
 8004020:	2000122c 	.word	0x2000122c

08004024 <BSP_LCD_ReadPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position 
  * @retval RGB pixel color
  */
uint32_t BSP_LCD_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8004024:	b5b0      	push	{r4, r5, r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	460a      	mov	r2, r1
 800402e:	80fb      	strh	r3, [r7, #6]
 8004030:	4613      	mov	r3, r2
 8004032:	80bb      	strh	r3, [r7, #4]
  uint32_t ret = 0;
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]
  
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004038:	4b4b      	ldr	r3, [pc, #300]	@ (8004168 <BSP_LCD_ReadPixel+0x144>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a4b      	ldr	r2, [pc, #300]	@ (800416c <BSP_LCD_ReadPixel+0x148>)
 800403e:	2134      	movs	r1, #52	@ 0x34
 8004040:	fb01 f303 	mul.w	r3, r1, r3
 8004044:	4413      	add	r3, r2
 8004046:	3348      	adds	r3, #72	@ 0x48
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d115      	bne.n	800407a <BSP_LCD_ReadPixel+0x56>
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos)));
 800404e:	4b46      	ldr	r3, [pc, #280]	@ (8004168 <BSP_LCD_ReadPixel+0x144>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a46      	ldr	r2, [pc, #280]	@ (800416c <BSP_LCD_ReadPixel+0x148>)
 8004054:	2134      	movs	r1, #52	@ 0x34
 8004056:	fb01 f303 	mul.w	r3, r1, r3
 800405a:	4413      	add	r3, r2
 800405c:	335c      	adds	r3, #92	@ 0x5c
 800405e:	681c      	ldr	r4, [r3, #0]
 8004060:	88bd      	ldrh	r5, [r7, #4]
 8004062:	f7ff fed3 	bl	8003e0c <BSP_LCD_GetXSize>
 8004066:	4603      	mov	r3, r0
 8004068:	fb03 f205 	mul.w	r2, r3, r5
 800406c:	88fb      	ldrh	r3, [r7, #6]
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4423      	add	r3, r4
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	e070      	b.n	800415c <BSP_LCD_ReadPixel+0x138>
  }
  else if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800407a:	4b3b      	ldr	r3, [pc, #236]	@ (8004168 <BSP_LCD_ReadPixel+0x144>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a3b      	ldr	r2, [pc, #236]	@ (800416c <BSP_LCD_ReadPixel+0x148>)
 8004080:	2134      	movs	r1, #52	@ 0x34
 8004082:	fb01 f303 	mul.w	r3, r1, r3
 8004086:	4413      	add	r3, r2
 8004088:	3348      	adds	r3, #72	@ 0x48
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d117      	bne.n	80040c0 <BSP_LCD_ReadPixel+0x9c>
  {
    /* Read data value from SDRAM memory */
    ret = (*(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) & 0x00FFFFFF);
 8004090:	4b35      	ldr	r3, [pc, #212]	@ (8004168 <BSP_LCD_ReadPixel+0x144>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a35      	ldr	r2, [pc, #212]	@ (800416c <BSP_LCD_ReadPixel+0x148>)
 8004096:	2134      	movs	r1, #52	@ 0x34
 8004098:	fb01 f303 	mul.w	r3, r1, r3
 800409c:	4413      	add	r3, r2
 800409e:	335c      	adds	r3, #92	@ 0x5c
 80040a0:	681c      	ldr	r4, [r3, #0]
 80040a2:	88bd      	ldrh	r5, [r7, #4]
 80040a4:	f7ff feb2 	bl	8003e0c <BSP_LCD_GetXSize>
 80040a8:	4603      	mov	r3, r0
 80040aa:	fb03 f205 	mul.w	r2, r3, r5
 80040ae:	88fb      	ldrh	r3, [r7, #6]
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4423      	add	r3, r4
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	e04d      	b.n	800415c <BSP_LCD_ReadPixel+0x138>
  }
  else if((hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) || \
 80040c0:	4b29      	ldr	r3, [pc, #164]	@ (8004168 <BSP_LCD_ReadPixel+0x144>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a29      	ldr	r2, [pc, #164]	@ (800416c <BSP_LCD_ReadPixel+0x148>)
 80040c6:	2134      	movs	r1, #52	@ 0x34
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	4413      	add	r3, r2
 80040ce:	3348      	adds	r3, #72	@ 0x48
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d015      	beq.n	8004102 <BSP_LCD_ReadPixel+0xde>
          (hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80040d6:	4b24      	ldr	r3, [pc, #144]	@ (8004168 <BSP_LCD_ReadPixel+0x144>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a24      	ldr	r2, [pc, #144]	@ (800416c <BSP_LCD_ReadPixel+0x148>)
 80040dc:	2134      	movs	r1, #52	@ 0x34
 80040de:	fb01 f303 	mul.w	r3, r1, r3
 80040e2:	4413      	add	r3, r2
 80040e4:	3348      	adds	r3, #72	@ 0x48
 80040e6:	681b      	ldr	r3, [r3, #0]
  else if((hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) || \
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d00a      	beq.n	8004102 <BSP_LCD_ReadPixel+0xde>
          (hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_AL88))  
 80040ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004168 <BSP_LCD_ReadPixel+0x144>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a1e      	ldr	r2, [pc, #120]	@ (800416c <BSP_LCD_ReadPixel+0x148>)
 80040f2:	2134      	movs	r1, #52	@ 0x34
 80040f4:	fb01 f303 	mul.w	r3, r1, r3
 80040f8:	4413      	add	r3, r2
 80040fa:	3348      	adds	r3, #72	@ 0x48
 80040fc:	681b      	ldr	r3, [r3, #0]
          (hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80040fe:	2b07      	cmp	r3, #7
 8004100:	d116      	bne.n	8004130 <BSP_LCD_ReadPixel+0x10c>
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos)));    
 8004102:	4b19      	ldr	r3, [pc, #100]	@ (8004168 <BSP_LCD_ReadPixel+0x144>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a19      	ldr	r2, [pc, #100]	@ (800416c <BSP_LCD_ReadPixel+0x148>)
 8004108:	2134      	movs	r1, #52	@ 0x34
 800410a:	fb01 f303 	mul.w	r3, r1, r3
 800410e:	4413      	add	r3, r2
 8004110:	335c      	adds	r3, #92	@ 0x5c
 8004112:	681c      	ldr	r4, [r3, #0]
 8004114:	88bd      	ldrh	r5, [r7, #4]
 8004116:	f7ff fe79 	bl	8003e0c <BSP_LCD_GetXSize>
 800411a:	4603      	mov	r3, r0
 800411c:	fb03 f205 	mul.w	r2, r3, r5
 8004120:	88fb      	ldrh	r3, [r7, #6]
 8004122:	4413      	add	r3, r2
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	4423      	add	r3, r4
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	b29b      	uxth	r3, r3
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	e015      	b.n	800415c <BSP_LCD_ReadPixel+0x138>
  }
  else
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint8_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos)));    
 8004130:	4b0d      	ldr	r3, [pc, #52]	@ (8004168 <BSP_LCD_ReadPixel+0x144>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a0d      	ldr	r2, [pc, #52]	@ (800416c <BSP_LCD_ReadPixel+0x148>)
 8004136:	2134      	movs	r1, #52	@ 0x34
 8004138:	fb01 f303 	mul.w	r3, r1, r3
 800413c:	4413      	add	r3, r2
 800413e:	335c      	adds	r3, #92	@ 0x5c
 8004140:	681c      	ldr	r4, [r3, #0]
 8004142:	88bd      	ldrh	r5, [r7, #4]
 8004144:	f7ff fe62 	bl	8003e0c <BSP_LCD_GetXSize>
 8004148:	4603      	mov	r3, r0
 800414a:	fb03 f205 	mul.w	r2, r3, r5
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	4413      	add	r3, r2
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	4423      	add	r3, r4
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800415c:	68fb      	ldr	r3, [r7, #12]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bdb0      	pop	{r4, r5, r7, pc}
 8004166:	bf00      	nop
 8004168:	20001228 	.word	0x20001228
 800416c:	20001140 	.word	0x20001140

08004170 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8004170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004172:	b085      	sub	sp, #20
 8004174:	af02      	add	r7, sp, #8
 8004176:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004178:	4b0f      	ldr	r3, [pc, #60]	@ (80041b8 <BSP_LCD_Clear+0x48>)
 800417a:	681c      	ldr	r4, [r3, #0]
 800417c:	4b0e      	ldr	r3, [pc, #56]	@ (80041b8 <BSP_LCD_Clear+0x48>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a0e      	ldr	r2, [pc, #56]	@ (80041bc <BSP_LCD_Clear+0x4c>)
 8004182:	2134      	movs	r1, #52	@ 0x34
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	4413      	add	r3, r2
 800418a:	335c      	adds	r3, #92	@ 0x5c
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	461e      	mov	r6, r3
 8004190:	f7ff fe3c 	bl	8003e0c <BSP_LCD_GetXSize>
 8004194:	4605      	mov	r5, r0
 8004196:	f7ff fe4d 	bl	8003e34 <BSP_LCD_GetYSize>
 800419a:	4602      	mov	r2, r0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	9301      	str	r3, [sp, #4]
 80041a0:	2300      	movs	r3, #0
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	4613      	mov	r3, r2
 80041a6:	462a      	mov	r2, r5
 80041a8:	4631      	mov	r1, r6
 80041aa:	4620      	mov	r0, r4
 80041ac:	f000 fc6c 	bl	8004a88 <LL_FillBuffer>
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041b8:	20001228 	.word	0x20001228
 80041bc:	20001140 	.word	0x20001140

080041c0 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80041c0:	b590      	push	{r4, r7, lr}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	80fb      	strh	r3, [r7, #6]
 80041ca:	460b      	mov	r3, r1
 80041cc:	80bb      	strh	r3, [r7, #4]
 80041ce:	4613      	mov	r3, r2
 80041d0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80041d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004240 <BSP_LCD_DisplayChar+0x80>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	491b      	ldr	r1, [pc, #108]	@ (8004244 <BSP_LCD_DisplayChar+0x84>)
 80041d8:	4613      	mov	r3, r2
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	4413      	add	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	3308      	adds	r3, #8
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6819      	ldr	r1, [r3, #0]
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80041ee:	4b14      	ldr	r3, [pc, #80]	@ (8004240 <BSP_LCD_DisplayChar+0x80>)
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	4c14      	ldr	r4, [pc, #80]	@ (8004244 <BSP_LCD_DisplayChar+0x84>)
 80041f4:	4613      	mov	r3, r2
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	4413      	add	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4423      	add	r3, r4
 80041fe:	3308      	adds	r3, #8
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004204:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004208:	4b0d      	ldr	r3, [pc, #52]	@ (8004240 <BSP_LCD_DisplayChar+0x80>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	4c0d      	ldr	r4, [pc, #52]	@ (8004244 <BSP_LCD_DisplayChar+0x84>)
 800420e:	4613      	mov	r3, r2
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	4413      	add	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4423      	add	r3, r4
 8004218:	3308      	adds	r3, #8
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	889b      	ldrh	r3, [r3, #4]
 800421e:	3307      	adds	r3, #7
 8004220:	2b00      	cmp	r3, #0
 8004222:	da00      	bge.n	8004226 <BSP_LCD_DisplayChar+0x66>
 8004224:	3307      	adds	r3, #7
 8004226:	10db      	asrs	r3, r3, #3
 8004228:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800422c:	18ca      	adds	r2, r1, r3
 800422e:	88b9      	ldrh	r1, [r7, #4]
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	4618      	mov	r0, r3
 8004234:	f000 fb70 	bl	8004918 <DrawChar>
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	bd90      	pop	{r4, r7, pc}
 8004240:	20001228 	.word	0x20001228
 8004244:	2000122c 	.word	0x2000122c

08004248 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8004248:	b5b0      	push	{r4, r5, r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af00      	add	r7, sp, #0
 800424e:	60ba      	str	r2, [r7, #8]
 8004250:	461a      	mov	r2, r3
 8004252:	4603      	mov	r3, r0
 8004254:	81fb      	strh	r3, [r7, #14]
 8004256:	460b      	mov	r3, r1
 8004258:	81bb      	strh	r3, [r7, #12]
 800425a:	4613      	mov	r3, r2
 800425c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800425e:	2301      	movs	r3, #1
 8004260:	83fb      	strh	r3, [r7, #30]
 8004262:	2300      	movs	r3, #0
 8004264:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8004266:	2300      	movs	r3, #0
 8004268:	61bb      	str	r3, [r7, #24]
 800426a:	2300      	movs	r3, #0
 800426c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8004272:	e002      	b.n	800427a <BSP_LCD_DisplayStringAt+0x32>
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	3301      	adds	r3, #1
 8004278:	61bb      	str	r3, [r7, #24]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	617a      	str	r2, [r7, #20]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f6      	bne.n	8004274 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8004286:	f7ff fdc1 	bl	8003e0c <BSP_LCD_GetXSize>
 800428a:	4601      	mov	r1, r0
 800428c:	4b50      	ldr	r3, [pc, #320]	@ (80043d0 <BSP_LCD_DisplayStringAt+0x188>)
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	4850      	ldr	r0, [pc, #320]	@ (80043d4 <BSP_LCD_DisplayStringAt+0x18c>)
 8004292:	4613      	mov	r3, r2
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4403      	add	r3, r0
 800429c:	3308      	adds	r3, #8
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	889b      	ldrh	r3, [r3, #4]
 80042a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80042a6:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d01c      	beq.n	80042e8 <BSP_LCD_DisplayStringAt+0xa0>
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	dc33      	bgt.n	800431a <BSP_LCD_DisplayStringAt+0xd2>
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d002      	beq.n	80042bc <BSP_LCD_DisplayStringAt+0x74>
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d019      	beq.n	80042ee <BSP_LCD_DisplayStringAt+0xa6>
 80042ba:	e02e      	b.n	800431a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	1ad1      	subs	r1, r2, r3
 80042c2:	4b43      	ldr	r3, [pc, #268]	@ (80043d0 <BSP_LCD_DisplayStringAt+0x188>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	4843      	ldr	r0, [pc, #268]	@ (80043d4 <BSP_LCD_DisplayStringAt+0x18c>)
 80042c8:	4613      	mov	r3, r2
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4403      	add	r3, r0
 80042d2:	3308      	adds	r3, #8
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	889b      	ldrh	r3, [r3, #4]
 80042d8:	fb01 f303 	mul.w	r3, r1, r3
 80042dc:	085b      	lsrs	r3, r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	89fb      	ldrh	r3, [r7, #14]
 80042e2:	4413      	add	r3, r2
 80042e4:	83fb      	strh	r3, [r7, #30]
      break;
 80042e6:	e01b      	b.n	8004320 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80042e8:	89fb      	ldrh	r3, [r7, #14]
 80042ea:	83fb      	strh	r3, [r7, #30]
      break;
 80042ec:	e018      	b.n	8004320 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	b299      	uxth	r1, r3
 80042f6:	4b36      	ldr	r3, [pc, #216]	@ (80043d0 <BSP_LCD_DisplayStringAt+0x188>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	4836      	ldr	r0, [pc, #216]	@ (80043d4 <BSP_LCD_DisplayStringAt+0x18c>)
 80042fc:	4613      	mov	r3, r2
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4403      	add	r3, r0
 8004306:	3308      	adds	r3, #8
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	889b      	ldrh	r3, [r3, #4]
 800430c:	fb11 f303 	smulbb	r3, r1, r3
 8004310:	b29a      	uxth	r2, r3
 8004312:	89fb      	ldrh	r3, [r7, #14]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	83fb      	strh	r3, [r7, #30]
      break;
 8004318:	e002      	b.n	8004320 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 800431a:	89fb      	ldrh	r3, [r7, #14]
 800431c:	83fb      	strh	r3, [r7, #30]
      break;
 800431e:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8004320:	8bfb      	ldrh	r3, [r7, #30]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <BSP_LCD_DisplayStringAt+0xe6>
 8004326:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800432a:	2b00      	cmp	r3, #0
 800432c:	da1d      	bge.n	800436a <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 800432e:	2301      	movs	r3, #1
 8004330:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004332:	e01a      	b.n	800436a <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	781a      	ldrb	r2, [r3, #0]
 8004338:	89b9      	ldrh	r1, [r7, #12]
 800433a:	8bfb      	ldrh	r3, [r7, #30]
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff ff3f 	bl	80041c0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8004342:	4b23      	ldr	r3, [pc, #140]	@ (80043d0 <BSP_LCD_DisplayStringAt+0x188>)
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	4923      	ldr	r1, [pc, #140]	@ (80043d4 <BSP_LCD_DisplayStringAt+0x18c>)
 8004348:	4613      	mov	r3, r2
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	4413      	add	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	3308      	adds	r3, #8
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	889a      	ldrh	r2, [r3, #4]
 8004358:	8bfb      	ldrh	r3, [r7, #30]
 800435a:	4413      	add	r3, r2
 800435c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	3301      	adds	r3, #1
 8004362:	60bb      	str	r3, [r7, #8]
    i++;
 8004364:	8bbb      	ldrh	r3, [r7, #28]
 8004366:	3301      	adds	r3, #1
 8004368:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	bf14      	ite	ne
 8004372:	2301      	movne	r3, #1
 8004374:	2300      	moveq	r3, #0
 8004376:	b2dc      	uxtb	r4, r3
 8004378:	f7ff fd48 	bl	8003e0c <BSP_LCD_GetXSize>
 800437c:	8bb9      	ldrh	r1, [r7, #28]
 800437e:	4b14      	ldr	r3, [pc, #80]	@ (80043d0 <BSP_LCD_DisplayStringAt+0x188>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4d14      	ldr	r5, [pc, #80]	@ (80043d4 <BSP_LCD_DisplayStringAt+0x18c>)
 8004384:	4613      	mov	r3, r2
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	442b      	add	r3, r5
 800438e:	3308      	adds	r3, #8
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	889b      	ldrh	r3, [r3, #4]
 8004394:	fb01 f303 	mul.w	r3, r1, r3
 8004398:	1ac3      	subs	r3, r0, r3
 800439a:	b299      	uxth	r1, r3
 800439c:	4b0c      	ldr	r3, [pc, #48]	@ (80043d0 <BSP_LCD_DisplayStringAt+0x188>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	480c      	ldr	r0, [pc, #48]	@ (80043d4 <BSP_LCD_DisplayStringAt+0x18c>)
 80043a2:	4613      	mov	r3, r2
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4403      	add	r3, r0
 80043ac:	3308      	adds	r3, #8
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	889b      	ldrh	r3, [r3, #4]
 80043b2:	4299      	cmp	r1, r3
 80043b4:	bf2c      	ite	cs
 80043b6:	2301      	movcs	r3, #1
 80043b8:	2300      	movcc	r3, #0
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	4023      	ands	r3, r4
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1b7      	bne.n	8004334 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop
 80043c8:	3720      	adds	r7, #32
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bdb0      	pop	{r4, r5, r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20001228 	.word	0x20001228
 80043d4:	2000122c 	.word	0x2000122c

080043d8 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	6039      	str	r1, [r7, #0]
 80043e2:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80043e4:	f7ff fe08 	bl	8003ff8 <BSP_LCD_GetFont>
 80043e8:	4603      	mov	r3, r0
 80043ea:	88db      	ldrh	r3, [r3, #6]
 80043ec:	88fa      	ldrh	r2, [r7, #6]
 80043ee:	fb12 f303 	smulbb	r3, r2, r3
 80043f2:	b299      	uxth	r1, r3
 80043f4:	2303      	movs	r3, #3
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	2000      	movs	r0, #0
 80043fa:	f7ff ff25 	bl	8004248 <BSP_LCD_DisplayStringAt>
}
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004408:	b5b0      	push	{r4, r5, r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	4603      	mov	r3, r0
 8004410:	603a      	str	r2, [r7, #0]
 8004412:	80fb      	strh	r3, [r7, #6]
 8004414:	460b      	mov	r3, r1
 8004416:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004418:	4b1d      	ldr	r3, [pc, #116]	@ (8004490 <BSP_LCD_DrawPixel+0x88>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a1d      	ldr	r2, [pc, #116]	@ (8004494 <BSP_LCD_DrawPixel+0x8c>)
 800441e:	2134      	movs	r1, #52	@ 0x34
 8004420:	fb01 f303 	mul.w	r3, r1, r3
 8004424:	4413      	add	r3, r2
 8004426:	3348      	adds	r3, #72	@ 0x48
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d116      	bne.n	800445c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800442e:	4b18      	ldr	r3, [pc, #96]	@ (8004490 <BSP_LCD_DrawPixel+0x88>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a18      	ldr	r2, [pc, #96]	@ (8004494 <BSP_LCD_DrawPixel+0x8c>)
 8004434:	2134      	movs	r1, #52	@ 0x34
 8004436:	fb01 f303 	mul.w	r3, r1, r3
 800443a:	4413      	add	r3, r2
 800443c:	335c      	adds	r3, #92	@ 0x5c
 800443e:	681c      	ldr	r4, [r3, #0]
 8004440:	88bd      	ldrh	r5, [r7, #4]
 8004442:	f7ff fce3 	bl	8003e0c <BSP_LCD_GetXSize>
 8004446:	4603      	mov	r3, r0
 8004448:	fb03 f205 	mul.w	r2, r3, r5
 800444c:	88fb      	ldrh	r3, [r7, #6]
 800444e:	4413      	add	r3, r2
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	4423      	add	r3, r4
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	b292      	uxth	r2, r2
 8004458:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800445a:	e015      	b.n	8004488 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800445c:	4b0c      	ldr	r3, [pc, #48]	@ (8004490 <BSP_LCD_DrawPixel+0x88>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a0c      	ldr	r2, [pc, #48]	@ (8004494 <BSP_LCD_DrawPixel+0x8c>)
 8004462:	2134      	movs	r1, #52	@ 0x34
 8004464:	fb01 f303 	mul.w	r3, r1, r3
 8004468:	4413      	add	r3, r2
 800446a:	335c      	adds	r3, #92	@ 0x5c
 800446c:	681c      	ldr	r4, [r3, #0]
 800446e:	88bd      	ldrh	r5, [r7, #4]
 8004470:	f7ff fccc 	bl	8003e0c <BSP_LCD_GetXSize>
 8004474:	4603      	mov	r3, r0
 8004476:	fb03 f205 	mul.w	r2, r3, r5
 800447a:	88fb      	ldrh	r3, [r7, #6]
 800447c:	4413      	add	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4423      	add	r3, r4
 8004482:	461a      	mov	r2, r3
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	6013      	str	r3, [r2, #0]
}
 8004488:	bf00      	nop
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bdb0      	pop	{r4, r5, r7, pc}
 8004490:	20001228 	.word	0x20001228
 8004494:	20001140 	.word	0x20001140

08004498 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8004498:	b590      	push	{r4, r7, lr}
 800449a:	b08b      	sub	sp, #44	@ 0x2c
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 80044a4:	2300      	movs	r3, #0
 80044a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80044a8:	2300      	movs	r3, #0
 80044aa:	61bb      	str	r3, [r7, #24]
 80044ac:	2300      	movs	r3, #0
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	2300      	movs	r3, #0
 80044b2:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	330a      	adds	r3, #10
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	330b      	adds	r3, #11
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	021b      	lsls	r3, r3, #8
 80044c8:	441a      	add	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	330c      	adds	r3, #12
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	041b      	lsls	r3, r3, #16
 80044d2:	441a      	add	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	330d      	adds	r3, #13
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	061b      	lsls	r3, r3, #24
 80044dc:	4413      	add	r3, r2
 80044de:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3312      	adds	r3, #18
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	461a      	mov	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3313      	adds	r3, #19
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	021b      	lsls	r3, r3, #8
 80044f0:	441a      	add	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3314      	adds	r3, #20
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	041b      	lsls	r3, r3, #16
 80044fa:	441a      	add	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3315      	adds	r3, #21
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	061b      	lsls	r3, r3, #24
 8004504:	4413      	add	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3316      	adds	r3, #22
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3317      	adds	r3, #23
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	021b      	lsls	r3, r3, #8
 8004518:	441a      	add	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3318      	adds	r3, #24
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	041b      	lsls	r3, r3, #16
 8004522:	441a      	add	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3319      	adds	r3, #25
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	061b      	lsls	r3, r3, #24
 800452c:	4413      	add	r3, r2
 800452e:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	331c      	adds	r3, #28
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	331d      	adds	r3, #29
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	021b      	lsls	r3, r3, #8
 8004540:	4413      	add	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8004544:	4b2b      	ldr	r3, [pc, #172]	@ (80045f4 <BSP_LCD_DrawBitmap+0x15c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a2b      	ldr	r2, [pc, #172]	@ (80045f8 <BSP_LCD_DrawBitmap+0x160>)
 800454a:	2134      	movs	r1, #52	@ 0x34
 800454c:	fb01 f303 	mul.w	r3, r1, r3
 8004550:	4413      	add	r3, r2
 8004552:	335c      	adds	r3, #92	@ 0x5c
 8004554:	681c      	ldr	r4, [r3, #0]
 8004556:	f7ff fc59 	bl	8003e0c <BSP_LCD_GetXSize>
 800455a:	4602      	mov	r2, r0
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	fb03 f202 	mul.w	r2, r3, r2
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4413      	add	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4423      	add	r3, r4
 800456a:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	3b20      	subs	r3, #32
 8004570:	2b07      	cmp	r3, #7
 8004572:	d802      	bhi.n	800457a <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8004574:	2300      	movs	r3, #0
 8004576:	61fb      	str	r3, [r7, #28]
 8004578:	e008      	b.n	800458c <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	3b10      	subs	r3, #16
 800457e:	2b07      	cmp	r3, #7
 8004580:	d802      	bhi.n	8004588 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8004582:	2302      	movs	r3, #2
 8004584:	61fb      	str	r3, [r7, #28]
 8004586:	e001      	b.n	800458c <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8004588:	2301      	movs	r3, #1
 800458a:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	3b01      	subs	r3, #1
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	fb02 f303 	mul.w	r3, r2, r3
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	08d2      	lsrs	r2, r2, #3
 800459a:	fb03 f202 	mul.w	r2, r3, r2
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a0:	4413      	add	r3, r2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	4413      	add	r3, r2
 80045a6:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80045a8:	2300      	movs	r3, #0
 80045aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ac:	e018      	b.n	80045e0 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 80045ae:	6a39      	ldr	r1, [r7, #32]
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 fb07 	bl	8004bc8 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 80045ba:	f7ff fc27 	bl	8003e0c <BSP_LCD_GetXSize>
 80045be:	4603      	mov	r3, r0
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	6a3a      	ldr	r2, [r7, #32]
 80045c4:	4413      	add	r3, r2
 80045c6:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	08db      	lsrs	r3, r3, #3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	fb02 f303 	mul.w	r3, r2, r3
 80045d2:	425b      	negs	r3, r3
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	4413      	add	r3, r2
 80045d8:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	3301      	adds	r3, #1
 80045de:	627b      	str	r3, [r7, #36]	@ 0x24
 80045e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d3e2      	bcc.n	80045ae <BSP_LCD_DrawBitmap+0x116>
  } 
}
 80045e8:	bf00      	nop
 80045ea:	bf00      	nop
 80045ec:	372c      	adds	r7, #44	@ 0x2c
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd90      	pop	{r4, r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20001228 	.word	0x20001228
 80045f8:	20001140 	.word	0x20001140

080045fc <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80045fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004600:	b086      	sub	sp, #24
 8004602:	af02      	add	r7, sp, #8
 8004604:	4604      	mov	r4, r0
 8004606:	4608      	mov	r0, r1
 8004608:	4611      	mov	r1, r2
 800460a:	461a      	mov	r2, r3
 800460c:	4623      	mov	r3, r4
 800460e:	80fb      	strh	r3, [r7, #6]
 8004610:	4603      	mov	r3, r0
 8004612:	80bb      	strh	r3, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	807b      	strh	r3, [r7, #2]
 8004618:	4613      	mov	r3, r2
 800461a:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004620:	4b30      	ldr	r3, [pc, #192]	@ (80046e4 <BSP_LCD_FillRect+0xe8>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	4930      	ldr	r1, [pc, #192]	@ (80046e8 <BSP_LCD_FillRect+0xec>)
 8004626:	4613      	mov	r3, r2
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	4413      	add	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	440b      	add	r3, r1
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff fc94 	bl	8003f60 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004638:	4b2a      	ldr	r3, [pc, #168]	@ (80046e4 <BSP_LCD_FillRect+0xe8>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a2b      	ldr	r2, [pc, #172]	@ (80046ec <BSP_LCD_FillRect+0xf0>)
 800463e:	2134      	movs	r1, #52	@ 0x34
 8004640:	fb01 f303 	mul.w	r3, r1, r3
 8004644:	4413      	add	r3, r2
 8004646:	3348      	adds	r3, #72	@ 0x48
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d114      	bne.n	8004678 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800464e:	4b25      	ldr	r3, [pc, #148]	@ (80046e4 <BSP_LCD_FillRect+0xe8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a26      	ldr	r2, [pc, #152]	@ (80046ec <BSP_LCD_FillRect+0xf0>)
 8004654:	2134      	movs	r1, #52	@ 0x34
 8004656:	fb01 f303 	mul.w	r3, r1, r3
 800465a:	4413      	add	r3, r2
 800465c:	335c      	adds	r3, #92	@ 0x5c
 800465e:	681c      	ldr	r4, [r3, #0]
 8004660:	f7ff fbd4 	bl	8003e0c <BSP_LCD_GetXSize>
 8004664:	4602      	mov	r2, r0
 8004666:	88bb      	ldrh	r3, [r7, #4]
 8004668:	fb03 f202 	mul.w	r2, r3, r2
 800466c:	88fb      	ldrh	r3, [r7, #6]
 800466e:	4413      	add	r3, r2
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	4423      	add	r3, r4
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	e013      	b.n	80046a0 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004678:	4b1a      	ldr	r3, [pc, #104]	@ (80046e4 <BSP_LCD_FillRect+0xe8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a1b      	ldr	r2, [pc, #108]	@ (80046ec <BSP_LCD_FillRect+0xf0>)
 800467e:	2134      	movs	r1, #52	@ 0x34
 8004680:	fb01 f303 	mul.w	r3, r1, r3
 8004684:	4413      	add	r3, r2
 8004686:	335c      	adds	r3, #92	@ 0x5c
 8004688:	681c      	ldr	r4, [r3, #0]
 800468a:	f7ff fbbf 	bl	8003e0c <BSP_LCD_GetXSize>
 800468e:	4602      	mov	r2, r0
 8004690:	88bb      	ldrh	r3, [r7, #4]
 8004692:	fb03 f202 	mul.w	r2, r3, r2
 8004696:	88fb      	ldrh	r3, [r7, #6]
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4423      	add	r3, r4
 800469e:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80046a0:	4b10      	ldr	r3, [pc, #64]	@ (80046e4 <BSP_LCD_FillRect+0xe8>)
 80046a2:	681c      	ldr	r4, [r3, #0]
 80046a4:	68fd      	ldr	r5, [r7, #12]
 80046a6:	887e      	ldrh	r6, [r7, #2]
 80046a8:	f8b7 8000 	ldrh.w	r8, [r7]
 80046ac:	f7ff fbae 	bl	8003e0c <BSP_LCD_GetXSize>
 80046b0:	4602      	mov	r2, r0
 80046b2:	887b      	ldrh	r3, [r7, #2]
 80046b4:	1ad1      	subs	r1, r2, r3
 80046b6:	4b0b      	ldr	r3, [pc, #44]	@ (80046e4 <BSP_LCD_FillRect+0xe8>)
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	480b      	ldr	r0, [pc, #44]	@ (80046e8 <BSP_LCD_FillRect+0xec>)
 80046bc:	4613      	mov	r3, r2
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4403      	add	r3, r0
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	9301      	str	r3, [sp, #4]
 80046ca:	9100      	str	r1, [sp, #0]
 80046cc:	4643      	mov	r3, r8
 80046ce:	4632      	mov	r2, r6
 80046d0:	4629      	mov	r1, r5
 80046d2:	4620      	mov	r0, r4
 80046d4:	f000 f9d8 	bl	8004a88 <LL_FillBuffer>
}
 80046d8:	bf00      	nop
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046e2:	bf00      	nop
 80046e4:	20001228 	.word	0x20001228
 80046e8:	2000122c 	.word	0x2000122c
 80046ec:	20001140 	.word	0x20001140

080046f0 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80046f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004720 <BSP_LCD_DisplayOn+0x30>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	4b09      	ldr	r3, [pc, #36]	@ (8004720 <BSP_LCD_DisplayOn+0x30>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0201 	orr.w	r2, r2, #1
 8004702:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8004704:	2201      	movs	r2, #1
 8004706:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800470a:	4806      	ldr	r0, [pc, #24]	@ (8004724 <BSP_LCD_DisplayOn+0x34>)
 800470c:	f004 fd18 	bl	8009140 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004710:	2201      	movs	r2, #1
 8004712:	2108      	movs	r1, #8
 8004714:	4804      	ldr	r0, [pc, #16]	@ (8004728 <BSP_LCD_DisplayOn+0x38>)
 8004716:	f004 fd13 	bl	8009140 <HAL_GPIO_WritePin>
}
 800471a:	bf00      	nop
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	20001140 	.word	0x20001140
 8004724:	40022000 	.word	0x40022000
 8004728:	40022800 	.word	0x40022800

0800472c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b090      	sub	sp, #64	@ 0x40
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004736:	4b64      	ldr	r3, [pc, #400]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 8004738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800473a:	4a63      	ldr	r2, [pc, #396]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 800473c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004740:	6453      	str	r3, [r2, #68]	@ 0x44
 8004742:	4b61      	ldr	r3, [pc, #388]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 8004744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004746:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800474a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800474c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800474e:	4b5e      	ldr	r3, [pc, #376]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004752:	4a5d      	ldr	r2, [pc, #372]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 8004754:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004758:	6313      	str	r3, [r2, #48]	@ 0x30
 800475a:	4b5b      	ldr	r3, [pc, #364]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 800475c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004762:	627b      	str	r3, [r7, #36]	@ 0x24
 8004764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004766:	4b58      	ldr	r3, [pc, #352]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 8004768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476a:	4a57      	ldr	r2, [pc, #348]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 800476c:	f043 0310 	orr.w	r3, r3, #16
 8004770:	6313      	str	r3, [r2, #48]	@ 0x30
 8004772:	4b55      	ldr	r3, [pc, #340]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 8004774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004776:	f003 0310 	and.w	r3, r3, #16
 800477a:	623b      	str	r3, [r7, #32]
 800477c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800477e:	4b52      	ldr	r3, [pc, #328]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004782:	4a51      	ldr	r2, [pc, #324]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 8004784:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004788:	6313      	str	r3, [r2, #48]	@ 0x30
 800478a:	4b4f      	ldr	r3, [pc, #316]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004792:	61fb      	str	r3, [r7, #28]
 8004794:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004796:	4b4c      	ldr	r3, [pc, #304]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 8004798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479a:	4a4b      	ldr	r2, [pc, #300]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 800479c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80047a2:	4b49      	ldr	r3, [pc, #292]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047aa:	61bb      	str	r3, [r7, #24]
 80047ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80047ae:	4b46      	ldr	r3, [pc, #280]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b2:	4a45      	ldr	r2, [pc, #276]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 80047b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80047ba:	4b43      	ldr	r3, [pc, #268]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80047c6:	4b40      	ldr	r3, [pc, #256]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ca:	4a3f      	ldr	r2, [pc, #252]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 80047cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80047d2:	4b3d      	ldr	r3, [pc, #244]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047da:	613b      	str	r3, [r7, #16]
 80047dc:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80047de:	4b3a      	ldr	r3, [pc, #232]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 80047e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e2:	4a39      	ldr	r2, [pc, #228]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 80047e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80047ea:	4b37      	ldr	r3, [pc, #220]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 80047ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80047f6:	4b34      	ldr	r3, [pc, #208]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 80047f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fa:	4a33      	ldr	r2, [pc, #204]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 80047fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004800:	6313      	str	r3, [r2, #48]	@ 0x30
 8004802:	4b31      	ldr	r3, [pc, #196]	@ (80048c8 <BSP_LCD_MspInit+0x19c>)
 8004804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800480a:	60bb      	str	r3, [r7, #8]
 800480c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800480e:	2310      	movs	r3, #16
 8004810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004812:	2302      	movs	r3, #2
 8004814:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004816:	2300      	movs	r3, #0
 8004818:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800481a:	2302      	movs	r3, #2
 800481c:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800481e:	230e      	movs	r3, #14
 8004820:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004822:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004826:	4619      	mov	r1, r3
 8004828:	4828      	ldr	r0, [pc, #160]	@ (80048cc <BSP_LCD_MspInit+0x1a0>)
 800482a:	f004 f9b9 	bl	8008ba0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800482e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004834:	2302      	movs	r3, #2
 8004836:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8004838:	2309      	movs	r3, #9
 800483a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800483c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004840:	4619      	mov	r1, r3
 8004842:	4823      	ldr	r0, [pc, #140]	@ (80048d0 <BSP_LCD_MspInit+0x1a4>)
 8004844:	f004 f9ac 	bl	8008ba0 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8004848:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 800484c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800484e:	2302      	movs	r3, #2
 8004850:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004852:	230e      	movs	r3, #14
 8004854:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8004856:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800485a:	4619      	mov	r1, r3
 800485c:	481d      	ldr	r0, [pc, #116]	@ (80048d4 <BSP_LCD_MspInit+0x1a8>)
 800485e:	f004 f99f 	bl	8008ba0 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8004862:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8004866:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004868:	2302      	movs	r3, #2
 800486a:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800486c:	230e      	movs	r3, #14
 800486e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8004870:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004874:	4619      	mov	r1, r3
 8004876:	4818      	ldr	r0, [pc, #96]	@ (80048d8 <BSP_LCD_MspInit+0x1ac>)
 8004878:	f004 f992 	bl	8008ba0 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800487c:	23f7      	movs	r3, #247	@ 0xf7
 800487e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004880:	2302      	movs	r3, #2
 8004882:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004884:	230e      	movs	r3, #14
 8004886:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8004888:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800488c:	4619      	mov	r1, r3
 800488e:	4813      	ldr	r0, [pc, #76]	@ (80048dc <BSP_LCD_MspInit+0x1b0>)
 8004890:	f004 f986 	bl	8008ba0 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8004894:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800489a:	2301      	movs	r3, #1
 800489c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800489e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80048a2:	4619      	mov	r1, r3
 80048a4:	480b      	ldr	r0, [pc, #44]	@ (80048d4 <BSP_LCD_MspInit+0x1a8>)
 80048a6:	f004 f97b 	bl	8008ba0 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80048aa:	2308      	movs	r3, #8
 80048ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80048ae:	2301      	movs	r3, #1
 80048b0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80048b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80048b6:	4619      	mov	r1, r3
 80048b8:	4808      	ldr	r0, [pc, #32]	@ (80048dc <BSP_LCD_MspInit+0x1b0>)
 80048ba:	f004 f971 	bl	8008ba0 <HAL_GPIO_Init>
}
 80048be:	bf00      	nop
 80048c0:	3740      	adds	r7, #64	@ 0x40
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800
 80048cc:	40021000 	.word	0x40021000
 80048d0:	40021800 	.word	0x40021800
 80048d4:	40022000 	.word	0x40022000
 80048d8:	40022400 	.word	0x40022400
 80048dc:	40022800 	.word	0x40022800

080048e0 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80048ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004914 <BSP_LCD_ClockConfig+0x34>)
 80048ec:	2208      	movs	r2, #8
 80048ee:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80048f0:	4b08      	ldr	r3, [pc, #32]	@ (8004914 <BSP_LCD_ClockConfig+0x34>)
 80048f2:	22c0      	movs	r2, #192	@ 0xc0
 80048f4:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80048f6:	4b07      	ldr	r3, [pc, #28]	@ (8004914 <BSP_LCD_ClockConfig+0x34>)
 80048f8:	2205      	movs	r2, #5
 80048fa:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80048fc:	4b05      	ldr	r3, [pc, #20]	@ (8004914 <BSP_LCD_ClockConfig+0x34>)
 80048fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004902:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8004904:	4803      	ldr	r0, [pc, #12]	@ (8004914 <BSP_LCD_ClockConfig+0x34>)
 8004906:	f006 faa9 	bl	800ae5c <HAL_RCCEx_PeriphCLKConfig>
}
 800490a:	bf00      	nop
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20001244 	.word	0x20001244

08004918 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b088      	sub	sp, #32
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	603a      	str	r2, [r7, #0]
 8004922:	80fb      	strh	r3, [r7, #6]
 8004924:	460b      	mov	r3, r1
 8004926:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004928:	2300      	movs	r3, #0
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	2300      	movs	r3, #0
 800492e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8004930:	4b53      	ldr	r3, [pc, #332]	@ (8004a80 <DrawChar+0x168>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	4953      	ldr	r1, [pc, #332]	@ (8004a84 <DrawChar+0x16c>)
 8004936:	4613      	mov	r3, r2
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	4413      	add	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	440b      	add	r3, r1
 8004940:	3308      	adds	r3, #8
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	88db      	ldrh	r3, [r3, #6]
 8004946:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004948:	4b4d      	ldr	r3, [pc, #308]	@ (8004a80 <DrawChar+0x168>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	494d      	ldr	r1, [pc, #308]	@ (8004a84 <DrawChar+0x16c>)
 800494e:	4613      	mov	r3, r2
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	4413      	add	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	440b      	add	r3, r1
 8004958:	3308      	adds	r3, #8
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	889b      	ldrh	r3, [r3, #4]
 800495e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8004960:	8a3b      	ldrh	r3, [r7, #16]
 8004962:	3307      	adds	r3, #7
 8004964:	2b00      	cmp	r3, #0
 8004966:	da00      	bge.n	800496a <DrawChar+0x52>
 8004968:	3307      	adds	r3, #7
 800496a:	10db      	asrs	r3, r3, #3
 800496c:	b2db      	uxtb	r3, r3
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	b2da      	uxtb	r2, r3
 8004972:	8a3b      	ldrh	r3, [r7, #16]
 8004974:	b2db      	uxtb	r3, r3
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800497a:	2300      	movs	r3, #0
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	e076      	b.n	8004a6e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004980:	8a3b      	ldrh	r3, [r7, #16]
 8004982:	3307      	adds	r3, #7
 8004984:	2b00      	cmp	r3, #0
 8004986:	da00      	bge.n	800498a <DrawChar+0x72>
 8004988:	3307      	adds	r3, #7
 800498a:	10db      	asrs	r3, r3, #3
 800498c:	461a      	mov	r2, r3
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	fb02 f303 	mul.w	r3, r2, r3
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	4413      	add	r3, r2
 8004998:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800499a:	8a3b      	ldrh	r3, [r7, #16]
 800499c:	3307      	adds	r3, #7
 800499e:	2b00      	cmp	r3, #0
 80049a0:	da00      	bge.n	80049a4 <DrawChar+0x8c>
 80049a2:	3307      	adds	r3, #7
 80049a4:	10db      	asrs	r3, r3, #3
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d002      	beq.n	80049b0 <DrawChar+0x98>
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d004      	beq.n	80049b8 <DrawChar+0xa0>
 80049ae:	e00c      	b.n	80049ca <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	617b      	str	r3, [r7, #20]
      break;
 80049b6:	e016      	b.n	80049e6 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	021b      	lsls	r3, r3, #8
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	3201      	adds	r2, #1
 80049c2:	7812      	ldrb	r2, [r2, #0]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]
      break;
 80049c8:	e00d      	b.n	80049e6 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	041a      	lsls	r2, r3, #16
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	3301      	adds	r3, #1
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	021b      	lsls	r3, r3, #8
 80049d8:	4313      	orrs	r3, r2
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	3202      	adds	r2, #2
 80049de:	7812      	ldrb	r2, [r2, #0]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]
      break;
 80049e4:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80049e6:	2300      	movs	r3, #0
 80049e8:	61bb      	str	r3, [r7, #24]
 80049ea:	e036      	b.n	8004a5a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80049ec:	8a3a      	ldrh	r2, [r7, #16]
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	1ad2      	subs	r2, r2, r3
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	4413      	add	r3, r2
 80049f6:	3b01      	subs	r3, #1
 80049f8:	2201      	movs	r2, #1
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	461a      	mov	r2, r3
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	4013      	ands	r3, r2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d012      	beq.n	8004a2e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	88fb      	ldrh	r3, [r7, #6]
 8004a0e:	4413      	add	r3, r2
 8004a10:	b298      	uxth	r0, r3
 8004a12:	4b1b      	ldr	r3, [pc, #108]	@ (8004a80 <DrawChar+0x168>)
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	491b      	ldr	r1, [pc, #108]	@ (8004a84 <DrawChar+0x16c>)
 8004a18:	4613      	mov	r3, r2
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	88bb      	ldrh	r3, [r7, #4]
 8004a26:	4619      	mov	r1, r3
 8004a28:	f7ff fcee 	bl	8004408 <BSP_LCD_DrawPixel>
 8004a2c:	e012      	b.n	8004a54 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	88fb      	ldrh	r3, [r7, #6]
 8004a34:	4413      	add	r3, r2
 8004a36:	b298      	uxth	r0, r3
 8004a38:	4b11      	ldr	r3, [pc, #68]	@ (8004a80 <DrawChar+0x168>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	4911      	ldr	r1, [pc, #68]	@ (8004a84 <DrawChar+0x16c>)
 8004a3e:	4613      	mov	r3, r2
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	4413      	add	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	3304      	adds	r3, #4
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	88bb      	ldrh	r3, [r7, #4]
 8004a4e:	4619      	mov	r1, r3
 8004a50:	f7ff fcda 	bl	8004408 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	3301      	adds	r3, #1
 8004a58:	61bb      	str	r3, [r7, #24]
 8004a5a:	8a3b      	ldrh	r3, [r7, #16]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d3c4      	bcc.n	80049ec <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8004a62:	88bb      	ldrh	r3, [r7, #4]
 8004a64:	3301      	adds	r3, #1
 8004a66:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	61fb      	str	r3, [r7, #28]
 8004a6e:	8a7b      	ldrh	r3, [r7, #18]
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d384      	bcc.n	8004980 <DrawChar+0x68>
  }
}
 8004a76:	bf00      	nop
 8004a78:	bf00      	nop
 8004a7a:	3720      	adds	r7, #32
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20001228 	.word	0x20001228
 8004a84:	2000122c 	.word	0x2000122c

08004a88 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8004a96:	4b1e      	ldr	r3, [pc, #120]	@ (8004b10 <LL_FillBuffer+0x88>)
 8004a98:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004a9c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8004b14 <LL_FillBuffer+0x8c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a1d      	ldr	r2, [pc, #116]	@ (8004b18 <LL_FillBuffer+0x90>)
 8004aa4:	2134      	movs	r1, #52	@ 0x34
 8004aa6:	fb01 f303 	mul.w	r3, r1, r3
 8004aaa:	4413      	add	r3, r2
 8004aac:	3348      	adds	r3, #72	@ 0x48
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d103      	bne.n	8004abc <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8004ab4:	4b16      	ldr	r3, [pc, #88]	@ (8004b10 <LL_FillBuffer+0x88>)
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	609a      	str	r2, [r3, #8]
 8004aba:	e002      	b.n	8004ac2 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004abc:	4b14      	ldr	r3, [pc, #80]	@ (8004b10 <LL_FillBuffer+0x88>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8004ac2:	4a13      	ldr	r2, [pc, #76]	@ (8004b10 <LL_FillBuffer+0x88>)
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8004ac8:	4b11      	ldr	r3, [pc, #68]	@ (8004b10 <LL_FillBuffer+0x88>)
 8004aca:	4a14      	ldr	r2, [pc, #80]	@ (8004b1c <LL_FillBuffer+0x94>)
 8004acc:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004ace:	4810      	ldr	r0, [pc, #64]	@ (8004b10 <LL_FillBuffer+0x88>)
 8004ad0:	f003 fdda 	bl	8008688 <HAL_DMA2D_Init>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d115      	bne.n	8004b06 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8004ada:	68f9      	ldr	r1, [r7, #12]
 8004adc:	480c      	ldr	r0, [pc, #48]	@ (8004b10 <LL_FillBuffer+0x88>)
 8004ade:	f003 ff31 	bl	8008944 <HAL_DMA2D_ConfigLayer>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10e      	bne.n	8004b06 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69f9      	ldr	r1, [r7, #28]
 8004af2:	4807      	ldr	r0, [pc, #28]	@ (8004b10 <LL_FillBuffer+0x88>)
 8004af4:	f003 fe12 	bl	800871c <HAL_DMA2D_Start>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d103      	bne.n	8004b06 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004afe:	210a      	movs	r1, #10
 8004b00:	4803      	ldr	r0, [pc, #12]	@ (8004b10 <LL_FillBuffer+0x88>)
 8004b02:	f003 fe36 	bl	8008772 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004b06:	bf00      	nop
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	200011e8 	.word	0x200011e8
 8004b14:	20001228 	.word	0x20001228
 8004b18:	20001140 	.word	0x20001140
 8004b1c:	4002b000 	.word	0x4002b000

08004b20 <RGB565ToARGB8888>:

//MES FONCTIONS

static uint32_t RGB565ToARGB8888(uint16_t color) {
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	80fb      	strh	r3, [r7, #6]
  uint8_t red = (color >> 11) & 0x1F;
 8004b2a:	88fb      	ldrh	r3, [r7, #6]
 8004b2c:	0adb      	lsrs	r3, r3, #11
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	f003 031f 	and.w	r3, r3, #31
 8004b36:	73fb      	strb	r3, [r7, #15]
  uint8_t green = (color >> 5) & 0x3F;
 8004b38:	88fb      	ldrh	r3, [r7, #6]
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b44:	73bb      	strb	r3, [r7, #14]
  uint8_t blue = color & 0x1F;
 8004b46:	88fb      	ldrh	r3, [r7, #6]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	f003 031f 	and.w	r3, r3, #31
 8004b4e:	737b      	strb	r3, [r7, #13]

  return (0xFF << 24) | ((red << 3) | (red >> 2)) << 16 |
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	7bfa      	ldrb	r2, [r7, #15]
 8004b56:	0892      	lsrs	r2, r2, #2
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	041b      	lsls	r3, r3, #16
 8004b5e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
         ((green << 2) | (green >> 4)) << 8 |
 8004b62:	7bbb      	ldrb	r3, [r7, #14]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	7bb9      	ldrb	r1, [r7, #14]
 8004b68:	0909      	lsrs	r1, r1, #4
 8004b6a:	b2c9      	uxtb	r1, r1
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	021b      	lsls	r3, r3, #8
  return (0xFF << 24) | ((red << 3) | (red >> 2)) << 16 |
 8004b70:	431a      	orrs	r2, r3
         ((blue << 3) | (blue >> 2));
 8004b72:	7b7b      	ldrb	r3, [r7, #13]
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	7b79      	ldrb	r1, [r7, #13]
 8004b78:	0889      	lsrs	r1, r1, #2
 8004b7a:	b2c9      	uxtb	r1, r1
 8004b7c:	430b      	orrs	r3, r1
         ((green << 2) | (green >> 4)) << 8 |
 8004b7e:	4313      	orrs	r3, r2
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <IsColorNearMagenta>:

static int IsColorNearMagenta(uint32_t color) {
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint8_t r = (color >> 16) & 0xFF;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	0c1b      	lsrs	r3, r3, #16
 8004b98:	73fb      	strb	r3, [r7, #15]
  uint8_t g = (color >> 8) & 0xFF;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	0a1b      	lsrs	r3, r3, #8
 8004b9e:	73bb      	strb	r3, [r7, #14]
  uint8_t b = color & 0xFF;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	737b      	strb	r3, [r7, #13]

  // Vérifier si chaque composante est proche de la valeur correspondante du magenta
  return (r >= 255 - 15 && r <= 255) &&
         (g >= 0 - 125 && g <= 0 + 125) &&
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	2bef      	cmp	r3, #239	@ 0xef
 8004ba8:	d907      	bls.n	8004bba <IsColorNearMagenta+0x2e>
  return (r >= 255 - 15 && r <= 255) &&
 8004baa:	7bbb      	ldrb	r3, [r7, #14]
 8004bac:	2b7d      	cmp	r3, #125	@ 0x7d
 8004bae:	d804      	bhi.n	8004bba <IsColorNearMagenta+0x2e>
         (g >= 0 - 125 && g <= 0 + 125) &&
 8004bb0:	7b7b      	ldrb	r3, [r7, #13]
 8004bb2:	2bef      	cmp	r3, #239	@ 0xef
 8004bb4:	d901      	bls.n	8004bba <IsColorNearMagenta+0x2e>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <IsColorNearMagenta+0x30>
 8004bba:	2300      	movs	r3, #0
         (b >= 255 - 15 && b <= 255);
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08a      	sub	sp, #40	@ 0x28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	603b      	str	r3, [r7, #0]
  uint16_t* src = (uint16_t*) pSrc;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	623b      	str	r3, [r7, #32]
  uint32_t* dst = (uint32_t*) pDst;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	61fb      	str	r3, [r7, #28]

  for (uint32_t i = 0; i < xSize; i++)
 8004bde:	2300      	movs	r3, #0
 8004be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004be2:	e020      	b.n	8004c26 <LL_ConvertLineToARGB8888+0x5e>
  {
    uint16_t color = src[i];
 8004be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	6a3a      	ldr	r2, [r7, #32]
 8004bea:	4413      	add	r3, r2
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	837b      	strh	r3, [r7, #26]
    uint32_t argbColor = RGB565ToARGB8888(color);
 8004bf0:	8b7b      	ldrh	r3, [r7, #26]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff ff94 	bl	8004b20 <RGB565ToARGB8888>
 8004bf8:	6178      	str	r0, [r7, #20]

    if (IsColorNearMagenta(argbColor)) {
 8004bfa:	6978      	ldr	r0, [r7, #20]
 8004bfc:	f7ff ffc6 	bl	8004b8c <IsColorNearMagenta>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d006      	beq.n	8004c14 <LL_ConvertLineToARGB8888+0x4c>
      dst[i] = LCD_COLOR_TRANSPARENT;
 8004c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]
 8004c12:	e005      	b.n	8004c20 <LL_ConvertLineToARGB8888+0x58>
    } else {
      dst[i] = argbColor;
 8004c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	69fa      	ldr	r2, [r7, #28]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < xSize; i++)
 8004c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c22:	3301      	adds	r3, #1
 8004c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d3da      	bcc.n	8004be4 <LL_ConvertLineToARGB8888+0x1c>
    }
  }
}
 8004c2e:	bf00      	nop
 8004c30:	bf00      	nop
 8004c32:	3728      	adds	r7, #40	@ 0x28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004c3c:	4b29      	ldr	r3, [pc, #164]	@ (8004ce4 <BSP_SDRAM_Init+0xac>)
 8004c3e:	4a2a      	ldr	r2, [pc, #168]	@ (8004ce8 <BSP_SDRAM_Init+0xb0>)
 8004c40:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8004c42:	4b2a      	ldr	r3, [pc, #168]	@ (8004cec <BSP_SDRAM_Init+0xb4>)
 8004c44:	2202      	movs	r2, #2
 8004c46:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8004c48:	4b28      	ldr	r3, [pc, #160]	@ (8004cec <BSP_SDRAM_Init+0xb4>)
 8004c4a:	2207      	movs	r2, #7
 8004c4c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8004c4e:	4b27      	ldr	r3, [pc, #156]	@ (8004cec <BSP_SDRAM_Init+0xb4>)
 8004c50:	2204      	movs	r2, #4
 8004c52:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8004c54:	4b25      	ldr	r3, [pc, #148]	@ (8004cec <BSP_SDRAM_Init+0xb4>)
 8004c56:	2207      	movs	r2, #7
 8004c58:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8004c5a:	4b24      	ldr	r3, [pc, #144]	@ (8004cec <BSP_SDRAM_Init+0xb4>)
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004c60:	4b22      	ldr	r3, [pc, #136]	@ (8004cec <BSP_SDRAM_Init+0xb4>)
 8004c62:	2202      	movs	r2, #2
 8004c64:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8004c66:	4b21      	ldr	r3, [pc, #132]	@ (8004cec <BSP_SDRAM_Init+0xb4>)
 8004c68:	2202      	movs	r2, #2
 8004c6a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce4 <BSP_SDRAM_Init+0xac>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004c72:	4b1c      	ldr	r3, [pc, #112]	@ (8004ce4 <BSP_SDRAM_Init+0xac>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004c78:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce4 <BSP_SDRAM_Init+0xac>)
 8004c7a:	2204      	movs	r2, #4
 8004c7c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004c7e:	4b19      	ldr	r3, [pc, #100]	@ (8004ce4 <BSP_SDRAM_Init+0xac>)
 8004c80:	2210      	movs	r2, #16
 8004c82:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004c84:	4b17      	ldr	r3, [pc, #92]	@ (8004ce4 <BSP_SDRAM_Init+0xac>)
 8004c86:	2240      	movs	r2, #64	@ 0x40
 8004c88:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8004c8a:	4b16      	ldr	r3, [pc, #88]	@ (8004ce4 <BSP_SDRAM_Init+0xac>)
 8004c8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c90:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004c92:	4b14      	ldr	r3, [pc, #80]	@ (8004ce4 <BSP_SDRAM_Init+0xac>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004c98:	4b12      	ldr	r3, [pc, #72]	@ (8004ce4 <BSP_SDRAM_Init+0xac>)
 8004c9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c9e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004ca0:	4b10      	ldr	r3, [pc, #64]	@ (8004ce4 <BSP_SDRAM_Init+0xac>)
 8004ca2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004ca6:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8004ce4 <BSP_SDRAM_Init+0xac>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8004cae:	2100      	movs	r1, #0
 8004cb0:	480c      	ldr	r0, [pc, #48]	@ (8004ce4 <BSP_SDRAM_Init+0xac>)
 8004cb2:	f000 f87f 	bl	8004db4 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004cb6:	490d      	ldr	r1, [pc, #52]	@ (8004cec <BSP_SDRAM_Init+0xb4>)
 8004cb8:	480a      	ldr	r0, [pc, #40]	@ (8004ce4 <BSP_SDRAM_Init+0xac>)
 8004cba:	f008 fb85 	bl	800d3c8 <HAL_SDRAM_Init>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf0 <BSP_SDRAM_Init+0xb8>)
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	e002      	b.n	8004cd2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004ccc:	4b08      	ldr	r3, [pc, #32]	@ (8004cf0 <BSP_SDRAM_Init+0xb8>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004cd2:	f240 6003 	movw	r0, #1539	@ 0x603
 8004cd6:	f000 f80d 	bl	8004cf4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004cda:	4b05      	ldr	r3, [pc, #20]	@ (8004cf0 <BSP_SDRAM_Init+0xb8>)
 8004cdc:	781b      	ldrb	r3, [r3, #0]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	200012c8 	.word	0x200012c8
 8004ce8:	a0000140 	.word	0xa0000140
 8004cec:	200012fc 	.word	0x200012fc
 8004cf0:	20000064 	.word	0x20000064

08004cf4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004d00:	4b2a      	ldr	r3, [pc, #168]	@ (8004dac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d02:	2201      	movs	r2, #1
 8004d04:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004d06:	4b29      	ldr	r3, [pc, #164]	@ (8004dac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d08:	2210      	movs	r2, #16
 8004d0a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004d0c:	4b27      	ldr	r3, [pc, #156]	@ (8004dac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d0e:	2201      	movs	r2, #1
 8004d10:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004d12:	4b26      	ldr	r3, [pc, #152]	@ (8004dac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004d18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d1c:	4923      	ldr	r1, [pc, #140]	@ (8004dac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d1e:	4824      	ldr	r0, [pc, #144]	@ (8004db0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004d20:	f008 fb86 	bl	800d430 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004d24:	2001      	movs	r0, #1
 8004d26:	f002 fca1 	bl	800766c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004d2a:	4b20      	ldr	r3, [pc, #128]	@ (8004dac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004d30:	4b1e      	ldr	r3, [pc, #120]	@ (8004dac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d32:	2210      	movs	r2, #16
 8004d34:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004d36:	4b1d      	ldr	r3, [pc, #116]	@ (8004dac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8004dac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004d42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d46:	4919      	ldr	r1, [pc, #100]	@ (8004dac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d48:	4819      	ldr	r0, [pc, #100]	@ (8004db0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004d4a:	f008 fb71 	bl	800d430 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004d4e:	4b17      	ldr	r3, [pc, #92]	@ (8004dac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d50:	2203      	movs	r2, #3
 8004d52:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004d54:	4b15      	ldr	r3, [pc, #84]	@ (8004dac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d56:	2210      	movs	r2, #16
 8004d58:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004d5a:	4b14      	ldr	r3, [pc, #80]	@ (8004dac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d5c:	2208      	movs	r2, #8
 8004d5e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004d60:	4b12      	ldr	r3, [pc, #72]	@ (8004dac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004d66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d6a:	4910      	ldr	r1, [pc, #64]	@ (8004dac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d6c:	4810      	ldr	r0, [pc, #64]	@ (8004db0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004d6e:	f008 fb5f 	bl	800d430 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004d72:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8004d76:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004d78:	4b0c      	ldr	r3, [pc, #48]	@ (8004dac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d7a:	2204      	movs	r2, #4
 8004d7c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004dac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d80:	2210      	movs	r2, #16
 8004d82:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004d84:	4b09      	ldr	r3, [pc, #36]	@ (8004dac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4a07      	ldr	r2, [pc, #28]	@ (8004dac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d8e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004d90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d94:	4905      	ldr	r1, [pc, #20]	@ (8004dac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d96:	4806      	ldr	r0, [pc, #24]	@ (8004db0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004d98:	f008 fb4a 	bl	800d430 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	4804      	ldr	r0, [pc, #16]	@ (8004db0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004da0:	f008 fb7b 	bl	800d49a <HAL_SDRAM_ProgramRefreshRate>
}
 8004da4:	bf00      	nop
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	20001318 	.word	0x20001318
 8004db0:	200012c8 	.word	0x200012c8

08004db4 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b090      	sub	sp, #64	@ 0x40
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004dbe:	4b70      	ldr	r3, [pc, #448]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc2:	4a6f      	ldr	r2, [pc, #444]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004dc4:	f043 0301 	orr.w	r3, r3, #1
 8004dc8:	6393      	str	r3, [r2, #56]	@ 0x38
 8004dca:	4b6d      	ldr	r3, [pc, #436]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004dd6:	4b6a      	ldr	r3, [pc, #424]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dda:	4a69      	ldr	r2, [pc, #420]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004ddc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004de2:	4b67      	ldr	r3, [pc, #412]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dee:	4b64      	ldr	r3, [pc, #400]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df2:	4a63      	ldr	r2, [pc, #396]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004df4:	f043 0304 	orr.w	r3, r3, #4
 8004df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004dfa:	4b61      	ldr	r3, [pc, #388]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	623b      	str	r3, [r7, #32]
 8004e04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e06:	4b5e      	ldr	r3, [pc, #376]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0a:	4a5d      	ldr	r2, [pc, #372]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004e0c:	f043 0308 	orr.w	r3, r3, #8
 8004e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e12:	4b5b      	ldr	r3, [pc, #364]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	61fb      	str	r3, [r7, #28]
 8004e1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e1e:	4b58      	ldr	r3, [pc, #352]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e22:	4a57      	ldr	r2, [pc, #348]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004e24:	f043 0310 	orr.w	r3, r3, #16
 8004e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e2a:	4b55      	ldr	r3, [pc, #340]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e2e:	f003 0310 	and.w	r3, r3, #16
 8004e32:	61bb      	str	r3, [r7, #24]
 8004e34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e36:	4b52      	ldr	r3, [pc, #328]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3a:	4a51      	ldr	r2, [pc, #324]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004e3c:	f043 0320 	orr.w	r3, r3, #32
 8004e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e42:	4b4f      	ldr	r3, [pc, #316]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e46:	f003 0320 	and.w	r3, r3, #32
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004e4e:	4b4c      	ldr	r3, [pc, #304]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e52:	4a4b      	ldr	r2, [pc, #300]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004e54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e5a:	4b49      	ldr	r3, [pc, #292]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e62:	613b      	str	r3, [r7, #16]
 8004e64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e66:	4b46      	ldr	r3, [pc, #280]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6a:	4a45      	ldr	r2, [pc, #276]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004e6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e72:	4b43      	ldr	r3, [pc, #268]	@ (8004f80 <BSP_SDRAM_MspInit+0x1cc>)
 8004e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004e7e:	2302      	movs	r3, #2
 8004e80:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004e82:	2301      	movs	r3, #1
 8004e84:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004e86:	2302      	movs	r3, #2
 8004e88:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004e8a:	230c      	movs	r3, #12
 8004e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004e8e:	2308      	movs	r3, #8
 8004e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004e92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e96:	4619      	mov	r1, r3
 8004e98:	483a      	ldr	r0, [pc, #232]	@ (8004f84 <BSP_SDRAM_MspInit+0x1d0>)
 8004e9a:	f003 fe81 	bl	8008ba0 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8004e9e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004ea4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4837      	ldr	r0, [pc, #220]	@ (8004f88 <BSP_SDRAM_MspInit+0x1d4>)
 8004eac:	f003 fe78 	bl	8008ba0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004eb0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004eb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004eba:	4619      	mov	r1, r3
 8004ebc:	4833      	ldr	r0, [pc, #204]	@ (8004f8c <BSP_SDRAM_MspInit+0x1d8>)
 8004ebe:	f003 fe6f 	bl	8008ba0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004ec2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004ec8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4830      	ldr	r0, [pc, #192]	@ (8004f90 <BSP_SDRAM_MspInit+0x1dc>)
 8004ed0:	f003 fe66 	bl	8008ba0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004ed4:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004eda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ede:	4619      	mov	r1, r3
 8004ee0:	482c      	ldr	r0, [pc, #176]	@ (8004f94 <BSP_SDRAM_MspInit+0x1e0>)
 8004ee2:	f003 fe5d 	bl	8008ba0 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004ee6:	2328      	movs	r3, #40	@ 0x28
 8004ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004eea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4829      	ldr	r0, [pc, #164]	@ (8004f98 <BSP_SDRAM_MspInit+0x1e4>)
 8004ef2:	f003 fe55 	bl	8008ba0 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004ef6:	4b29      	ldr	r3, [pc, #164]	@ (8004f9c <BSP_SDRAM_MspInit+0x1e8>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004efc:	4b27      	ldr	r3, [pc, #156]	@ (8004f9c <BSP_SDRAM_MspInit+0x1e8>)
 8004efe:	2280      	movs	r2, #128	@ 0x80
 8004f00:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004f02:	4b26      	ldr	r3, [pc, #152]	@ (8004f9c <BSP_SDRAM_MspInit+0x1e8>)
 8004f04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f08:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004f0a:	4b24      	ldr	r3, [pc, #144]	@ (8004f9c <BSP_SDRAM_MspInit+0x1e8>)
 8004f0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f10:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004f12:	4b22      	ldr	r3, [pc, #136]	@ (8004f9c <BSP_SDRAM_MspInit+0x1e8>)
 8004f14:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004f18:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004f1a:	4b20      	ldr	r3, [pc, #128]	@ (8004f9c <BSP_SDRAM_MspInit+0x1e8>)
 8004f1c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004f20:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8004f22:	4b1e      	ldr	r3, [pc, #120]	@ (8004f9c <BSP_SDRAM_MspInit+0x1e8>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004f28:	4b1c      	ldr	r3, [pc, #112]	@ (8004f9c <BSP_SDRAM_MspInit+0x1e8>)
 8004f2a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004f2e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004f30:	4b1a      	ldr	r3, [pc, #104]	@ (8004f9c <BSP_SDRAM_MspInit+0x1e8>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004f36:	4b19      	ldr	r3, [pc, #100]	@ (8004f9c <BSP_SDRAM_MspInit+0x1e8>)
 8004f38:	2203      	movs	r2, #3
 8004f3a:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004f3c:	4b17      	ldr	r3, [pc, #92]	@ (8004f9c <BSP_SDRAM_MspInit+0x1e8>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004f42:	4b16      	ldr	r3, [pc, #88]	@ (8004f9c <BSP_SDRAM_MspInit+0x1e8>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004f48:	4b14      	ldr	r3, [pc, #80]	@ (8004f9c <BSP_SDRAM_MspInit+0x1e8>)
 8004f4a:	4a15      	ldr	r2, [pc, #84]	@ (8004fa0 <BSP_SDRAM_MspInit+0x1ec>)
 8004f4c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a12      	ldr	r2, [pc, #72]	@ (8004f9c <BSP_SDRAM_MspInit+0x1e8>)
 8004f52:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f54:	4a11      	ldr	r2, [pc, #68]	@ (8004f9c <BSP_SDRAM_MspInit+0x1e8>)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8004f5a:	4810      	ldr	r0, [pc, #64]	@ (8004f9c <BSP_SDRAM_MspInit+0x1e8>)
 8004f5c:	f002 ffce 	bl	8007efc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004f60:	480e      	ldr	r0, [pc, #56]	@ (8004f9c <BSP_SDRAM_MspInit+0x1e8>)
 8004f62:	f002 ff1d 	bl	8007da0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004f66:	2200      	movs	r2, #0
 8004f68:	210f      	movs	r1, #15
 8004f6a:	2038      	movs	r0, #56	@ 0x38
 8004f6c:	f002 feee 	bl	8007d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004f70:	2038      	movs	r0, #56	@ 0x38
 8004f72:	f002 ff07 	bl	8007d84 <HAL_NVIC_EnableIRQ>
}
 8004f76:	bf00      	nop
 8004f78:	3740      	adds	r7, #64	@ 0x40
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	40023800 	.word	0x40023800
 8004f84:	40020800 	.word	0x40020800
 8004f88:	40020c00 	.word	0x40020c00
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	40021400 	.word	0x40021400
 8004f94:	40021800 	.word	0x40021800
 8004f98:	40021c00 	.word	0x40021c00
 8004f9c:	20001328 	.word	0x20001328
 8004fa0:	40026410 	.word	0x40026410

08004fa4 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	4603      	mov	r3, r0
 8004fac:	460a      	mov	r2, r1
 8004fae:	80fb      	strh	r3, [r7, #6]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004fb8:	4a14      	ldr	r2, [pc, #80]	@ (800500c <BSP_TS_Init+0x68>)
 8004fba:	88fb      	ldrh	r3, [r7, #6]
 8004fbc:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8004fbe:	4a14      	ldr	r2, [pc, #80]	@ (8005010 <BSP_TS_Init+0x6c>)
 8004fc0:	88bb      	ldrh	r3, [r7, #4]
 8004fc2:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004fc4:	4b13      	ldr	r3, [pc, #76]	@ (8005014 <BSP_TS_Init+0x70>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2070      	movs	r0, #112	@ 0x70
 8004fca:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004fcc:	4b11      	ldr	r3, [pc, #68]	@ (8005014 <BSP_TS_Init+0x70>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2070      	movs	r0, #112	@ 0x70
 8004fd2:	4798      	blx	r3
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b51      	cmp	r3, #81	@ 0x51
 8004fd8:	d110      	bne.n	8004ffc <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8004fda:	4b0f      	ldr	r3, [pc, #60]	@ (8005018 <BSP_TS_Init+0x74>)
 8004fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8005014 <BSP_TS_Init+0x70>)
 8004fde:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800501c <BSP_TS_Init+0x78>)
 8004fe2:	2270      	movs	r2, #112	@ 0x70
 8004fe4:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8004fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8005020 <BSP_TS_Init+0x7c>)
 8004fe8:	2208      	movs	r2, #8
 8004fea:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004fec:	4b0a      	ldr	r3, [pc, #40]	@ (8005018 <BSP_TS_Init+0x74>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800501c <BSP_TS_Init+0x78>)
 8004ff4:	7812      	ldrb	r2, [r2, #0]
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	4798      	blx	r3
 8004ffa:	e001      	b.n	8005000 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005000:	7bfb      	ldrb	r3, [r7, #15]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	2000138c 	.word	0x2000138c
 8005010:	2000138e 	.word	0x2000138e
 8005014:	20000010 	.word	0x20000010
 8005018:	20001388 	.word	0x20001388
 800501c:	20001391 	.word	0x20001391
 8005020:	20001390 	.word	0x20001390

08005024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800502a:	4b11      	ldr	r3, [pc, #68]	@ (8005070 <HAL_MspInit+0x4c>)
 800502c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502e:	4a10      	ldr	r2, [pc, #64]	@ (8005070 <HAL_MspInit+0x4c>)
 8005030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005034:	6413      	str	r3, [r2, #64]	@ 0x40
 8005036:	4b0e      	ldr	r3, [pc, #56]	@ (8005070 <HAL_MspInit+0x4c>)
 8005038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800503e:	607b      	str	r3, [r7, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005042:	4b0b      	ldr	r3, [pc, #44]	@ (8005070 <HAL_MspInit+0x4c>)
 8005044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005046:	4a0a      	ldr	r2, [pc, #40]	@ (8005070 <HAL_MspInit+0x4c>)
 8005048:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800504c:	6453      	str	r3, [r2, #68]	@ 0x44
 800504e:	4b08      	ldr	r3, [pc, #32]	@ (8005070 <HAL_MspInit+0x4c>)
 8005050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005052:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800505a:	2200      	movs	r2, #0
 800505c:	210f      	movs	r1, #15
 800505e:	f06f 0001 	mvn.w	r0, #1
 8005062:	f002 fe73 	bl	8007d4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005066:	bf00      	nop
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40023800 	.word	0x40023800

08005074 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08c      	sub	sp, #48	@ 0x30
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800507c:	f107 031c 	add.w	r3, r7, #28
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	605a      	str	r2, [r3, #4]
 8005086:	609a      	str	r2, [r3, #8]
 8005088:	60da      	str	r2, [r3, #12]
 800508a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a36      	ldr	r2, [pc, #216]	@ (800516c <HAL_ADC_MspInit+0xf8>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d124      	bne.n	80050e0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005096:	4b36      	ldr	r3, [pc, #216]	@ (8005170 <HAL_ADC_MspInit+0xfc>)
 8005098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509a:	4a35      	ldr	r2, [pc, #212]	@ (8005170 <HAL_ADC_MspInit+0xfc>)
 800509c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80050a2:	4b33      	ldr	r3, [pc, #204]	@ (8005170 <HAL_ADC_MspInit+0xfc>)
 80050a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050aa:	61bb      	str	r3, [r7, #24]
 80050ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050ae:	4b30      	ldr	r3, [pc, #192]	@ (8005170 <HAL_ADC_MspInit+0xfc>)
 80050b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b2:	4a2f      	ldr	r2, [pc, #188]	@ (8005170 <HAL_ADC_MspInit+0xfc>)
 80050b4:	f043 0301 	orr.w	r3, r3, #1
 80050b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80050ba:	4b2d      	ldr	r3, [pc, #180]	@ (8005170 <HAL_ADC_MspInit+0xfc>)
 80050bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80050c6:	2301      	movs	r3, #1
 80050c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050ca:	2303      	movs	r3, #3
 80050cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050d2:	f107 031c 	add.w	r3, r7, #28
 80050d6:	4619      	mov	r1, r3
 80050d8:	4826      	ldr	r0, [pc, #152]	@ (8005174 <HAL_ADC_MspInit+0x100>)
 80050da:	f003 fd61 	bl	8008ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80050de:	e041      	b.n	8005164 <HAL_ADC_MspInit+0xf0>
  else if(hadc->Instance==ADC3)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a24      	ldr	r2, [pc, #144]	@ (8005178 <HAL_ADC_MspInit+0x104>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d13c      	bne.n	8005164 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80050ea:	4b21      	ldr	r3, [pc, #132]	@ (8005170 <HAL_ADC_MspInit+0xfc>)
 80050ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ee:	4a20      	ldr	r2, [pc, #128]	@ (8005170 <HAL_ADC_MspInit+0xfc>)
 80050f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80050f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005170 <HAL_ADC_MspInit+0xfc>)
 80050f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050fe:	613b      	str	r3, [r7, #16]
 8005100:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005102:	4b1b      	ldr	r3, [pc, #108]	@ (8005170 <HAL_ADC_MspInit+0xfc>)
 8005104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005106:	4a1a      	ldr	r2, [pc, #104]	@ (8005170 <HAL_ADC_MspInit+0xfc>)
 8005108:	f043 0320 	orr.w	r3, r3, #32
 800510c:	6313      	str	r3, [r2, #48]	@ 0x30
 800510e:	4b18      	ldr	r3, [pc, #96]	@ (8005170 <HAL_ADC_MspInit+0xfc>)
 8005110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005112:	f003 0320 	and.w	r3, r3, #32
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800511a:	4b15      	ldr	r3, [pc, #84]	@ (8005170 <HAL_ADC_MspInit+0xfc>)
 800511c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511e:	4a14      	ldr	r2, [pc, #80]	@ (8005170 <HAL_ADC_MspInit+0xfc>)
 8005120:	f043 0301 	orr.w	r3, r3, #1
 8005124:	6313      	str	r3, [r2, #48]	@ 0x30
 8005126:	4b12      	ldr	r3, [pc, #72]	@ (8005170 <HAL_ADC_MspInit+0xfc>)
 8005128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	60bb      	str	r3, [r7, #8]
 8005130:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8005132:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8005136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005138:	2303      	movs	r3, #3
 800513a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800513c:	2300      	movs	r3, #0
 800513e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005140:	f107 031c 	add.w	r3, r7, #28
 8005144:	4619      	mov	r1, r3
 8005146:	480d      	ldr	r0, [pc, #52]	@ (800517c <HAL_ADC_MspInit+0x108>)
 8005148:	f003 fd2a 	bl	8008ba0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800514c:	2301      	movs	r3, #1
 800514e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005150:	2303      	movs	r3, #3
 8005152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005154:	2300      	movs	r3, #0
 8005156:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005158:	f107 031c 	add.w	r3, r7, #28
 800515c:	4619      	mov	r1, r3
 800515e:	4805      	ldr	r0, [pc, #20]	@ (8005174 <HAL_ADC_MspInit+0x100>)
 8005160:	f003 fd1e 	bl	8008ba0 <HAL_GPIO_Init>
}
 8005164:	bf00      	nop
 8005166:	3730      	adds	r7, #48	@ 0x30
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40012000 	.word	0x40012000
 8005170:	40023800 	.word	0x40023800
 8005174:	40020000 	.word	0x40020000
 8005178:	40012200 	.word	0x40012200
 800517c:	40021400 	.word	0x40021400

08005180 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a0a      	ldr	r2, [pc, #40]	@ (80051b8 <HAL_DMA2D_MspInit+0x38>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d10b      	bne.n	80051aa <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005192:	4b0a      	ldr	r3, [pc, #40]	@ (80051bc <HAL_DMA2D_MspInit+0x3c>)
 8005194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005196:	4a09      	ldr	r2, [pc, #36]	@ (80051bc <HAL_DMA2D_MspInit+0x3c>)
 8005198:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800519c:	6313      	str	r3, [r2, #48]	@ 0x30
 800519e:	4b07      	ldr	r3, [pc, #28]	@ (80051bc <HAL_DMA2D_MspInit+0x3c>)
 80051a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80051aa:	bf00      	nop
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	4002b000 	.word	0x4002b000
 80051bc:	40023800 	.word	0x40023800

080051c0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08e      	sub	sp, #56	@ 0x38
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	605a      	str	r2, [r3, #4]
 80051d2:	609a      	str	r2, [r3, #8]
 80051d4:	60da      	str	r2, [r3, #12]
 80051d6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a55      	ldr	r2, [pc, #340]	@ (8005334 <HAL_LTDC_MspInit+0x174>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	f040 80a3 	bne.w	800532a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80051e4:	4b54      	ldr	r3, [pc, #336]	@ (8005338 <HAL_LTDC_MspInit+0x178>)
 80051e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e8:	4a53      	ldr	r2, [pc, #332]	@ (8005338 <HAL_LTDC_MspInit+0x178>)
 80051ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80051f0:	4b51      	ldr	r3, [pc, #324]	@ (8005338 <HAL_LTDC_MspInit+0x178>)
 80051f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80051f8:	623b      	str	r3, [r7, #32]
 80051fa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80051fc:	4b4e      	ldr	r3, [pc, #312]	@ (8005338 <HAL_LTDC_MspInit+0x178>)
 80051fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005200:	4a4d      	ldr	r2, [pc, #308]	@ (8005338 <HAL_LTDC_MspInit+0x178>)
 8005202:	f043 0310 	orr.w	r3, r3, #16
 8005206:	6313      	str	r3, [r2, #48]	@ 0x30
 8005208:	4b4b      	ldr	r3, [pc, #300]	@ (8005338 <HAL_LTDC_MspInit+0x178>)
 800520a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520c:	f003 0310 	and.w	r3, r3, #16
 8005210:	61fb      	str	r3, [r7, #28]
 8005212:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8005214:	4b48      	ldr	r3, [pc, #288]	@ (8005338 <HAL_LTDC_MspInit+0x178>)
 8005216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005218:	4a47      	ldr	r2, [pc, #284]	@ (8005338 <HAL_LTDC_MspInit+0x178>)
 800521a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800521e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005220:	4b45      	ldr	r3, [pc, #276]	@ (8005338 <HAL_LTDC_MspInit+0x178>)
 8005222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005224:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005228:	61bb      	str	r3, [r7, #24]
 800522a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800522c:	4b42      	ldr	r3, [pc, #264]	@ (8005338 <HAL_LTDC_MspInit+0x178>)
 800522e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005230:	4a41      	ldr	r2, [pc, #260]	@ (8005338 <HAL_LTDC_MspInit+0x178>)
 8005232:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005236:	6313      	str	r3, [r2, #48]	@ 0x30
 8005238:	4b3f      	ldr	r3, [pc, #252]	@ (8005338 <HAL_LTDC_MspInit+0x178>)
 800523a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005244:	4b3c      	ldr	r3, [pc, #240]	@ (8005338 <HAL_LTDC_MspInit+0x178>)
 8005246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005248:	4a3b      	ldr	r2, [pc, #236]	@ (8005338 <HAL_LTDC_MspInit+0x178>)
 800524a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800524e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005250:	4b39      	ldr	r3, [pc, #228]	@ (8005338 <HAL_LTDC_MspInit+0x178>)
 8005252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005258:	613b      	str	r3, [r7, #16]
 800525a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800525c:	4b36      	ldr	r3, [pc, #216]	@ (8005338 <HAL_LTDC_MspInit+0x178>)
 800525e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005260:	4a35      	ldr	r2, [pc, #212]	@ (8005338 <HAL_LTDC_MspInit+0x178>)
 8005262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005266:	6313      	str	r3, [r2, #48]	@ 0x30
 8005268:	4b33      	ldr	r3, [pc, #204]	@ (8005338 <HAL_LTDC_MspInit+0x178>)
 800526a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8005274:	2310      	movs	r3, #16
 8005276:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005278:	2302      	movs	r3, #2
 800527a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800527c:	2300      	movs	r3, #0
 800527e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005280:	2300      	movs	r3, #0
 8005282:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005284:	230e      	movs	r3, #14
 8005286:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8005288:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800528c:	4619      	mov	r1, r3
 800528e:	482b      	ldr	r0, [pc, #172]	@ (800533c <HAL_LTDC_MspInit+0x17c>)
 8005290:	f003 fc86 	bl	8008ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8005294:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8005298:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800529a:	2302      	movs	r3, #2
 800529c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800529e:	2300      	movs	r3, #0
 80052a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052a2:	2300      	movs	r3, #0
 80052a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80052a6:	230e      	movs	r3, #14
 80052a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80052aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052ae:	4619      	mov	r1, r3
 80052b0:	4823      	ldr	r0, [pc, #140]	@ (8005340 <HAL_LTDC_MspInit+0x180>)
 80052b2:	f003 fc75 	bl	8008ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80052b6:	23f7      	movs	r3, #247	@ 0xf7
 80052b8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ba:	2302      	movs	r3, #2
 80052bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052be:	2300      	movs	r3, #0
 80052c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052c2:	2300      	movs	r3, #0
 80052c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80052c6:	230e      	movs	r3, #14
 80052c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80052ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052ce:	4619      	mov	r1, r3
 80052d0:	481c      	ldr	r0, [pc, #112]	@ (8005344 <HAL_LTDC_MspInit+0x184>)
 80052d2:	f003 fc65 	bl	8008ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80052d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80052da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052dc:	2302      	movs	r3, #2
 80052de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e0:	2300      	movs	r3, #0
 80052e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052e4:	2300      	movs	r3, #0
 80052e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80052e8:	2309      	movs	r3, #9
 80052ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80052ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052f0:	4619      	mov	r1, r3
 80052f2:	4815      	ldr	r0, [pc, #84]	@ (8005348 <HAL_LTDC_MspInit+0x188>)
 80052f4:	f003 fc54 	bl	8008ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80052f8:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80052fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052fe:	2302      	movs	r3, #2
 8005300:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005302:	2300      	movs	r3, #0
 8005304:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005306:	2300      	movs	r3, #0
 8005308:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800530a:	230e      	movs	r3, #14
 800530c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800530e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005312:	4619      	mov	r1, r3
 8005314:	480d      	ldr	r0, [pc, #52]	@ (800534c <HAL_LTDC_MspInit+0x18c>)
 8005316:	f003 fc43 	bl	8008ba0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800531a:	2200      	movs	r2, #0
 800531c:	2105      	movs	r1, #5
 800531e:	2058      	movs	r0, #88	@ 0x58
 8005320:	f002 fd14 	bl	8007d4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8005324:	2058      	movs	r0, #88	@ 0x58
 8005326:	f002 fd2d 	bl	8007d84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800532a:	bf00      	nop
 800532c:	3738      	adds	r7, #56	@ 0x38
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40016800 	.word	0x40016800
 8005338:	40023800 	.word	0x40023800
 800533c:	40021000 	.word	0x40021000
 8005340:	40022400 	.word	0x40022400
 8005344:	40022800 	.word	0x40022800
 8005348:	40021800 	.word	0x40021800
 800534c:	40022000 	.word	0x40022000

08005350 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08a      	sub	sp, #40	@ 0x28
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005358:	f107 0314 	add.w	r3, r7, #20
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	605a      	str	r2, [r3, #4]
 8005362:	609a      	str	r2, [r3, #8]
 8005364:	60da      	str	r2, [r3, #12]
 8005366:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a65      	ldr	r2, [pc, #404]	@ (8005504 <HAL_SD_MspInit+0x1b4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	f040 80c3 	bne.w	80054fa <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8005374:	4b64      	ldr	r3, [pc, #400]	@ (8005508 <HAL_SD_MspInit+0x1b8>)
 8005376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005378:	4a63      	ldr	r2, [pc, #396]	@ (8005508 <HAL_SD_MspInit+0x1b8>)
 800537a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800537e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005380:	4b61      	ldr	r3, [pc, #388]	@ (8005508 <HAL_SD_MspInit+0x1b8>)
 8005382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005384:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800538c:	4b5e      	ldr	r3, [pc, #376]	@ (8005508 <HAL_SD_MspInit+0x1b8>)
 800538e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005390:	4a5d      	ldr	r2, [pc, #372]	@ (8005508 <HAL_SD_MspInit+0x1b8>)
 8005392:	f043 0304 	orr.w	r3, r3, #4
 8005396:	6313      	str	r3, [r2, #48]	@ 0x30
 8005398:	4b5b      	ldr	r3, [pc, #364]	@ (8005508 <HAL_SD_MspInit+0x1b8>)
 800539a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80053a4:	4b58      	ldr	r3, [pc, #352]	@ (8005508 <HAL_SD_MspInit+0x1b8>)
 80053a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a8:	4a57      	ldr	r2, [pc, #348]	@ (8005508 <HAL_SD_MspInit+0x1b8>)
 80053aa:	f043 0308 	orr.w	r3, r3, #8
 80053ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80053b0:	4b55      	ldr	r3, [pc, #340]	@ (8005508 <HAL_SD_MspInit+0x1b8>)
 80053b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b4:	f003 0308 	and.w	r3, r3, #8
 80053b8:	60bb      	str	r3, [r7, #8]
 80053ba:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80053bc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80053c0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053c2:	2302      	movs	r3, #2
 80053c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c6:	2300      	movs	r3, #0
 80053c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053ca:	2303      	movs	r3, #3
 80053cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80053ce:	230c      	movs	r3, #12
 80053d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053d2:	f107 0314 	add.w	r3, r7, #20
 80053d6:	4619      	mov	r1, r3
 80053d8:	484c      	ldr	r0, [pc, #304]	@ (800550c <HAL_SD_MspInit+0x1bc>)
 80053da:	f003 fbe1 	bl	8008ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80053de:	2304      	movs	r3, #4
 80053e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053e2:	2302      	movs	r3, #2
 80053e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053e6:	2300      	movs	r3, #0
 80053e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053ea:	2303      	movs	r3, #3
 80053ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80053ee:	230c      	movs	r3, #12
 80053f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80053f2:	f107 0314 	add.w	r3, r7, #20
 80053f6:	4619      	mov	r1, r3
 80053f8:	4845      	ldr	r0, [pc, #276]	@ (8005510 <HAL_SD_MspInit+0x1c0>)
 80053fa:	f003 fbd1 	bl	8008ba0 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80053fe:	4b45      	ldr	r3, [pc, #276]	@ (8005514 <HAL_SD_MspInit+0x1c4>)
 8005400:	4a45      	ldr	r2, [pc, #276]	@ (8005518 <HAL_SD_MspInit+0x1c8>)
 8005402:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8005404:	4b43      	ldr	r3, [pc, #268]	@ (8005514 <HAL_SD_MspInit+0x1c4>)
 8005406:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800540a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800540c:	4b41      	ldr	r3, [pc, #260]	@ (8005514 <HAL_SD_MspInit+0x1c4>)
 800540e:	2200      	movs	r2, #0
 8005410:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005412:	4b40      	ldr	r3, [pc, #256]	@ (8005514 <HAL_SD_MspInit+0x1c4>)
 8005414:	2200      	movs	r2, #0
 8005416:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005418:	4b3e      	ldr	r3, [pc, #248]	@ (8005514 <HAL_SD_MspInit+0x1c4>)
 800541a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800541e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005420:	4b3c      	ldr	r3, [pc, #240]	@ (8005514 <HAL_SD_MspInit+0x1c4>)
 8005422:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005426:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005428:	4b3a      	ldr	r3, [pc, #232]	@ (8005514 <HAL_SD_MspInit+0x1c4>)
 800542a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800542e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8005430:	4b38      	ldr	r3, [pc, #224]	@ (8005514 <HAL_SD_MspInit+0x1c4>)
 8005432:	2220      	movs	r2, #32
 8005434:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005436:	4b37      	ldr	r3, [pc, #220]	@ (8005514 <HAL_SD_MspInit+0x1c4>)
 8005438:	2200      	movs	r2, #0
 800543a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800543c:	4b35      	ldr	r3, [pc, #212]	@ (8005514 <HAL_SD_MspInit+0x1c4>)
 800543e:	2204      	movs	r2, #4
 8005440:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005442:	4b34      	ldr	r3, [pc, #208]	@ (8005514 <HAL_SD_MspInit+0x1c4>)
 8005444:	2203      	movs	r2, #3
 8005446:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8005448:	4b32      	ldr	r3, [pc, #200]	@ (8005514 <HAL_SD_MspInit+0x1c4>)
 800544a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800544e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005450:	4b30      	ldr	r3, [pc, #192]	@ (8005514 <HAL_SD_MspInit+0x1c4>)
 8005452:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005456:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8005458:	482e      	ldr	r0, [pc, #184]	@ (8005514 <HAL_SD_MspInit+0x1c4>)
 800545a:	f002 fca1 	bl	8007da0 <HAL_DMA_Init>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8005464:	f7fd fe6c 	bl	8003140 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a2a      	ldr	r2, [pc, #168]	@ (8005514 <HAL_SD_MspInit+0x1c4>)
 800546c:	641a      	str	r2, [r3, #64]	@ 0x40
 800546e:	4a29      	ldr	r2, [pc, #164]	@ (8005514 <HAL_SD_MspInit+0x1c4>)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8005474:	4b29      	ldr	r3, [pc, #164]	@ (800551c <HAL_SD_MspInit+0x1cc>)
 8005476:	4a2a      	ldr	r2, [pc, #168]	@ (8005520 <HAL_SD_MspInit+0x1d0>)
 8005478:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800547a:	4b28      	ldr	r3, [pc, #160]	@ (800551c <HAL_SD_MspInit+0x1cc>)
 800547c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005480:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005482:	4b26      	ldr	r3, [pc, #152]	@ (800551c <HAL_SD_MspInit+0x1cc>)
 8005484:	2240      	movs	r2, #64	@ 0x40
 8005486:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005488:	4b24      	ldr	r3, [pc, #144]	@ (800551c <HAL_SD_MspInit+0x1cc>)
 800548a:	2200      	movs	r2, #0
 800548c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800548e:	4b23      	ldr	r3, [pc, #140]	@ (800551c <HAL_SD_MspInit+0x1cc>)
 8005490:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005494:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005496:	4b21      	ldr	r3, [pc, #132]	@ (800551c <HAL_SD_MspInit+0x1cc>)
 8005498:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800549c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800549e:	4b1f      	ldr	r3, [pc, #124]	@ (800551c <HAL_SD_MspInit+0x1cc>)
 80054a0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80054a4:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80054a6:	4b1d      	ldr	r3, [pc, #116]	@ (800551c <HAL_SD_MspInit+0x1cc>)
 80054a8:	2220      	movs	r2, #32
 80054aa:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80054ac:	4b1b      	ldr	r3, [pc, #108]	@ (800551c <HAL_SD_MspInit+0x1cc>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80054b2:	4b1a      	ldr	r3, [pc, #104]	@ (800551c <HAL_SD_MspInit+0x1cc>)
 80054b4:	2204      	movs	r2, #4
 80054b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80054b8:	4b18      	ldr	r3, [pc, #96]	@ (800551c <HAL_SD_MspInit+0x1cc>)
 80054ba:	2203      	movs	r2, #3
 80054bc:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80054be:	4b17      	ldr	r3, [pc, #92]	@ (800551c <HAL_SD_MspInit+0x1cc>)
 80054c0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80054c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80054c6:	4b15      	ldr	r3, [pc, #84]	@ (800551c <HAL_SD_MspInit+0x1cc>)
 80054c8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80054cc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80054ce:	4813      	ldr	r0, [pc, #76]	@ (800551c <HAL_SD_MspInit+0x1cc>)
 80054d0:	f002 fc66 	bl	8007da0 <HAL_DMA_Init>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 80054da:	f7fd fe31 	bl	8003140 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a0e      	ldr	r2, [pc, #56]	@ (800551c <HAL_SD_MspInit+0x1cc>)
 80054e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80054e4:	4a0d      	ldr	r2, [pc, #52]	@ (800551c <HAL_SD_MspInit+0x1cc>)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80054ea:	2200      	movs	r2, #0
 80054ec:	2105      	movs	r1, #5
 80054ee:	2031      	movs	r0, #49	@ 0x31
 80054f0:	f002 fc2c 	bl	8007d4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80054f4:	2031      	movs	r0, #49	@ 0x31
 80054f6:	f002 fc45 	bl	8007d84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80054fa:	bf00      	nop
 80054fc:	3728      	adds	r7, #40	@ 0x28
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	40012c00 	.word	0x40012c00
 8005508:	40023800 	.word	0x40023800
 800550c:	40020800 	.word	0x40020800
 8005510:	40020c00 	.word	0x40020c00
 8005514:	20000c10 	.word	0x20000c10
 8005518:	40026458 	.word	0x40026458
 800551c:	20000c70 	.word	0x20000c70
 8005520:	400264a0 	.word	0x400264a0

08005524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b0ae      	sub	sp, #184	@ 0xb8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800552c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	605a      	str	r2, [r3, #4]
 8005536:	609a      	str	r2, [r3, #8]
 8005538:	60da      	str	r2, [r3, #12]
 800553a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800553c:	f107 0320 	add.w	r3, r7, #32
 8005540:	2284      	movs	r2, #132	@ 0x84
 8005542:	2100      	movs	r1, #0
 8005544:	4618      	mov	r0, r3
 8005546:	f010 fefb 	bl	8016340 <memset>
  if(huart->Instance==UART7)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a57      	ldr	r2, [pc, #348]	@ (80056ac <HAL_UART_MspInit+0x188>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d144      	bne.n	80055de <HAL_UART_MspInit+0xba>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005554:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005558:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800555a:	2300      	movs	r3, #0
 800555c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800555e:	f107 0320 	add.w	r3, r7, #32
 8005562:	4618      	mov	r0, r3
 8005564:	f005 fc7a 	bl	800ae5c <HAL_RCCEx_PeriphCLKConfig>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800556e:	f7fd fde7 	bl	8003140 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8005572:	4b4f      	ldr	r3, [pc, #316]	@ (80056b0 <HAL_UART_MspInit+0x18c>)
 8005574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005576:	4a4e      	ldr	r2, [pc, #312]	@ (80056b0 <HAL_UART_MspInit+0x18c>)
 8005578:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800557c:	6413      	str	r3, [r2, #64]	@ 0x40
 800557e:	4b4c      	ldr	r3, [pc, #304]	@ (80056b0 <HAL_UART_MspInit+0x18c>)
 8005580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005582:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005586:	61fb      	str	r3, [r7, #28]
 8005588:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800558a:	4b49      	ldr	r3, [pc, #292]	@ (80056b0 <HAL_UART_MspInit+0x18c>)
 800558c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558e:	4a48      	ldr	r2, [pc, #288]	@ (80056b0 <HAL_UART_MspInit+0x18c>)
 8005590:	f043 0320 	orr.w	r3, r3, #32
 8005594:	6313      	str	r3, [r2, #48]	@ 0x30
 8005596:	4b46      	ldr	r3, [pc, #280]	@ (80056b0 <HAL_UART_MspInit+0x18c>)
 8005598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800559a:	f003 0320 	and.w	r3, r3, #32
 800559e:	61bb      	str	r3, [r7, #24]
 80055a0:	69bb      	ldr	r3, [r7, #24]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80055a2:	23c0      	movs	r3, #192	@ 0xc0
 80055a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a8:	2302      	movs	r3, #2
 80055aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ae:	2300      	movs	r3, #0
 80055b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055b4:	2303      	movs	r3, #3
 80055b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80055ba:	2308      	movs	r3, #8
 80055bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80055c0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80055c4:	4619      	mov	r1, r3
 80055c6:	483b      	ldr	r0, [pc, #236]	@ (80056b4 <HAL_UART_MspInit+0x190>)
 80055c8:	f003 faea 	bl	8008ba0 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80055cc:	2200      	movs	r2, #0
 80055ce:	2105      	movs	r1, #5
 80055d0:	2052      	movs	r0, #82	@ 0x52
 80055d2:	f002 fbbb 	bl	8007d4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80055d6:	2052      	movs	r0, #82	@ 0x52
 80055d8:	f002 fbd4 	bl	8007d84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80055dc:	e061      	b.n	80056a2 <HAL_UART_MspInit+0x17e>
  else if(huart->Instance==USART1)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a35      	ldr	r2, [pc, #212]	@ (80056b8 <HAL_UART_MspInit+0x194>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d15c      	bne.n	80056a2 <HAL_UART_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80055e8:	2340      	movs	r3, #64	@ 0x40
 80055ea:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80055ec:	2300      	movs	r3, #0
 80055ee:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80055f0:	f107 0320 	add.w	r3, r7, #32
 80055f4:	4618      	mov	r0, r3
 80055f6:	f005 fc31 	bl	800ae5c <HAL_RCCEx_PeriphCLKConfig>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8005600:	f7fd fd9e 	bl	8003140 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005604:	4b2a      	ldr	r3, [pc, #168]	@ (80056b0 <HAL_UART_MspInit+0x18c>)
 8005606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005608:	4a29      	ldr	r2, [pc, #164]	@ (80056b0 <HAL_UART_MspInit+0x18c>)
 800560a:	f043 0310 	orr.w	r3, r3, #16
 800560e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005610:	4b27      	ldr	r3, [pc, #156]	@ (80056b0 <HAL_UART_MspInit+0x18c>)
 8005612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800561c:	4b24      	ldr	r3, [pc, #144]	@ (80056b0 <HAL_UART_MspInit+0x18c>)
 800561e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005620:	4a23      	ldr	r2, [pc, #140]	@ (80056b0 <HAL_UART_MspInit+0x18c>)
 8005622:	f043 0302 	orr.w	r3, r3, #2
 8005626:	6313      	str	r3, [r2, #48]	@ 0x30
 8005628:	4b21      	ldr	r3, [pc, #132]	@ (80056b0 <HAL_UART_MspInit+0x18c>)
 800562a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	613b      	str	r3, [r7, #16]
 8005632:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005634:	4b1e      	ldr	r3, [pc, #120]	@ (80056b0 <HAL_UART_MspInit+0x18c>)
 8005636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005638:	4a1d      	ldr	r2, [pc, #116]	@ (80056b0 <HAL_UART_MspInit+0x18c>)
 800563a:	f043 0301 	orr.w	r3, r3, #1
 800563e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005640:	4b1b      	ldr	r3, [pc, #108]	@ (80056b0 <HAL_UART_MspInit+0x18c>)
 8005642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800564c:	2380      	movs	r3, #128	@ 0x80
 800564e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005652:	2302      	movs	r3, #2
 8005654:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005658:	2300      	movs	r3, #0
 800565a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800565e:	2300      	movs	r3, #0
 8005660:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005664:	2307      	movs	r3, #7
 8005666:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800566a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800566e:	4619      	mov	r1, r3
 8005670:	4812      	ldr	r0, [pc, #72]	@ (80056bc <HAL_UART_MspInit+0x198>)
 8005672:	f003 fa95 	bl	8008ba0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005676:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800567a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800567e:	2302      	movs	r3, #2
 8005680:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005684:	2300      	movs	r3, #0
 8005686:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800568a:	2300      	movs	r3, #0
 800568c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005690:	2307      	movs	r3, #7
 8005692:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005696:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800569a:	4619      	mov	r1, r3
 800569c:	4808      	ldr	r0, [pc, #32]	@ (80056c0 <HAL_UART_MspInit+0x19c>)
 800569e:	f003 fa7f 	bl	8008ba0 <HAL_GPIO_Init>
}
 80056a2:	bf00      	nop
 80056a4:	37b8      	adds	r7, #184	@ 0xb8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	40007800 	.word	0x40007800
 80056b0:	40023800 	.word	0x40023800
 80056b4:	40021400 	.word	0x40021400
 80056b8:	40011000 	.word	0x40011000
 80056bc:	40020400 	.word	0x40020400
 80056c0:	40020000 	.word	0x40020000

080056c4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80056ca:	1d3b      	adds	r3, r7, #4
 80056cc:	2200      	movs	r2, #0
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	605a      	str	r2, [r3, #4]
 80056d2:	609a      	str	r2, [r3, #8]
 80056d4:	60da      	str	r2, [r3, #12]
 80056d6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80056d8:	4b42      	ldr	r3, [pc, #264]	@ (80057e4 <HAL_FMC_MspInit+0x120>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d17c      	bne.n	80057da <HAL_FMC_MspInit+0x116>
    return;
  }
  FMC_Initialized = 1;
 80056e0:	4b40      	ldr	r3, [pc, #256]	@ (80057e4 <HAL_FMC_MspInit+0x120>)
 80056e2:	2201      	movs	r2, #1
 80056e4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80056e6:	4b40      	ldr	r3, [pc, #256]	@ (80057e8 <HAL_FMC_MspInit+0x124>)
 80056e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ea:	4a3f      	ldr	r2, [pc, #252]	@ (80057e8 <HAL_FMC_MspInit+0x124>)
 80056ec:	f043 0301 	orr.w	r3, r3, #1
 80056f0:	6393      	str	r3, [r2, #56]	@ 0x38
 80056f2:	4b3d      	ldr	r3, [pc, #244]	@ (80057e8 <HAL_FMC_MspInit+0x124>)
 80056f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	603b      	str	r3, [r7, #0]
 80056fc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80056fe:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8005702:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005704:	2302      	movs	r3, #2
 8005706:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800570c:	2303      	movs	r3, #3
 800570e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005710:	230c      	movs	r3, #12
 8005712:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005714:	1d3b      	adds	r3, r7, #4
 8005716:	4619      	mov	r1, r3
 8005718:	4834      	ldr	r0, [pc, #208]	@ (80057ec <HAL_FMC_MspInit+0x128>)
 800571a:	f003 fa41 	bl	8008ba0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800571e:	2360      	movs	r3, #96	@ 0x60
 8005720:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005722:	2302      	movs	r3, #2
 8005724:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800572a:	2303      	movs	r3, #3
 800572c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800572e:	230c      	movs	r3, #12
 8005730:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005732:	1d3b      	adds	r3, r7, #4
 8005734:	4619      	mov	r1, r3
 8005736:	482e      	ldr	r0, [pc, #184]	@ (80057f0 <HAL_FMC_MspInit+0x12c>)
 8005738:	f003 fa32 	bl	8008ba0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800573c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8005740:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005742:	2302      	movs	r3, #2
 8005744:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005746:	2300      	movs	r3, #0
 8005748:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800574a:	2303      	movs	r3, #3
 800574c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800574e:	230c      	movs	r3, #12
 8005750:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005752:	1d3b      	adds	r3, r7, #4
 8005754:	4619      	mov	r1, r3
 8005756:	4827      	ldr	r0, [pc, #156]	@ (80057f4 <HAL_FMC_MspInit+0x130>)
 8005758:	f003 fa22 	bl	8008ba0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800575c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8005760:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005762:	2302      	movs	r3, #2
 8005764:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800576a:	2303      	movs	r3, #3
 800576c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800576e:	230c      	movs	r3, #12
 8005770:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005772:	1d3b      	adds	r3, r7, #4
 8005774:	4619      	mov	r1, r3
 8005776:	4820      	ldr	r0, [pc, #128]	@ (80057f8 <HAL_FMC_MspInit+0x134>)
 8005778:	f003 fa12 	bl	8008ba0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800577c:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8005780:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005782:	2302      	movs	r3, #2
 8005784:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005786:	2300      	movs	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800578a:	2303      	movs	r3, #3
 800578c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800578e:	230c      	movs	r3, #12
 8005790:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005792:	1d3b      	adds	r3, r7, #4
 8005794:	4619      	mov	r1, r3
 8005796:	4819      	ldr	r0, [pc, #100]	@ (80057fc <HAL_FMC_MspInit+0x138>)
 8005798:	f003 fa02 	bl	8008ba0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800579c:	2328      	movs	r3, #40	@ 0x28
 800579e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057a0:	2302      	movs	r3, #2
 80057a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057a4:	2300      	movs	r3, #0
 80057a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057a8:	2303      	movs	r3, #3
 80057aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80057ac:	230c      	movs	r3, #12
 80057ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80057b0:	1d3b      	adds	r3, r7, #4
 80057b2:	4619      	mov	r1, r3
 80057b4:	4812      	ldr	r0, [pc, #72]	@ (8005800 <HAL_FMC_MspInit+0x13c>)
 80057b6:	f003 f9f3 	bl	8008ba0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80057ba:	2308      	movs	r3, #8
 80057bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057be:	2302      	movs	r3, #2
 80057c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057c6:	2303      	movs	r3, #3
 80057c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80057ca:	230c      	movs	r3, #12
 80057cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80057ce:	1d3b      	adds	r3, r7, #4
 80057d0:	4619      	mov	r1, r3
 80057d2:	480c      	ldr	r0, [pc, #48]	@ (8005804 <HAL_FMC_MspInit+0x140>)
 80057d4:	f003 f9e4 	bl	8008ba0 <HAL_GPIO_Init>
 80057d8:	e000      	b.n	80057dc <HAL_FMC_MspInit+0x118>
    return;
 80057da:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20001394 	.word	0x20001394
 80057e8:	40023800 	.word	0x40023800
 80057ec:	40021000 	.word	0x40021000
 80057f0:	40020400 	.word	0x40020400
 80057f4:	40021800 	.word	0x40021800
 80057f8:	40020c00 	.word	0x40020c00
 80057fc:	40021400 	.word	0x40021400
 8005800:	40021c00 	.word	0x40021c00
 8005804:	40020800 	.word	0x40020800

08005808 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005810:	f7ff ff58 	bl	80056c4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8005814:	bf00      	nop
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08a      	sub	sp, #40	@ 0x28
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a61      	ldr	r2, [pc, #388]	@ (80059b0 <HAL_SAI_MspInit+0x194>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d15b      	bne.n	80058e6 <HAL_SAI_MspInit+0xca>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800582e:	4b61      	ldr	r3, [pc, #388]	@ (80059b4 <HAL_SAI_MspInit+0x198>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10b      	bne.n	800584e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8005836:	4b60      	ldr	r3, [pc, #384]	@ (80059b8 <HAL_SAI_MspInit+0x19c>)
 8005838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800583a:	4a5f      	ldr	r2, [pc, #380]	@ (80059b8 <HAL_SAI_MspInit+0x19c>)
 800583c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005840:	6453      	str	r3, [r2, #68]	@ 0x44
 8005842:	4b5d      	ldr	r3, [pc, #372]	@ (80059b8 <HAL_SAI_MspInit+0x19c>)
 8005844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005846:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800584a:	613b      	str	r3, [r7, #16]
 800584c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800584e:	4b59      	ldr	r3, [pc, #356]	@ (80059b4 <HAL_SAI_MspInit+0x198>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3301      	adds	r3, #1
 8005854:	4a57      	ldr	r2, [pc, #348]	@ (80059b4 <HAL_SAI_MspInit+0x198>)
 8005856:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8005858:	23f0      	movs	r3, #240	@ 0xf0
 800585a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800585c:	2302      	movs	r3, #2
 800585e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005860:	2300      	movs	r3, #0
 8005862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005864:	2300      	movs	r3, #0
 8005866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8005868:	230a      	movs	r3, #10
 800586a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800586c:	f107 0314 	add.w	r3, r7, #20
 8005870:	4619      	mov	r1, r3
 8005872:	4852      	ldr	r0, [pc, #328]	@ (80059bc <HAL_SAI_MspInit+0x1a0>)
 8005874:	f003 f994 	bl	8008ba0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8005878:	4b51      	ldr	r3, [pc, #324]	@ (80059c0 <HAL_SAI_MspInit+0x1a4>)
 800587a:	4a52      	ldr	r2, [pc, #328]	@ (80059c4 <HAL_SAI_MspInit+0x1a8>)
 800587c:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 800587e:	4b50      	ldr	r3, [pc, #320]	@ (80059c0 <HAL_SAI_MspInit+0x1a4>)
 8005880:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8005884:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005886:	4b4e      	ldr	r3, [pc, #312]	@ (80059c0 <HAL_SAI_MspInit+0x1a4>)
 8005888:	2240      	movs	r2, #64	@ 0x40
 800588a:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800588c:	4b4c      	ldr	r3, [pc, #304]	@ (80059c0 <HAL_SAI_MspInit+0x1a4>)
 800588e:	2200      	movs	r2, #0
 8005890:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8005892:	4b4b      	ldr	r3, [pc, #300]	@ (80059c0 <HAL_SAI_MspInit+0x1a4>)
 8005894:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005898:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800589a:	4b49      	ldr	r3, [pc, #292]	@ (80059c0 <HAL_SAI_MspInit+0x1a4>)
 800589c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058a0:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80058a2:	4b47      	ldr	r3, [pc, #284]	@ (80059c0 <HAL_SAI_MspInit+0x1a4>)
 80058a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80058a8:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 80058aa:	4b45      	ldr	r3, [pc, #276]	@ (80059c0 <HAL_SAI_MspInit+0x1a4>)
 80058ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058b0:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 80058b2:	4b43      	ldr	r3, [pc, #268]	@ (80059c0 <HAL_SAI_MspInit+0x1a4>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80058b8:	4b41      	ldr	r3, [pc, #260]	@ (80059c0 <HAL_SAI_MspInit+0x1a4>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 80058be:	4840      	ldr	r0, [pc, #256]	@ (80059c0 <HAL_SAI_MspInit+0x1a4>)
 80058c0:	f002 fa6e 	bl	8007da0 <HAL_DMA_Init>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <HAL_SAI_MspInit+0xb2>
    {
      Error_Handler();
 80058ca:	f7fd fc39 	bl	8003140 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a3b      	ldr	r2, [pc, #236]	@ (80059c0 <HAL_SAI_MspInit+0x1a4>)
 80058d2:	671a      	str	r2, [r3, #112]	@ 0x70
 80058d4:	4a3a      	ldr	r2, [pc, #232]	@ (80059c0 <HAL_SAI_MspInit+0x1a4>)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a38      	ldr	r2, [pc, #224]	@ (80059c0 <HAL_SAI_MspInit+0x1a4>)
 80058de:	66da      	str	r2, [r3, #108]	@ 0x6c
 80058e0:	4a37      	ldr	r2, [pc, #220]	@ (80059c0 <HAL_SAI_MspInit+0x1a4>)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a37      	ldr	r2, [pc, #220]	@ (80059c8 <HAL_SAI_MspInit+0x1ac>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d15b      	bne.n	80059a8 <HAL_SAI_MspInit+0x18c>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80058f0:	4b30      	ldr	r3, [pc, #192]	@ (80059b4 <HAL_SAI_MspInit+0x198>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10b      	bne.n	8005910 <HAL_SAI_MspInit+0xf4>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80058f8:	4b2f      	ldr	r3, [pc, #188]	@ (80059b8 <HAL_SAI_MspInit+0x19c>)
 80058fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058fc:	4a2e      	ldr	r2, [pc, #184]	@ (80059b8 <HAL_SAI_MspInit+0x19c>)
 80058fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005902:	6453      	str	r3, [r2, #68]	@ 0x44
 8005904:	4b2c      	ldr	r3, [pc, #176]	@ (80059b8 <HAL_SAI_MspInit+0x19c>)
 8005906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005908:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8005910:	4b28      	ldr	r3, [pc, #160]	@ (80059b4 <HAL_SAI_MspInit+0x198>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3301      	adds	r3, #1
 8005916:	4a27      	ldr	r2, [pc, #156]	@ (80059b4 <HAL_SAI_MspInit+0x198>)
 8005918:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800591a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800591e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005920:	2302      	movs	r3, #2
 8005922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005924:	2300      	movs	r3, #0
 8005926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005928:	2300      	movs	r3, #0
 800592a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800592c:	230a      	movs	r3, #10
 800592e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8005930:	f107 0314 	add.w	r3, r7, #20
 8005934:	4619      	mov	r1, r3
 8005936:	4825      	ldr	r0, [pc, #148]	@ (80059cc <HAL_SAI_MspInit+0x1b0>)
 8005938:	f003 f932 	bl	8008ba0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 800593c:	4b24      	ldr	r3, [pc, #144]	@ (80059d0 <HAL_SAI_MspInit+0x1b4>)
 800593e:	4a25      	ldr	r2, [pc, #148]	@ (80059d4 <HAL_SAI_MspInit+0x1b8>)
 8005940:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 8005942:	4b23      	ldr	r3, [pc, #140]	@ (80059d0 <HAL_SAI_MspInit+0x1b4>)
 8005944:	2200      	movs	r2, #0
 8005946:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005948:	4b21      	ldr	r3, [pc, #132]	@ (80059d0 <HAL_SAI_MspInit+0x1b4>)
 800594a:	2200      	movs	r2, #0
 800594c:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800594e:	4b20      	ldr	r3, [pc, #128]	@ (80059d0 <HAL_SAI_MspInit+0x1b4>)
 8005950:	2200      	movs	r2, #0
 8005952:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8005954:	4b1e      	ldr	r3, [pc, #120]	@ (80059d0 <HAL_SAI_MspInit+0x1b4>)
 8005956:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800595a:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800595c:	4b1c      	ldr	r3, [pc, #112]	@ (80059d0 <HAL_SAI_MspInit+0x1b4>)
 800595e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005962:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005964:	4b1a      	ldr	r3, [pc, #104]	@ (80059d0 <HAL_SAI_MspInit+0x1b4>)
 8005966:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800596a:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 800596c:	4b18      	ldr	r3, [pc, #96]	@ (80059d0 <HAL_SAI_MspInit+0x1b4>)
 800596e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005972:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8005974:	4b16      	ldr	r3, [pc, #88]	@ (80059d0 <HAL_SAI_MspInit+0x1b4>)
 8005976:	2200      	movs	r2, #0
 8005978:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800597a:	4b15      	ldr	r3, [pc, #84]	@ (80059d0 <HAL_SAI_MspInit+0x1b4>)
 800597c:	2200      	movs	r2, #0
 800597e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8005980:	4813      	ldr	r0, [pc, #76]	@ (80059d0 <HAL_SAI_MspInit+0x1b4>)
 8005982:	f002 fa0d 	bl	8007da0 <HAL_DMA_Init>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <HAL_SAI_MspInit+0x174>
    {
      Error_Handler();
 800598c:	f7fd fbd8 	bl	8003140 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a0f      	ldr	r2, [pc, #60]	@ (80059d0 <HAL_SAI_MspInit+0x1b4>)
 8005994:	671a      	str	r2, [r3, #112]	@ 0x70
 8005996:	4a0e      	ldr	r2, [pc, #56]	@ (80059d0 <HAL_SAI_MspInit+0x1b4>)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a0c      	ldr	r2, [pc, #48]	@ (80059d0 <HAL_SAI_MspInit+0x1b4>)
 80059a0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80059a2:	4a0b      	ldr	r2, [pc, #44]	@ (80059d0 <HAL_SAI_MspInit+0x1b4>)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 80059a8:	bf00      	nop
 80059aa:	3728      	adds	r7, #40	@ 0x28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	40015c04 	.word	0x40015c04
 80059b4:	20001398 	.word	0x20001398
 80059b8:	40023800 	.word	0x40023800
 80059bc:	40022000 	.word	0x40022000
 80059c0:	20000acc 	.word	0x20000acc
 80059c4:	40026470 	.word	0x40026470
 80059c8:	40015c24 	.word	0x40015c24
 80059cc:	40021800 	.word	0x40021800
 80059d0:	20000b2c 	.word	0x20000b2c
 80059d4:	400264b8 	.word	0x400264b8

080059d8 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a23      	ldr	r2, [pc, #140]	@ (8005a74 <HAL_SAI_MspDeInit+0x9c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d11c      	bne.n	8005a24 <HAL_SAI_MspDeInit+0x4c>
    {
    SAI2_client --;
 80059ea:	4b23      	ldr	r3, [pc, #140]	@ (8005a78 <HAL_SAI_MspDeInit+0xa0>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	4a21      	ldr	r2, [pc, #132]	@ (8005a78 <HAL_SAI_MspDeInit+0xa0>)
 80059f2:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 80059f4:	4b20      	ldr	r3, [pc, #128]	@ (8005a78 <HAL_SAI_MspDeInit+0xa0>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d105      	bne.n	8005a08 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 80059fc:	4b1f      	ldr	r3, [pc, #124]	@ (8005a7c <HAL_SAI_MspDeInit+0xa4>)
 80059fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a00:	4a1e      	ldr	r2, [pc, #120]	@ (8005a7c <HAL_SAI_MspDeInit+0xa4>)
 8005a02:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005a06:	6453      	str	r3, [r2, #68]	@ 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 8005a08:	21f0      	movs	r1, #240	@ 0xf0
 8005a0a:	481d      	ldr	r0, [pc, #116]	@ (8005a80 <HAL_SAI_MspDeInit+0xa8>)
 8005a0c:	f003 fa74 	bl	8008ef8 <HAL_GPIO_DeInit>

    /* SAI2 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a14:	4618      	mov	r0, r3
 8005a16:	f002 fa71 	bl	8007efc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f002 fa6c 	bl	8007efc <HAL_DMA_DeInit>
    }
    if(hsai->Instance==SAI2_Block_B)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a16      	ldr	r2, [pc, #88]	@ (8005a84 <HAL_SAI_MspDeInit+0xac>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d11d      	bne.n	8005a6a <HAL_SAI_MspDeInit+0x92>
    {
    SAI2_client --;
 8005a2e:	4b12      	ldr	r3, [pc, #72]	@ (8005a78 <HAL_SAI_MspDeInit+0xa0>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	4a10      	ldr	r2, [pc, #64]	@ (8005a78 <HAL_SAI_MspDeInit+0xa0>)
 8005a36:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 8005a38:	4b0f      	ldr	r3, [pc, #60]	@ (8005a78 <HAL_SAI_MspDeInit+0xa0>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d105      	bne.n	8005a4c <HAL_SAI_MspDeInit+0x74>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 8005a40:	4b0e      	ldr	r3, [pc, #56]	@ (8005a7c <HAL_SAI_MspDeInit+0xa4>)
 8005a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a44:	4a0d      	ldr	r2, [pc, #52]	@ (8005a7c <HAL_SAI_MspDeInit+0xa4>)
 8005a46:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005a4a:	6453      	str	r3, [r2, #68]	@ 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 8005a4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a50:	480d      	ldr	r0, [pc, #52]	@ (8005a88 <HAL_SAI_MspDeInit+0xb0>)
 8005a52:	f003 fa51 	bl	8008ef8 <HAL_GPIO_DeInit>

    /* SAI2 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f002 fa4e 	bl	8007efc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a64:	4618      	mov	r0, r3
 8005a66:	f002 fa49 	bl	8007efc <HAL_DMA_DeInit>
    }
}
 8005a6a:	bf00      	nop
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	40015c04 	.word	0x40015c04
 8005a78:	20001398 	.word	0x20001398
 8005a7c:	40023800 	.word	0x40023800
 8005a80:	40022000 	.word	0x40022000
 8005a84:	40015c24 	.word	0x40015c24
 8005a88:	40021800 	.word	0x40021800

08005a8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08e      	sub	sp, #56	@ 0x38
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005a9c:	4b33      	ldr	r3, [pc, #204]	@ (8005b6c <HAL_InitTick+0xe0>)
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa0:	4a32      	ldr	r2, [pc, #200]	@ (8005b6c <HAL_InitTick+0xe0>)
 8005aa2:	f043 0310 	orr.w	r3, r3, #16
 8005aa6:	6413      	str	r3, [r2, #64]	@ 0x40
 8005aa8:	4b30      	ldr	r3, [pc, #192]	@ (8005b6c <HAL_InitTick+0xe0>)
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aac:	f003 0310 	and.w	r3, r3, #16
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005ab4:	f107 0210 	add.w	r2, r7, #16
 8005ab8:	f107 0314 	add.w	r3, r7, #20
 8005abc:	4611      	mov	r1, r2
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f005 f99a 	bl	800adf8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d103      	bne.n	8005ad6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005ace:	f005 f96b 	bl	800ada8 <HAL_RCC_GetPCLK1Freq>
 8005ad2:	6378      	str	r0, [r7, #52]	@ 0x34
 8005ad4:	e004      	b.n	8005ae0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005ad6:	f005 f967 	bl	800ada8 <HAL_RCC_GetPCLK1Freq>
 8005ada:	4603      	mov	r3, r0
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae2:	4a23      	ldr	r2, [pc, #140]	@ (8005b70 <HAL_InitTick+0xe4>)
 8005ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae8:	0c9b      	lsrs	r3, r3, #18
 8005aea:	3b01      	subs	r3, #1
 8005aec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005aee:	4b21      	ldr	r3, [pc, #132]	@ (8005b74 <HAL_InitTick+0xe8>)
 8005af0:	4a21      	ldr	r2, [pc, #132]	@ (8005b78 <HAL_InitTick+0xec>)
 8005af2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005af4:	4b1f      	ldr	r3, [pc, #124]	@ (8005b74 <HAL_InitTick+0xe8>)
 8005af6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005afa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005afc:	4a1d      	ldr	r2, [pc, #116]	@ (8005b74 <HAL_InitTick+0xe8>)
 8005afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b00:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005b02:	4b1c      	ldr	r3, [pc, #112]	@ (8005b74 <HAL_InitTick+0xe8>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b08:	4b1a      	ldr	r3, [pc, #104]	@ (8005b74 <HAL_InitTick+0xe8>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b0e:	4b19      	ldr	r3, [pc, #100]	@ (8005b74 <HAL_InitTick+0xe8>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005b14:	4817      	ldr	r0, [pc, #92]	@ (8005b74 <HAL_InitTick+0xe8>)
 8005b16:	f007 fce8 	bl	800d4ea <HAL_TIM_Base_Init>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8005b20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d11b      	bne.n	8005b60 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005b28:	4812      	ldr	r0, [pc, #72]	@ (8005b74 <HAL_InitTick+0xe8>)
 8005b2a:	f007 fd3f 	bl	800d5ac <HAL_TIM_Base_Start_IT>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8005b34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d111      	bne.n	8005b60 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005b3c:	2036      	movs	r0, #54	@ 0x36
 8005b3e:	f002 f921 	bl	8007d84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b0f      	cmp	r3, #15
 8005b46:	d808      	bhi.n	8005b5a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005b48:	2200      	movs	r2, #0
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	2036      	movs	r0, #54	@ 0x36
 8005b4e:	f002 f8fd 	bl	8007d4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005b52:	4a0a      	ldr	r2, [pc, #40]	@ (8005b7c <HAL_InitTick+0xf0>)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6013      	str	r3, [r2, #0]
 8005b58:	e002      	b.n	8005b60 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005b60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3738      	adds	r7, #56	@ 0x38
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	431bde83 	.word	0x431bde83
 8005b74:	2000139c 	.word	0x2000139c
 8005b78:	40001000 	.word	0x40001000
 8005b7c:	200000a8 	.word	0x200000a8

08005b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005b84:	bf00      	nop
 8005b86:	e7fd      	b.n	8005b84 <NMI_Handler+0x4>

08005b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b8c:	bf00      	nop
 8005b8e:	e7fd      	b.n	8005b8c <HardFault_Handler+0x4>

08005b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b94:	bf00      	nop
 8005b96:	e7fd      	b.n	8005b94 <MemManage_Handler+0x4>

08005b98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b9c:	bf00      	nop
 8005b9e:	e7fd      	b.n	8005b9c <BusFault_Handler+0x4>

08005ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ba4:	bf00      	nop
 8005ba6:	e7fd      	b.n	8005ba4 <UsageFault_Handler+0x4>

08005ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005bac:	bf00      	nop
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
	...

08005bb8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8005bbc:	4802      	ldr	r0, [pc, #8]	@ (8005bc8 <SDMMC1_IRQHandler+0x10>)
 8005bbe:	f006 fd5b 	bl	800c678 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8005bc2:	bf00      	nop
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20000b8c 	.word	0x20000b8c

08005bcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005bd0:	4802      	ldr	r0, [pc, #8]	@ (8005bdc <TIM6_DAC_IRQHandler+0x10>)
 8005bd2:	f007 fd63 	bl	800d69c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005bd6:	bf00      	nop
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	2000139c 	.word	0x2000139c

08005be0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8005be4:	4802      	ldr	r0, [pc, #8]	@ (8005bf0 <DMA2_Stream3_IRQHandler+0x10>)
 8005be6:	f002 fad9 	bl	800819c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005bea:	bf00      	nop
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000c10 	.word	0x20000c10

08005bf4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8005bf8:	4802      	ldr	r0, [pc, #8]	@ (8005c04 <DMA2_Stream4_IRQHandler+0x10>)
 8005bfa:	f002 facf 	bl	800819c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8005bfe:	bf00      	nop
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20000acc 	.word	0x20000acc

08005c08 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8005c0c:	4802      	ldr	r0, [pc, #8]	@ (8005c18 <DMA2_Stream6_IRQHandler+0x10>)
 8005c0e:	f002 fac5 	bl	800819c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005c12:	bf00      	nop
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20000c70 	.word	0x20000c70

08005c1c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8005c20:	4802      	ldr	r0, [pc, #8]	@ (8005c2c <DMA2_Stream7_IRQHandler+0x10>)
 8005c22:	f002 fabb 	bl	800819c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8005c26:	bf00      	nop
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	20000b2c 	.word	0x20000b2c

08005c30 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8005c34:	4802      	ldr	r0, [pc, #8]	@ (8005c40 <UART7_IRQHandler+0x10>)
 8005c36:	f007 ffc9 	bl	800dbcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8005c3a:	bf00      	nop
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000cd0 	.word	0x20000cd0

08005c44 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005c48:	4802      	ldr	r0, [pc, #8]	@ (8005c54 <LTDC_IRQHandler+0x10>)
 8005c4a:	f004 f90d 	bl	8009e68 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8005c4e:	bf00      	nop
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	2000091c 	.word	0x2000091c

08005c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005c60:	4a14      	ldr	r2, [pc, #80]	@ (8005cb4 <_sbrk+0x5c>)
 8005c62:	4b15      	ldr	r3, [pc, #84]	@ (8005cb8 <_sbrk+0x60>)
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005c6c:	4b13      	ldr	r3, [pc, #76]	@ (8005cbc <_sbrk+0x64>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d102      	bne.n	8005c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005c74:	4b11      	ldr	r3, [pc, #68]	@ (8005cbc <_sbrk+0x64>)
 8005c76:	4a12      	ldr	r2, [pc, #72]	@ (8005cc0 <_sbrk+0x68>)
 8005c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005c7a:	4b10      	ldr	r3, [pc, #64]	@ (8005cbc <_sbrk+0x64>)
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4413      	add	r3, r2
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d207      	bcs.n	8005c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005c88:	f010 fbc8 	bl	801641c <__errno>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	220c      	movs	r2, #12
 8005c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005c92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c96:	e009      	b.n	8005cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005c98:	4b08      	ldr	r3, [pc, #32]	@ (8005cbc <_sbrk+0x64>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005c9e:	4b07      	ldr	r3, [pc, #28]	@ (8005cbc <_sbrk+0x64>)
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	4a05      	ldr	r2, [pc, #20]	@ (8005cbc <_sbrk+0x64>)
 8005ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005caa:	68fb      	ldr	r3, [r7, #12]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3718      	adds	r7, #24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	20050000 	.word	0x20050000
 8005cb8:	00000800 	.word	0x00000800
 8005cbc:	200013e8 	.word	0x200013e8
 8005cc0:	20009b70 	.word	0x20009b70

08005cc4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005cc8:	4b06      	ldr	r3, [pc, #24]	@ (8005ce4 <SystemInit+0x20>)
 8005cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cce:	4a05      	ldr	r2, [pc, #20]	@ (8005ce4 <SystemInit+0x20>)
 8005cd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005cd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005cd8:	bf00      	nop
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	e000ed00 	.word	0xe000ed00

08005ce8 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	607b      	str	r3, [r7, #4]
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	81fb      	strh	r3, [r7, #14]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	81bb      	strh	r3, [r7, #12]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8005d00:	89bb      	ldrh	r3, [r7, #12]
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8005d06:	89bb      	ldrh	r3, [r7, #12]
 8005d08:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005d0c:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8005d12:	f7fd fb71 	bl	80033f8 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8005d16:	89fb      	ldrh	r3, [r7, #14]
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2203      	movs	r2, #3
 8005d1c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8005d20:	4618      	mov	r0, r3
 8005d22:	f001 fc35 	bl	8007590 <CODEC_IO_Write>
 8005d26:	4603      	mov	r3, r0
 8005d28:	461a      	mov	r2, r3
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8005d30:	89fb      	ldrh	r3, [r7, #14]
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2200      	movs	r2, #0
 8005d36:	f640 0117 	movw	r1, #2071	@ 0x817
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f001 fc28 	bl	8007590 <CODEC_IO_Write>
 8005d40:	4603      	mov	r3, r0
 8005d42:	461a      	mov	r2, r3
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	4413      	add	r3, r2
 8005d48:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8005d4a:	89fb      	ldrh	r3, [r7, #14]
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8005d54:	4618      	mov	r0, r3
 8005d56:	f001 fc1b 	bl	8007590 <CODEC_IO_Write>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	4413      	add	r3, r2
 8005d62:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8005d64:	89fb      	ldrh	r3, [r7, #14]
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	226c      	movs	r2, #108	@ 0x6c
 8005d6a:	2139      	movs	r1, #57	@ 0x39
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f001 fc0f 	bl	8007590 <CODEC_IO_Write>
 8005d72:	4603      	mov	r3, r0
 8005d74:	461a      	mov	r2, r3
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	4413      	add	r3, r2
 8005d7a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8005d7c:	8afb      	ldrh	r3, [r7, #22]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00c      	beq.n	8005d9c <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8005d82:	89fb      	ldrh	r3, [r7, #14]
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2213      	movs	r2, #19
 8005d88:	2101      	movs	r1, #1
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f001 fc00 	bl	8007590 <CODEC_IO_Write>
 8005d90:	4603      	mov	r3, r0
 8005d92:	461a      	mov	r2, r3
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	4413      	add	r3, r2
 8005d98:	61fb      	str	r3, [r7, #28]
 8005d9a:	e00b      	b.n	8005db4 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8005d9c:	89fb      	ldrh	r3, [r7, #14]
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2203      	movs	r2, #3
 8005da2:	2101      	movs	r1, #1
 8005da4:	4618      	mov	r0, r3
 8005da6:	f001 fbf3 	bl	8007590 <CODEC_IO_Write>
 8005daa:	4603      	mov	r3, r0
 8005dac:	461a      	mov	r2, r3
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	4413      	add	r3, r2
 8005db2:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8005db4:	2032      	movs	r0, #50	@ 0x32
 8005db6:	f7fd fb87 	bl	80034c8 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8005dba:	8b3b      	ldrh	r3, [r7, #24]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 815f 	beq.w	8006080 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8005dc2:	4bae      	ldr	r3, [pc, #696]	@ (800607c <wm8994_Init+0x394>)
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8005dc8:	8b3b      	ldrh	r3, [r7, #24]
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	f000 808c 	beq.w	8005ee8 <wm8994_Init+0x200>
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	f300 8111 	bgt.w	8005ff8 <wm8994_Init+0x310>
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d002      	beq.n	8005de0 <wm8994_Init+0xf8>
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d042      	beq.n	8005e64 <wm8994_Init+0x17c>
 8005dde:	e10b      	b.n	8005ff8 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8005de0:	89fb      	ldrh	r3, [r7, #14]
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8005de8:	2105      	movs	r1, #5
 8005dea:	4618      	mov	r0, r3
 8005dec:	f001 fbd0 	bl	8007590 <CODEC_IO_Write>
 8005df0:	4603      	mov	r3, r0
 8005df2:	461a      	mov	r2, r3
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	4413      	add	r3, r2
 8005df8:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8005dfa:	89fb      	ldrh	r3, [r7, #14]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f240 6101 	movw	r1, #1537	@ 0x601
 8005e04:	4618      	mov	r0, r3
 8005e06:	f001 fbc3 	bl	8007590 <CODEC_IO_Write>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	4413      	add	r3, r2
 8005e12:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8005e14:	89fb      	ldrh	r3, [r7, #14]
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f240 6102 	movw	r1, #1538	@ 0x602
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f001 fbb6 	bl	8007590 <CODEC_IO_Write>
 8005e24:	4603      	mov	r3, r0
 8005e26:	461a      	mov	r2, r3
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8005e2e:	89fb      	ldrh	r3, [r7, #14]
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2202      	movs	r2, #2
 8005e34:	f240 6104 	movw	r1, #1540	@ 0x604
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f001 fba9 	bl	8007590 <CODEC_IO_Write>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	461a      	mov	r2, r3
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	4413      	add	r3, r2
 8005e46:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8005e48:	89fb      	ldrh	r3, [r7, #14]
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	f240 6105 	movw	r1, #1541	@ 0x605
 8005e52:	4618      	mov	r0, r3
 8005e54:	f001 fb9c 	bl	8007590 <CODEC_IO_Write>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	4413      	add	r3, r2
 8005e60:	61fb      	str	r3, [r7, #28]
      break;
 8005e62:	e110      	b.n	8006086 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8005e64:	89fb      	ldrh	r3, [r7, #14]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	f240 3203 	movw	r2, #771	@ 0x303
 8005e6c:	2105      	movs	r1, #5
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f001 fb8e 	bl	8007590 <CODEC_IO_Write>
 8005e74:	4603      	mov	r3, r0
 8005e76:	461a      	mov	r2, r3
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8005e7e:	89fb      	ldrh	r3, [r7, #14]
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2201      	movs	r2, #1
 8005e84:	f240 6101 	movw	r1, #1537	@ 0x601
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f001 fb81 	bl	8007590 <CODEC_IO_Write>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	461a      	mov	r2, r3
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	4413      	add	r3, r2
 8005e96:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8005e98:	89fb      	ldrh	r3, [r7, #14]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f240 6102 	movw	r1, #1538	@ 0x602
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f001 fb74 	bl	8007590 <CODEC_IO_Write>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	461a      	mov	r2, r3
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	4413      	add	r3, r2
 8005eb0:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8005eb2:	89fb      	ldrh	r3, [r7, #14]
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f240 6104 	movw	r1, #1540	@ 0x604
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f001 fb67 	bl	8007590 <CODEC_IO_Write>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4413      	add	r3, r2
 8005eca:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8005ecc:	89fb      	ldrh	r3, [r7, #14]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f240 6105 	movw	r1, #1541	@ 0x605
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f001 fb5a 	bl	8007590 <CODEC_IO_Write>
 8005edc:	4603      	mov	r3, r0
 8005ede:	461a      	mov	r2, r3
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	61fb      	str	r3, [r7, #28]
      break;
 8005ee6:	e0ce      	b.n	8006086 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005ee8:	8afb      	ldrh	r3, [r7, #22]
 8005eea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005eee:	d141      	bne.n	8005f74 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8005ef0:	89fb      	ldrh	r3, [r7, #14]
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8005ef8:	2105      	movs	r1, #5
 8005efa:	4618      	mov	r0, r3
 8005efc:	f001 fb48 	bl	8007590 <CODEC_IO_Write>
 8005f00:	4603      	mov	r3, r0
 8005f02:	461a      	mov	r2, r3
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	4413      	add	r3, r2
 8005f08:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8005f0a:	89fb      	ldrh	r3, [r7, #14]
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2203      	movs	r2, #3
 8005f10:	f240 6101 	movw	r1, #1537	@ 0x601
 8005f14:	4618      	mov	r0, r3
 8005f16:	f001 fb3b 	bl	8007590 <CODEC_IO_Write>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	4413      	add	r3, r2
 8005f22:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8005f24:	89fb      	ldrh	r3, [r7, #14]
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2203      	movs	r2, #3
 8005f2a:	f240 6102 	movw	r1, #1538	@ 0x602
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f001 fb2e 	bl	8007590 <CODEC_IO_Write>
 8005f34:	4603      	mov	r3, r0
 8005f36:	461a      	mov	r2, r3
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8005f3e:	89fb      	ldrh	r3, [r7, #14]
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2203      	movs	r2, #3
 8005f44:	f240 6104 	movw	r1, #1540	@ 0x604
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f001 fb21 	bl	8007590 <CODEC_IO_Write>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	461a      	mov	r2, r3
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	4413      	add	r3, r2
 8005f56:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8005f58:	89fb      	ldrh	r3, [r7, #14]
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2203      	movs	r2, #3
 8005f5e:	f240 6105 	movw	r1, #1541	@ 0x605
 8005f62:	4618      	mov	r0, r3
 8005f64:	f001 fb14 	bl	8007590 <CODEC_IO_Write>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	4413      	add	r3, r2
 8005f70:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8005f72:	e088      	b.n	8006086 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8005f74:	89fb      	ldrh	r3, [r7, #14]
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8005f7c:	2105      	movs	r1, #5
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f001 fb06 	bl	8007590 <CODEC_IO_Write>
 8005f84:	4603      	mov	r3, r0
 8005f86:	461a      	mov	r2, r3
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8005f8e:	89fb      	ldrh	r3, [r7, #14]
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2201      	movs	r2, #1
 8005f94:	f240 6101 	movw	r1, #1537	@ 0x601
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f001 faf9 	bl	8007590 <CODEC_IO_Write>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8005fa8:	89fb      	ldrh	r3, [r7, #14]
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2201      	movs	r2, #1
 8005fae:	f240 6102 	movw	r1, #1538	@ 0x602
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f001 faec 	bl	8007590 <CODEC_IO_Write>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	461a      	mov	r2, r3
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8005fc2:	89fb      	ldrh	r3, [r7, #14]
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f240 6104 	movw	r1, #1540	@ 0x604
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f001 fadf 	bl	8007590 <CODEC_IO_Write>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	4413      	add	r3, r2
 8005fda:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8005fdc:	89fb      	ldrh	r3, [r7, #14]
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	f240 6105 	movw	r1, #1541	@ 0x605
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 fad2 	bl	8007590 <CODEC_IO_Write>
 8005fec:	4603      	mov	r3, r0
 8005fee:	461a      	mov	r2, r3
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	61fb      	str	r3, [r7, #28]
      break;
 8005ff6:	e046      	b.n	8006086 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8005ff8:	89fb      	ldrh	r3, [r7, #14]
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	f240 3203 	movw	r2, #771	@ 0x303
 8006000:	2105      	movs	r1, #5
 8006002:	4618      	mov	r0, r3
 8006004:	f001 fac4 	bl	8007590 <CODEC_IO_Write>
 8006008:	4603      	mov	r3, r0
 800600a:	461a      	mov	r2, r3
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	4413      	add	r3, r2
 8006010:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8006012:	89fb      	ldrh	r3, [r7, #14]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2201      	movs	r2, #1
 8006018:	f240 6101 	movw	r1, #1537	@ 0x601
 800601c:	4618      	mov	r0, r3
 800601e:	f001 fab7 	bl	8007590 <CODEC_IO_Write>
 8006022:	4603      	mov	r3, r0
 8006024:	461a      	mov	r2, r3
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	4413      	add	r3, r2
 800602a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800602c:	89fb      	ldrh	r3, [r7, #14]
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2201      	movs	r2, #1
 8006032:	f240 6102 	movw	r1, #1538	@ 0x602
 8006036:	4618      	mov	r0, r3
 8006038:	f001 faaa 	bl	8007590 <CODEC_IO_Write>
 800603c:	4603      	mov	r3, r0
 800603e:	461a      	mov	r2, r3
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	4413      	add	r3, r2
 8006044:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8006046:	89fb      	ldrh	r3, [r7, #14]
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2200      	movs	r2, #0
 800604c:	f240 6104 	movw	r1, #1540	@ 0x604
 8006050:	4618      	mov	r0, r3
 8006052:	f001 fa9d 	bl	8007590 <CODEC_IO_Write>
 8006056:	4603      	mov	r3, r0
 8006058:	461a      	mov	r2, r3
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	4413      	add	r3, r2
 800605e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8006060:	89fb      	ldrh	r3, [r7, #14]
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2200      	movs	r2, #0
 8006066:	f240 6105 	movw	r1, #1541	@ 0x605
 800606a:	4618      	mov	r0, r3
 800606c:	f001 fa90 	bl	8007590 <CODEC_IO_Write>
 8006070:	4603      	mov	r3, r0
 8006072:	461a      	mov	r2, r3
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	4413      	add	r3, r2
 8006078:	61fb      	str	r3, [r7, #28]
      break;
 800607a:	e004      	b.n	8006086 <wm8994_Init+0x39e>
 800607c:	200013ec 	.word	0x200013ec
    }
  }
  else
  {
    outputEnabled = 0;
 8006080:	4ba5      	ldr	r3, [pc, #660]	@ (8006318 <wm8994_Init+0x630>)
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8006086:	8afb      	ldrh	r3, [r7, #22]
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 81c3 	beq.w	8006414 <wm8994_Init+0x72c>
  {
    inputEnabled = 1;
 800608e:	4ba3      	ldr	r3, [pc, #652]	@ (800631c <wm8994_Init+0x634>)
 8006090:	2201      	movs	r2, #1
 8006092:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8006094:	8afb      	ldrh	r3, [r7, #22]
 8006096:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800609a:	f000 8141 	beq.w	8006320 <wm8994_Init+0x638>
 800609e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060a2:	f300 81b3 	bgt.w	800640c <wm8994_Init+0x724>
 80060a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060aa:	d05a      	beq.n	8006162 <wm8994_Init+0x47a>
 80060ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060b0:	f300 81ac 	bgt.w	800640c <wm8994_Init+0x724>
 80060b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060b8:	f000 80de 	beq.w	8006278 <wm8994_Init+0x590>
 80060bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060c0:	f040 81a4 	bne.w	800640c <wm8994_Init+0x724>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80060c4:	89fb      	ldrh	r3, [r7, #14]
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 80060cc:	2104      	movs	r1, #4
 80060ce:	4618      	mov	r0, r3
 80060d0:	f001 fa5e 	bl	8007590 <CODEC_IO_Write>
 80060d4:	4603      	mov	r3, r0
 80060d6:	461a      	mov	r2, r3
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	4413      	add	r3, r2
 80060dc:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80060de:	89fb      	ldrh	r3, [r7, #14]
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	22db      	movs	r2, #219	@ 0xdb
 80060e4:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80060e8:	4618      	mov	r0, r3
 80060ea:	f001 fa51 	bl	8007590 <CODEC_IO_Write>
 80060ee:	4603      	mov	r3, r0
 80060f0:	461a      	mov	r2, r3
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	4413      	add	r3, r2
 80060f6:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80060f8:	89fb      	ldrh	r3, [r7, #14]
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8006100:	2102      	movs	r1, #2
 8006102:	4618      	mov	r0, r3
 8006104:	f001 fa44 	bl	8007590 <CODEC_IO_Write>
 8006108:	4603      	mov	r3, r0
 800610a:	461a      	mov	r2, r3
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	4413      	add	r3, r2
 8006110:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8006112:	89fb      	ldrh	r3, [r7, #14]
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2202      	movs	r2, #2
 8006118:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 800611c:	4618      	mov	r0, r3
 800611e:	f001 fa37 	bl	8007590 <CODEC_IO_Write>
 8006122:	4603      	mov	r3, r0
 8006124:	461a      	mov	r2, r3
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	4413      	add	r3, r2
 800612a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800612c:	89fb      	ldrh	r3, [r7, #14]
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2202      	movs	r2, #2
 8006132:	f240 6109 	movw	r1, #1545	@ 0x609
 8006136:	4618      	mov	r0, r3
 8006138:	f001 fa2a 	bl	8007590 <CODEC_IO_Write>
 800613c:	4603      	mov	r3, r0
 800613e:	461a      	mov	r2, r3
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	4413      	add	r3, r2
 8006144:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8006146:	89fb      	ldrh	r3, [r7, #14]
 8006148:	b2db      	uxtb	r3, r3
 800614a:	220e      	movs	r2, #14
 800614c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8006150:	4618      	mov	r0, r3
 8006152:	f001 fa1d 	bl	8007590 <CODEC_IO_Write>
 8006156:	4603      	mov	r3, r0
 8006158:	461a      	mov	r2, r3
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	4413      	add	r3, r2
 800615e:	61fb      	str	r3, [r7, #28]
      break;
 8006160:	e15b      	b.n	800641a <wm8994_Init+0x732>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8006162:	89fb      	ldrh	r3, [r7, #14]
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2211      	movs	r2, #17
 8006168:	2128      	movs	r1, #40	@ 0x28
 800616a:	4618      	mov	r0, r3
 800616c:	f001 fa10 	bl	8007590 <CODEC_IO_Write>
 8006170:	4603      	mov	r3, r0
 8006172:	461a      	mov	r2, r3
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	4413      	add	r3, r2
 8006178:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +0dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 800617a:	89fb      	ldrh	r3, [r7, #14]
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2220      	movs	r2, #32
 8006180:	2129      	movs	r1, #41	@ 0x29
 8006182:	4618      	mov	r0, r3
 8006184:	f001 fa04 	bl	8007590 <CODEC_IO_Write>
 8006188:	4603      	mov	r3, r0
 800618a:	461a      	mov	r2, r3
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	4413      	add	r3, r2
 8006190:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 8006192:	89fb      	ldrh	r3, [r7, #14]
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2220      	movs	r2, #32
 8006198:	212a      	movs	r1, #42	@ 0x2a
 800619a:	4618      	mov	r0, r3
 800619c:	f001 f9f8 	bl	8007590 <CODEC_IO_Write>
 80061a0:	4603      	mov	r3, r0
 80061a2:	461a      	mov	r2, r3
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	4413      	add	r3, r2
 80061a8:	61fb      	str	r3, [r7, #28]
      counter += CODEC_IO_Write(DeviceAddr, 0x2B, 0x0000);
 80061aa:	89fb      	ldrh	r3, [r7, #14]
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2200      	movs	r2, #0
 80061b0:	212b      	movs	r1, #43	@ 0x2b
 80061b2:	4618      	mov	r0, r3
 80061b4:	f001 f9ec 	bl	8007590 <CODEC_IO_Write>
 80061b8:	4603      	mov	r3, r0
 80061ba:	461a      	mov	r2, r3
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	4413      	add	r3, r2
 80061c0:	61fb      	str	r3, [r7, #28]
      counter += CODEC_IO_Write(DeviceAddr, 0x2C, 0x0000);
 80061c2:	89fb      	ldrh	r3, [r7, #14]
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2200      	movs	r2, #0
 80061c8:	212c      	movs	r1, #44	@ 0x2c
 80061ca:	4618      	mov	r0, r3
 80061cc:	f001 f9e0 	bl	8007590 <CODEC_IO_Write>
 80061d0:	4603      	mov	r3, r0
 80061d2:	461a      	mov	r2, r3
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	4413      	add	r3, r2
 80061d8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80061da:	89fb      	ldrh	r3, [r7, #14]
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	f240 3203 	movw	r2, #771	@ 0x303
 80061e2:	2104      	movs	r1, #4
 80061e4:	4618      	mov	r0, r3
 80061e6:	f001 f9d3 	bl	8007590 <CODEC_IO_Write>
 80061ea:	4603      	mov	r3, r0
 80061ec:	461a      	mov	r2, r3
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	4413      	add	r3, r2
 80061f2:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80061f4:	89fb      	ldrh	r3, [r7, #14]
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	22db      	movs	r2, #219	@ 0xdb
 80061fa:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80061fe:	4618      	mov	r0, r3
 8006200:	f001 f9c6 	bl	8007590 <CODEC_IO_Write>
 8006204:	4603      	mov	r3, r0
 8006206:	461a      	mov	r2, r3
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	4413      	add	r3, r2
 800620c:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800620e:	89fb      	ldrh	r3, [r7, #14]
 8006210:	b2db      	uxtb	r3, r3
 8006212:	f246 3250 	movw	r2, #25424	@ 0x6350
 8006216:	2102      	movs	r1, #2
 8006218:	4618      	mov	r0, r3
 800621a:	f001 f9b9 	bl	8007590 <CODEC_IO_Write>
 800621e:	4603      	mov	r3, r0
 8006220:	461a      	mov	r2, r3
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	4413      	add	r3, r2
 8006226:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8006228:	89fb      	ldrh	r3, [r7, #14]
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2202      	movs	r2, #2
 800622e:	f240 6106 	movw	r1, #1542	@ 0x606
 8006232:	4618      	mov	r0, r3
 8006234:	f001 f9ac 	bl	8007590 <CODEC_IO_Write>
 8006238:	4603      	mov	r3, r0
 800623a:	461a      	mov	r2, r3
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	4413      	add	r3, r2
 8006240:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8006242:	89fb      	ldrh	r3, [r7, #14]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2202      	movs	r2, #2
 8006248:	f240 6107 	movw	r1, #1543	@ 0x607
 800624c:	4618      	mov	r0, r3
 800624e:	f001 f99f 	bl	8007590 <CODEC_IO_Write>
 8006252:	4603      	mov	r3, r0
 8006254:	461a      	mov	r2, r3
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	4413      	add	r3, r2
 800625a:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800625c:	89fb      	ldrh	r3, [r7, #14]
 800625e:	b2db      	uxtb	r3, r3
 8006260:	220d      	movs	r2, #13
 8006262:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8006266:	4618      	mov	r0, r3
 8006268:	f001 f992 	bl	8007590 <CODEC_IO_Write>
 800626c:	4603      	mov	r3, r0
 800626e:	461a      	mov	r2, r3
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	4413      	add	r3, r2
 8006274:	61fb      	str	r3, [r7, #28]
      break;
 8006276:	e0d0      	b.n	800641a <wm8994_Init+0x732>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8006278:	89fb      	ldrh	r3, [r7, #14]
 800627a:	b2db      	uxtb	r3, r3
 800627c:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8006280:	2104      	movs	r1, #4
 8006282:	4618      	mov	r0, r3
 8006284:	f001 f984 	bl	8007590 <CODEC_IO_Write>
 8006288:	4603      	mov	r3, r0
 800628a:	461a      	mov	r2, r3
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	4413      	add	r3, r2
 8006290:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8006292:	89fb      	ldrh	r3, [r7, #14]
 8006294:	b2db      	uxtb	r3, r3
 8006296:	22db      	movs	r2, #219	@ 0xdb
 8006298:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800629c:	4618      	mov	r0, r3
 800629e:	f001 f977 	bl	8007590 <CODEC_IO_Write>
 80062a2:	4603      	mov	r3, r0
 80062a4:	461a      	mov	r2, r3
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	4413      	add	r3, r2
 80062aa:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80062ac:	89fb      	ldrh	r3, [r7, #14]
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	f246 3250 	movw	r2, #25424	@ 0x6350
 80062b4:	2102      	movs	r1, #2
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 f96a 	bl	8007590 <CODEC_IO_Write>
 80062bc:	4603      	mov	r3, r0
 80062be:	461a      	mov	r2, r3
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	4413      	add	r3, r2
 80062c4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80062c6:	89fb      	ldrh	r3, [r7, #14]
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2202      	movs	r2, #2
 80062cc:	f240 6106 	movw	r1, #1542	@ 0x606
 80062d0:	4618      	mov	r0, r3
 80062d2:	f001 f95d 	bl	8007590 <CODEC_IO_Write>
 80062d6:	4603      	mov	r3, r0
 80062d8:	461a      	mov	r2, r3
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	4413      	add	r3, r2
 80062de:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80062e0:	89fb      	ldrh	r3, [r7, #14]
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2202      	movs	r2, #2
 80062e6:	f240 6107 	movw	r1, #1543	@ 0x607
 80062ea:	4618      	mov	r0, r3
 80062ec:	f001 f950 	bl	8007590 <CODEC_IO_Write>
 80062f0:	4603      	mov	r3, r0
 80062f2:	461a      	mov	r2, r3
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	4413      	add	r3, r2
 80062f8:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80062fa:	89fb      	ldrh	r3, [r7, #14]
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	220d      	movs	r2, #13
 8006300:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8006304:	4618      	mov	r0, r3
 8006306:	f001 f943 	bl	8007590 <CODEC_IO_Write>
 800630a:	4603      	mov	r3, r0
 800630c:	461a      	mov	r2, r3
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	4413      	add	r3, r2
 8006312:	61fb      	str	r3, [r7, #28]
      break; 
 8006314:	e081      	b.n	800641a <wm8994_Init+0x732>
 8006316:	bf00      	nop
 8006318:	200013ec 	.word	0x200013ec
 800631c:	200013f0 	.word	0x200013f0
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8006320:	89fb      	ldrh	r3, [r7, #14]
 8006322:	b2db      	uxtb	r3, r3
 8006324:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8006328:	2104      	movs	r1, #4
 800632a:	4618      	mov	r0, r3
 800632c:	f001 f930 	bl	8007590 <CODEC_IO_Write>
 8006330:	4603      	mov	r3, r0
 8006332:	461a      	mov	r2, r3
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	4413      	add	r3, r2
 8006338:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800633a:	89fb      	ldrh	r3, [r7, #14]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	22db      	movs	r2, #219	@ 0xdb
 8006340:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8006344:	4618      	mov	r0, r3
 8006346:	f001 f923 	bl	8007590 <CODEC_IO_Write>
 800634a:	4603      	mov	r3, r0
 800634c:	461a      	mov	r2, r3
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	4413      	add	r3, r2
 8006352:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8006354:	89fb      	ldrh	r3, [r7, #14]
 8006356:	b2db      	uxtb	r3, r3
 8006358:	22db      	movs	r2, #219	@ 0xdb
 800635a:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800635e:	4618      	mov	r0, r3
 8006360:	f001 f916 	bl	8007590 <CODEC_IO_Write>
 8006364:	4603      	mov	r3, r0
 8006366:	461a      	mov	r2, r3
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	4413      	add	r3, r2
 800636c:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 800636e:	89fb      	ldrh	r3, [r7, #14]
 8006370:	b2db      	uxtb	r3, r3
 8006372:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 8006376:	2102      	movs	r1, #2
 8006378:	4618      	mov	r0, r3
 800637a:	f001 f909 	bl	8007590 <CODEC_IO_Write>
 800637e:	4603      	mov	r3, r0
 8006380:	461a      	mov	r2, r3
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	4413      	add	r3, r2
 8006386:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8006388:	89fb      	ldrh	r3, [r7, #14]
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2202      	movs	r2, #2
 800638e:	f240 6106 	movw	r1, #1542	@ 0x606
 8006392:	4618      	mov	r0, r3
 8006394:	f001 f8fc 	bl	8007590 <CODEC_IO_Write>
 8006398:	4603      	mov	r3, r0
 800639a:	461a      	mov	r2, r3
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	4413      	add	r3, r2
 80063a0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80063a2:	89fb      	ldrh	r3, [r7, #14]
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2202      	movs	r2, #2
 80063a8:	f240 6107 	movw	r1, #1543	@ 0x607
 80063ac:	4618      	mov	r0, r3
 80063ae:	f001 f8ef 	bl	8007590 <CODEC_IO_Write>
 80063b2:	4603      	mov	r3, r0
 80063b4:	461a      	mov	r2, r3
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	4413      	add	r3, r2
 80063ba:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80063bc:	89fb      	ldrh	r3, [r7, #14]
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2202      	movs	r2, #2
 80063c2:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80063c6:	4618      	mov	r0, r3
 80063c8:	f001 f8e2 	bl	8007590 <CODEC_IO_Write>
 80063cc:	4603      	mov	r3, r0
 80063ce:	461a      	mov	r2, r3
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	4413      	add	r3, r2
 80063d4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80063d6:	89fb      	ldrh	r3, [r7, #14]
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2202      	movs	r2, #2
 80063dc:	f240 6109 	movw	r1, #1545	@ 0x609
 80063e0:	4618      	mov	r0, r3
 80063e2:	f001 f8d5 	bl	8007590 <CODEC_IO_Write>
 80063e6:	4603      	mov	r3, r0
 80063e8:	461a      	mov	r2, r3
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	4413      	add	r3, r2
 80063ee:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80063f0:	89fb      	ldrh	r3, [r7, #14]
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	220d      	movs	r2, #13
 80063f6:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80063fa:	4618      	mov	r0, r3
 80063fc:	f001 f8c8 	bl	8007590 <CODEC_IO_Write>
 8006400:	4603      	mov	r3, r0
 8006402:	461a      	mov	r2, r3
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	4413      	add	r3, r2
 8006408:	61fb      	str	r3, [r7, #28]
      break;    
 800640a:	e006      	b.n	800641a <wm8994_Init+0x732>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	3301      	adds	r3, #1
 8006410:	61fb      	str	r3, [r7, #28]
      break;
 8006412:	e002      	b.n	800641a <wm8994_Init+0x732>
    }
  }
  else
  {
    inputEnabled = 0;
 8006414:	4ba4      	ldr	r3, [pc, #656]	@ (80066a8 <wm8994_Init+0x9c0>)
 8006416:	2200      	movs	r2, #0
 8006418:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4aa3      	ldr	r2, [pc, #652]	@ (80066ac <wm8994_Init+0x9c4>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d079      	beq.n	8006516 <wm8994_Init+0x82e>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4aa1      	ldr	r2, [pc, #644]	@ (80066ac <wm8994_Init+0x9c4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	f200 80ad 	bhi.w	8006586 <wm8994_Init+0x89e>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8006432:	4293      	cmp	r3, r2
 8006434:	d061      	beq.n	80064fa <wm8994_Init+0x812>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800643c:	4293      	cmp	r3, r2
 800643e:	f200 80a2 	bhi.w	8006586 <wm8994_Init+0x89e>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8006448:	4293      	cmp	r3, r2
 800644a:	f000 808e 	beq.w	800656a <wm8994_Init+0x882>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8006454:	4293      	cmp	r3, r2
 8006456:	f200 8096 	bhi.w	8006586 <wm8994_Init+0x89e>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8006460:	d03d      	beq.n	80064de <wm8994_Init+0x7f6>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8006468:	f200 808d 	bhi.w	8006586 <wm8994_Init+0x89e>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f245 6222 	movw	r2, #22050	@ 0x5622
 8006472:	4293      	cmp	r3, r2
 8006474:	d06b      	beq.n	800654e <wm8994_Init+0x866>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f245 6222 	movw	r2, #22050	@ 0x5622
 800647c:	4293      	cmp	r3, r2
 800647e:	f200 8082 	bhi.w	8006586 <wm8994_Init+0x89e>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8006488:	d01b      	beq.n	80064c2 <wm8994_Init+0x7da>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8006490:	d879      	bhi.n	8006586 <wm8994_Init+0x89e>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8006498:	d005      	beq.n	80064a6 <wm8994_Init+0x7be>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d046      	beq.n	8006532 <wm8994_Init+0x84a>
 80064a4:	e06f      	b.n	8006586 <wm8994_Init+0x89e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80064a6:	89fb      	ldrh	r3, [r7, #14]
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2203      	movs	r2, #3
 80064ac:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80064b0:	4618      	mov	r0, r3
 80064b2:	f001 f86d 	bl	8007590 <CODEC_IO_Write>
 80064b6:	4603      	mov	r3, r0
 80064b8:	461a      	mov	r2, r3
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	4413      	add	r3, r2
 80064be:	61fb      	str	r3, [r7, #28]
    break;
 80064c0:	e06f      	b.n	80065a2 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80064c2:	89fb      	ldrh	r3, [r7, #14]
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2233      	movs	r2, #51	@ 0x33
 80064c8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80064cc:	4618      	mov	r0, r3
 80064ce:	f001 f85f 	bl	8007590 <CODEC_IO_Write>
 80064d2:	4603      	mov	r3, r0
 80064d4:	461a      	mov	r2, r3
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	4413      	add	r3, r2
 80064da:	61fb      	str	r3, [r7, #28]
    break;
 80064dc:	e061      	b.n	80065a2 <wm8994_Init+0x8ba>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80064de:	89fb      	ldrh	r3, [r7, #14]
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2263      	movs	r2, #99	@ 0x63
 80064e4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80064e8:	4618      	mov	r0, r3
 80064ea:	f001 f851 	bl	8007590 <CODEC_IO_Write>
 80064ee:	4603      	mov	r3, r0
 80064f0:	461a      	mov	r2, r3
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	4413      	add	r3, r2
 80064f6:	61fb      	str	r3, [r7, #28]
    break;
 80064f8:	e053      	b.n	80065a2 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80064fa:	89fb      	ldrh	r3, [r7, #14]
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2283      	movs	r2, #131	@ 0x83
 8006500:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006504:	4618      	mov	r0, r3
 8006506:	f001 f843 	bl	8007590 <CODEC_IO_Write>
 800650a:	4603      	mov	r3, r0
 800650c:	461a      	mov	r2, r3
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	4413      	add	r3, r2
 8006512:	61fb      	str	r3, [r7, #28]
    break;
 8006514:	e045      	b.n	80065a2 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8006516:	89fb      	ldrh	r3, [r7, #14]
 8006518:	b2db      	uxtb	r3, r3
 800651a:	22a3      	movs	r2, #163	@ 0xa3
 800651c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006520:	4618      	mov	r0, r3
 8006522:	f001 f835 	bl	8007590 <CODEC_IO_Write>
 8006526:	4603      	mov	r3, r0
 8006528:	461a      	mov	r2, r3
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	4413      	add	r3, r2
 800652e:	61fb      	str	r3, [r7, #28]
    break;
 8006530:	e037      	b.n	80065a2 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8006532:	89fb      	ldrh	r3, [r7, #14]
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2213      	movs	r2, #19
 8006538:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800653c:	4618      	mov	r0, r3
 800653e:	f001 f827 	bl	8007590 <CODEC_IO_Write>
 8006542:	4603      	mov	r3, r0
 8006544:	461a      	mov	r2, r3
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	4413      	add	r3, r2
 800654a:	61fb      	str	r3, [r7, #28]
    break;
 800654c:	e029      	b.n	80065a2 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800654e:	89fb      	ldrh	r3, [r7, #14]
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2243      	movs	r2, #67	@ 0x43
 8006554:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006558:	4618      	mov	r0, r3
 800655a:	f001 f819 	bl	8007590 <CODEC_IO_Write>
 800655e:	4603      	mov	r3, r0
 8006560:	461a      	mov	r2, r3
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	4413      	add	r3, r2
 8006566:	61fb      	str	r3, [r7, #28]
    break;
 8006568:	e01b      	b.n	80065a2 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800656a:	89fb      	ldrh	r3, [r7, #14]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2273      	movs	r2, #115	@ 0x73
 8006570:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006574:	4618      	mov	r0, r3
 8006576:	f001 f80b 	bl	8007590 <CODEC_IO_Write>
 800657a:	4603      	mov	r3, r0
 800657c:	461a      	mov	r2, r3
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	4413      	add	r3, r2
 8006582:	61fb      	str	r3, [r7, #28]
    break; 
 8006584:	e00d      	b.n	80065a2 <wm8994_Init+0x8ba>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8006586:	89fb      	ldrh	r3, [r7, #14]
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2283      	movs	r2, #131	@ 0x83
 800658c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006590:	4618      	mov	r0, r3
 8006592:	f000 fffd 	bl	8007590 <CODEC_IO_Write>
 8006596:	4603      	mov	r3, r0
 8006598:	461a      	mov	r2, r3
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	4413      	add	r3, r2
 800659e:	61fb      	str	r3, [r7, #28]
    break; 
 80065a0:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80065a2:	8afb      	ldrh	r3, [r7, #22]
 80065a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065a8:	d10e      	bne.n	80065c8 <wm8994_Init+0x8e0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 80065aa:	89fb      	ldrh	r3, [r7, #14]
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	f244 0218 	movw	r2, #16408	@ 0x4018
 80065b2:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 ffea 	bl	8007590 <CODEC_IO_Write>
 80065bc:	4603      	mov	r3, r0
 80065be:	461a      	mov	r2, r3
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	4413      	add	r3, r2
 80065c4:	61fb      	str	r3, [r7, #28]
 80065c6:	e00d      	b.n	80065e4 <wm8994_Init+0x8fc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 80065c8:	89fb      	ldrh	r3, [r7, #14]
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	f244 0210 	movw	r2, #16400	@ 0x4010
 80065d0:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 ffdb 	bl	8007590 <CODEC_IO_Write>
 80065da:	4603      	mov	r3, r0
 80065dc:	461a      	mov	r2, r3
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	4413      	add	r3, r2
 80065e2:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 80065e4:	89fb      	ldrh	r3, [r7, #14]
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2200      	movs	r2, #0
 80065ea:	f240 3102 	movw	r1, #770	@ 0x302
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 ffce 	bl	8007590 <CODEC_IO_Write>
 80065f4:	4603      	mov	r3, r0
 80065f6:	461a      	mov	r2, r3
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	4413      	add	r3, r2
 80065fc:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 80065fe:	89fb      	ldrh	r3, [r7, #14]
 8006600:	b2db      	uxtb	r3, r3
 8006602:	220a      	movs	r2, #10
 8006604:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8006608:	4618      	mov	r0, r3
 800660a:	f000 ffc1 	bl	8007590 <CODEC_IO_Write>
 800660e:	4603      	mov	r3, r0
 8006610:	461a      	mov	r2, r3
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	4413      	add	r3, r2
 8006616:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8006618:	89fb      	ldrh	r3, [r7, #14]
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2201      	movs	r2, #1
 800661e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006622:	4618      	mov	r0, r3
 8006624:	f000 ffb4 	bl	8007590 <CODEC_IO_Write>
 8006628:	4603      	mov	r3, r0
 800662a:	461a      	mov	r2, r3
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	4413      	add	r3, r2
 8006630:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8006632:	8b3b      	ldrh	r3, [r7, #24]
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 817b 	beq.w	8006930 <wm8994_Init+0xc48>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 800663a:	8b3b      	ldrh	r3, [r7, #24]
 800663c:	2b02      	cmp	r3, #2
 800663e:	d157      	bne.n	80066f0 <wm8994_Init+0xa08>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8006640:	89fb      	ldrh	r3, [r7, #14]
 8006642:	b2db      	uxtb	r3, r3
 8006644:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006648:	212d      	movs	r1, #45	@ 0x2d
 800664a:	4618      	mov	r0, r3
 800664c:	f000 ffa0 	bl	8007590 <CODEC_IO_Write>
 8006650:	4603      	mov	r3, r0
 8006652:	461a      	mov	r2, r3
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	4413      	add	r3, r2
 8006658:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 800665a:	89fb      	ldrh	r3, [r7, #14]
 800665c:	b2db      	uxtb	r3, r3
 800665e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006662:	212e      	movs	r1, #46	@ 0x2e
 8006664:	4618      	mov	r0, r3
 8006666:	f000 ff93 	bl	8007590 <CODEC_IO_Write>
 800666a:	4603      	mov	r3, r0
 800666c:	461a      	mov	r2, r3
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	4413      	add	r3, r2
 8006672:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8006674:	4b0e      	ldr	r3, [pc, #56]	@ (80066b0 <wm8994_Init+0x9c8>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01b      	beq.n	80066b4 <wm8994_Init+0x9cc>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 800667c:	89fb      	ldrh	r3, [r7, #14]
 800667e:	b2db      	uxtb	r3, r3
 8006680:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 8006684:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8006688:	4618      	mov	r0, r3
 800668a:	f000 ff81 	bl	8007590 <CODEC_IO_Write>
 800668e:	4603      	mov	r3, r0
 8006690:	461a      	mov	r2, r3
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	4413      	add	r3, r2
 8006696:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8006698:	4b05      	ldr	r3, [pc, #20]	@ (80066b0 <wm8994_Init+0x9c8>)
 800669a:	2200      	movs	r2, #0
 800669c:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 800669e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80066a2:	f7fc ff11 	bl	80034c8 <AUDIO_IO_Delay>
 80066a6:	e016      	b.n	80066d6 <wm8994_Init+0x9ee>
 80066a8:	200013f0 	.word	0x200013f0
 80066ac:	00017700 	.word	0x00017700
 80066b0:	200000a4 	.word	0x200000a4
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 80066b4:	89fb      	ldrh	r3, [r7, #14]
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	f248 1208 	movw	r2, #33032	@ 0x8108
 80066bc:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 ff65 	bl	8007590 <CODEC_IO_Write>
 80066c6:	4603      	mov	r3, r0
 80066c8:	461a      	mov	r2, r3
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	4413      	add	r3, r2
 80066ce:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 80066d0:	2032      	movs	r0, #50	@ 0x32
 80066d2:	f7fc fef9 	bl	80034c8 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80066d6:	89fb      	ldrh	r3, [r7, #14]
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2200      	movs	r2, #0
 80066dc:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 ff55 	bl	8007590 <CODEC_IO_Write>
 80066e6:	4603      	mov	r3, r0
 80066e8:	461a      	mov	r2, r3
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	4413      	add	r3, r2
 80066ee:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 80066f0:	89fb      	ldrh	r3, [r7, #14]
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80066f8:	2103      	movs	r1, #3
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 ff48 	bl	8007590 <CODEC_IO_Write>
 8006700:	4603      	mov	r3, r0
 8006702:	461a      	mov	r2, r3
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	4413      	add	r3, r2
 8006708:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 800670a:	89fb      	ldrh	r3, [r7, #14]
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2200      	movs	r2, #0
 8006710:	2122      	movs	r1, #34	@ 0x22
 8006712:	4618      	mov	r0, r3
 8006714:	f000 ff3c 	bl	8007590 <CODEC_IO_Write>
 8006718:	4603      	mov	r3, r0
 800671a:	461a      	mov	r2, r3
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	4413      	add	r3, r2
 8006720:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8006722:	89fb      	ldrh	r3, [r7, #14]
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2200      	movs	r2, #0
 8006728:	2123      	movs	r1, #35	@ 0x23
 800672a:	4618      	mov	r0, r3
 800672c:	f000 ff30 	bl	8007590 <CODEC_IO_Write>
 8006730:	4603      	mov	r3, r0
 8006732:	461a      	mov	r2, r3
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	4413      	add	r3, r2
 8006738:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 800673a:	89fb      	ldrh	r3, [r7, #14]
 800673c:	b2db      	uxtb	r3, r3
 800673e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8006742:	2136      	movs	r1, #54	@ 0x36
 8006744:	4618      	mov	r0, r3
 8006746:	f000 ff23 	bl	8007590 <CODEC_IO_Write>
 800674a:	4603      	mov	r3, r0
 800674c:	461a      	mov	r2, r3
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	4413      	add	r3, r2
 8006752:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8006754:	89fb      	ldrh	r3, [r7, #14]
 8006756:	b2db      	uxtb	r3, r3
 8006758:	f243 0203 	movw	r2, #12291	@ 0x3003
 800675c:	2101      	movs	r1, #1
 800675e:	4618      	mov	r0, r3
 8006760:	f000 ff16 	bl	8007590 <CODEC_IO_Write>
 8006764:	4603      	mov	r3, r0
 8006766:	461a      	mov	r2, r3
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	4413      	add	r3, r2
 800676c:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800676e:	8afb      	ldrh	r3, [r7, #22]
 8006770:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006774:	d10d      	bne.n	8006792 <wm8994_Init+0xaaa>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8006776:	89fb      	ldrh	r3, [r7, #14]
 8006778:	b2db      	uxtb	r3, r3
 800677a:	f240 2205 	movw	r2, #517	@ 0x205
 800677e:	2151      	movs	r1, #81	@ 0x51
 8006780:	4618      	mov	r0, r3
 8006782:	f000 ff05 	bl	8007590 <CODEC_IO_Write>
 8006786:	4603      	mov	r3, r0
 8006788:	461a      	mov	r2, r3
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	4413      	add	r3, r2
 800678e:	61fb      	str	r3, [r7, #28]
 8006790:	e00b      	b.n	80067aa <wm8994_Init+0xac2>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8006792:	89fb      	ldrh	r3, [r7, #14]
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2205      	movs	r2, #5
 8006798:	2151      	movs	r1, #81	@ 0x51
 800679a:	4618      	mov	r0, r3
 800679c:	f000 fef8 	bl	8007590 <CODEC_IO_Write>
 80067a0:	4603      	mov	r3, r0
 80067a2:	461a      	mov	r2, r3
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	4413      	add	r3, r2
 80067a8:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80067aa:	8b7b      	ldrh	r3, [r7, #26]
 80067ac:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 80067b0:	f043 0303 	orr.w	r3, r3, #3
 80067b4:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80067b6:	89fb      	ldrh	r3, [r7, #14]
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	8b7a      	ldrh	r2, [r7, #26]
 80067bc:	2101      	movs	r1, #1
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fee6 	bl	8007590 <CODEC_IO_Write>
 80067c4:	4603      	mov	r3, r0
 80067c6:	461a      	mov	r2, r3
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	4413      	add	r3, r2
 80067cc:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 80067ce:	89fb      	ldrh	r3, [r7, #14]
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2222      	movs	r2, #34	@ 0x22
 80067d4:	2160      	movs	r1, #96	@ 0x60
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 feda 	bl	8007590 <CODEC_IO_Write>
 80067dc:	4603      	mov	r3, r0
 80067de:	461a      	mov	r2, r3
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	4413      	add	r3, r2
 80067e4:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 80067e6:	89fb      	ldrh	r3, [r7, #14]
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	f649 7225 	movw	r2, #40741	@ 0x9f25
 80067ee:	214c      	movs	r1, #76	@ 0x4c
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 fecd 	bl	8007590 <CODEC_IO_Write>
 80067f6:	4603      	mov	r3, r0
 80067f8:	461a      	mov	r2, r3
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	4413      	add	r3, r2
 80067fe:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8006800:	200f      	movs	r0, #15
 8006802:	f7fc fe61 	bl	80034c8 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8006806:	89fb      	ldrh	r3, [r7, #14]
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2201      	movs	r2, #1
 800680c:	212d      	movs	r1, #45	@ 0x2d
 800680e:	4618      	mov	r0, r3
 8006810:	f000 febe 	bl	8007590 <CODEC_IO_Write>
 8006814:	4603      	mov	r3, r0
 8006816:	461a      	mov	r2, r3
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	4413      	add	r3, r2
 800681c:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 800681e:	89fb      	ldrh	r3, [r7, #14]
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2201      	movs	r2, #1
 8006824:	212e      	movs	r1, #46	@ 0x2e
 8006826:	4618      	mov	r0, r3
 8006828:	f000 feb2 	bl	8007590 <CODEC_IO_Write>
 800682c:	4603      	mov	r3, r0
 800682e:	461a      	mov	r2, r3
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	4413      	add	r3, r2
 8006834:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8006836:	89fb      	ldrh	r3, [r7, #14]
 8006838:	b2db      	uxtb	r3, r3
 800683a:	f44f 724c 	mov.w	r2, #816	@ 0x330
 800683e:	2103      	movs	r1, #3
 8006840:	4618      	mov	r0, r3
 8006842:	f000 fea5 	bl	8007590 <CODEC_IO_Write>
 8006846:	4603      	mov	r3, r0
 8006848:	461a      	mov	r2, r3
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	4413      	add	r3, r2
 800684e:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8006850:	89fb      	ldrh	r3, [r7, #14]
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2233      	movs	r2, #51	@ 0x33
 8006856:	2154      	movs	r1, #84	@ 0x54
 8006858:	4618      	mov	r0, r3
 800685a:	f000 fe99 	bl	8007590 <CODEC_IO_Write>
 800685e:	4603      	mov	r3, r0
 8006860:	461a      	mov	r2, r3
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	4413      	add	r3, r2
 8006866:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8006868:	f240 1001 	movw	r0, #257	@ 0x101
 800686c:	f7fc fe2c 	bl	80034c8 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8006870:	89fb      	ldrh	r3, [r7, #14]
 8006872:	b2db      	uxtb	r3, r3
 8006874:	22ee      	movs	r2, #238	@ 0xee
 8006876:	2160      	movs	r1, #96	@ 0x60
 8006878:	4618      	mov	r0, r3
 800687a:	f000 fe89 	bl	8007590 <CODEC_IO_Write>
 800687e:	4603      	mov	r3, r0
 8006880:	461a      	mov	r2, r3
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	4413      	add	r3, r2
 8006886:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8006888:	89fb      	ldrh	r3, [r7, #14]
 800688a:	b2db      	uxtb	r3, r3
 800688c:	22c0      	movs	r2, #192	@ 0xc0
 800688e:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fe7c 	bl	8007590 <CODEC_IO_Write>
 8006898:	4603      	mov	r3, r0
 800689a:	461a      	mov	r2, r3
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	4413      	add	r3, r2
 80068a0:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 80068a2:	89fb      	ldrh	r3, [r7, #14]
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	22c0      	movs	r2, #192	@ 0xc0
 80068a8:	f240 6111 	movw	r1, #1553	@ 0x611
 80068ac:	4618      	mov	r0, r3
 80068ae:	f000 fe6f 	bl	8007590 <CODEC_IO_Write>
 80068b2:	4603      	mov	r3, r0
 80068b4:	461a      	mov	r2, r3
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	4413      	add	r3, r2
 80068ba:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80068bc:	89fb      	ldrh	r3, [r7, #14]
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2210      	movs	r2, #16
 80068c2:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fe62 	bl	8007590 <CODEC_IO_Write>
 80068cc:	4603      	mov	r3, r0
 80068ce:	461a      	mov	r2, r3
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	4413      	add	r3, r2
 80068d4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 80068d6:	89fb      	ldrh	r3, [r7, #14]
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	22c0      	movs	r2, #192	@ 0xc0
 80068dc:	f240 6112 	movw	r1, #1554	@ 0x612
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 fe55 	bl	8007590 <CODEC_IO_Write>
 80068e6:	4603      	mov	r3, r0
 80068e8:	461a      	mov	r2, r3
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	4413      	add	r3, r2
 80068ee:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 80068f0:	89fb      	ldrh	r3, [r7, #14]
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	22c0      	movs	r2, #192	@ 0xc0
 80068f6:	f240 6113 	movw	r1, #1555	@ 0x613
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 fe48 	bl	8007590 <CODEC_IO_Write>
 8006900:	4603      	mov	r3, r0
 8006902:	461a      	mov	r2, r3
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	4413      	add	r3, r2
 8006908:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800690a:	89fb      	ldrh	r3, [r7, #14]
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2210      	movs	r2, #16
 8006910:	f240 4122 	movw	r1, #1058	@ 0x422
 8006914:	4618      	mov	r0, r3
 8006916:	f000 fe3b 	bl	8007590 <CODEC_IO_Write>
 800691a:	4603      	mov	r3, r0
 800691c:	461a      	mov	r2, r3
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	4413      	add	r3, r2
 8006922:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8006924:	7afa      	ldrb	r2, [r7, #11]
 8006926:	89fb      	ldrh	r3, [r7, #14]
 8006928:	4611      	mov	r1, r2
 800692a:	4618      	mov	r0, r3
 800692c:	f000 f984 	bl	8006c38 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8006930:	8afb      	ldrh	r3, [r7, #22]
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 80a6 	beq.w	8006a84 <wm8994_Init+0xd9c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8006938:	8afb      	ldrh	r3, [r7, #22]
 800693a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800693e:	d003      	beq.n	8006948 <wm8994_Init+0xc60>
 8006940:	8afb      	ldrh	r3, [r7, #22]
 8006942:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006946:	d12b      	bne.n	80069a0 <wm8994_Init+0xcb8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8006948:	8b7b      	ldrh	r3, [r7, #26]
 800694a:	f043 0313 	orr.w	r3, r3, #19
 800694e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8006950:	89fb      	ldrh	r3, [r7, #14]
 8006952:	b2db      	uxtb	r3, r3
 8006954:	8b7a      	ldrh	r2, [r7, #26]
 8006956:	2101      	movs	r1, #1
 8006958:	4618      	mov	r0, r3
 800695a:	f000 fe19 	bl	8007590 <CODEC_IO_Write>
 800695e:	4603      	mov	r3, r0
 8006960:	461a      	mov	r2, r3
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	4413      	add	r3, r2
 8006966:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8006968:	89fb      	ldrh	r3, [r7, #14]
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2202      	movs	r2, #2
 800696e:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8006972:	4618      	mov	r0, r3
 8006974:	f000 fe0c 	bl	8007590 <CODEC_IO_Write>
 8006978:	4603      	mov	r3, r0
 800697a:	461a      	mov	r2, r3
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	4413      	add	r3, r2
 8006980:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8006982:	89fb      	ldrh	r3, [r7, #14]
 8006984:	b2db      	uxtb	r3, r3
 8006986:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800698a:	f240 4111 	movw	r1, #1041	@ 0x411
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fdfe 	bl	8007590 <CODEC_IO_Write>
 8006994:	4603      	mov	r3, r0
 8006996:	461a      	mov	r2, r3
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	4413      	add	r3, r2
 800699c:	61fb      	str	r3, [r7, #28]
 800699e:	e06b      	b.n	8006a78 <wm8994_Init+0xd90>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80069a0:	8afb      	ldrh	r3, [r7, #22]
 80069a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069a6:	d139      	bne.n	8006a1c <wm8994_Init+0xd34>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80069a8:	8b7b      	ldrh	r3, [r7, #26]
 80069aa:	f043 0313 	orr.w	r3, r3, #19
 80069ae:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80069b0:	89fb      	ldrh	r3, [r7, #14]
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	8b7a      	ldrh	r2, [r7, #26]
 80069b6:	2101      	movs	r1, #1
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 fde9 	bl	8007590 <CODEC_IO_Write>
 80069be:	4603      	mov	r3, r0
 80069c0:	461a      	mov	r2, r3
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	4413      	add	r3, r2
 80069c6:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80069c8:	89fb      	ldrh	r3, [r7, #14]
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2202      	movs	r2, #2
 80069ce:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 fddc 	bl	8007590 <CODEC_IO_Write>
 80069d8:	4603      	mov	r3, r0
 80069da:	461a      	mov	r2, r3
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	4413      	add	r3, r2
 80069e0:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80069e2:	89fb      	ldrh	r3, [r7, #14]
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80069ea:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 fdce 	bl	8007590 <CODEC_IO_Write>
 80069f4:	4603      	mov	r3, r0
 80069f6:	461a      	mov	r2, r3
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	4413      	add	r3, r2
 80069fc:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 80069fe:	89fb      	ldrh	r3, [r7, #14]
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8006a06:	f240 4111 	movw	r1, #1041	@ 0x411
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 fdc0 	bl	8007590 <CODEC_IO_Write>
 8006a10:	4603      	mov	r3, r0
 8006a12:	461a      	mov	r2, r3
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	4413      	add	r3, r2
 8006a18:	61fb      	str	r3, [r7, #28]
 8006a1a:	e02d      	b.n	8006a78 <wm8994_Init+0xd90>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8006a1c:	8afb      	ldrh	r3, [r7, #22]
 8006a1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a22:	d003      	beq.n	8006a2c <wm8994_Init+0xd44>
 8006a24:	8afb      	ldrh	r3, [r7, #22]
 8006a26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a2a:	d125      	bne.n	8006a78 <wm8994_Init+0xd90>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x008B);
 8006a2c:	89fb      	ldrh	r3, [r7, #14]
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	228b      	movs	r2, #139	@ 0x8b
 8006a32:	2118      	movs	r1, #24
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 fdab 	bl	8007590 <CODEC_IO_Write>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	4413      	add	r3, r2
 8006a42:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x008B);
 8006a44:	89fb      	ldrh	r3, [r7, #14]
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	228b      	movs	r2, #139	@ 0x8b
 8006a4a:	211a      	movs	r1, #26
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 fd9f 	bl	8007590 <CODEC_IO_Write>
 8006a52:	4603      	mov	r3, r0
 8006a54:	461a      	mov	r2, r3
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	4413      	add	r3, r2
 8006a5a:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8006a5c:	89fb      	ldrh	r3, [r7, #14]
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8006a64:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 fd91 	bl	8007590 <CODEC_IO_Write>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	461a      	mov	r2, r3
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	4413      	add	r3, r2
 8006a76:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8006a78:	7afa      	ldrb	r2, [r7, #11]
 8006a7a:	89fb      	ldrh	r3, [r7, #14]
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 f8da 	bl	8006c38 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8006a84:	69fb      	ldr	r3, [r7, #28]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3720      	adds	r7, #32
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop

08006a90 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8006a94:	f7fc fcba 	bl	800340c <AUDIO_IO_DeInit>
}
 8006a98:	bf00      	nop
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8006aa6:	f7fc fca7 	bl	80033f8 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8006aaa:	88fb      	ldrh	r3, [r7, #6]
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2100      	movs	r1, #0
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fc fcdd 	bl	8003470 <AUDIO_IO_Read>
 8006ab6:	4603      	mov	r3, r0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	6039      	str	r1, [r7, #0]
 8006aca:	80fb      	strh	r3, [r7, #6]
 8006acc:	4613      	mov	r3, r2
 8006ace:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8006ad4:	88fb      	ldrh	r3, [r7, #6]
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 faf3 	bl	80070c4 <wm8994_SetMute>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	4603      	mov	r3, r0
 8006af8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8006afe:	88fb      	ldrh	r3, [r7, #6]
 8006b00:	2101      	movs	r1, #1
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 fade 	bl	80070c4 <wm8994_SetMute>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8006b10:	88fb      	ldrh	r3, [r7, #6]
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2201      	movs	r2, #1
 8006b16:	2102      	movs	r1, #2
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 fd39 	bl	8007590 <CODEC_IO_Write>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	461a      	mov	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	4413      	add	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8006b28:	68fb      	ldr	r3, [r7, #12]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	4603      	mov	r3, r0
 8006b3a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8006b40:	88fb      	ldrh	r3, [r7, #6]
 8006b42:	2100      	movs	r1, #0
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 fabd 	bl	80070c4 <wm8994_SetMute>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	4413      	add	r3, r2
 8006b50:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8006b52:	68fb      	ldr	r3, [r7, #12]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	4603      	mov	r3, r0
 8006b64:	6039      	str	r1, [r7, #0]
 8006b66:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8006b6c:	4b31      	ldr	r3, [pc, #196]	@ (8006c34 <wm8994_Stop+0xd8>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d05a      	beq.n	8006c2a <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8006b74:	88fb      	ldrh	r3, [r7, #6]
 8006b76:	2101      	movs	r1, #1
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 faa3 	bl	80070c4 <wm8994_SetMute>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	4413      	add	r3, r2
 8006b84:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d04e      	beq.n	8006c2a <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8006b8c:	88fb      	ldrh	r3, [r7, #6]
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b94:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f000 fcf9 	bl	8007590 <CODEC_IO_Write>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8006ba8:	88fb      	ldrh	r3, [r7, #6]
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bb0:	f240 4122 	movw	r1, #1058	@ 0x422
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 fceb 	bl	8007590 <CODEC_IO_Write>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8006bc4:	88fb      	ldrh	r3, [r7, #6]
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2200      	movs	r2, #0
 8006bca:	212d      	movs	r1, #45	@ 0x2d
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f000 fcdf 	bl	8007590 <CODEC_IO_Write>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	4413      	add	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8006bdc:	88fb      	ldrh	r3, [r7, #6]
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2200      	movs	r2, #0
 8006be2:	212e      	movs	r1, #46	@ 0x2e
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 fcd3 	bl	8007590 <CODEC_IO_Write>
 8006bea:	4603      	mov	r3, r0
 8006bec:	461a      	mov	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8006bf4:	88fb      	ldrh	r3, [r7, #6]
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	2105      	movs	r1, #5
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 fcc7 	bl	8007590 <CODEC_IO_Write>
 8006c02:	4603      	mov	r3, r0
 8006c04:	461a      	mov	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4413      	add	r3, r2
 8006c0a:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8006c0c:	88fb      	ldrh	r3, [r7, #6]
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2200      	movs	r2, #0
 8006c12:	2100      	movs	r1, #0
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 fcbb 	bl	8007590 <CODEC_IO_Write>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4413      	add	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8006c24:	4b03      	ldr	r3, [pc, #12]	@ (8006c34 <wm8994_Stop+0xd8>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	200013ec 	.word	0x200013ec

08006c38 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	4603      	mov	r3, r0
 8006c40:	460a      	mov	r2, r1
 8006c42:	80fb      	strh	r3, [r7, #6]
 8006c44:	4613      	mov	r3, r2
 8006c46:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8006c4c:	797b      	ldrb	r3, [r7, #5]
 8006c4e:	2b64      	cmp	r3, #100	@ 0x64
 8006c50:	d80b      	bhi.n	8006c6a <wm8994_SetVolume+0x32>
 8006c52:	797a      	ldrb	r2, [r7, #5]
 8006c54:	4613      	mov	r3, r2
 8006c56:	019b      	lsls	r3, r3, #6
 8006c58:	1a9b      	subs	r3, r3, r2
 8006c5a:	4a86      	ldr	r2, [pc, #536]	@ (8006e74 <wm8994_SetVolume+0x23c>)
 8006c5c:	fb82 1203 	smull	r1, r2, r2, r3
 8006c60:	1152      	asrs	r2, r2, #5
 8006c62:	17db      	asrs	r3, r3, #31
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	e000      	b.n	8006c6c <wm8994_SetVolume+0x34>
 8006c6a:	2364      	movs	r3, #100	@ 0x64
 8006c6c:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8006c6e:	4b82      	ldr	r3, [pc, #520]	@ (8006e78 <wm8994_SetVolume+0x240>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 809b 	beq.w	8006dae <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8006c78:	7afb      	ldrb	r3, [r7, #11]
 8006c7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c7c:	d93d      	bls.n	8006cfa <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8006c7e:	88fb      	ldrh	r3, [r7, #6]
 8006c80:	2100      	movs	r1, #0
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 fa1e 	bl	80070c4 <wm8994_SetMute>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8006c90:	88fb      	ldrh	r3, [r7, #6]
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	f240 127f 	movw	r2, #383	@ 0x17f
 8006c98:	211c      	movs	r1, #28
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 fc78 	bl	8007590 <CODEC_IO_Write>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8006caa:	88fb      	ldrh	r3, [r7, #6]
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	f240 127f 	movw	r2, #383	@ 0x17f
 8006cb2:	211d      	movs	r1, #29
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 fc6b 	bl	8007590 <CODEC_IO_Write>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8006cc4:	88fb      	ldrh	r3, [r7, #6]
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	f240 127f 	movw	r2, #383	@ 0x17f
 8006ccc:	2126      	movs	r1, #38	@ 0x26
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 fc5e 	bl	8007590 <CODEC_IO_Write>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4413      	add	r3, r2
 8006cdc:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8006cde:	88fb      	ldrh	r3, [r7, #6]
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	f240 127f 	movw	r2, #383	@ 0x17f
 8006ce6:	2127      	movs	r1, #39	@ 0x27
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 fc51 	bl	8007590 <CODEC_IO_Write>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	e059      	b.n	8006dae <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8006cfa:	797b      	ldrb	r3, [r7, #5]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d109      	bne.n	8006d14 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8006d00:	88fb      	ldrh	r3, [r7, #6]
 8006d02:	2101      	movs	r1, #1
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 f9dd 	bl	80070c4 <wm8994_SetMute>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4413      	add	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	e04c      	b.n	8006dae <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8006d14:	88fb      	ldrh	r3, [r7, #6]
 8006d16:	2100      	movs	r1, #0
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 f9d3 	bl	80070c4 <wm8994_SetMute>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4413      	add	r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8006d26:	88fb      	ldrh	r3, [r7, #6]
 8006d28:	b2d8      	uxtb	r0, r3
 8006d2a:	7afb      	ldrb	r3, [r7, #11]
 8006d2c:	b21b      	sxth	r3, r3
 8006d2e:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8006d32:	b21b      	sxth	r3, r3
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	461a      	mov	r2, r3
 8006d38:	211c      	movs	r1, #28
 8006d3a:	f000 fc29 	bl	8007590 <CODEC_IO_Write>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	461a      	mov	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	4413      	add	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8006d48:	88fb      	ldrh	r3, [r7, #6]
 8006d4a:	b2d8      	uxtb	r0, r3
 8006d4c:	7afb      	ldrb	r3, [r7, #11]
 8006d4e:	b21b      	sxth	r3, r3
 8006d50:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8006d54:	b21b      	sxth	r3, r3
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	461a      	mov	r2, r3
 8006d5a:	211d      	movs	r1, #29
 8006d5c:	f000 fc18 	bl	8007590 <CODEC_IO_Write>
 8006d60:	4603      	mov	r3, r0
 8006d62:	461a      	mov	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	4413      	add	r3, r2
 8006d68:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8006d6a:	88fb      	ldrh	r3, [r7, #6]
 8006d6c:	b2d8      	uxtb	r0, r3
 8006d6e:	7afb      	ldrb	r3, [r7, #11]
 8006d70:	b21b      	sxth	r3, r3
 8006d72:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8006d76:	b21b      	sxth	r3, r3
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	2126      	movs	r1, #38	@ 0x26
 8006d7e:	f000 fc07 	bl	8007590 <CODEC_IO_Write>
 8006d82:	4603      	mov	r3, r0
 8006d84:	461a      	mov	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	4413      	add	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8006d8c:	88fb      	ldrh	r3, [r7, #6]
 8006d8e:	b2d8      	uxtb	r0, r3
 8006d90:	7afb      	ldrb	r3, [r7, #11]
 8006d92:	b21b      	sxth	r3, r3
 8006d94:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8006d98:	b21b      	sxth	r3, r3
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	2127      	movs	r1, #39	@ 0x27
 8006da0:	f000 fbf6 	bl	8007590 <CODEC_IO_Write>
 8006da4:	4603      	mov	r3, r0
 8006da6:	461a      	mov	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	4413      	add	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8006dae:	4b33      	ldr	r3, [pc, #204]	@ (8006e7c <wm8994_SetVolume+0x244>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d059      	beq.n	8006e6a <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8006db6:	797b      	ldrb	r3, [r7, #5]
 8006db8:	2b63      	cmp	r3, #99	@ 0x63
 8006dba:	d80c      	bhi.n	8006dd6 <wm8994_SetVolume+0x19e>
 8006dbc:	797a      	ldrb	r2, [r7, #5]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	011b      	lsls	r3, r3, #4
 8006dc2:	1a9b      	subs	r3, r3, r2
 8006dc4:	011b      	lsls	r3, r3, #4
 8006dc6:	4a2b      	ldr	r2, [pc, #172]	@ (8006e74 <wm8994_SetVolume+0x23c>)
 8006dc8:	fb82 1203 	smull	r1, r2, r2, r3
 8006dcc:	1152      	asrs	r2, r2, #5
 8006dce:	17db      	asrs	r3, r3, #31
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	e000      	b.n	8006dd8 <wm8994_SetVolume+0x1a0>
 8006dd6:	23ef      	movs	r3, #239	@ 0xef
 8006dd8:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8006dda:	88fb      	ldrh	r3, [r7, #6]
 8006ddc:	b2d8      	uxtb	r0, r3
 8006dde:	7afb      	ldrb	r3, [r7, #11]
 8006de0:	b21b      	sxth	r3, r3
 8006de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006de6:	b21b      	sxth	r3, r3
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	461a      	mov	r2, r3
 8006dec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006df0:	f000 fbce 	bl	8007590 <CODEC_IO_Write>
 8006df4:	4603      	mov	r3, r0
 8006df6:	461a      	mov	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8006dfe:	88fb      	ldrh	r3, [r7, #6]
 8006e00:	b2d8      	uxtb	r0, r3
 8006e02:	7afb      	ldrb	r3, [r7, #11]
 8006e04:	b21b      	sxth	r3, r3
 8006e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e0a:	b21b      	sxth	r3, r3
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f240 4101 	movw	r1, #1025	@ 0x401
 8006e14:	f000 fbbc 	bl	8007590 <CODEC_IO_Write>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8006e22:	88fb      	ldrh	r3, [r7, #6]
 8006e24:	b2d8      	uxtb	r0, r3
 8006e26:	7afb      	ldrb	r3, [r7, #11]
 8006e28:	b21b      	sxth	r3, r3
 8006e2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e2e:	b21b      	sxth	r3, r3
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	461a      	mov	r2, r3
 8006e34:	f240 4104 	movw	r1, #1028	@ 0x404
 8006e38:	f000 fbaa 	bl	8007590 <CODEC_IO_Write>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	461a      	mov	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8006e46:	88fb      	ldrh	r3, [r7, #6]
 8006e48:	b2d8      	uxtb	r0, r3
 8006e4a:	7afb      	ldrb	r3, [r7, #11]
 8006e4c:	b21b      	sxth	r3, r3
 8006e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e52:	b21b      	sxth	r3, r3
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	461a      	mov	r2, r3
 8006e58:	f240 4105 	movw	r1, #1029	@ 0x405
 8006e5c:	f000 fb98 	bl	8007590 <CODEC_IO_Write>
 8006e60:	4603      	mov	r3, r0
 8006e62:	461a      	mov	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	51eb851f 	.word	0x51eb851f
 8006e78:	200013ec 	.word	0x200013ec
 8006e7c:	200013f0 	.word	0x200013f0

08006e80 <wm8994_SetVolumeOut>:
uint32_t wm8994_SetVolumeOut(uint16_t DeviceAddr, uint8_t Volume) {
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	4603      	mov	r3, r0
 8006e88:	460a      	mov	r2, r1
 8006e8a:	80fb      	strh	r3, [r7, #6]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 8006e90:	2300      	movs	r3, #0
 8006e92:	60fb      	str	r3, [r7, #12]
	uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8006e94:	797b      	ldrb	r3, [r7, #5]
 8006e96:	2b64      	cmp	r3, #100	@ 0x64
 8006e98:	d80b      	bhi.n	8006eb2 <wm8994_SetVolumeOut+0x32>
 8006e9a:	797a      	ldrb	r2, [r7, #5]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	019b      	lsls	r3, r3, #6
 8006ea0:	1a9b      	subs	r3, r3, r2
 8006ea2:	4a57      	ldr	r2, [pc, #348]	@ (8007000 <wm8994_SetVolumeOut+0x180>)
 8006ea4:	fb82 1203 	smull	r1, r2, r2, r3
 8006ea8:	1152      	asrs	r2, r2, #5
 8006eaa:	17db      	asrs	r3, r3, #31
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	e000      	b.n	8006eb4 <wm8994_SetVolumeOut+0x34>
 8006eb2:	2364      	movs	r3, #100	@ 0x64
 8006eb4:	72fb      	strb	r3, [r7, #11]

	/* Output volume */
	if (outputEnabled != 0) {
 8006eb6:	4b53      	ldr	r3, [pc, #332]	@ (8007004 <wm8994_SetVolumeOut+0x184>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f000 809b 	beq.w	8006ff6 <wm8994_SetVolumeOut+0x176>
		if (convertedvol > 0x3E) {
 8006ec0:	7afb      	ldrb	r3, [r7, #11]
 8006ec2:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ec4:	d93d      	bls.n	8006f42 <wm8994_SetVolumeOut+0xc2>
			/* Unmute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8006ec6:	88fb      	ldrh	r3, [r7, #6]
 8006ec8:	2100      	movs	r1, #0
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 f8fa 	bl	80070c4 <wm8994_SetMute>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]

			/* Left Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8006ed8:	88fb      	ldrh	r3, [r7, #6]
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	f240 127f 	movw	r2, #383	@ 0x17f
 8006ee0:	211c      	movs	r1, #28
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f000 fb54 	bl	8007590 <CODEC_IO_Write>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	461a      	mov	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4413      	add	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]

			/* Right Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8006ef2:	88fb      	ldrh	r3, [r7, #6]
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	f240 127f 	movw	r2, #383	@ 0x17f
 8006efa:	211d      	movs	r1, #29
 8006efc:	4618      	mov	r0, r3
 8006efe:	f000 fb47 	bl	8007590 <CODEC_IO_Write>
 8006f02:	4603      	mov	r3, r0
 8006f04:	461a      	mov	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	4413      	add	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]

			/* Left Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8006f0c:	88fb      	ldrh	r3, [r7, #6]
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	f240 127f 	movw	r2, #383	@ 0x17f
 8006f14:	2126      	movs	r1, #38	@ 0x26
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 fb3a 	bl	8007590 <CODEC_IO_Write>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	461a      	mov	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4413      	add	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]

			/* Right Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8006f26:	88fb      	ldrh	r3, [r7, #6]
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	f240 127f 	movw	r2, #383	@ 0x17f
 8006f2e:	2127      	movs	r1, #39	@ 0x27
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 fb2d 	bl	8007590 <CODEC_IO_Write>
 8006f36:	4603      	mov	r3, r0
 8006f38:	461a      	mov	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	e059      	b.n	8006ff6 <wm8994_SetVolumeOut+0x176>
		} else if (Volume == 0) {
 8006f42:	797b      	ldrb	r3, [r7, #5]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d109      	bne.n	8006f5c <wm8994_SetVolumeOut+0xdc>
			/* Mute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8006f48:	88fb      	ldrh	r3, [r7, #6]
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 f8b9 	bl	80070c4 <wm8994_SetMute>
 8006f52:	4602      	mov	r2, r0
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4413      	add	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]
 8006f5a:	e04c      	b.n	8006ff6 <wm8994_SetVolumeOut+0x176>
		} else {
			/* Unmute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8006f5c:	88fb      	ldrh	r3, [r7, #6]
 8006f5e:	2100      	movs	r1, #0
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 f8af 	bl	80070c4 <wm8994_SetMute>
 8006f66:	4602      	mov	r2, r0
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	60fb      	str	r3, [r7, #12]

			/* Left Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8006f6e:	88fb      	ldrh	r3, [r7, #6]
 8006f70:	b2d8      	uxtb	r0, r3
 8006f72:	7afb      	ldrb	r3, [r7, #11]
 8006f74:	b21b      	sxth	r3, r3
 8006f76:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8006f7a:	b21b      	sxth	r3, r3
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	461a      	mov	r2, r3
 8006f80:	211c      	movs	r1, #28
 8006f82:	f000 fb05 	bl	8007590 <CODEC_IO_Write>
 8006f86:	4603      	mov	r3, r0
 8006f88:	461a      	mov	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]

			/* Right Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8006f90:	88fb      	ldrh	r3, [r7, #6]
 8006f92:	b2d8      	uxtb	r0, r3
 8006f94:	7afb      	ldrb	r3, [r7, #11]
 8006f96:	b21b      	sxth	r3, r3
 8006f98:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8006f9c:	b21b      	sxth	r3, r3
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	211d      	movs	r1, #29
 8006fa4:	f000 faf4 	bl	8007590 <CODEC_IO_Write>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	461a      	mov	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4413      	add	r3, r2
 8006fb0:	60fb      	str	r3, [r7, #12]

			/* Left Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8006fb2:	88fb      	ldrh	r3, [r7, #6]
 8006fb4:	b2d8      	uxtb	r0, r3
 8006fb6:	7afb      	ldrb	r3, [r7, #11]
 8006fb8:	b21b      	sxth	r3, r3
 8006fba:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8006fbe:	b21b      	sxth	r3, r3
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	2126      	movs	r1, #38	@ 0x26
 8006fc6:	f000 fae3 	bl	8007590 <CODEC_IO_Write>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	461a      	mov	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]

			/* Right Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8006fd4:	88fb      	ldrh	r3, [r7, #6]
 8006fd6:	b2d8      	uxtb	r0, r3
 8006fd8:	7afb      	ldrb	r3, [r7, #11]
 8006fda:	b21b      	sxth	r3, r3
 8006fdc:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8006fe0:	b21b      	sxth	r3, r3
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	2127      	movs	r1, #39	@ 0x27
 8006fe8:	f000 fad2 	bl	8007590 <CODEC_IO_Write>
 8006fec:	4603      	mov	r3, r0
 8006fee:	461a      	mov	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]
		}
	}
	return counter;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	51eb851f 	.word	0x51eb851f
 8007004:	200013ec 	.word	0x200013ec

08007008 <wm8994_SetVolumeIn>:
uint32_t wm8994_SetVolumeIn(uint16_t DeviceAddr, uint8_t Volume) {
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	4603      	mov	r3, r0
 8007010:	460a      	mov	r2, r1
 8007012:	80fb      	strh	r3, [r7, #6]
 8007014:	4613      	mov	r3, r2
 8007016:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 8007018:	2300      	movs	r3, #0
 800701a:	60fb      	str	r3, [r7, #12]
	if (inputEnabled != 0) {
 800701c:	4b28      	ldr	r3, [pc, #160]	@ (80070c0 <wm8994_SetVolumeIn+0xb8>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d047      	beq.n	80070b4 <wm8994_SetVolumeIn+0xac>
		// B1 = 0dB
		/* Left AIF1 ADC1 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x400, Volume | 0x100);
 8007024:	88fb      	ldrh	r3, [r7, #6]
 8007026:	b2d8      	uxtb	r0, r3
 8007028:	797b      	ldrb	r3, [r7, #5]
 800702a:	b21b      	sxth	r3, r3
 800702c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007030:	b21b      	sxth	r3, r3
 8007032:	b29b      	uxth	r3, r3
 8007034:	461a      	mov	r2, r3
 8007036:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800703a:	f000 faa9 	bl	8007590 <CODEC_IO_Write>
 800703e:	4603      	mov	r3, r0
 8007040:	461a      	mov	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	4413      	add	r3, r2
 8007046:	60fb      	str	r3, [r7, #12]

		/* Right AIF1 ADC1 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x401, Volume | 0x100);
 8007048:	88fb      	ldrh	r3, [r7, #6]
 800704a:	b2d8      	uxtb	r0, r3
 800704c:	797b      	ldrb	r3, [r7, #5]
 800704e:	b21b      	sxth	r3, r3
 8007050:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007054:	b21b      	sxth	r3, r3
 8007056:	b29b      	uxth	r3, r3
 8007058:	461a      	mov	r2, r3
 800705a:	f240 4101 	movw	r1, #1025	@ 0x401
 800705e:	f000 fa97 	bl	8007590 <CODEC_IO_Write>
 8007062:	4603      	mov	r3, r0
 8007064:	461a      	mov	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	4413      	add	r3, r2
 800706a:	60fb      	str	r3, [r7, #12]

		/* Left AIF1 ADC2 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x404, Volume | 0x100);
 800706c:	88fb      	ldrh	r3, [r7, #6]
 800706e:	b2d8      	uxtb	r0, r3
 8007070:	797b      	ldrb	r3, [r7, #5]
 8007072:	b21b      	sxth	r3, r3
 8007074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007078:	b21b      	sxth	r3, r3
 800707a:	b29b      	uxth	r3, r3
 800707c:	461a      	mov	r2, r3
 800707e:	f240 4104 	movw	r1, #1028	@ 0x404
 8007082:	f000 fa85 	bl	8007590 <CODEC_IO_Write>
 8007086:	4603      	mov	r3, r0
 8007088:	461a      	mov	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	4413      	add	r3, r2
 800708e:	60fb      	str	r3, [r7, #12]

		/* Right AIF1 ADC2 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x405, Volume | 0x100);
 8007090:	88fb      	ldrh	r3, [r7, #6]
 8007092:	b2d8      	uxtb	r0, r3
 8007094:	797b      	ldrb	r3, [r7, #5]
 8007096:	b21b      	sxth	r3, r3
 8007098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800709c:	b21b      	sxth	r3, r3
 800709e:	b29b      	uxth	r3, r3
 80070a0:	461a      	mov	r2, r3
 80070a2:	f240 4105 	movw	r1, #1029	@ 0x405
 80070a6:	f000 fa73 	bl	8007590 <CODEC_IO_Write>
 80070aa:	4603      	mov	r3, r0
 80070ac:	461a      	mov	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	4413      	add	r3, r2
 80070b2:	60fb      	str	r3, [r7, #12]
	}
	return counter;
 80070b4:	68fb      	ldr	r3, [r7, #12]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	200013f0 	.word	0x200013f0

080070c4 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	4603      	mov	r3, r0
 80070cc:	6039      	str	r1, [r7, #0]
 80070ce:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 80070d4:	4b21      	ldr	r3, [pc, #132]	@ (800715c <wm8994_SetMute+0x98>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d039      	beq.n	8007150 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d11c      	bne.n	800711c <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80070e2:	88fb      	ldrh	r3, [r7, #6]
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070ea:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80070ee:	4618      	mov	r0, r3
 80070f0:	f000 fa4e 	bl	8007590 <CODEC_IO_Write>
 80070f4:	4603      	mov	r3, r0
 80070f6:	461a      	mov	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	4413      	add	r3, r2
 80070fc:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80070fe:	88fb      	ldrh	r3, [r7, #6]
 8007100:	b2db      	uxtb	r3, r3
 8007102:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007106:	f240 4122 	movw	r1, #1058	@ 0x422
 800710a:	4618      	mov	r0, r3
 800710c:	f000 fa40 	bl	8007590 <CODEC_IO_Write>
 8007110:	4603      	mov	r3, r0
 8007112:	461a      	mov	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4413      	add	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	e019      	b.n	8007150 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 800711c:	88fb      	ldrh	r3, [r7, #6]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2210      	movs	r2, #16
 8007122:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8007126:	4618      	mov	r0, r3
 8007128:	f000 fa32 	bl	8007590 <CODEC_IO_Write>
 800712c:	4603      	mov	r3, r0
 800712e:	461a      	mov	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4413      	add	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8007136:	88fb      	ldrh	r3, [r7, #6]
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2210      	movs	r2, #16
 800713c:	f240 4122 	movw	r1, #1058	@ 0x422
 8007140:	4618      	mov	r0, r3
 8007142:	f000 fa25 	bl	8007590 <CODEC_IO_Write>
 8007146:	4603      	mov	r3, r0
 8007148:	461a      	mov	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	4413      	add	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8007150:	68fb      	ldr	r3, [r7, #12]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	200013ec 	.word	0x200013ec

08007160 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	4603      	mov	r3, r0
 8007168:	460a      	mov	r2, r1
 800716a:	80fb      	strh	r3, [r7, #6]
 800716c:	4613      	mov	r3, r2
 800716e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8007170:	2300      	movs	r3, #0
 8007172:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8007174:	797b      	ldrb	r3, [r7, #5]
 8007176:	2b03      	cmp	r3, #3
 8007178:	f000 808c 	beq.w	8007294 <wm8994_SetOutputMode+0x134>
 800717c:	2b03      	cmp	r3, #3
 800717e:	f300 80cb 	bgt.w	8007318 <wm8994_SetOutputMode+0x1b8>
 8007182:	2b01      	cmp	r3, #1
 8007184:	d002      	beq.n	800718c <wm8994_SetOutputMode+0x2c>
 8007186:	2b02      	cmp	r3, #2
 8007188:	d042      	beq.n	8007210 <wm8994_SetOutputMode+0xb0>
 800718a:	e0c5      	b.n	8007318 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 800718c:	88fb      	ldrh	r3, [r7, #6]
 800718e:	b2db      	uxtb	r3, r3
 8007190:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8007194:	2105      	movs	r1, #5
 8007196:	4618      	mov	r0, r3
 8007198:	f000 f9fa 	bl	8007590 <CODEC_IO_Write>
 800719c:	4603      	mov	r3, r0
 800719e:	461a      	mov	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4413      	add	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80071a6:	88fb      	ldrh	r3, [r7, #6]
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2200      	movs	r2, #0
 80071ac:	f240 6101 	movw	r1, #1537	@ 0x601
 80071b0:	4618      	mov	r0, r3
 80071b2:	f000 f9ed 	bl	8007590 <CODEC_IO_Write>
 80071b6:	4603      	mov	r3, r0
 80071b8:	461a      	mov	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	4413      	add	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80071c0:	88fb      	ldrh	r3, [r7, #6]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2200      	movs	r2, #0
 80071c6:	f240 6102 	movw	r1, #1538	@ 0x602
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 f9e0 	bl	8007590 <CODEC_IO_Write>
 80071d0:	4603      	mov	r3, r0
 80071d2:	461a      	mov	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4413      	add	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80071da:	88fb      	ldrh	r3, [r7, #6]
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2202      	movs	r2, #2
 80071e0:	f240 6104 	movw	r1, #1540	@ 0x604
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 f9d3 	bl	8007590 <CODEC_IO_Write>
 80071ea:	4603      	mov	r3, r0
 80071ec:	461a      	mov	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	4413      	add	r3, r2
 80071f2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80071f4:	88fb      	ldrh	r3, [r7, #6]
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2202      	movs	r2, #2
 80071fa:	f240 6105 	movw	r1, #1541	@ 0x605
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 f9c6 	bl	8007590 <CODEC_IO_Write>
 8007204:	4603      	mov	r3, r0
 8007206:	461a      	mov	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4413      	add	r3, r2
 800720c:	60fb      	str	r3, [r7, #12]
    break;
 800720e:	e0c5      	b.n	800739c <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8007210:	88fb      	ldrh	r3, [r7, #6]
 8007212:	b2db      	uxtb	r3, r3
 8007214:	f240 3203 	movw	r2, #771	@ 0x303
 8007218:	2105      	movs	r1, #5
 800721a:	4618      	mov	r0, r3
 800721c:	f000 f9b8 	bl	8007590 <CODEC_IO_Write>
 8007220:	4603      	mov	r3, r0
 8007222:	461a      	mov	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4413      	add	r3, r2
 8007228:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800722a:	88fb      	ldrh	r3, [r7, #6]
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2201      	movs	r2, #1
 8007230:	f240 6101 	movw	r1, #1537	@ 0x601
 8007234:	4618      	mov	r0, r3
 8007236:	f000 f9ab 	bl	8007590 <CODEC_IO_Write>
 800723a:	4603      	mov	r3, r0
 800723c:	461a      	mov	r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	4413      	add	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8007244:	88fb      	ldrh	r3, [r7, #6]
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2201      	movs	r2, #1
 800724a:	f240 6102 	movw	r1, #1538	@ 0x602
 800724e:	4618      	mov	r0, r3
 8007250:	f000 f99e 	bl	8007590 <CODEC_IO_Write>
 8007254:	4603      	mov	r3, r0
 8007256:	461a      	mov	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	4413      	add	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800725e:	88fb      	ldrh	r3, [r7, #6]
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2200      	movs	r2, #0
 8007264:	f240 6104 	movw	r1, #1540	@ 0x604
 8007268:	4618      	mov	r0, r3
 800726a:	f000 f991 	bl	8007590 <CODEC_IO_Write>
 800726e:	4603      	mov	r3, r0
 8007270:	461a      	mov	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4413      	add	r3, r2
 8007276:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8007278:	88fb      	ldrh	r3, [r7, #6]
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2200      	movs	r2, #0
 800727e:	f240 6105 	movw	r1, #1541	@ 0x605
 8007282:	4618      	mov	r0, r3
 8007284:	f000 f984 	bl	8007590 <CODEC_IO_Write>
 8007288:	4603      	mov	r3, r0
 800728a:	461a      	mov	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	4413      	add	r3, r2
 8007290:	60fb      	str	r3, [r7, #12]
    break;
 8007292:	e083      	b.n	800739c <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8007294:	88fb      	ldrh	r3, [r7, #6]
 8007296:	b2db      	uxtb	r3, r3
 8007298:	f640 720f 	movw	r2, #3855	@ 0xf0f
 800729c:	2105      	movs	r1, #5
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 f976 	bl	8007590 <CODEC_IO_Write>
 80072a4:	4603      	mov	r3, r0
 80072a6:	461a      	mov	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4413      	add	r3, r2
 80072ac:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80072ae:	88fb      	ldrh	r3, [r7, #6]
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2201      	movs	r2, #1
 80072b4:	f240 6101 	movw	r1, #1537	@ 0x601
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 f969 	bl	8007590 <CODEC_IO_Write>
 80072be:	4603      	mov	r3, r0
 80072c0:	461a      	mov	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4413      	add	r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80072c8:	88fb      	ldrh	r3, [r7, #6]
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2201      	movs	r2, #1
 80072ce:	f240 6102 	movw	r1, #1538	@ 0x602
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 f95c 	bl	8007590 <CODEC_IO_Write>
 80072d8:	4603      	mov	r3, r0
 80072da:	461a      	mov	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4413      	add	r3, r2
 80072e0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80072e2:	88fb      	ldrh	r3, [r7, #6]
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2202      	movs	r2, #2
 80072e8:	f240 6104 	movw	r1, #1540	@ 0x604
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 f94f 	bl	8007590 <CODEC_IO_Write>
 80072f2:	4603      	mov	r3, r0
 80072f4:	461a      	mov	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	4413      	add	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80072fc:	88fb      	ldrh	r3, [r7, #6]
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2202      	movs	r2, #2
 8007302:	f240 6105 	movw	r1, #1541	@ 0x605
 8007306:	4618      	mov	r0, r3
 8007308:	f000 f942 	bl	8007590 <CODEC_IO_Write>
 800730c:	4603      	mov	r3, r0
 800730e:	461a      	mov	r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	4413      	add	r3, r2
 8007314:	60fb      	str	r3, [r7, #12]
    break;
 8007316:	e041      	b.n	800739c <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8007318:	88fb      	ldrh	r3, [r7, #6]
 800731a:	b2db      	uxtb	r3, r3
 800731c:	f240 3203 	movw	r2, #771	@ 0x303
 8007320:	2105      	movs	r1, #5
 8007322:	4618      	mov	r0, r3
 8007324:	f000 f934 	bl	8007590 <CODEC_IO_Write>
 8007328:	4603      	mov	r3, r0
 800732a:	461a      	mov	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4413      	add	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8007332:	88fb      	ldrh	r3, [r7, #6]
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2201      	movs	r2, #1
 8007338:	f240 6101 	movw	r1, #1537	@ 0x601
 800733c:	4618      	mov	r0, r3
 800733e:	f000 f927 	bl	8007590 <CODEC_IO_Write>
 8007342:	4603      	mov	r3, r0
 8007344:	461a      	mov	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	4413      	add	r3, r2
 800734a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800734c:	88fb      	ldrh	r3, [r7, #6]
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2201      	movs	r2, #1
 8007352:	f240 6102 	movw	r1, #1538	@ 0x602
 8007356:	4618      	mov	r0, r3
 8007358:	f000 f91a 	bl	8007590 <CODEC_IO_Write>
 800735c:	4603      	mov	r3, r0
 800735e:	461a      	mov	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4413      	add	r3, r2
 8007364:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8007366:	88fb      	ldrh	r3, [r7, #6]
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2200      	movs	r2, #0
 800736c:	f240 6104 	movw	r1, #1540	@ 0x604
 8007370:	4618      	mov	r0, r3
 8007372:	f000 f90d 	bl	8007590 <CODEC_IO_Write>
 8007376:	4603      	mov	r3, r0
 8007378:	461a      	mov	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	4413      	add	r3, r2
 800737e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8007380:	88fb      	ldrh	r3, [r7, #6]
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2200      	movs	r2, #0
 8007386:	f240 6105 	movw	r1, #1541	@ 0x605
 800738a:	4618      	mov	r0, r3
 800738c:	f000 f900 	bl	8007590 <CODEC_IO_Write>
 8007390:	4603      	mov	r3, r0
 8007392:	461a      	mov	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4413      	add	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]
    break;    
 800739a:	bf00      	nop
  }  
  return counter;
 800739c:	68fb      	ldr	r3, [r7, #12]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
	...

080073a8 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	4603      	mov	r3, r0
 80073b0:	6039      	str	r1, [r7, #0]
 80073b2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80073b4:	2300      	movs	r3, #0
 80073b6:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	4a64      	ldr	r2, [pc, #400]	@ (800754c <wm8994_SetFrequency+0x1a4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d079      	beq.n	80074b4 <wm8994_SetFrequency+0x10c>
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	4a62      	ldr	r2, [pc, #392]	@ (800754c <wm8994_SetFrequency+0x1a4>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	f200 80ad 	bhi.w	8007524 <wm8994_SetFrequency+0x17c>
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d061      	beq.n	8007498 <wm8994_SetFrequency+0xf0>
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80073da:	4293      	cmp	r3, r2
 80073dc:	f200 80a2 	bhi.w	8007524 <wm8994_SetFrequency+0x17c>
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80073e6:	4293      	cmp	r3, r2
 80073e8:	f000 808e 	beq.w	8007508 <wm8994_SetFrequency+0x160>
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80073f2:	4293      	cmp	r3, r2
 80073f4:	f200 8096 	bhi.w	8007524 <wm8994_SetFrequency+0x17c>
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80073fe:	d03d      	beq.n	800747c <wm8994_SetFrequency+0xd4>
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8007406:	f200 808d 	bhi.w	8007524 <wm8994_SetFrequency+0x17c>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	f245 6222 	movw	r2, #22050	@ 0x5622
 8007410:	4293      	cmp	r3, r2
 8007412:	d06b      	beq.n	80074ec <wm8994_SetFrequency+0x144>
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	f245 6222 	movw	r2, #22050	@ 0x5622
 800741a:	4293      	cmp	r3, r2
 800741c:	f200 8082 	bhi.w	8007524 <wm8994_SetFrequency+0x17c>
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8007426:	d01b      	beq.n	8007460 <wm8994_SetFrequency+0xb8>
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800742e:	d879      	bhi.n	8007524 <wm8994_SetFrequency+0x17c>
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8007436:	d005      	beq.n	8007444 <wm8994_SetFrequency+0x9c>
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800743e:	4293      	cmp	r3, r2
 8007440:	d046      	beq.n	80074d0 <wm8994_SetFrequency+0x128>
 8007442:	e06f      	b.n	8007524 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8007444:	88fb      	ldrh	r3, [r7, #6]
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2203      	movs	r2, #3
 800744a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800744e:	4618      	mov	r0, r3
 8007450:	f000 f89e 	bl	8007590 <CODEC_IO_Write>
 8007454:	4603      	mov	r3, r0
 8007456:	461a      	mov	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	4413      	add	r3, r2
 800745c:	60fb      	str	r3, [r7, #12]
    break;
 800745e:	e06f      	b.n	8007540 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8007460:	88fb      	ldrh	r3, [r7, #6]
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2233      	movs	r2, #51	@ 0x33
 8007466:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800746a:	4618      	mov	r0, r3
 800746c:	f000 f890 	bl	8007590 <CODEC_IO_Write>
 8007470:	4603      	mov	r3, r0
 8007472:	461a      	mov	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4413      	add	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]
    break;
 800747a:	e061      	b.n	8007540 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800747c:	88fb      	ldrh	r3, [r7, #6]
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2263      	movs	r2, #99	@ 0x63
 8007482:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007486:	4618      	mov	r0, r3
 8007488:	f000 f882 	bl	8007590 <CODEC_IO_Write>
 800748c:	4603      	mov	r3, r0
 800748e:	461a      	mov	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4413      	add	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]
    break;
 8007496:	e053      	b.n	8007540 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8007498:	88fb      	ldrh	r3, [r7, #6]
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2283      	movs	r2, #131	@ 0x83
 800749e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 f874 	bl	8007590 <CODEC_IO_Write>
 80074a8:	4603      	mov	r3, r0
 80074aa:	461a      	mov	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4413      	add	r3, r2
 80074b0:	60fb      	str	r3, [r7, #12]
    break;
 80074b2:	e045      	b.n	8007540 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80074b4:	88fb      	ldrh	r3, [r7, #6]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	22a3      	movs	r2, #163	@ 0xa3
 80074ba:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 f866 	bl	8007590 <CODEC_IO_Write>
 80074c4:	4603      	mov	r3, r0
 80074c6:	461a      	mov	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4413      	add	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]
    break;
 80074ce:	e037      	b.n	8007540 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80074d0:	88fb      	ldrh	r3, [r7, #6]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2213      	movs	r2, #19
 80074d6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 f858 	bl	8007590 <CODEC_IO_Write>
 80074e0:	4603      	mov	r3, r0
 80074e2:	461a      	mov	r2, r3
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	4413      	add	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]
    break;
 80074ea:	e029      	b.n	8007540 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80074ec:	88fb      	ldrh	r3, [r7, #6]
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2243      	movs	r2, #67	@ 0x43
 80074f2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 f84a 	bl	8007590 <CODEC_IO_Write>
 80074fc:	4603      	mov	r3, r0
 80074fe:	461a      	mov	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	4413      	add	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]
    break;
 8007506:	e01b      	b.n	8007540 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8007508:	88fb      	ldrh	r3, [r7, #6]
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2273      	movs	r2, #115	@ 0x73
 800750e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007512:	4618      	mov	r0, r3
 8007514:	f000 f83c 	bl	8007590 <CODEC_IO_Write>
 8007518:	4603      	mov	r3, r0
 800751a:	461a      	mov	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	4413      	add	r3, r2
 8007520:	60fb      	str	r3, [r7, #12]
    break; 
 8007522:	e00d      	b.n	8007540 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8007524:	88fb      	ldrh	r3, [r7, #6]
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2283      	movs	r2, #131	@ 0x83
 800752a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800752e:	4618      	mov	r0, r3
 8007530:	f000 f82e 	bl	8007590 <CODEC_IO_Write>
 8007534:	4603      	mov	r3, r0
 8007536:	461a      	mov	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4413      	add	r3, r2
 800753c:	60fb      	str	r3, [r7, #12]
    break; 
 800753e:	bf00      	nop
  }
  return counter;
 8007540:	68fb      	ldr	r3, [r7, #12]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	00017700 	.word	0x00017700

08007550 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	4603      	mov	r3, r0
 8007558:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800755a:	2300      	movs	r3, #0
 800755c:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800755e:	88fb      	ldrh	r3, [r7, #6]
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2200      	movs	r2, #0
 8007564:	2100      	movs	r1, #0
 8007566:	4618      	mov	r0, r3
 8007568:	f000 f812 	bl	8007590 <CODEC_IO_Write>
 800756c:	4603      	mov	r3, r0
 800756e:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8007570:	4b05      	ldr	r3, [pc, #20]	@ (8007588 <wm8994_Reset+0x38>)
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8007576:	4b05      	ldr	r3, [pc, #20]	@ (800758c <wm8994_Reset+0x3c>)
 8007578:	2200      	movs	r2, #0
 800757a:	601a      	str	r2, [r3, #0]

  return counter;
 800757c:	68fb      	ldr	r3, [r7, #12]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	200013ec 	.word	0x200013ec
 800758c:	200013f0 	.word	0x200013f0

08007590 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	4603      	mov	r3, r0
 8007598:	71fb      	strb	r3, [r7, #7]
 800759a:	460b      	mov	r3, r1
 800759c:	80bb      	strh	r3, [r7, #4]
 800759e:	4613      	mov	r3, r2
 80075a0:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 80075a2:	2300      	movs	r3, #0
 80075a4:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80075a6:	887a      	ldrh	r2, [r7, #2]
 80075a8:	88b9      	ldrh	r1, [r7, #4]
 80075aa:	79fb      	ldrb	r3, [r7, #7]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fb ff35 	bl	800341c <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	b2db      	uxtb	r3, r3
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
	...

080075c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80075c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80075f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80075c4:	480d      	ldr	r0, [pc, #52]	@ (80075fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80075c6:	490e      	ldr	r1, [pc, #56]	@ (8007600 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80075c8:	4a0e      	ldr	r2, [pc, #56]	@ (8007604 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80075ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80075cc:	e002      	b.n	80075d4 <LoopCopyDataInit>

080075ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80075ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80075d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80075d2:	3304      	adds	r3, #4

080075d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80075d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80075d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80075d8:	d3f9      	bcc.n	80075ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80075da:	4a0b      	ldr	r2, [pc, #44]	@ (8007608 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80075dc:	4c0b      	ldr	r4, [pc, #44]	@ (800760c <LoopFillZerobss+0x26>)
  movs r3, #0
 80075de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80075e0:	e001      	b.n	80075e6 <LoopFillZerobss>

080075e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80075e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80075e4:	3204      	adds	r2, #4

080075e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80075e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80075e8:	d3fb      	bcc.n	80075e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80075ea:	f7fe fb6b 	bl	8005cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80075ee:	f00e ff1b 	bl	8016428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80075f2:	f7f9 ff31 	bl	8001458 <main>
  bx  lr    
 80075f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80075f8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80075fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007600:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8007604:	080e6fc8 	.word	0x080e6fc8
  ldr r2, =_sbss
 8007608:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 800760c:	20009b70 	.word	0x20009b70

08007610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007610:	e7fe      	b.n	8007610 <ADC_IRQHandler>

08007612 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007616:	2003      	movs	r0, #3
 8007618:	f000 fb8d 	bl	8007d36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800761c:	2000      	movs	r0, #0
 800761e:	f7fe fa35 	bl	8005a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007622:	f7fd fcff 	bl	8005024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	bd80      	pop	{r7, pc}

0800762c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800762c:	b480      	push	{r7}
 800762e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007630:	4b06      	ldr	r3, [pc, #24]	@ (800764c <HAL_IncTick+0x20>)
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	461a      	mov	r2, r3
 8007636:	4b06      	ldr	r3, [pc, #24]	@ (8007650 <HAL_IncTick+0x24>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4413      	add	r3, r2
 800763c:	4a04      	ldr	r2, [pc, #16]	@ (8007650 <HAL_IncTick+0x24>)
 800763e:	6013      	str	r3, [r2, #0]
}
 8007640:	bf00      	nop
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	200000ac 	.word	0x200000ac
 8007650:	200013f4 	.word	0x200013f4

08007654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007654:	b480      	push	{r7}
 8007656:	af00      	add	r7, sp, #0
  return uwTick;
 8007658:	4b03      	ldr	r3, [pc, #12]	@ (8007668 <HAL_GetTick+0x14>)
 800765a:	681b      	ldr	r3, [r3, #0]
}
 800765c:	4618      	mov	r0, r3
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	200013f4 	.word	0x200013f4

0800766c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007674:	f7ff ffee 	bl	8007654 <HAL_GetTick>
 8007678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007684:	d005      	beq.n	8007692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007686:	4b0a      	ldr	r3, [pc, #40]	@ (80076b0 <HAL_Delay+0x44>)
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4413      	add	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007692:	bf00      	nop
 8007694:	f7ff ffde 	bl	8007654 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d8f7      	bhi.n	8007694 <HAL_Delay+0x28>
  {
  }
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	200000ac 	.word	0x200000ac

080076b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e031      	b.n	800772e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d109      	bne.n	80076e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7fd fcce 	bl	8005074 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ea:	f003 0310 	and.w	r3, r3, #16
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d116      	bne.n	8007720 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076f6:	4b10      	ldr	r3, [pc, #64]	@ (8007738 <HAL_ADC_Init+0x84>)
 80076f8:	4013      	ands	r3, r2
 80076fa:	f043 0202 	orr.w	r2, r3, #2
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f970 	bl	80079e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007712:	f023 0303 	bic.w	r3, r3, #3
 8007716:	f043 0201 	orr.w	r2, r3, #1
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	641a      	str	r2, [r3, #64]	@ 0x40
 800771e:	e001      	b.n	8007724 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800772c:	7bfb      	ldrb	r3, [r7, #15]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	ffffeefd 	.word	0xffffeefd

0800773c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8007746:	2300      	movs	r3, #0
 8007748:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007750:	2b01      	cmp	r3, #1
 8007752:	d101      	bne.n	8007758 <HAL_ADC_ConfigChannel+0x1c>
 8007754:	2302      	movs	r3, #2
 8007756:	e136      	b.n	80079c6 <HAL_ADC_ConfigChannel+0x28a>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b09      	cmp	r3, #9
 8007766:	d93a      	bls.n	80077de <HAL_ADC_ConfigChannel+0xa2>
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007770:	d035      	beq.n	80077de <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68d9      	ldr	r1, [r3, #12]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	b29b      	uxth	r3, r3
 800777e:	461a      	mov	r2, r3
 8007780:	4613      	mov	r3, r2
 8007782:	005b      	lsls	r3, r3, #1
 8007784:	4413      	add	r3, r2
 8007786:	3b1e      	subs	r3, #30
 8007788:	2207      	movs	r2, #7
 800778a:	fa02 f303 	lsl.w	r3, r2, r3
 800778e:	43da      	mvns	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	400a      	ands	r2, r1
 8007796:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a8d      	ldr	r2, [pc, #564]	@ (80079d4 <HAL_ADC_ConfigChannel+0x298>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d10a      	bne.n	80077b8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68d9      	ldr	r1, [r3, #12]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	061a      	lsls	r2, r3, #24
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	430a      	orrs	r2, r1
 80077b4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80077b6:	e035      	b.n	8007824 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68d9      	ldr	r1, [r3, #12]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	689a      	ldr	r2, [r3, #8]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	4618      	mov	r0, r3
 80077ca:	4603      	mov	r3, r0
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	4403      	add	r3, r0
 80077d0:	3b1e      	subs	r3, #30
 80077d2:	409a      	lsls	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	430a      	orrs	r2, r1
 80077da:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80077dc:	e022      	b.n	8007824 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6919      	ldr	r1, [r3, #16]
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	461a      	mov	r2, r3
 80077ec:	4613      	mov	r3, r2
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	4413      	add	r3, r2
 80077f2:	2207      	movs	r2, #7
 80077f4:	fa02 f303 	lsl.w	r3, r2, r3
 80077f8:	43da      	mvns	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	400a      	ands	r2, r1
 8007800:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6919      	ldr	r1, [r3, #16]
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	689a      	ldr	r2, [r3, #8]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	b29b      	uxth	r3, r3
 8007812:	4618      	mov	r0, r3
 8007814:	4603      	mov	r3, r0
 8007816:	005b      	lsls	r3, r3, #1
 8007818:	4403      	add	r3, r0
 800781a:	409a      	lsls	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	2b06      	cmp	r3, #6
 800782a:	d824      	bhi.n	8007876 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	4613      	mov	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	4413      	add	r3, r2
 800783c:	3b05      	subs	r3, #5
 800783e:	221f      	movs	r2, #31
 8007840:	fa02 f303 	lsl.w	r3, r2, r3
 8007844:	43da      	mvns	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	400a      	ands	r2, r1
 800784c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	b29b      	uxth	r3, r3
 800785a:	4618      	mov	r0, r3
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	4613      	mov	r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	3b05      	subs	r3, #5
 8007868:	fa00 f203 	lsl.w	r2, r0, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	635a      	str	r2, [r3, #52]	@ 0x34
 8007874:	e04c      	b.n	8007910 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	2b0c      	cmp	r3, #12
 800787c:	d824      	bhi.n	80078c8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	4613      	mov	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4413      	add	r3, r2
 800788e:	3b23      	subs	r3, #35	@ 0x23
 8007890:	221f      	movs	r2, #31
 8007892:	fa02 f303 	lsl.w	r3, r2, r3
 8007896:	43da      	mvns	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	400a      	ands	r2, r1
 800789e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	4618      	mov	r0, r3
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	4613      	mov	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	3b23      	subs	r3, #35	@ 0x23
 80078ba:	fa00 f203 	lsl.w	r2, r0, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80078c6:	e023      	b.n	8007910 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	4613      	mov	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4413      	add	r3, r2
 80078d8:	3b41      	subs	r3, #65	@ 0x41
 80078da:	221f      	movs	r2, #31
 80078dc:	fa02 f303 	lsl.w	r3, r2, r3
 80078e0:	43da      	mvns	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	400a      	ands	r2, r1
 80078e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	4618      	mov	r0, r3
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	4613      	mov	r3, r2
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	4413      	add	r3, r2
 8007902:	3b41      	subs	r3, #65	@ 0x41
 8007904:	fa00 f203 	lsl.w	r2, r0, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	430a      	orrs	r2, r1
 800790e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a30      	ldr	r2, [pc, #192]	@ (80079d8 <HAL_ADC_ConfigChannel+0x29c>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d10a      	bne.n	8007930 <HAL_ADC_ConfigChannel+0x1f4>
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007922:	d105      	bne.n	8007930 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8007924:	4b2d      	ldr	r3, [pc, #180]	@ (80079dc <HAL_ADC_ConfigChannel+0x2a0>)
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	4a2c      	ldr	r2, [pc, #176]	@ (80079dc <HAL_ADC_ConfigChannel+0x2a0>)
 800792a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800792e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a28      	ldr	r2, [pc, #160]	@ (80079d8 <HAL_ADC_ConfigChannel+0x29c>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d10f      	bne.n	800795a <HAL_ADC_ConfigChannel+0x21e>
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b12      	cmp	r3, #18
 8007940:	d10b      	bne.n	800795a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8007942:	4b26      	ldr	r3, [pc, #152]	@ (80079dc <HAL_ADC_ConfigChannel+0x2a0>)
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	4a25      	ldr	r2, [pc, #148]	@ (80079dc <HAL_ADC_ConfigChannel+0x2a0>)
 8007948:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800794c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800794e:	4b23      	ldr	r3, [pc, #140]	@ (80079dc <HAL_ADC_ConfigChannel+0x2a0>)
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	4a22      	ldr	r2, [pc, #136]	@ (80079dc <HAL_ADC_ConfigChannel+0x2a0>)
 8007954:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007958:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a1e      	ldr	r2, [pc, #120]	@ (80079d8 <HAL_ADC_ConfigChannel+0x29c>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d12b      	bne.n	80079bc <HAL_ADC_ConfigChannel+0x280>
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a1a      	ldr	r2, [pc, #104]	@ (80079d4 <HAL_ADC_ConfigChannel+0x298>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d003      	beq.n	8007976 <HAL_ADC_ConfigChannel+0x23a>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2b11      	cmp	r3, #17
 8007974:	d122      	bne.n	80079bc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8007976:	4b19      	ldr	r3, [pc, #100]	@ (80079dc <HAL_ADC_ConfigChannel+0x2a0>)
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	4a18      	ldr	r2, [pc, #96]	@ (80079dc <HAL_ADC_ConfigChannel+0x2a0>)
 800797c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8007980:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8007982:	4b16      	ldr	r3, [pc, #88]	@ (80079dc <HAL_ADC_ConfigChannel+0x2a0>)
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	4a15      	ldr	r2, [pc, #84]	@ (80079dc <HAL_ADC_ConfigChannel+0x2a0>)
 8007988:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800798c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a10      	ldr	r2, [pc, #64]	@ (80079d4 <HAL_ADC_ConfigChannel+0x298>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d111      	bne.n	80079bc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8007998:	4b11      	ldr	r3, [pc, #68]	@ (80079e0 <HAL_ADC_ConfigChannel+0x2a4>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a11      	ldr	r2, [pc, #68]	@ (80079e4 <HAL_ADC_ConfigChannel+0x2a8>)
 800799e:	fba2 2303 	umull	r2, r3, r2, r3
 80079a2:	0c9a      	lsrs	r2, r3, #18
 80079a4:	4613      	mov	r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	4413      	add	r3, r2
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80079ae:	e002      	b.n	80079b6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	3b01      	subs	r3, #1
 80079b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1f9      	bne.n	80079b0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	10000012 	.word	0x10000012
 80079d8:	40012000 	.word	0x40012000
 80079dc:	40012300 	.word	0x40012300
 80079e0:	20000068 	.word	0x20000068
 80079e4:	431bde83 	.word	0x431bde83

080079e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80079f0:	4b78      	ldr	r3, [pc, #480]	@ (8007bd4 <ADC_Init+0x1ec>)
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	4a77      	ldr	r2, [pc, #476]	@ (8007bd4 <ADC_Init+0x1ec>)
 80079f6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80079fa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80079fc:	4b75      	ldr	r3, [pc, #468]	@ (8007bd4 <ADC_Init+0x1ec>)
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	4973      	ldr	r1, [pc, #460]	@ (8007bd4 <ADC_Init+0x1ec>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	685a      	ldr	r2, [r3, #4]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	6859      	ldr	r1, [r3, #4]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	021a      	lsls	r2, r3, #8
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8007a3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	6859      	ldr	r1, [r3, #4]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689a      	ldr	r2, [r3, #8]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689a      	ldr	r2, [r3, #8]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6899      	ldr	r1, [r3, #8]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68da      	ldr	r2, [r3, #12]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a76:	4a58      	ldr	r2, [pc, #352]	@ (8007bd8 <ADC_Init+0x1f0>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d022      	beq.n	8007ac2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	689a      	ldr	r2, [r3, #8]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007a8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6899      	ldr	r1, [r3, #8]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	689a      	ldr	r2, [r3, #8]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007aac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6899      	ldr	r1, [r3, #8]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	430a      	orrs	r2, r1
 8007abe:	609a      	str	r2, [r3, #8]
 8007ac0:	e00f      	b.n	8007ae2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	689a      	ldr	r2, [r3, #8]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007ad0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689a      	ldr	r2, [r3, #8]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007ae0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	689a      	ldr	r2, [r3, #8]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f022 0202 	bic.w	r2, r2, #2
 8007af0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	6899      	ldr	r1, [r3, #8]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	005a      	lsls	r2, r3, #1
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d01b      	beq.n	8007b48 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	685a      	ldr	r2, [r3, #4]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8007b2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6859      	ldr	r1, [r3, #4]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	035a      	lsls	r2, r3, #13
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	605a      	str	r2, [r3, #4]
 8007b46:	e007      	b.n	8007b58 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8007b66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	3b01      	subs	r3, #1
 8007b74:	051a      	lsls	r2, r3, #20
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007b8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6899      	ldr	r1, [r3, #8]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007b9a:	025a      	lsls	r2, r3, #9
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689a      	ldr	r2, [r3, #8]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6899      	ldr	r1, [r3, #8]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	029a      	lsls	r2, r3, #10
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	609a      	str	r2, [r3, #8]
}
 8007bc8:	bf00      	nop
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr
 8007bd4:	40012300 	.word	0x40012300
 8007bd8:	0f000001 	.word	0x0f000001

08007bdc <__NVIC_SetPriorityGrouping>:
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f003 0307 	and.w	r3, r3, #7
 8007bea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007bec:	4b0b      	ldr	r3, [pc, #44]	@ (8007c1c <__NVIC_SetPriorityGrouping+0x40>)
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007c04:	4b06      	ldr	r3, [pc, #24]	@ (8007c20 <__NVIC_SetPriorityGrouping+0x44>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c0a:	4a04      	ldr	r2, [pc, #16]	@ (8007c1c <__NVIC_SetPriorityGrouping+0x40>)
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	60d3      	str	r3, [r2, #12]
}
 8007c10:	bf00      	nop
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	e000ed00 	.word	0xe000ed00
 8007c20:	05fa0000 	.word	0x05fa0000

08007c24 <__NVIC_GetPriorityGrouping>:
{
 8007c24:	b480      	push	{r7}
 8007c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c28:	4b04      	ldr	r3, [pc, #16]	@ (8007c3c <__NVIC_GetPriorityGrouping+0x18>)
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	0a1b      	lsrs	r3, r3, #8
 8007c2e:	f003 0307 	and.w	r3, r3, #7
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	e000ed00 	.word	0xe000ed00

08007c40 <__NVIC_EnableIRQ>:
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	4603      	mov	r3, r0
 8007c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	db0b      	blt.n	8007c6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c52:	79fb      	ldrb	r3, [r7, #7]
 8007c54:	f003 021f 	and.w	r2, r3, #31
 8007c58:	4907      	ldr	r1, [pc, #28]	@ (8007c78 <__NVIC_EnableIRQ+0x38>)
 8007c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c5e:	095b      	lsrs	r3, r3, #5
 8007c60:	2001      	movs	r0, #1
 8007c62:	fa00 f202 	lsl.w	r2, r0, r2
 8007c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007c6a:	bf00      	nop
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	e000e100 	.word	0xe000e100

08007c7c <__NVIC_SetPriority>:
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	4603      	mov	r3, r0
 8007c84:	6039      	str	r1, [r7, #0]
 8007c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	db0a      	blt.n	8007ca6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	490c      	ldr	r1, [pc, #48]	@ (8007cc8 <__NVIC_SetPriority+0x4c>)
 8007c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c9a:	0112      	lsls	r2, r2, #4
 8007c9c:	b2d2      	uxtb	r2, r2
 8007c9e:	440b      	add	r3, r1
 8007ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007ca4:	e00a      	b.n	8007cbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	4908      	ldr	r1, [pc, #32]	@ (8007ccc <__NVIC_SetPriority+0x50>)
 8007cac:	79fb      	ldrb	r3, [r7, #7]
 8007cae:	f003 030f 	and.w	r3, r3, #15
 8007cb2:	3b04      	subs	r3, #4
 8007cb4:	0112      	lsls	r2, r2, #4
 8007cb6:	b2d2      	uxtb	r2, r2
 8007cb8:	440b      	add	r3, r1
 8007cba:	761a      	strb	r2, [r3, #24]
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr
 8007cc8:	e000e100 	.word	0xe000e100
 8007ccc:	e000ed00 	.word	0xe000ed00

08007cd0 <NVIC_EncodePriority>:
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b089      	sub	sp, #36	@ 0x24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f003 0307 	and.w	r3, r3, #7
 8007ce2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	f1c3 0307 	rsb	r3, r3, #7
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	bf28      	it	cs
 8007cee:	2304      	movcs	r3, #4
 8007cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	2b06      	cmp	r3, #6
 8007cf8:	d902      	bls.n	8007d00 <NVIC_EncodePriority+0x30>
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	3b03      	subs	r3, #3
 8007cfe:	e000      	b.n	8007d02 <NVIC_EncodePriority+0x32>
 8007d00:	2300      	movs	r3, #0
 8007d02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0e:	43da      	mvns	r2, r3
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	401a      	ands	r2, r3
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d22:	43d9      	mvns	r1, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d28:	4313      	orrs	r3, r2
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3724      	adds	r7, #36	@ 0x24
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b082      	sub	sp, #8
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7ff ff4c 	bl	8007bdc <__NVIC_SetPriorityGrouping>
}
 8007d44:	bf00      	nop
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b086      	sub	sp, #24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	4603      	mov	r3, r0
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
 8007d58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007d5e:	f7ff ff61 	bl	8007c24 <__NVIC_GetPriorityGrouping>
 8007d62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	68b9      	ldr	r1, [r7, #8]
 8007d68:	6978      	ldr	r0, [r7, #20]
 8007d6a:	f7ff ffb1 	bl	8007cd0 <NVIC_EncodePriority>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d74:	4611      	mov	r1, r2
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff ff80 	bl	8007c7c <__NVIC_SetPriority>
}
 8007d7c:	bf00      	nop
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7ff ff54 	bl	8007c40 <__NVIC_EnableIRQ>
}
 8007d98:	bf00      	nop
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007da8:	2300      	movs	r3, #0
 8007daa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007dac:	f7ff fc52 	bl	8007654 <HAL_GetTick>
 8007db0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d101      	bne.n	8007dbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e099      	b.n	8007ef0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f022 0201 	bic.w	r2, r2, #1
 8007dda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ddc:	e00f      	b.n	8007dfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007dde:	f7ff fc39 	bl	8007654 <HAL_GetTick>
 8007de2:	4602      	mov	r2, r0
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	2b05      	cmp	r3, #5
 8007dea:	d908      	bls.n	8007dfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2220      	movs	r2, #32
 8007df0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2203      	movs	r2, #3
 8007df6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e078      	b.n	8007ef0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 0301 	and.w	r3, r3, #1
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1e8      	bne.n	8007dde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	4b38      	ldr	r3, [pc, #224]	@ (8007ef8 <HAL_DMA_Init+0x158>)
 8007e18:	4013      	ands	r3, r2
 8007e1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007e2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a1b      	ldr	r3, [r3, #32]
 8007e48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e54:	2b04      	cmp	r3, #4
 8007e56:	d107      	bne.n	8007e68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e60:	4313      	orrs	r3, r2
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f023 0307 	bic.w	r3, r3, #7
 8007e7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e8e:	2b04      	cmp	r3, #4
 8007e90:	d117      	bne.n	8007ec2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00e      	beq.n	8007ec2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fb73 	bl	8008590 <DMA_CheckFifoParam>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d008      	beq.n	8007ec2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2240      	movs	r2, #64	@ 0x40
 8007eb4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e016      	b.n	8007ef0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fb2a 	bl	8008524 <DMA_CalcBaseAndBitshift>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ed8:	223f      	movs	r2, #63	@ 0x3f
 8007eda:	409a      	lsls	r2, r3
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3718      	adds	r7, #24
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	f010803f 	.word	0xf010803f

08007efc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d101      	bne.n	8007f0e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e050      	b.n	8007fb0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d101      	bne.n	8007f1e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	e048      	b.n	8007fb0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 0201 	bic.w	r2, r2, #1
 8007f2c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2200      	movs	r2, #0
 8007f44:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2200      	movs	r2, #0
 8007f54:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2221      	movs	r2, #33	@ 0x21
 8007f5c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fae0 	bl	8008524 <DMA_CalcBaseAndBitshift>
 8007f64:	4603      	mov	r3, r0
 8007f66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f6c:	223f      	movs	r2, #63	@ 0x3f
 8007f6e:	409a      	lsls	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b086      	sub	sp, #24
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
 8007fc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d101      	bne.n	8007fde <HAL_DMA_Start_IT+0x26>
 8007fda:	2302      	movs	r3, #2
 8007fdc:	e048      	b.n	8008070 <HAL_DMA_Start_IT+0xb8>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d137      	bne.n	8008062 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	68b9      	ldr	r1, [r7, #8]
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f000 fa5e 	bl	80084c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008010:	223f      	movs	r2, #63	@ 0x3f
 8008012:	409a      	lsls	r2, r3
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f042 0216 	orr.w	r2, r2, #22
 8008026:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	695a      	ldr	r2, [r3, #20]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008036:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800803c:	2b00      	cmp	r3, #0
 800803e:	d007      	beq.n	8008050 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f042 0208 	orr.w	r2, r2, #8
 800804e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f042 0201 	orr.w	r2, r2, #1
 800805e:	601a      	str	r2, [r3, #0]
 8008060:	e005      	b.n	800806e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800806a:	2302      	movs	r3, #2
 800806c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800806e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3718      	adds	r7, #24
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008084:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008086:	f7ff fae5 	bl	8007654 <HAL_GetTick>
 800808a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008092:	b2db      	uxtb	r3, r3
 8008094:	2b02      	cmp	r3, #2
 8008096:	d008      	beq.n	80080aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2280      	movs	r2, #128	@ 0x80
 800809c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e052      	b.n	8008150 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f022 0216 	bic.w	r2, r2, #22
 80080b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	695a      	ldr	r2, [r3, #20]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80080c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d103      	bne.n	80080da <HAL_DMA_Abort+0x62>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d007      	beq.n	80080ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f022 0208 	bic.w	r2, r2, #8
 80080e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f022 0201 	bic.w	r2, r2, #1
 80080f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80080fa:	e013      	b.n	8008124 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80080fc:	f7ff faaa 	bl	8007654 <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b05      	cmp	r3, #5
 8008108:	d90c      	bls.n	8008124 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2220      	movs	r2, #32
 800810e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2203      	movs	r2, #3
 8008114:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e015      	b.n	8008150 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1e4      	bne.n	80080fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008136:	223f      	movs	r2, #63	@ 0x3f
 8008138:	409a      	lsls	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b02      	cmp	r3, #2
 800816a:	d004      	beq.n	8008176 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2280      	movs	r2, #128	@ 0x80
 8008170:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e00c      	b.n	8008190 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2205      	movs	r2, #5
 800817a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f022 0201 	bic.w	r2, r2, #1
 800818c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80081a8:	4b8e      	ldr	r3, [pc, #568]	@ (80083e4 <HAL_DMA_IRQHandler+0x248>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a8e      	ldr	r2, [pc, #568]	@ (80083e8 <HAL_DMA_IRQHandler+0x24c>)
 80081ae:	fba2 2303 	umull	r2, r3, r2, r3
 80081b2:	0a9b      	lsrs	r3, r3, #10
 80081b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081c6:	2208      	movs	r2, #8
 80081c8:	409a      	lsls	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	4013      	ands	r3, r2
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d01a      	beq.n	8008208 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0304 	and.w	r3, r3, #4
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d013      	beq.n	8008208 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f022 0204 	bic.w	r2, r2, #4
 80081ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081f4:	2208      	movs	r2, #8
 80081f6:	409a      	lsls	r2, r3
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008200:	f043 0201 	orr.w	r2, r3, #1
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800820c:	2201      	movs	r2, #1
 800820e:	409a      	lsls	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	4013      	ands	r3, r2
 8008214:	2b00      	cmp	r3, #0
 8008216:	d012      	beq.n	800823e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00b      	beq.n	800823e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800822a:	2201      	movs	r2, #1
 800822c:	409a      	lsls	r2, r3
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008236:	f043 0202 	orr.w	r2, r3, #2
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008242:	2204      	movs	r2, #4
 8008244:	409a      	lsls	r2, r3
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	4013      	ands	r3, r2
 800824a:	2b00      	cmp	r3, #0
 800824c:	d012      	beq.n	8008274 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 0302 	and.w	r3, r3, #2
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00b      	beq.n	8008274 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008260:	2204      	movs	r2, #4
 8008262:	409a      	lsls	r2, r3
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800826c:	f043 0204 	orr.w	r2, r3, #4
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008278:	2210      	movs	r2, #16
 800827a:	409a      	lsls	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4013      	ands	r3, r2
 8008280:	2b00      	cmp	r3, #0
 8008282:	d043      	beq.n	800830c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0308 	and.w	r3, r3, #8
 800828e:	2b00      	cmp	r3, #0
 8008290:	d03c      	beq.n	800830c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008296:	2210      	movs	r2, #16
 8008298:	409a      	lsls	r2, r3
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d018      	beq.n	80082de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d108      	bne.n	80082cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d024      	beq.n	800830c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	4798      	blx	r3
 80082ca:	e01f      	b.n	800830c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d01b      	beq.n	800830c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	4798      	blx	r3
 80082dc:	e016      	b.n	800830c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d107      	bne.n	80082fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f022 0208 	bic.w	r2, r2, #8
 80082fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008300:	2b00      	cmp	r3, #0
 8008302:	d003      	beq.n	800830c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008310:	2220      	movs	r2, #32
 8008312:	409a      	lsls	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	4013      	ands	r3, r2
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 808f 	beq.w	800843c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 0310 	and.w	r3, r3, #16
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 8087 	beq.w	800843c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008332:	2220      	movs	r2, #32
 8008334:	409a      	lsls	r2, r3
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b05      	cmp	r3, #5
 8008344:	d136      	bne.n	80083b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f022 0216 	bic.w	r2, r2, #22
 8008354:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	695a      	ldr	r2, [r3, #20]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008364:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800836a:	2b00      	cmp	r3, #0
 800836c:	d103      	bne.n	8008376 <HAL_DMA_IRQHandler+0x1da>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008372:	2b00      	cmp	r3, #0
 8008374:	d007      	beq.n	8008386 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f022 0208 	bic.w	r2, r2, #8
 8008384:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800838a:	223f      	movs	r2, #63	@ 0x3f
 800838c:	409a      	lsls	r2, r3
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d07e      	beq.n	80084a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	4798      	blx	r3
        }
        return;
 80083b2:	e079      	b.n	80084a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d01d      	beq.n	80083fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10d      	bne.n	80083ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d031      	beq.n	800843c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	4798      	blx	r3
 80083e0:	e02c      	b.n	800843c <HAL_DMA_IRQHandler+0x2a0>
 80083e2:	bf00      	nop
 80083e4:	20000068 	.word	0x20000068
 80083e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d023      	beq.n	800843c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	4798      	blx	r3
 80083fc:	e01e      	b.n	800843c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008408:	2b00      	cmp	r3, #0
 800840a:	d10f      	bne.n	800842c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f022 0210 	bic.w	r2, r2, #16
 800841a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008430:	2b00      	cmp	r3, #0
 8008432:	d003      	beq.n	800843c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008440:	2b00      	cmp	r3, #0
 8008442:	d032      	beq.n	80084aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008448:	f003 0301 	and.w	r3, r3, #1
 800844c:	2b00      	cmp	r3, #0
 800844e:	d022      	beq.n	8008496 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2205      	movs	r2, #5
 8008454:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f022 0201 	bic.w	r2, r2, #1
 8008466:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	3301      	adds	r3, #1
 800846c:	60bb      	str	r3, [r7, #8]
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	429a      	cmp	r2, r3
 8008472:	d307      	bcc.n	8008484 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 0301 	and.w	r3, r3, #1
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1f2      	bne.n	8008468 <HAL_DMA_IRQHandler+0x2cc>
 8008482:	e000      	b.n	8008486 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008484:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800849a:	2b00      	cmp	r3, #0
 800849c:	d005      	beq.n	80084aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	4798      	blx	r3
 80084a6:	e000      	b.n	80084aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80084a8:	bf00      	nop
    }
  }
}
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80084bc:	4618      	mov	r0, r3
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
 80084d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80084e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	2b40      	cmp	r3, #64	@ 0x40
 80084f4:	d108      	bne.n	8008508 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008506:	e007      	b.n	8008518 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	60da      	str	r2, [r3, #12]
}
 8008518:	bf00      	nop
 800851a:	3714      	adds	r7, #20
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	b2db      	uxtb	r3, r3
 8008532:	3b10      	subs	r3, #16
 8008534:	4a13      	ldr	r2, [pc, #76]	@ (8008584 <DMA_CalcBaseAndBitshift+0x60>)
 8008536:	fba2 2303 	umull	r2, r3, r2, r3
 800853a:	091b      	lsrs	r3, r3, #4
 800853c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800853e:	4a12      	ldr	r2, [pc, #72]	@ (8008588 <DMA_CalcBaseAndBitshift+0x64>)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	4413      	add	r3, r2
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	461a      	mov	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2b03      	cmp	r3, #3
 8008550:	d908      	bls.n	8008564 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	461a      	mov	r2, r3
 8008558:	4b0c      	ldr	r3, [pc, #48]	@ (800858c <DMA_CalcBaseAndBitshift+0x68>)
 800855a:	4013      	ands	r3, r2
 800855c:	1d1a      	adds	r2, r3, #4
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	659a      	str	r2, [r3, #88]	@ 0x58
 8008562:	e006      	b.n	8008572 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	461a      	mov	r2, r3
 800856a:	4b08      	ldr	r3, [pc, #32]	@ (800858c <DMA_CalcBaseAndBitshift+0x68>)
 800856c:	4013      	ands	r3, r2
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008576:	4618      	mov	r0, r3
 8008578:	3714      	adds	r7, #20
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	aaaaaaab 	.word	0xaaaaaaab
 8008588:	080e6ee8 	.word	0x080e6ee8
 800858c:	fffffc00 	.word	0xfffffc00

08008590 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008598:	2300      	movs	r3, #0
 800859a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d11f      	bne.n	80085ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	2b03      	cmp	r3, #3
 80085ae:	d856      	bhi.n	800865e <DMA_CheckFifoParam+0xce>
 80085b0:	a201      	add	r2, pc, #4	@ (adr r2, 80085b8 <DMA_CheckFifoParam+0x28>)
 80085b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b6:	bf00      	nop
 80085b8:	080085c9 	.word	0x080085c9
 80085bc:	080085db 	.word	0x080085db
 80085c0:	080085c9 	.word	0x080085c9
 80085c4:	0800865f 	.word	0x0800865f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d046      	beq.n	8008662 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085d8:	e043      	b.n	8008662 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80085e2:	d140      	bne.n	8008666 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085e8:	e03d      	b.n	8008666 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085f2:	d121      	bne.n	8008638 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d837      	bhi.n	800866a <DMA_CheckFifoParam+0xda>
 80085fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008600 <DMA_CheckFifoParam+0x70>)
 80085fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008600:	08008611 	.word	0x08008611
 8008604:	08008617 	.word	0x08008617
 8008608:	08008611 	.word	0x08008611
 800860c:	08008629 	.word	0x08008629
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	73fb      	strb	r3, [r7, #15]
      break;
 8008614:	e030      	b.n	8008678 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d025      	beq.n	800866e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008626:	e022      	b.n	800866e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800862c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008630:	d11f      	bne.n	8008672 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008636:	e01c      	b.n	8008672 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	2b02      	cmp	r3, #2
 800863c:	d903      	bls.n	8008646 <DMA_CheckFifoParam+0xb6>
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	2b03      	cmp	r3, #3
 8008642:	d003      	beq.n	800864c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008644:	e018      	b.n	8008678 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	73fb      	strb	r3, [r7, #15]
      break;
 800864a:	e015      	b.n	8008678 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008650:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00e      	beq.n	8008676 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	73fb      	strb	r3, [r7, #15]
      break;
 800865c:	e00b      	b.n	8008676 <DMA_CheckFifoParam+0xe6>
      break;
 800865e:	bf00      	nop
 8008660:	e00a      	b.n	8008678 <DMA_CheckFifoParam+0xe8>
      break;
 8008662:	bf00      	nop
 8008664:	e008      	b.n	8008678 <DMA_CheckFifoParam+0xe8>
      break;
 8008666:	bf00      	nop
 8008668:	e006      	b.n	8008678 <DMA_CheckFifoParam+0xe8>
      break;
 800866a:	bf00      	nop
 800866c:	e004      	b.n	8008678 <DMA_CheckFifoParam+0xe8>
      break;
 800866e:	bf00      	nop
 8008670:	e002      	b.n	8008678 <DMA_CheckFifoParam+0xe8>
      break;   
 8008672:	bf00      	nop
 8008674:	e000      	b.n	8008678 <DMA_CheckFifoParam+0xe8>
      break;
 8008676:	bf00      	nop
    }
  } 
  
  return status; 
 8008678:	7bfb      	ldrb	r3, [r7, #15]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop

08008688 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d101      	bne.n	800869a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e039      	b.n	800870e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d106      	bne.n	80086b4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7fc fd66 	bl	8005180 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2202      	movs	r2, #2
 80086b8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685a      	ldr	r2, [r3, #4]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	430a      	orrs	r2, r1
 80086d0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086d8:	f023 0107 	bic.w	r1, r3, #7
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	689a      	ldr	r2, [r3, #8]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	430a      	orrs	r2, r1
 80086e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80086ee:	4b0a      	ldr	r3, [pc, #40]	@ (8008718 <HAL_DMA2D_Init+0x90>)
 80086f0:	4013      	ands	r3, r2
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	68d1      	ldr	r1, [r2, #12]
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	6812      	ldr	r2, [r2, #0]
 80086fa:	430b      	orrs	r3, r1
 80086fc:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	ffffc000 	.word	0xffffc000

0800871c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af02      	add	r7, sp, #8
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
 8008728:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008730:	2b01      	cmp	r3, #1
 8008732:	d101      	bne.n	8008738 <HAL_DMA2D_Start+0x1c>
 8008734:	2302      	movs	r3, #2
 8008736:	e018      	b.n	800876a <HAL_DMA2D_Start+0x4e>
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2202      	movs	r2, #2
 8008744:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	68b9      	ldr	r1, [r7, #8]
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f000 f988 	bl	8008a68 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f042 0201 	orr.w	r2, r2, #1
 8008766:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b086      	sub	sp, #24
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
 800877a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800877c:	2300      	movs	r3, #0
 800877e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	2b00      	cmp	r3, #0
 800878c:	d056      	beq.n	800883c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800878e:	f7fe ff61 	bl	8007654 <HAL_GetTick>
 8008792:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008794:	e04b      	b.n	800882e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d023      	beq.n	80087f0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f003 0320 	and.w	r3, r3, #32
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d005      	beq.n	80087be <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087b6:	f043 0202 	orr.w	r2, r3, #2
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f003 0301 	and.w	r3, r3, #1
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d005      	beq.n	80087d4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087cc:	f043 0201 	orr.w	r2, r3, #1
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2221      	movs	r2, #33	@ 0x21
 80087da:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2204      	movs	r2, #4
 80087e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e0a5      	b.n	800893c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087f6:	d01a      	beq.n	800882e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80087f8:	f7fe ff2c 	bl	8007654 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	683a      	ldr	r2, [r7, #0]
 8008804:	429a      	cmp	r2, r3
 8008806:	d302      	bcc.n	800880e <HAL_DMA2D_PollForTransfer+0x9c>
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d10f      	bne.n	800882e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008812:	f043 0220 	orr.w	r2, r3, #32
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2203      	movs	r2, #3
 800881e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	e086      	b.n	800893c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	f003 0302 	and.w	r3, r3, #2
 8008838:	2b00      	cmp	r3, #0
 800883a:	d0ac      	beq.n	8008796 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	69db      	ldr	r3, [r3, #28]
 8008842:	f003 0320 	and.w	r3, r3, #32
 8008846:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800884e:	f003 0320 	and.w	r3, r3, #32
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	4313      	orrs	r3, r2
 8008856:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d061      	beq.n	8008922 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800885e:	f7fe fef9 	bl	8007654 <HAL_GetTick>
 8008862:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008864:	e056      	b.n	8008914 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8008874:	2b00      	cmp	r3, #0
 8008876:	d02e      	beq.n	80088d6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f003 0308 	and.w	r3, r3, #8
 800887e:	2b00      	cmp	r3, #0
 8008880:	d005      	beq.n	800888e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008886:	f043 0204 	orr.w	r2, r3, #4
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f003 0320 	and.w	r3, r3, #32
 8008894:	2b00      	cmp	r3, #0
 8008896:	d005      	beq.n	80088a4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800889c:	f043 0202 	orr.w	r2, r3, #2
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f003 0301 	and.w	r3, r3, #1
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d005      	beq.n	80088ba <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088b2:	f043 0201 	orr.w	r2, r3, #1
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2229      	movs	r2, #41	@ 0x29
 80088c0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2204      	movs	r2, #4
 80088c6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e032      	b.n	800893c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088dc:	d01a      	beq.n	8008914 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80088de:	f7fe feb9 	bl	8007654 <HAL_GetTick>
 80088e2:	4602      	mov	r2, r0
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	683a      	ldr	r2, [r7, #0]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d302      	bcc.n	80088f4 <HAL_DMA2D_PollForTransfer+0x182>
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10f      	bne.n	8008914 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088f8:	f043 0220 	orr.w	r2, r3, #32
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2203      	movs	r2, #3
 8008904:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e013      	b.n	800893c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f003 0310 	and.w	r3, r3, #16
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0a1      	beq.n	8008866 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2212      	movs	r2, #18
 8008928:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3718      	adds	r7, #24
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8008944:	b480      	push	{r7}
 8008946:	b087      	sub	sp, #28
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800895c:	2b01      	cmp	r3, #1
 800895e:	d101      	bne.n	8008964 <HAL_DMA2D_ConfigLayer+0x20>
 8008960:	2302      	movs	r3, #2
 8008962:	e079      	b.n	8008a58 <HAL_DMA2D_ConfigLayer+0x114>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2202      	movs	r2, #2
 8008970:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	011b      	lsls	r3, r3, #4
 8008978:	3318      	adds	r3, #24
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	4413      	add	r3, r2
 800897e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	685a      	ldr	r2, [r3, #4]
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	041b      	lsls	r3, r3, #16
 800898a:	4313      	orrs	r3, r2
 800898c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800898e:	4b35      	ldr	r3, [pc, #212]	@ (8008a64 <HAL_DMA2D_ConfigLayer+0x120>)
 8008990:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	2b0a      	cmp	r3, #10
 8008998:	d003      	beq.n	80089a2 <HAL_DMA2D_ConfigLayer+0x5e>
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	2b09      	cmp	r3, #9
 80089a0:	d107      	bne.n	80089b2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80089aa:	697a      	ldr	r2, [r7, #20]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	617b      	str	r3, [r7, #20]
 80089b0:	e005      	b.n	80089be <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	061b      	lsls	r3, r3, #24
 80089b8:	697a      	ldr	r2, [r7, #20]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d120      	bne.n	8008a06 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	43db      	mvns	r3, r3
 80089ce:	ea02 0103 	and.w	r1, r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	430a      	orrs	r2, r1
 80089da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	6812      	ldr	r2, [r2, #0]
 80089e4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	2b0a      	cmp	r3, #10
 80089ec:	d003      	beq.n	80089f6 <HAL_DMA2D_ConfigLayer+0xb2>
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	2b09      	cmp	r3, #9
 80089f4:	d127      	bne.n	8008a46 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	68da      	ldr	r2, [r3, #12]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8008a02:	629a      	str	r2, [r3, #40]	@ 0x28
 8008a04:	e01f      	b.n	8008a46 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	69da      	ldr	r2, [r3, #28]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	43db      	mvns	r3, r3
 8008a10:	ea02 0103 	and.w	r1, r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	697a      	ldr	r2, [r7, #20]
 8008a1a:	430a      	orrs	r2, r1
 8008a1c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	693a      	ldr	r2, [r7, #16]
 8008a24:	6812      	ldr	r2, [r2, #0]
 8008a26:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	2b0a      	cmp	r3, #10
 8008a2e:	d003      	beq.n	8008a38 <HAL_DMA2D_ConfigLayer+0xf4>
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	2b09      	cmp	r3, #9
 8008a36:	d106      	bne.n	8008a46 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	68da      	ldr	r2, [r3, #12]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8008a44:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	371c      	adds	r7, #28
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	ff03000f 	.word	0xff03000f

08008a68 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b08b      	sub	sp, #44	@ 0x2c
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
 8008a74:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a7c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	041a      	lsls	r2, r3, #16
 8008a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a86:	431a      	orrs	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	430a      	orrs	r2, r1
 8008a8e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008aa0:	d174      	bne.n	8008b8c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8008aa8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008ab0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008ab8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d108      	bne.n	8008ada <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8008ac8:	69ba      	ldr	r2, [r7, #24]
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	431a      	orrs	r2, r3
 8008ace:	6a3b      	ldr	r3, [r7, #32]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	697a      	ldr	r2, [r7, #20]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ad8:	e053      	b.n	8008b82 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d106      	bne.n	8008af0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8008ae2:	69ba      	ldr	r2, [r7, #24]
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	627b      	str	r3, [r7, #36]	@ 0x24
 8008aee:	e048      	b.n	8008b82 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d111      	bne.n	8008b1c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	0cdb      	lsrs	r3, r3, #19
 8008afc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	0a9b      	lsrs	r3, r3, #10
 8008b02:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	08db      	lsrs	r3, r3, #3
 8008b08:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	015a      	lsls	r2, r3, #5
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	02db      	lsls	r3, r3, #11
 8008b12:	4313      	orrs	r3, r2
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b1a:	e032      	b.n	8008b82 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	2b03      	cmp	r3, #3
 8008b22:	d117      	bne.n	8008b54 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8008b24:	6a3b      	ldr	r3, [r7, #32]
 8008b26:	0fdb      	lsrs	r3, r3, #31
 8008b28:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	0cdb      	lsrs	r3, r3, #19
 8008b2e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	0adb      	lsrs	r3, r3, #11
 8008b34:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	08db      	lsrs	r3, r3, #3
 8008b3a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	029b      	lsls	r3, r3, #10
 8008b44:	431a      	orrs	r2, r3
 8008b46:	6a3b      	ldr	r3, [r7, #32]
 8008b48:	03db      	lsls	r3, r3, #15
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b52:	e016      	b.n	8008b82 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	0f1b      	lsrs	r3, r3, #28
 8008b58:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	0d1b      	lsrs	r3, r3, #20
 8008b5e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	0b1b      	lsrs	r3, r3, #12
 8008b64:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	091b      	lsrs	r3, r3, #4
 8008b6a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	011a      	lsls	r2, r3, #4
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	021b      	lsls	r3, r3, #8
 8008b74:	431a      	orrs	r2, r3
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	031b      	lsls	r3, r3, #12
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b88:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8008b8a:	e003      	b.n	8008b94 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	60da      	str	r2, [r3, #12]
}
 8008b94:	bf00      	nop
 8008b96:	372c      	adds	r7, #44	@ 0x2c
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b089      	sub	sp, #36	@ 0x24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008baa:	2300      	movs	r3, #0
 8008bac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008bba:	2300      	movs	r3, #0
 8008bbc:	61fb      	str	r3, [r7, #28]
 8008bbe:	e175      	b.n	8008eac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	f040 8164 	bne.w	8008ea6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	f003 0303 	and.w	r3, r3, #3
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d005      	beq.n	8008bf6 <HAL_GPIO_Init+0x56>
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	f003 0303 	and.w	r3, r3, #3
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d130      	bne.n	8008c58 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	005b      	lsls	r3, r3, #1
 8008c00:	2203      	movs	r2, #3
 8008c02:	fa02 f303 	lsl.w	r3, r2, r3
 8008c06:	43db      	mvns	r3, r3
 8008c08:	69ba      	ldr	r2, [r7, #24]
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	68da      	ldr	r2, [r3, #12]
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	005b      	lsls	r3, r3, #1
 8008c16:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1a:	69ba      	ldr	r2, [r7, #24]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	69ba      	ldr	r2, [r7, #24]
 8008c24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	fa02 f303 	lsl.w	r3, r2, r3
 8008c34:	43db      	mvns	r3, r3
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	4013      	ands	r3, r2
 8008c3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	091b      	lsrs	r3, r3, #4
 8008c42:	f003 0201 	and.w	r2, r3, #1
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	fa02 f303 	lsl.w	r3, r2, r3
 8008c4c:	69ba      	ldr	r2, [r7, #24]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	69ba      	ldr	r2, [r7, #24]
 8008c56:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	f003 0303 	and.w	r3, r3, #3
 8008c60:	2b03      	cmp	r3, #3
 8008c62:	d017      	beq.n	8008c94 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	005b      	lsls	r3, r3, #1
 8008c6e:	2203      	movs	r2, #3
 8008c70:	fa02 f303 	lsl.w	r3, r2, r3
 8008c74:	43db      	mvns	r3, r3
 8008c76:	69ba      	ldr	r2, [r7, #24]
 8008c78:	4013      	ands	r3, r2
 8008c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	689a      	ldr	r2, [r3, #8]
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	005b      	lsls	r3, r3, #1
 8008c84:	fa02 f303 	lsl.w	r3, r2, r3
 8008c88:	69ba      	ldr	r2, [r7, #24]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	f003 0303 	and.w	r3, r3, #3
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d123      	bne.n	8008ce8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	08da      	lsrs	r2, r3, #3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	3208      	adds	r2, #8
 8008ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	f003 0307 	and.w	r3, r3, #7
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	220f      	movs	r2, #15
 8008cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cbc:	43db      	mvns	r3, r3
 8008cbe:	69ba      	ldr	r2, [r7, #24]
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	691a      	ldr	r2, [r3, #16]
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	f003 0307 	and.w	r3, r3, #7
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd4:	69ba      	ldr	r2, [r7, #24]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	08da      	lsrs	r2, r3, #3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	3208      	adds	r2, #8
 8008ce2:	69b9      	ldr	r1, [r7, #24]
 8008ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	005b      	lsls	r3, r3, #1
 8008cf2:	2203      	movs	r2, #3
 8008cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf8:	43db      	mvns	r3, r3
 8008cfa:	69ba      	ldr	r2, [r7, #24]
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	f003 0203 	and.w	r2, r3, #3
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	005b      	lsls	r3, r3, #1
 8008d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d10:	69ba      	ldr	r2, [r7, #24]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	69ba      	ldr	r2, [r7, #24]
 8008d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 80be 	beq.w	8008ea6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d2a:	4b66      	ldr	r3, [pc, #408]	@ (8008ec4 <HAL_GPIO_Init+0x324>)
 8008d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d2e:	4a65      	ldr	r2, [pc, #404]	@ (8008ec4 <HAL_GPIO_Init+0x324>)
 8008d30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8008d36:	4b63      	ldr	r3, [pc, #396]	@ (8008ec4 <HAL_GPIO_Init+0x324>)
 8008d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d3e:	60fb      	str	r3, [r7, #12]
 8008d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008d42:	4a61      	ldr	r2, [pc, #388]	@ (8008ec8 <HAL_GPIO_Init+0x328>)
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	089b      	lsrs	r3, r3, #2
 8008d48:	3302      	adds	r3, #2
 8008d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	f003 0303 	and.w	r3, r3, #3
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	220f      	movs	r2, #15
 8008d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5e:	43db      	mvns	r3, r3
 8008d60:	69ba      	ldr	r2, [r7, #24]
 8008d62:	4013      	ands	r3, r2
 8008d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a58      	ldr	r2, [pc, #352]	@ (8008ecc <HAL_GPIO_Init+0x32c>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d037      	beq.n	8008dde <HAL_GPIO_Init+0x23e>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a57      	ldr	r2, [pc, #348]	@ (8008ed0 <HAL_GPIO_Init+0x330>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d031      	beq.n	8008dda <HAL_GPIO_Init+0x23a>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a56      	ldr	r2, [pc, #344]	@ (8008ed4 <HAL_GPIO_Init+0x334>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d02b      	beq.n	8008dd6 <HAL_GPIO_Init+0x236>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a55      	ldr	r2, [pc, #340]	@ (8008ed8 <HAL_GPIO_Init+0x338>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d025      	beq.n	8008dd2 <HAL_GPIO_Init+0x232>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a54      	ldr	r2, [pc, #336]	@ (8008edc <HAL_GPIO_Init+0x33c>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d01f      	beq.n	8008dce <HAL_GPIO_Init+0x22e>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a53      	ldr	r2, [pc, #332]	@ (8008ee0 <HAL_GPIO_Init+0x340>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d019      	beq.n	8008dca <HAL_GPIO_Init+0x22a>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a52      	ldr	r2, [pc, #328]	@ (8008ee4 <HAL_GPIO_Init+0x344>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d013      	beq.n	8008dc6 <HAL_GPIO_Init+0x226>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a51      	ldr	r2, [pc, #324]	@ (8008ee8 <HAL_GPIO_Init+0x348>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d00d      	beq.n	8008dc2 <HAL_GPIO_Init+0x222>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a50      	ldr	r2, [pc, #320]	@ (8008eec <HAL_GPIO_Init+0x34c>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d007      	beq.n	8008dbe <HAL_GPIO_Init+0x21e>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a4f      	ldr	r2, [pc, #316]	@ (8008ef0 <HAL_GPIO_Init+0x350>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d101      	bne.n	8008dba <HAL_GPIO_Init+0x21a>
 8008db6:	2309      	movs	r3, #9
 8008db8:	e012      	b.n	8008de0 <HAL_GPIO_Init+0x240>
 8008dba:	230a      	movs	r3, #10
 8008dbc:	e010      	b.n	8008de0 <HAL_GPIO_Init+0x240>
 8008dbe:	2308      	movs	r3, #8
 8008dc0:	e00e      	b.n	8008de0 <HAL_GPIO_Init+0x240>
 8008dc2:	2307      	movs	r3, #7
 8008dc4:	e00c      	b.n	8008de0 <HAL_GPIO_Init+0x240>
 8008dc6:	2306      	movs	r3, #6
 8008dc8:	e00a      	b.n	8008de0 <HAL_GPIO_Init+0x240>
 8008dca:	2305      	movs	r3, #5
 8008dcc:	e008      	b.n	8008de0 <HAL_GPIO_Init+0x240>
 8008dce:	2304      	movs	r3, #4
 8008dd0:	e006      	b.n	8008de0 <HAL_GPIO_Init+0x240>
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e004      	b.n	8008de0 <HAL_GPIO_Init+0x240>
 8008dd6:	2302      	movs	r3, #2
 8008dd8:	e002      	b.n	8008de0 <HAL_GPIO_Init+0x240>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e000      	b.n	8008de0 <HAL_GPIO_Init+0x240>
 8008dde:	2300      	movs	r3, #0
 8008de0:	69fa      	ldr	r2, [r7, #28]
 8008de2:	f002 0203 	and.w	r2, r2, #3
 8008de6:	0092      	lsls	r2, r2, #2
 8008de8:	4093      	lsls	r3, r2
 8008dea:	69ba      	ldr	r2, [r7, #24]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008df0:	4935      	ldr	r1, [pc, #212]	@ (8008ec8 <HAL_GPIO_Init+0x328>)
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	089b      	lsrs	r3, r3, #2
 8008df6:	3302      	adds	r3, #2
 8008df8:	69ba      	ldr	r2, [r7, #24]
 8008dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008dfe:	4b3d      	ldr	r3, [pc, #244]	@ (8008ef4 <HAL_GPIO_Init+0x354>)
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	43db      	mvns	r3, r3
 8008e08:	69ba      	ldr	r2, [r7, #24]
 8008e0a:	4013      	ands	r3, r2
 8008e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d003      	beq.n	8008e22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008e1a:	69ba      	ldr	r2, [r7, #24]
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008e22:	4a34      	ldr	r2, [pc, #208]	@ (8008ef4 <HAL_GPIO_Init+0x354>)
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008e28:	4b32      	ldr	r3, [pc, #200]	@ (8008ef4 <HAL_GPIO_Init+0x354>)
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	43db      	mvns	r3, r3
 8008e32:	69ba      	ldr	r2, [r7, #24]
 8008e34:	4013      	ands	r3, r2
 8008e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d003      	beq.n	8008e4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008e44:	69ba      	ldr	r2, [r7, #24]
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008e4c:	4a29      	ldr	r2, [pc, #164]	@ (8008ef4 <HAL_GPIO_Init+0x354>)
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008e52:	4b28      	ldr	r3, [pc, #160]	@ (8008ef4 <HAL_GPIO_Init+0x354>)
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	43db      	mvns	r3, r3
 8008e5c:	69ba      	ldr	r2, [r7, #24]
 8008e5e:	4013      	ands	r3, r2
 8008e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008e6e:	69ba      	ldr	r2, [r7, #24]
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008e76:	4a1f      	ldr	r2, [pc, #124]	@ (8008ef4 <HAL_GPIO_Init+0x354>)
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8008ef4 <HAL_GPIO_Init+0x354>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	43db      	mvns	r3, r3
 8008e86:	69ba      	ldr	r2, [r7, #24]
 8008e88:	4013      	ands	r3, r2
 8008e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d003      	beq.n	8008ea0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008e98:	69ba      	ldr	r2, [r7, #24]
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008ea0:	4a14      	ldr	r2, [pc, #80]	@ (8008ef4 <HAL_GPIO_Init+0x354>)
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	61fb      	str	r3, [r7, #28]
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	2b0f      	cmp	r3, #15
 8008eb0:	f67f ae86 	bls.w	8008bc0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008eb4:	bf00      	nop
 8008eb6:	bf00      	nop
 8008eb8:	3724      	adds	r7, #36	@ 0x24
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	40023800 	.word	0x40023800
 8008ec8:	40013800 	.word	0x40013800
 8008ecc:	40020000 	.word	0x40020000
 8008ed0:	40020400 	.word	0x40020400
 8008ed4:	40020800 	.word	0x40020800
 8008ed8:	40020c00 	.word	0x40020c00
 8008edc:	40021000 	.word	0x40021000
 8008ee0:	40021400 	.word	0x40021400
 8008ee4:	40021800 	.word	0x40021800
 8008ee8:	40021c00 	.word	0x40021c00
 8008eec:	40022000 	.word	0x40022000
 8008ef0:	40022400 	.word	0x40022400
 8008ef4:	40013c00 	.word	0x40013c00

08008ef8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b087      	sub	sp, #28
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8008f02:	2300      	movs	r3, #0
 8008f04:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8008f06:	2300      	movs	r3, #0
 8008f08:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008f0e:	2300      	movs	r3, #0
 8008f10:	617b      	str	r3, [r7, #20]
 8008f12:	e0d9      	b.n	80090c8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008f14:	2201      	movs	r2, #1
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	fa02 f303 	lsl.w	r3, r2, r3
 8008f1c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	4013      	ands	r3, r2
 8008f24:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	f040 80c9 	bne.w	80090c2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8008f30:	4a6b      	ldr	r2, [pc, #428]	@ (80090e0 <HAL_GPIO_DeInit+0x1e8>)
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	089b      	lsrs	r3, r3, #2
 8008f36:	3302      	adds	r3, #2
 8008f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f3c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	f003 0303 	and.w	r3, r3, #3
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	220f      	movs	r2, #15
 8008f48:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	4013      	ands	r3, r2
 8008f50:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a63      	ldr	r2, [pc, #396]	@ (80090e4 <HAL_GPIO_DeInit+0x1ec>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d037      	beq.n	8008fca <HAL_GPIO_DeInit+0xd2>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a62      	ldr	r2, [pc, #392]	@ (80090e8 <HAL_GPIO_DeInit+0x1f0>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d031      	beq.n	8008fc6 <HAL_GPIO_DeInit+0xce>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a61      	ldr	r2, [pc, #388]	@ (80090ec <HAL_GPIO_DeInit+0x1f4>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d02b      	beq.n	8008fc2 <HAL_GPIO_DeInit+0xca>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a60      	ldr	r2, [pc, #384]	@ (80090f0 <HAL_GPIO_DeInit+0x1f8>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d025      	beq.n	8008fbe <HAL_GPIO_DeInit+0xc6>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a5f      	ldr	r2, [pc, #380]	@ (80090f4 <HAL_GPIO_DeInit+0x1fc>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d01f      	beq.n	8008fba <HAL_GPIO_DeInit+0xc2>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a5e      	ldr	r2, [pc, #376]	@ (80090f8 <HAL_GPIO_DeInit+0x200>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d019      	beq.n	8008fb6 <HAL_GPIO_DeInit+0xbe>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a5d      	ldr	r2, [pc, #372]	@ (80090fc <HAL_GPIO_DeInit+0x204>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d013      	beq.n	8008fb2 <HAL_GPIO_DeInit+0xba>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a5c      	ldr	r2, [pc, #368]	@ (8009100 <HAL_GPIO_DeInit+0x208>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d00d      	beq.n	8008fae <HAL_GPIO_DeInit+0xb6>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a5b      	ldr	r2, [pc, #364]	@ (8009104 <HAL_GPIO_DeInit+0x20c>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d007      	beq.n	8008faa <HAL_GPIO_DeInit+0xb2>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a5a      	ldr	r2, [pc, #360]	@ (8009108 <HAL_GPIO_DeInit+0x210>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d101      	bne.n	8008fa6 <HAL_GPIO_DeInit+0xae>
 8008fa2:	2309      	movs	r3, #9
 8008fa4:	e012      	b.n	8008fcc <HAL_GPIO_DeInit+0xd4>
 8008fa6:	230a      	movs	r3, #10
 8008fa8:	e010      	b.n	8008fcc <HAL_GPIO_DeInit+0xd4>
 8008faa:	2308      	movs	r3, #8
 8008fac:	e00e      	b.n	8008fcc <HAL_GPIO_DeInit+0xd4>
 8008fae:	2307      	movs	r3, #7
 8008fb0:	e00c      	b.n	8008fcc <HAL_GPIO_DeInit+0xd4>
 8008fb2:	2306      	movs	r3, #6
 8008fb4:	e00a      	b.n	8008fcc <HAL_GPIO_DeInit+0xd4>
 8008fb6:	2305      	movs	r3, #5
 8008fb8:	e008      	b.n	8008fcc <HAL_GPIO_DeInit+0xd4>
 8008fba:	2304      	movs	r3, #4
 8008fbc:	e006      	b.n	8008fcc <HAL_GPIO_DeInit+0xd4>
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	e004      	b.n	8008fcc <HAL_GPIO_DeInit+0xd4>
 8008fc2:	2302      	movs	r3, #2
 8008fc4:	e002      	b.n	8008fcc <HAL_GPIO_DeInit+0xd4>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e000      	b.n	8008fcc <HAL_GPIO_DeInit+0xd4>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	697a      	ldr	r2, [r7, #20]
 8008fce:	f002 0203 	and.w	r2, r2, #3
 8008fd2:	0092      	lsls	r2, r2, #2
 8008fd4:	4093      	lsls	r3, r2
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d132      	bne.n	8009042 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008fdc:	4b4b      	ldr	r3, [pc, #300]	@ (800910c <HAL_GPIO_DeInit+0x214>)
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	43db      	mvns	r3, r3
 8008fe4:	4949      	ldr	r1, [pc, #292]	@ (800910c <HAL_GPIO_DeInit+0x214>)
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008fea:	4b48      	ldr	r3, [pc, #288]	@ (800910c <HAL_GPIO_DeInit+0x214>)
 8008fec:	685a      	ldr	r2, [r3, #4]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	43db      	mvns	r3, r3
 8008ff2:	4946      	ldr	r1, [pc, #280]	@ (800910c <HAL_GPIO_DeInit+0x214>)
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008ff8:	4b44      	ldr	r3, [pc, #272]	@ (800910c <HAL_GPIO_DeInit+0x214>)
 8008ffa:	68da      	ldr	r2, [r3, #12]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	43db      	mvns	r3, r3
 8009000:	4942      	ldr	r1, [pc, #264]	@ (800910c <HAL_GPIO_DeInit+0x214>)
 8009002:	4013      	ands	r3, r2
 8009004:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009006:	4b41      	ldr	r3, [pc, #260]	@ (800910c <HAL_GPIO_DeInit+0x214>)
 8009008:	689a      	ldr	r2, [r3, #8]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	43db      	mvns	r3, r3
 800900e:	493f      	ldr	r1, [pc, #252]	@ (800910c <HAL_GPIO_DeInit+0x214>)
 8009010:	4013      	ands	r3, r2
 8009012:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	f003 0303 	and.w	r3, r3, #3
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	220f      	movs	r2, #15
 800901e:	fa02 f303 	lsl.w	r3, r2, r3
 8009022:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8009024:	4a2e      	ldr	r2, [pc, #184]	@ (80090e0 <HAL_GPIO_DeInit+0x1e8>)
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	089b      	lsrs	r3, r3, #2
 800902a:	3302      	adds	r3, #2
 800902c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	43da      	mvns	r2, r3
 8009034:	482a      	ldr	r0, [pc, #168]	@ (80090e0 <HAL_GPIO_DeInit+0x1e8>)
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	089b      	lsrs	r3, r3, #2
 800903a:	400a      	ands	r2, r1
 800903c:	3302      	adds	r3, #2
 800903e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	005b      	lsls	r3, r3, #1
 800904a:	2103      	movs	r1, #3
 800904c:	fa01 f303 	lsl.w	r3, r1, r3
 8009050:	43db      	mvns	r3, r3
 8009052:	401a      	ands	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	08da      	lsrs	r2, r3, #3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	3208      	adds	r2, #8
 8009060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	f003 0307 	and.w	r3, r3, #7
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	220f      	movs	r2, #15
 800906e:	fa02 f303 	lsl.w	r3, r2, r3
 8009072:	43db      	mvns	r3, r3
 8009074:	697a      	ldr	r2, [r7, #20]
 8009076:	08d2      	lsrs	r2, r2, #3
 8009078:	4019      	ands	r1, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	3208      	adds	r2, #8
 800907e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68da      	ldr	r2, [r3, #12]
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	005b      	lsls	r3, r3, #1
 800908a:	2103      	movs	r1, #3
 800908c:	fa01 f303 	lsl.w	r3, r1, r3
 8009090:	43db      	mvns	r3, r3
 8009092:	401a      	ands	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	2101      	movs	r1, #1
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	fa01 f303 	lsl.w	r3, r1, r3
 80090a4:	43db      	mvns	r3, r3
 80090a6:	401a      	ands	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	689a      	ldr	r2, [r3, #8]
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	005b      	lsls	r3, r3, #1
 80090b4:	2103      	movs	r1, #3
 80090b6:	fa01 f303 	lsl.w	r3, r1, r3
 80090ba:	43db      	mvns	r3, r3
 80090bc:	401a      	ands	r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	3301      	adds	r3, #1
 80090c6:	617b      	str	r3, [r7, #20]
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	2b0f      	cmp	r3, #15
 80090cc:	f67f af22 	bls.w	8008f14 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80090d0:	bf00      	nop
 80090d2:	bf00      	nop
 80090d4:	371c      	adds	r7, #28
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	40013800 	.word	0x40013800
 80090e4:	40020000 	.word	0x40020000
 80090e8:	40020400 	.word	0x40020400
 80090ec:	40020800 	.word	0x40020800
 80090f0:	40020c00 	.word	0x40020c00
 80090f4:	40021000 	.word	0x40021000
 80090f8:	40021400 	.word	0x40021400
 80090fc:	40021800 	.word	0x40021800
 8009100:	40021c00 	.word	0x40021c00
 8009104:	40022000 	.word	0x40022000
 8009108:	40022400 	.word	0x40022400
 800910c:	40013c00 	.word	0x40013c00

08009110 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	691a      	ldr	r2, [r3, #16]
 8009120:	887b      	ldrh	r3, [r7, #2]
 8009122:	4013      	ands	r3, r2
 8009124:	2b00      	cmp	r3, #0
 8009126:	d002      	beq.n	800912e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009128:	2301      	movs	r3, #1
 800912a:	73fb      	strb	r3, [r7, #15]
 800912c:	e001      	b.n	8009132 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800912e:	2300      	movs	r3, #0
 8009130:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009132:	7bfb      	ldrb	r3, [r7, #15]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	460b      	mov	r3, r1
 800914a:	807b      	strh	r3, [r7, #2]
 800914c:	4613      	mov	r3, r2
 800914e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009150:	787b      	ldrb	r3, [r7, #1]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d003      	beq.n	800915e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009156:	887a      	ldrh	r2, [r7, #2]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800915c:	e003      	b.n	8009166 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800915e:	887b      	ldrh	r3, [r7, #2]
 8009160:	041a      	lsls	r2, r3, #16
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	619a      	str	r2, [r3, #24]
}
 8009166:	bf00      	nop
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
	...

08009174 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d101      	bne.n	8009186 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e07f      	b.n	8009286 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d106      	bne.n	80091a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f8a9 	bl	80092f2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2224      	movs	r2, #36	@ 0x24
 80091a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f022 0201 	bic.w	r2, r2, #1
 80091b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80091c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	689a      	ldr	r2, [r3, #8]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80091d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d107      	bne.n	80091ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	689a      	ldr	r2, [r3, #8]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80091ea:	609a      	str	r2, [r3, #8]
 80091ec:	e006      	b.n	80091fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	689a      	ldr	r2, [r3, #8]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80091fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	2b02      	cmp	r3, #2
 8009202:	d104      	bne.n	800920e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800920c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	6859      	ldr	r1, [r3, #4]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	4b1d      	ldr	r3, [pc, #116]	@ (8009290 <HAL_I2C_Init+0x11c>)
 800921a:	430b      	orrs	r3, r1
 800921c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68da      	ldr	r2, [r3, #12]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800922c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	691a      	ldr	r2, [r3, #16]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	695b      	ldr	r3, [r3, #20]
 8009236:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	430a      	orrs	r2, r1
 8009246:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	69d9      	ldr	r1, [r3, #28]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a1a      	ldr	r2, [r3, #32]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	430a      	orrs	r2, r1
 8009256:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f042 0201 	orr.w	r2, r2, #1
 8009266:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2220      	movs	r2, #32
 8009272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	02008000 	.word	0x02008000

08009294 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e021      	b.n	80092ea <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2224      	movs	r2, #36	@ 0x24
 80092aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f022 0201 	bic.w	r2, r2, #1
 80092bc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f821 	bl	8009306 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80092e8:	2300      	movs	r3, #0
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80092f2:	b480      	push	{r7}
 80092f4:	b083      	sub	sp, #12
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80092fa:	bf00      	nop
 80092fc:	370c      	adds	r7, #12
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009306:	b480      	push	{r7}
 8009308:	b083      	sub	sp, #12
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800930e:	bf00      	nop
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
	...

0800931c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b088      	sub	sp, #32
 8009320:	af02      	add	r7, sp, #8
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	4608      	mov	r0, r1
 8009326:	4611      	mov	r1, r2
 8009328:	461a      	mov	r2, r3
 800932a:	4603      	mov	r3, r0
 800932c:	817b      	strh	r3, [r7, #10]
 800932e:	460b      	mov	r3, r1
 8009330:	813b      	strh	r3, [r7, #8]
 8009332:	4613      	mov	r3, r2
 8009334:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800933c:	b2db      	uxtb	r3, r3
 800933e:	2b20      	cmp	r3, #32
 8009340:	f040 80f9 	bne.w	8009536 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d002      	beq.n	8009350 <HAL_I2C_Mem_Write+0x34>
 800934a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800934c:	2b00      	cmp	r3, #0
 800934e:	d105      	bne.n	800935c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009356:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	e0ed      	b.n	8009538 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009362:	2b01      	cmp	r3, #1
 8009364:	d101      	bne.n	800936a <HAL_I2C_Mem_Write+0x4e>
 8009366:	2302      	movs	r3, #2
 8009368:	e0e6      	b.n	8009538 <HAL_I2C_Mem_Write+0x21c>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2201      	movs	r2, #1
 800936e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009372:	f7fe f96f 	bl	8007654 <HAL_GetTick>
 8009376:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	2319      	movs	r3, #25
 800937e:	2201      	movs	r2, #1
 8009380:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	f000 fad1 	bl	800992c <I2C_WaitOnFlagUntilTimeout>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d001      	beq.n	8009394 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	e0d1      	b.n	8009538 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2221      	movs	r2, #33	@ 0x21
 8009398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2240      	movs	r2, #64	@ 0x40
 80093a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6a3a      	ldr	r2, [r7, #32]
 80093ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80093b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2200      	movs	r2, #0
 80093ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80093bc:	88f8      	ldrh	r0, [r7, #6]
 80093be:	893a      	ldrh	r2, [r7, #8]
 80093c0:	8979      	ldrh	r1, [r7, #10]
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	9301      	str	r3, [sp, #4]
 80093c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	4603      	mov	r3, r0
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f000 f9e1 	bl	8009794 <I2C_RequestMemoryWrite>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d005      	beq.n	80093e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e0a9      	b.n	8009538 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	2bff      	cmp	r3, #255	@ 0xff
 80093ec:	d90e      	bls.n	800940c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	22ff      	movs	r2, #255	@ 0xff
 80093f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	8979      	ldrh	r1, [r7, #10]
 80093fc:	2300      	movs	r3, #0
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 fc2d 	bl	8009c64 <I2C_TransferConfig>
 800940a:	e00f      	b.n	800942c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009410:	b29a      	uxth	r2, r3
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800941a:	b2da      	uxtb	r2, r3
 800941c:	8979      	ldrh	r1, [r7, #10]
 800941e:	2300      	movs	r3, #0
 8009420:	9300      	str	r3, [sp, #0]
 8009422:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f000 fc1c 	bl	8009c64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f000 fabb 	bl	80099ac <I2C_WaitOnTXISFlagUntilTimeout>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d001      	beq.n	8009440 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e07b      	b.n	8009538 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009444:	781a      	ldrb	r2, [r3, #0]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009450:	1c5a      	adds	r2, r3, #1
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800945a:	b29b      	uxth	r3, r3
 800945c:	3b01      	subs	r3, #1
 800945e:	b29a      	uxth	r2, r3
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009468:	3b01      	subs	r3, #1
 800946a:	b29a      	uxth	r2, r3
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009474:	b29b      	uxth	r3, r3
 8009476:	2b00      	cmp	r3, #0
 8009478:	d034      	beq.n	80094e4 <HAL_I2C_Mem_Write+0x1c8>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800947e:	2b00      	cmp	r3, #0
 8009480:	d130      	bne.n	80094e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009488:	2200      	movs	r2, #0
 800948a:	2180      	movs	r1, #128	@ 0x80
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f000 fa4d 	bl	800992c <I2C_WaitOnFlagUntilTimeout>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d001      	beq.n	800949c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	e04d      	b.n	8009538 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	2bff      	cmp	r3, #255	@ 0xff
 80094a4:	d90e      	bls.n	80094c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	22ff      	movs	r2, #255	@ 0xff
 80094aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094b0:	b2da      	uxtb	r2, r3
 80094b2:	8979      	ldrh	r1, [r7, #10]
 80094b4:	2300      	movs	r3, #0
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f000 fbd1 	bl	8009c64 <I2C_TransferConfig>
 80094c2:	e00f      	b.n	80094e4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094d2:	b2da      	uxtb	r2, r3
 80094d4:	8979      	ldrh	r1, [r7, #10]
 80094d6:	2300      	movs	r3, #0
 80094d8:	9300      	str	r3, [sp, #0]
 80094da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f000 fbc0 	bl	8009c64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d19e      	bne.n	800942c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094ee:	697a      	ldr	r2, [r7, #20]
 80094f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f000 fa9a 	bl	8009a2c <I2C_WaitOnSTOPFlagUntilTimeout>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d001      	beq.n	8009502 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	e01a      	b.n	8009538 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2220      	movs	r2, #32
 8009508:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	6859      	ldr	r1, [r3, #4]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	4b0a      	ldr	r3, [pc, #40]	@ (8009540 <HAL_I2C_Mem_Write+0x224>)
 8009516:	400b      	ands	r3, r1
 8009518:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2220      	movs	r2, #32
 800951e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	e000      	b.n	8009538 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009536:	2302      	movs	r3, #2
  }
}
 8009538:	4618      	mov	r0, r3
 800953a:	3718      	adds	r7, #24
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	fe00e800 	.word	0xfe00e800

08009544 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b088      	sub	sp, #32
 8009548:	af02      	add	r7, sp, #8
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	4608      	mov	r0, r1
 800954e:	4611      	mov	r1, r2
 8009550:	461a      	mov	r2, r3
 8009552:	4603      	mov	r3, r0
 8009554:	817b      	strh	r3, [r7, #10]
 8009556:	460b      	mov	r3, r1
 8009558:	813b      	strh	r3, [r7, #8]
 800955a:	4613      	mov	r3, r2
 800955c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b20      	cmp	r3, #32
 8009568:	f040 80fd 	bne.w	8009766 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800956c:	6a3b      	ldr	r3, [r7, #32]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d002      	beq.n	8009578 <HAL_I2C_Mem_Read+0x34>
 8009572:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009574:	2b00      	cmp	r3, #0
 8009576:	d105      	bne.n	8009584 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800957e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e0f1      	b.n	8009768 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800958a:	2b01      	cmp	r3, #1
 800958c:	d101      	bne.n	8009592 <HAL_I2C_Mem_Read+0x4e>
 800958e:	2302      	movs	r3, #2
 8009590:	e0ea      	b.n	8009768 <HAL_I2C_Mem_Read+0x224>
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800959a:	f7fe f85b 	bl	8007654 <HAL_GetTick>
 800959e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	2319      	movs	r3, #25
 80095a6:	2201      	movs	r2, #1
 80095a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f000 f9bd 	bl	800992c <I2C_WaitOnFlagUntilTimeout>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	e0d5      	b.n	8009768 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2222      	movs	r2, #34	@ 0x22
 80095c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2240      	movs	r2, #64	@ 0x40
 80095c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6a3a      	ldr	r2, [r7, #32]
 80095d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80095dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2200      	movs	r2, #0
 80095e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80095e4:	88f8      	ldrh	r0, [r7, #6]
 80095e6:	893a      	ldrh	r2, [r7, #8]
 80095e8:	8979      	ldrh	r1, [r7, #10]
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	9301      	str	r3, [sp, #4]
 80095ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	4603      	mov	r3, r0
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f000 f921 	bl	800983c <I2C_RequestMemoryRead>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d005      	beq.n	800960c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2200      	movs	r2, #0
 8009604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	e0ad      	b.n	8009768 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009610:	b29b      	uxth	r3, r3
 8009612:	2bff      	cmp	r3, #255	@ 0xff
 8009614:	d90e      	bls.n	8009634 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	22ff      	movs	r2, #255	@ 0xff
 800961a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009620:	b2da      	uxtb	r2, r3
 8009622:	8979      	ldrh	r1, [r7, #10]
 8009624:	4b52      	ldr	r3, [pc, #328]	@ (8009770 <HAL_I2C_Mem_Read+0x22c>)
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f000 fb19 	bl	8009c64 <I2C_TransferConfig>
 8009632:	e00f      	b.n	8009654 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009638:	b29a      	uxth	r2, r3
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009642:	b2da      	uxtb	r2, r3
 8009644:	8979      	ldrh	r1, [r7, #10]
 8009646:	4b4a      	ldr	r3, [pc, #296]	@ (8009770 <HAL_I2C_Mem_Read+0x22c>)
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f000 fb08 	bl	8009c64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800965a:	2200      	movs	r2, #0
 800965c:	2104      	movs	r1, #4
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f000 f964 	bl	800992c <I2C_WaitOnFlagUntilTimeout>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e07c      	b.n	8009768 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009678:	b2d2      	uxtb	r2, r2
 800967a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009680:	1c5a      	adds	r2, r3, #1
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800968a:	3b01      	subs	r3, #1
 800968c:	b29a      	uxth	r2, r3
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009696:	b29b      	uxth	r3, r3
 8009698:	3b01      	subs	r3, #1
 800969a:	b29a      	uxth	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d034      	beq.n	8009714 <HAL_I2C_Mem_Read+0x1d0>
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d130      	bne.n	8009714 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b8:	2200      	movs	r2, #0
 80096ba:	2180      	movs	r1, #128	@ 0x80
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f000 f935 	bl	800992c <I2C_WaitOnFlagUntilTimeout>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d001      	beq.n	80096cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	e04d      	b.n	8009768 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	2bff      	cmp	r3, #255	@ 0xff
 80096d4:	d90e      	bls.n	80096f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	22ff      	movs	r2, #255	@ 0xff
 80096da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096e0:	b2da      	uxtb	r2, r3
 80096e2:	8979      	ldrh	r1, [r7, #10]
 80096e4:	2300      	movs	r3, #0
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f000 fab9 	bl	8009c64 <I2C_TransferConfig>
 80096f2:	e00f      	b.n	8009714 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009702:	b2da      	uxtb	r2, r3
 8009704:	8979      	ldrh	r1, [r7, #10]
 8009706:	2300      	movs	r3, #0
 8009708:	9300      	str	r3, [sp, #0]
 800970a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f000 faa8 	bl	8009c64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009718:	b29b      	uxth	r3, r3
 800971a:	2b00      	cmp	r3, #0
 800971c:	d19a      	bne.n	8009654 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800971e:	697a      	ldr	r2, [r7, #20]
 8009720:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f000 f982 	bl	8009a2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d001      	beq.n	8009732 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e01a      	b.n	8009768 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2220      	movs	r2, #32
 8009738:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	6859      	ldr	r1, [r3, #4]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	4b0b      	ldr	r3, [pc, #44]	@ (8009774 <HAL_I2C_Mem_Read+0x230>)
 8009746:	400b      	ands	r3, r1
 8009748:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2220      	movs	r2, #32
 800974e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009762:	2300      	movs	r3, #0
 8009764:	e000      	b.n	8009768 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009766:	2302      	movs	r3, #2
  }
}
 8009768:	4618      	mov	r0, r3
 800976a:	3718      	adds	r7, #24
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	80002400 	.word	0x80002400
 8009774:	fe00e800 	.word	0xfe00e800

08009778 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009786:	b2db      	uxtb	r3, r3
}
 8009788:	4618      	mov	r0, r3
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b086      	sub	sp, #24
 8009798:	af02      	add	r7, sp, #8
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	4608      	mov	r0, r1
 800979e:	4611      	mov	r1, r2
 80097a0:	461a      	mov	r2, r3
 80097a2:	4603      	mov	r3, r0
 80097a4:	817b      	strh	r3, [r7, #10]
 80097a6:	460b      	mov	r3, r1
 80097a8:	813b      	strh	r3, [r7, #8]
 80097aa:	4613      	mov	r3, r2
 80097ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80097ae:	88fb      	ldrh	r3, [r7, #6]
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	8979      	ldrh	r1, [r7, #10]
 80097b4:	4b20      	ldr	r3, [pc, #128]	@ (8009838 <I2C_RequestMemoryWrite+0xa4>)
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f000 fa51 	bl	8009c64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097c2:	69fa      	ldr	r2, [r7, #28]
 80097c4:	69b9      	ldr	r1, [r7, #24]
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f000 f8f0 	bl	80099ac <I2C_WaitOnTXISFlagUntilTimeout>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e02c      	b.n	8009830 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80097d6:	88fb      	ldrh	r3, [r7, #6]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d105      	bne.n	80097e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80097dc:	893b      	ldrh	r3, [r7, #8]
 80097de:	b2da      	uxtb	r2, r3
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80097e6:	e015      	b.n	8009814 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80097e8:	893b      	ldrh	r3, [r7, #8]
 80097ea:	0a1b      	lsrs	r3, r3, #8
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	b2da      	uxtb	r2, r3
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097f6:	69fa      	ldr	r2, [r7, #28]
 80097f8:	69b9      	ldr	r1, [r7, #24]
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f000 f8d6 	bl	80099ac <I2C_WaitOnTXISFlagUntilTimeout>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d001      	beq.n	800980a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	e012      	b.n	8009830 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800980a:	893b      	ldrh	r3, [r7, #8]
 800980c:	b2da      	uxtb	r2, r3
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	9300      	str	r3, [sp, #0]
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	2200      	movs	r2, #0
 800981c:	2180      	movs	r1, #128	@ 0x80
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f000 f884 	bl	800992c <I2C_WaitOnFlagUntilTimeout>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d001      	beq.n	800982e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800982a:	2301      	movs	r3, #1
 800982c:	e000      	b.n	8009830 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	4618      	mov	r0, r3
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	80002000 	.word	0x80002000

0800983c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b086      	sub	sp, #24
 8009840:	af02      	add	r7, sp, #8
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	4608      	mov	r0, r1
 8009846:	4611      	mov	r1, r2
 8009848:	461a      	mov	r2, r3
 800984a:	4603      	mov	r3, r0
 800984c:	817b      	strh	r3, [r7, #10]
 800984e:	460b      	mov	r3, r1
 8009850:	813b      	strh	r3, [r7, #8]
 8009852:	4613      	mov	r3, r2
 8009854:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009856:	88fb      	ldrh	r3, [r7, #6]
 8009858:	b2da      	uxtb	r2, r3
 800985a:	8979      	ldrh	r1, [r7, #10]
 800985c:	4b20      	ldr	r3, [pc, #128]	@ (80098e0 <I2C_RequestMemoryRead+0xa4>)
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	2300      	movs	r3, #0
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f000 f9fe 	bl	8009c64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009868:	69fa      	ldr	r2, [r7, #28]
 800986a:	69b9      	ldr	r1, [r7, #24]
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f000 f89d 	bl	80099ac <I2C_WaitOnTXISFlagUntilTimeout>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e02c      	b.n	80098d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800987c:	88fb      	ldrh	r3, [r7, #6]
 800987e:	2b01      	cmp	r3, #1
 8009880:	d105      	bne.n	800988e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009882:	893b      	ldrh	r3, [r7, #8]
 8009884:	b2da      	uxtb	r2, r3
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	629a      	str	r2, [r3, #40]	@ 0x28
 800988c:	e015      	b.n	80098ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800988e:	893b      	ldrh	r3, [r7, #8]
 8009890:	0a1b      	lsrs	r3, r3, #8
 8009892:	b29b      	uxth	r3, r3
 8009894:	b2da      	uxtb	r2, r3
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800989c:	69fa      	ldr	r2, [r7, #28]
 800989e:	69b9      	ldr	r1, [r7, #24]
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f000 f883 	bl	80099ac <I2C_WaitOnTXISFlagUntilTimeout>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d001      	beq.n	80098b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	e012      	b.n	80098d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80098b0:	893b      	ldrh	r3, [r7, #8]
 80098b2:	b2da      	uxtb	r2, r3
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	2200      	movs	r2, #0
 80098c2:	2140      	movs	r1, #64	@ 0x40
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f000 f831 	bl	800992c <I2C_WaitOnFlagUntilTimeout>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d001      	beq.n	80098d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	e000      	b.n	80098d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	80002000 	.word	0x80002000

080098e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	699b      	ldr	r3, [r3, #24]
 80098f2:	f003 0302 	and.w	r3, r3, #2
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d103      	bne.n	8009902 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2200      	movs	r2, #0
 8009900:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	f003 0301 	and.w	r3, r3, #1
 800990c:	2b01      	cmp	r3, #1
 800990e:	d007      	beq.n	8009920 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	699a      	ldr	r2, [r3, #24]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f042 0201 	orr.w	r2, r2, #1
 800991e:	619a      	str	r2, [r3, #24]
  }
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	603b      	str	r3, [r7, #0]
 8009938:	4613      	mov	r3, r2
 800993a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800993c:	e022      	b.n	8009984 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009944:	d01e      	beq.n	8009984 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009946:	f7fd fe85 	bl	8007654 <HAL_GetTick>
 800994a:	4602      	mov	r2, r0
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	1ad3      	subs	r3, r2, r3
 8009950:	683a      	ldr	r2, [r7, #0]
 8009952:	429a      	cmp	r2, r3
 8009954:	d302      	bcc.n	800995c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d113      	bne.n	8009984 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009960:	f043 0220 	orr.w	r2, r3, #32
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2220      	movs	r2, #32
 800996c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	e00f      	b.n	80099a4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	699a      	ldr	r2, [r3, #24]
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	4013      	ands	r3, r2
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	429a      	cmp	r2, r3
 8009992:	bf0c      	ite	eq
 8009994:	2301      	moveq	r3, #1
 8009996:	2300      	movne	r3, #0
 8009998:	b2db      	uxtb	r3, r3
 800999a:	461a      	mov	r2, r3
 800999c:	79fb      	ldrb	r3, [r7, #7]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d0cd      	beq.n	800993e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80099b8:	e02c      	b.n	8009a14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	68b9      	ldr	r1, [r7, #8]
 80099be:	68f8      	ldr	r0, [r7, #12]
 80099c0:	f000 f870 	bl	8009aa4 <I2C_IsErrorOccurred>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d001      	beq.n	80099ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	e02a      	b.n	8009a24 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099d4:	d01e      	beq.n	8009a14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099d6:	f7fd fe3d 	bl	8007654 <HAL_GetTick>
 80099da:	4602      	mov	r2, r0
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	1ad3      	subs	r3, r2, r3
 80099e0:	68ba      	ldr	r2, [r7, #8]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d302      	bcc.n	80099ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d113      	bne.n	8009a14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099f0:	f043 0220 	orr.w	r2, r3, #32
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2220      	movs	r2, #32
 80099fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	e007      	b.n	8009a24 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	f003 0302 	and.w	r3, r3, #2
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	d1cb      	bne.n	80099ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3710      	adds	r7, #16
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a38:	e028      	b.n	8009a8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	68b9      	ldr	r1, [r7, #8]
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f000 f830 	bl	8009aa4 <I2C_IsErrorOccurred>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e026      	b.n	8009a9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a4e:	f7fd fe01 	bl	8007654 <HAL_GetTick>
 8009a52:	4602      	mov	r2, r0
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	68ba      	ldr	r2, [r7, #8]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d302      	bcc.n	8009a64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d113      	bne.n	8009a8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a68:	f043 0220 	orr.w	r2, r3, #32
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2220      	movs	r2, #32
 8009a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e007      	b.n	8009a9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	699b      	ldr	r3, [r3, #24]
 8009a92:	f003 0320 	and.w	r3, r3, #32
 8009a96:	2b20      	cmp	r3, #32
 8009a98:	d1cf      	bne.n	8009a3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3710      	adds	r7, #16
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b08a      	sub	sp, #40	@ 0x28
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	f003 0310 	and.w	r3, r3, #16
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d068      	beq.n	8009ba2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2210      	movs	r2, #16
 8009ad6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009ad8:	e049      	b.n	8009b6e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ae0:	d045      	beq.n	8009b6e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009ae2:	f7fd fdb7 	bl	8007654 <HAL_GetTick>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	1ad3      	subs	r3, r2, r3
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d302      	bcc.n	8009af8 <I2C_IsErrorOccurred+0x54>
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d13a      	bne.n	8009b6e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009b0a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	699b      	ldr	r3, [r3, #24]
 8009b12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b1a:	d121      	bne.n	8009b60 <I2C_IsErrorOccurred+0xbc>
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b22:	d01d      	beq.n	8009b60 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009b24:	7cfb      	ldrb	r3, [r7, #19]
 8009b26:	2b20      	cmp	r3, #32
 8009b28:	d01a      	beq.n	8009b60 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	685a      	ldr	r2, [r3, #4]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009b38:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009b3a:	f7fd fd8b 	bl	8007654 <HAL_GetTick>
 8009b3e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b40:	e00e      	b.n	8009b60 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009b42:	f7fd fd87 	bl	8007654 <HAL_GetTick>
 8009b46:	4602      	mov	r2, r0
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	2b19      	cmp	r3, #25
 8009b4e:	d907      	bls.n	8009b60 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8009b50:	6a3b      	ldr	r3, [r7, #32]
 8009b52:	f043 0320 	orr.w	r3, r3, #32
 8009b56:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009b5e:	e006      	b.n	8009b6e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	699b      	ldr	r3, [r3, #24]
 8009b66:	f003 0320 	and.w	r3, r3, #32
 8009b6a:	2b20      	cmp	r3, #32
 8009b6c:	d1e9      	bne.n	8009b42 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	699b      	ldr	r3, [r3, #24]
 8009b74:	f003 0320 	and.w	r3, r3, #32
 8009b78:	2b20      	cmp	r3, #32
 8009b7a:	d003      	beq.n	8009b84 <I2C_IsErrorOccurred+0xe0>
 8009b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d0aa      	beq.n	8009ada <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009b84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d103      	bne.n	8009b94 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2220      	movs	r2, #32
 8009b92:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009b94:	6a3b      	ldr	r3, [r7, #32]
 8009b96:	f043 0304 	orr.w	r3, r3, #4
 8009b9a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	699b      	ldr	r3, [r3, #24]
 8009ba8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00b      	beq.n	8009bcc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	f043 0301 	orr.w	r3, r3, #1
 8009bba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009bc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00b      	beq.n	8009bee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009bd6:	6a3b      	ldr	r3, [r7, #32]
 8009bd8:	f043 0308 	orr.w	r3, r3, #8
 8009bdc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009be6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00b      	beq.n	8009c10 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009bf8:	6a3b      	ldr	r3, [r7, #32]
 8009bfa:	f043 0302 	orr.w	r3, r3, #2
 8009bfe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009c10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d01c      	beq.n	8009c52 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	f7ff fe63 	bl	80098e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	6859      	ldr	r1, [r3, #4]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	4b0d      	ldr	r3, [pc, #52]	@ (8009c60 <I2C_IsErrorOccurred+0x1bc>)
 8009c2a:	400b      	ands	r3, r1
 8009c2c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c32:	6a3b      	ldr	r3, [r7, #32]
 8009c34:	431a      	orrs	r2, r3
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2220      	movs	r2, #32
 8009c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009c52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3728      	adds	r7, #40	@ 0x28
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	fe00e800 	.word	0xfe00e800

08009c64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b087      	sub	sp, #28
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	607b      	str	r3, [r7, #4]
 8009c6e:	460b      	mov	r3, r1
 8009c70:	817b      	strh	r3, [r7, #10]
 8009c72:	4613      	mov	r3, r2
 8009c74:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c76:	897b      	ldrh	r3, [r7, #10]
 8009c78:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c7c:	7a7b      	ldrb	r3, [r7, #9]
 8009c7e:	041b      	lsls	r3, r3, #16
 8009c80:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c84:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c8a:	6a3b      	ldr	r3, [r7, #32]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c92:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	685a      	ldr	r2, [r3, #4]
 8009c9a:	6a3b      	ldr	r3, [r7, #32]
 8009c9c:	0d5b      	lsrs	r3, r3, #21
 8009c9e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009ca2:	4b08      	ldr	r3, [pc, #32]	@ (8009cc4 <I2C_TransferConfig+0x60>)
 8009ca4:	430b      	orrs	r3, r1
 8009ca6:	43db      	mvns	r3, r3
 8009ca8:	ea02 0103 	and.w	r1, r2, r3
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	697a      	ldr	r2, [r7, #20]
 8009cb2:	430a      	orrs	r2, r1
 8009cb4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009cb6:	bf00      	nop
 8009cb8:	371c      	adds	r7, #28
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	03ff63ff 	.word	0x03ff63ff

08009cc8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d101      	bne.n	8009cda <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e0bf      	b.n	8009e5a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d106      	bne.n	8009cf4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f7fb fa66 	bl	80051c0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	699a      	ldr	r2, [r3, #24]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009d0a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	6999      	ldr	r1, [r3, #24]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	685a      	ldr	r2, [r3, #4]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009d20:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	430a      	orrs	r2, r1
 8009d2e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	6899      	ldr	r1, [r3, #8]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8009e64 <HAL_LTDC_Init+0x19c>)
 8009d3c:	400b      	ands	r3, r1
 8009d3e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	695b      	ldr	r3, [r3, #20]
 8009d44:	041b      	lsls	r3, r3, #16
 8009d46:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	6899      	ldr	r1, [r3, #8]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	699a      	ldr	r2, [r3, #24]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	431a      	orrs	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	430a      	orrs	r2, r1
 8009d5c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	68d9      	ldr	r1, [r3, #12]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	4b3e      	ldr	r3, [pc, #248]	@ (8009e64 <HAL_LTDC_Init+0x19c>)
 8009d6a:	400b      	ands	r3, r1
 8009d6c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	69db      	ldr	r3, [r3, #28]
 8009d72:	041b      	lsls	r3, r3, #16
 8009d74:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	68d9      	ldr	r1, [r3, #12]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a1a      	ldr	r2, [r3, #32]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	431a      	orrs	r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	430a      	orrs	r2, r1
 8009d8a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	6919      	ldr	r1, [r3, #16]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	4b33      	ldr	r3, [pc, #204]	@ (8009e64 <HAL_LTDC_Init+0x19c>)
 8009d98:	400b      	ands	r3, r1
 8009d9a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da0:	041b      	lsls	r3, r3, #16
 8009da2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	6919      	ldr	r1, [r3, #16]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	431a      	orrs	r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	430a      	orrs	r2, r1
 8009db8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	6959      	ldr	r1, [r3, #20]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	4b27      	ldr	r3, [pc, #156]	@ (8009e64 <HAL_LTDC_Init+0x19c>)
 8009dc6:	400b      	ands	r3, r1
 8009dc8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dce:	041b      	lsls	r3, r3, #16
 8009dd0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	6959      	ldr	r1, [r3, #20]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	431a      	orrs	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	430a      	orrs	r2, r1
 8009de6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009dee:	021b      	lsls	r3, r3, #8
 8009df0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009df8:	041b      	lsls	r3, r3, #16
 8009dfa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	4313      	orrs	r3, r2
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8009e1e:	431a      	orrs	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	430a      	orrs	r2, r1
 8009e26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f042 0206 	orr.w	r2, r2, #6
 8009e36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	699a      	ldr	r2, [r3, #24]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f042 0201 	orr.w	r2, r2, #1
 8009e46:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	f000f800 	.word	0xf000f800

08009e68 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e76:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e7e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f003 0304 	and.w	r3, r3, #4
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d023      	beq.n	8009ed2 <HAL_LTDC_IRQHandler+0x6a>
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	f003 0304 	and.w	r3, r3, #4
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d01e      	beq.n	8009ed2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f022 0204 	bic.w	r2, r2, #4
 8009ea2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2204      	movs	r2, #4
 8009eaa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009eb2:	f043 0201 	orr.w	r2, r3, #1
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2204      	movs	r2, #4
 8009ec0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 f86f 	bl	8009fb0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f003 0302 	and.w	r3, r3, #2
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d023      	beq.n	8009f24 <HAL_LTDC_IRQHandler+0xbc>
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	f003 0302 	and.w	r3, r3, #2
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d01e      	beq.n	8009f24 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f022 0202 	bic.w	r2, r2, #2
 8009ef4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2202      	movs	r2, #2
 8009efc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f04:	f043 0202 	orr.w	r2, r3, #2
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2204      	movs	r2, #4
 8009f12:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f846 	bl	8009fb0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f003 0301 	and.w	r3, r3, #1
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d01b      	beq.n	8009f66 <HAL_LTDC_IRQHandler+0xfe>
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	f003 0301 	and.w	r3, r3, #1
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d016      	beq.n	8009f66 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f022 0201 	bic.w	r2, r2, #1
 8009f46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 f82f 	bl	8009fc4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f003 0308 	and.w	r3, r3, #8
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d01b      	beq.n	8009fa8 <HAL_LTDC_IRQHandler+0x140>
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	f003 0308 	and.w	r3, r3, #8
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d016      	beq.n	8009fa8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f022 0208 	bic.w	r2, r2, #8
 8009f88:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2208      	movs	r2, #8
 8009f90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2201      	movs	r2, #1
 8009f96:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 f818 	bl	8009fd8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009fa8:	bf00      	nop
 8009faa:	3710      	adds	r7, #16
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009fb8:	bf00      	nop
 8009fba:	370c      	adds	r7, #12
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009fcc:	bf00      	nop
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009fec:	b5b0      	push	{r4, r5, r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d101      	bne.n	800a006 <HAL_LTDC_ConfigLayer+0x1a>
 800a002:	2302      	movs	r3, #2
 800a004:	e02c      	b.n	800a060 <HAL_LTDC_ConfigLayer+0x74>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2201      	movs	r2, #1
 800a00a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2202      	movs	r2, #2
 800a012:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2134      	movs	r1, #52	@ 0x34
 800a01c:	fb01 f303 	mul.w	r3, r1, r3
 800a020:	4413      	add	r3, r2
 800a022:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	4614      	mov	r4, r2
 800a02a:	461d      	mov	r5, r3
 800a02c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a02e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a038:	682b      	ldr	r3, [r5, #0]
 800a03a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	68b9      	ldr	r1, [r7, #8]
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f000 f855 	bl	800a0f0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2201      	movs	r2, #1
 800a04c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2201      	movs	r2, #1
 800a052:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2200      	movs	r2, #0
 800a05a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bdb0      	pop	{r4, r5, r7, pc}

0800a068 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b086      	sub	sp, #24
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d101      	bne.n	800a082 <HAL_LTDC_SetAlpha+0x1a>
 800a07e:	2302      	movs	r3, #2
 800a080:	e024      	b.n	800a0cc <HAL_LTDC_SetAlpha+0x64>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2202      	movs	r2, #2
 800a08e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2234      	movs	r2, #52	@ 0x34
 800a096:	fb02 f303 	mul.w	r3, r2, r3
 800a09a:	3338      	adds	r3, #56	@ 0x38
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	4413      	add	r3, r2
 800a0a0:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	68ba      	ldr	r2, [r7, #8]
 800a0a6:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	6979      	ldr	r1, [r7, #20]
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f000 f81f 	bl	800a0f0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3718      	adds	r7, #24
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800a0e2:	b2db      	uxtb	r3, r3
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b089      	sub	sp, #36	@ 0x24
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	685a      	ldr	r2, [r3, #4]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	0c1b      	lsrs	r3, r3, #16
 800a108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a10c:	4413      	add	r3, r2
 800a10e:	041b      	lsls	r3, r3, #16
 800a110:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	461a      	mov	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	01db      	lsls	r3, r3, #7
 800a11c:	4413      	add	r3, r2
 800a11e:	3384      	adds	r3, #132	@ 0x84
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	6812      	ldr	r2, [r2, #0]
 800a126:	4611      	mov	r1, r2
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	01d2      	lsls	r2, r2, #7
 800a12c:	440a      	add	r2, r1
 800a12e:	3284      	adds	r2, #132	@ 0x84
 800a130:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a134:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	0c1b      	lsrs	r3, r3, #16
 800a142:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a146:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a148:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4619      	mov	r1, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	01db      	lsls	r3, r3, #7
 800a154:	440b      	add	r3, r1
 800a156:	3384      	adds	r3, #132	@ 0x84
 800a158:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a15e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	68da      	ldr	r2, [r3, #12]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a16e:	4413      	add	r3, r2
 800a170:	041b      	lsls	r3, r3, #16
 800a172:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	461a      	mov	r2, r3
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	01db      	lsls	r3, r3, #7
 800a17e:	4413      	add	r3, r2
 800a180:	3384      	adds	r3, #132	@ 0x84
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	6812      	ldr	r2, [r2, #0]
 800a188:	4611      	mov	r1, r2
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	01d2      	lsls	r2, r2, #7
 800a18e:	440a      	add	r2, r1
 800a190:	3284      	adds	r2, #132	@ 0x84
 800a192:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a196:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	689a      	ldr	r2, [r3, #8]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a1a6:	4413      	add	r3, r2
 800a1a8:	1c5a      	adds	r2, r3, #1
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	01db      	lsls	r3, r3, #7
 800a1b4:	440b      	add	r3, r1
 800a1b6:	3384      	adds	r3, #132	@ 0x84
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	01db      	lsls	r3, r3, #7
 800a1ca:	4413      	add	r3, r2
 800a1cc:	3384      	adds	r3, #132	@ 0x84
 800a1ce:	691b      	ldr	r3, [r3, #16]
 800a1d0:	68fa      	ldr	r2, [r7, #12]
 800a1d2:	6812      	ldr	r2, [r2, #0]
 800a1d4:	4611      	mov	r1, r2
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	01d2      	lsls	r2, r2, #7
 800a1da:	440a      	add	r2, r1
 800a1dc:	3284      	adds	r2, #132	@ 0x84
 800a1de:	f023 0307 	bic.w	r3, r3, #7
 800a1e2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	01db      	lsls	r3, r3, #7
 800a1ee:	4413      	add	r3, r2
 800a1f0:	3384      	adds	r3, #132	@ 0x84
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a200:	021b      	lsls	r3, r3, #8
 800a202:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a20a:	041b      	lsls	r3, r3, #16
 800a20c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	699b      	ldr	r3, [r3, #24]
 800a212:	061b      	lsls	r3, r3, #24
 800a214:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	461a      	mov	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	01db      	lsls	r3, r3, #7
 800a220:	4413      	add	r3, r2
 800a222:	3384      	adds	r3, #132	@ 0x84
 800a224:	699b      	ldr	r3, [r3, #24]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	461a      	mov	r2, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	01db      	lsls	r3, r3, #7
 800a230:	4413      	add	r3, r2
 800a232:	3384      	adds	r3, #132	@ 0x84
 800a234:	461a      	mov	r2, r3
 800a236:	2300      	movs	r3, #0
 800a238:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a240:	461a      	mov	r2, r3
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	431a      	orrs	r2, r3
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	431a      	orrs	r2, r3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4619      	mov	r1, r3
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	01db      	lsls	r3, r3, #7
 800a254:	440b      	add	r3, r1
 800a256:	3384      	adds	r3, #132	@ 0x84
 800a258:	4619      	mov	r1, r3
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	461a      	mov	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	01db      	lsls	r3, r3, #7
 800a26a:	4413      	add	r3, r2
 800a26c:	3384      	adds	r3, #132	@ 0x84
 800a26e:	695b      	ldr	r3, [r3, #20]
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	6812      	ldr	r2, [r2, #0]
 800a274:	4611      	mov	r1, r2
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	01d2      	lsls	r2, r2, #7
 800a27a:	440a      	add	r2, r1
 800a27c:	3284      	adds	r2, #132	@ 0x84
 800a27e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a282:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	461a      	mov	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	01db      	lsls	r3, r3, #7
 800a28e:	4413      	add	r3, r2
 800a290:	3384      	adds	r3, #132	@ 0x84
 800a292:	461a      	mov	r2, r3
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	461a      	mov	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	01db      	lsls	r3, r3, #7
 800a2a4:	4413      	add	r3, r2
 800a2a6:	3384      	adds	r3, #132	@ 0x84
 800a2a8:	69da      	ldr	r2, [r3, #28]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	01db      	lsls	r3, r3, #7
 800a2b4:	440b      	add	r3, r1
 800a2b6:	3384      	adds	r3, #132	@ 0x84
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	4b58      	ldr	r3, [pc, #352]	@ (800a41c <LTDC_SetConfig+0x32c>)
 800a2bc:	4013      	ands	r3, r2
 800a2be:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	69da      	ldr	r2, [r3, #28]
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	6a1b      	ldr	r3, [r3, #32]
 800a2c8:	68f9      	ldr	r1, [r7, #12]
 800a2ca:	6809      	ldr	r1, [r1, #0]
 800a2cc:	4608      	mov	r0, r1
 800a2ce:	6879      	ldr	r1, [r7, #4]
 800a2d0:	01c9      	lsls	r1, r1, #7
 800a2d2:	4401      	add	r1, r0
 800a2d4:	3184      	adds	r1, #132	@ 0x84
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	01db      	lsls	r3, r3, #7
 800a2e4:	4413      	add	r3, r2
 800a2e6:	3384      	adds	r3, #132	@ 0x84
 800a2e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	01db      	lsls	r3, r3, #7
 800a2f4:	4413      	add	r3, r2
 800a2f6:	3384      	adds	r3, #132	@ 0x84
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	461a      	mov	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	01db      	lsls	r3, r3, #7
 800a308:	4413      	add	r3, r2
 800a30a:	3384      	adds	r3, #132	@ 0x84
 800a30c:	461a      	mov	r2, r3
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a312:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d102      	bne.n	800a322 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a31c:	2304      	movs	r3, #4
 800a31e:	61fb      	str	r3, [r7, #28]
 800a320:	e01b      	b.n	800a35a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	2b01      	cmp	r3, #1
 800a328:	d102      	bne.n	800a330 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a32a:	2303      	movs	r3, #3
 800a32c:	61fb      	str	r3, [r7, #28]
 800a32e:	e014      	b.n	800a35a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	2b04      	cmp	r3, #4
 800a336:	d00b      	beq.n	800a350 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d007      	beq.n	800a350 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a344:	2b03      	cmp	r3, #3
 800a346:	d003      	beq.n	800a350 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a34c:	2b07      	cmp	r3, #7
 800a34e:	d102      	bne.n	800a356 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a350:	2302      	movs	r3, #2
 800a352:	61fb      	str	r3, [r7, #28]
 800a354:	e001      	b.n	800a35a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a356:	2301      	movs	r3, #1
 800a358:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	461a      	mov	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	01db      	lsls	r3, r3, #7
 800a364:	4413      	add	r3, r2
 800a366:	3384      	adds	r3, #132	@ 0x84
 800a368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a36a:	68fa      	ldr	r2, [r7, #12]
 800a36c:	6812      	ldr	r2, [r2, #0]
 800a36e:	4611      	mov	r1, r2
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	01d2      	lsls	r2, r2, #7
 800a374:	440a      	add	r2, r1
 800a376:	3284      	adds	r2, #132	@ 0x84
 800a378:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800a37c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a382:	69fa      	ldr	r2, [r7, #28]
 800a384:	fb02 f303 	mul.w	r3, r2, r3
 800a388:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	6859      	ldr	r1, [r3, #4]
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	1acb      	subs	r3, r1, r3
 800a394:	69f9      	ldr	r1, [r7, #28]
 800a396:	fb01 f303 	mul.w	r3, r1, r3
 800a39a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a39c:	68f9      	ldr	r1, [r7, #12]
 800a39e:	6809      	ldr	r1, [r1, #0]
 800a3a0:	4608      	mov	r0, r1
 800a3a2:	6879      	ldr	r1, [r7, #4]
 800a3a4:	01c9      	lsls	r1, r1, #7
 800a3a6:	4401      	add	r1, r0
 800a3a8:	3184      	adds	r1, #132	@ 0x84
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	01db      	lsls	r3, r3, #7
 800a3b8:	4413      	add	r3, r2
 800a3ba:	3384      	adds	r3, #132	@ 0x84
 800a3bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	01db      	lsls	r3, r3, #7
 800a3c8:	440b      	add	r3, r1
 800a3ca:	3384      	adds	r3, #132	@ 0x84
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	4b14      	ldr	r3, [pc, #80]	@ (800a420 <LTDC_SetConfig+0x330>)
 800a3d0:	4013      	ands	r3, r2
 800a3d2:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	461a      	mov	r2, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	01db      	lsls	r3, r3, #7
 800a3de:	4413      	add	r3, r2
 800a3e0:	3384      	adds	r3, #132	@ 0x84
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3e8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	01db      	lsls	r3, r3, #7
 800a3f4:	4413      	add	r3, r2
 800a3f6:	3384      	adds	r3, #132	@ 0x84
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	6812      	ldr	r2, [r2, #0]
 800a3fe:	4611      	mov	r1, r2
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	01d2      	lsls	r2, r2, #7
 800a404:	440a      	add	r2, r1
 800a406:	3284      	adds	r2, #132	@ 0x84
 800a408:	f043 0301 	orr.w	r3, r3, #1
 800a40c:	6013      	str	r3, [r2, #0]
}
 800a40e:	bf00      	nop
 800a410:	3724      	adds	r7, #36	@ 0x24
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	fffff8f8 	.word	0xfffff8f8
 800a420:	fffff800 	.word	0xfffff800

0800a424 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a424:	b480      	push	{r7}
 800a426:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a428:	4b05      	ldr	r3, [pc, #20]	@ (800a440 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a04      	ldr	r2, [pc, #16]	@ (800a440 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a42e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a432:	6013      	str	r3, [r2, #0]
}
 800a434:	bf00      	nop
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	40007000 	.word	0x40007000

0800a444 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a44a:	2300      	movs	r3, #0
 800a44c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a44e:	4b23      	ldr	r3, [pc, #140]	@ (800a4dc <HAL_PWREx_EnableOverDrive+0x98>)
 800a450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a452:	4a22      	ldr	r2, [pc, #136]	@ (800a4dc <HAL_PWREx_EnableOverDrive+0x98>)
 800a454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a458:	6413      	str	r3, [r2, #64]	@ 0x40
 800a45a:	4b20      	ldr	r3, [pc, #128]	@ (800a4dc <HAL_PWREx_EnableOverDrive+0x98>)
 800a45c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a45e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a462:	603b      	str	r3, [r7, #0]
 800a464:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a466:	4b1e      	ldr	r3, [pc, #120]	@ (800a4e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a1d      	ldr	r2, [pc, #116]	@ (800a4e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a46c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a470:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a472:	f7fd f8ef 	bl	8007654 <HAL_GetTick>
 800a476:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a478:	e009      	b.n	800a48e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a47a:	f7fd f8eb 	bl	8007654 <HAL_GetTick>
 800a47e:	4602      	mov	r2, r0
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	1ad3      	subs	r3, r2, r3
 800a484:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a488:	d901      	bls.n	800a48e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a48a:	2303      	movs	r3, #3
 800a48c:	e022      	b.n	800a4d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a48e:	4b14      	ldr	r3, [pc, #80]	@ (800a4e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a496:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a49a:	d1ee      	bne.n	800a47a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a49c:	4b10      	ldr	r3, [pc, #64]	@ (800a4e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a0f      	ldr	r2, [pc, #60]	@ (800a4e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a4a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a4a8:	f7fd f8d4 	bl	8007654 <HAL_GetTick>
 800a4ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a4ae:	e009      	b.n	800a4c4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a4b0:	f7fd f8d0 	bl	8007654 <HAL_GetTick>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a4be:	d901      	bls.n	800a4c4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a4c0:	2303      	movs	r3, #3
 800a4c2:	e007      	b.n	800a4d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a4c4:	4b06      	ldr	r3, [pc, #24]	@ (800a4e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4d0:	d1ee      	bne.n	800a4b0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	40023800 	.word	0x40023800
 800a4e0:	40007000 	.word	0x40007000

0800a4e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b086      	sub	sp, #24
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d101      	bne.n	800a4fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e291      	b.n	800aa1e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f003 0301 	and.w	r3, r3, #1
 800a502:	2b00      	cmp	r3, #0
 800a504:	f000 8087 	beq.w	800a616 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a508:	4b96      	ldr	r3, [pc, #600]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	f003 030c 	and.w	r3, r3, #12
 800a510:	2b04      	cmp	r3, #4
 800a512:	d00c      	beq.n	800a52e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a514:	4b93      	ldr	r3, [pc, #588]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	f003 030c 	and.w	r3, r3, #12
 800a51c:	2b08      	cmp	r3, #8
 800a51e:	d112      	bne.n	800a546 <HAL_RCC_OscConfig+0x62>
 800a520:	4b90      	ldr	r3, [pc, #576]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a528:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a52c:	d10b      	bne.n	800a546 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a52e:	4b8d      	ldr	r3, [pc, #564]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a536:	2b00      	cmp	r3, #0
 800a538:	d06c      	beq.n	800a614 <HAL_RCC_OscConfig+0x130>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d168      	bne.n	800a614 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	e26b      	b.n	800aa1e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a54e:	d106      	bne.n	800a55e <HAL_RCC_OscConfig+0x7a>
 800a550:	4b84      	ldr	r3, [pc, #528]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a83      	ldr	r2, [pc, #524]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a55a:	6013      	str	r3, [r2, #0]
 800a55c:	e02e      	b.n	800a5bc <HAL_RCC_OscConfig+0xd8>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d10c      	bne.n	800a580 <HAL_RCC_OscConfig+0x9c>
 800a566:	4b7f      	ldr	r3, [pc, #508]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a7e      	ldr	r2, [pc, #504]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a56c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a570:	6013      	str	r3, [r2, #0]
 800a572:	4b7c      	ldr	r3, [pc, #496]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a7b      	ldr	r2, [pc, #492]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a578:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a57c:	6013      	str	r3, [r2, #0]
 800a57e:	e01d      	b.n	800a5bc <HAL_RCC_OscConfig+0xd8>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a588:	d10c      	bne.n	800a5a4 <HAL_RCC_OscConfig+0xc0>
 800a58a:	4b76      	ldr	r3, [pc, #472]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a75      	ldr	r2, [pc, #468]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a594:	6013      	str	r3, [r2, #0]
 800a596:	4b73      	ldr	r3, [pc, #460]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a72      	ldr	r2, [pc, #456]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a59c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a5a0:	6013      	str	r3, [r2, #0]
 800a5a2:	e00b      	b.n	800a5bc <HAL_RCC_OscConfig+0xd8>
 800a5a4:	4b6f      	ldr	r3, [pc, #444]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a6e      	ldr	r2, [pc, #440]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a5aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5ae:	6013      	str	r3, [r2, #0]
 800a5b0:	4b6c      	ldr	r3, [pc, #432]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a6b      	ldr	r2, [pc, #428]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a5b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a5ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d013      	beq.n	800a5ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5c4:	f7fd f846 	bl	8007654 <HAL_GetTick>
 800a5c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a5ca:	e008      	b.n	800a5de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a5cc:	f7fd f842 	bl	8007654 <HAL_GetTick>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	2b64      	cmp	r3, #100	@ 0x64
 800a5d8:	d901      	bls.n	800a5de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a5da:	2303      	movs	r3, #3
 800a5dc:	e21f      	b.n	800aa1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a5de:	4b61      	ldr	r3, [pc, #388]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d0f0      	beq.n	800a5cc <HAL_RCC_OscConfig+0xe8>
 800a5ea:	e014      	b.n	800a616 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5ec:	f7fd f832 	bl	8007654 <HAL_GetTick>
 800a5f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a5f2:	e008      	b.n	800a606 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a5f4:	f7fd f82e 	bl	8007654 <HAL_GetTick>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	1ad3      	subs	r3, r2, r3
 800a5fe:	2b64      	cmp	r3, #100	@ 0x64
 800a600:	d901      	bls.n	800a606 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a602:	2303      	movs	r3, #3
 800a604:	e20b      	b.n	800aa1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a606:	4b57      	ldr	r3, [pc, #348]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d1f0      	bne.n	800a5f4 <HAL_RCC_OscConfig+0x110>
 800a612:	e000      	b.n	800a616 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 0302 	and.w	r3, r3, #2
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d069      	beq.n	800a6f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a622:	4b50      	ldr	r3, [pc, #320]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	f003 030c 	and.w	r3, r3, #12
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d00b      	beq.n	800a646 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a62e:	4b4d      	ldr	r3, [pc, #308]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a630:	689b      	ldr	r3, [r3, #8]
 800a632:	f003 030c 	and.w	r3, r3, #12
 800a636:	2b08      	cmp	r3, #8
 800a638:	d11c      	bne.n	800a674 <HAL_RCC_OscConfig+0x190>
 800a63a:	4b4a      	ldr	r3, [pc, #296]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a642:	2b00      	cmp	r3, #0
 800a644:	d116      	bne.n	800a674 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a646:	4b47      	ldr	r3, [pc, #284]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f003 0302 	and.w	r3, r3, #2
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d005      	beq.n	800a65e <HAL_RCC_OscConfig+0x17a>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	2b01      	cmp	r3, #1
 800a658:	d001      	beq.n	800a65e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	e1df      	b.n	800aa1e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a65e:	4b41      	ldr	r3, [pc, #260]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	00db      	lsls	r3, r3, #3
 800a66c:	493d      	ldr	r1, [pc, #244]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a66e:	4313      	orrs	r3, r2
 800a670:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a672:	e040      	b.n	800a6f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d023      	beq.n	800a6c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a67c:	4b39      	ldr	r3, [pc, #228]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a38      	ldr	r2, [pc, #224]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a682:	f043 0301 	orr.w	r3, r3, #1
 800a686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a688:	f7fc ffe4 	bl	8007654 <HAL_GetTick>
 800a68c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a68e:	e008      	b.n	800a6a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a690:	f7fc ffe0 	bl	8007654 <HAL_GetTick>
 800a694:	4602      	mov	r2, r0
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	1ad3      	subs	r3, r2, r3
 800a69a:	2b02      	cmp	r3, #2
 800a69c:	d901      	bls.n	800a6a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a69e:	2303      	movs	r3, #3
 800a6a0:	e1bd      	b.n	800aa1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6a2:	4b30      	ldr	r3, [pc, #192]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f003 0302 	and.w	r3, r3, #2
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d0f0      	beq.n	800a690 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6ae:	4b2d      	ldr	r3, [pc, #180]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	00db      	lsls	r3, r3, #3
 800a6bc:	4929      	ldr	r1, [pc, #164]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	600b      	str	r3, [r1, #0]
 800a6c2:	e018      	b.n	800a6f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a6c4:	4b27      	ldr	r3, [pc, #156]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a26      	ldr	r2, [pc, #152]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a6ca:	f023 0301 	bic.w	r3, r3, #1
 800a6ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6d0:	f7fc ffc0 	bl	8007654 <HAL_GetTick>
 800a6d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a6d6:	e008      	b.n	800a6ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6d8:	f7fc ffbc 	bl	8007654 <HAL_GetTick>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	d901      	bls.n	800a6ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	e199      	b.n	800aa1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a6ea:	4b1e      	ldr	r3, [pc, #120]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f003 0302 	and.w	r3, r3, #2
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d1f0      	bne.n	800a6d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f003 0308 	and.w	r3, r3, #8
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d038      	beq.n	800a774 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	695b      	ldr	r3, [r3, #20]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d019      	beq.n	800a73e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a70a:	4b16      	ldr	r3, [pc, #88]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a70c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a70e:	4a15      	ldr	r2, [pc, #84]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a710:	f043 0301 	orr.w	r3, r3, #1
 800a714:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a716:	f7fc ff9d 	bl	8007654 <HAL_GetTick>
 800a71a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a71c:	e008      	b.n	800a730 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a71e:	f7fc ff99 	bl	8007654 <HAL_GetTick>
 800a722:	4602      	mov	r2, r0
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	2b02      	cmp	r3, #2
 800a72a:	d901      	bls.n	800a730 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a72c:	2303      	movs	r3, #3
 800a72e:	e176      	b.n	800aa1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a730:	4b0c      	ldr	r3, [pc, #48]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a732:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a734:	f003 0302 	and.w	r3, r3, #2
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d0f0      	beq.n	800a71e <HAL_RCC_OscConfig+0x23a>
 800a73c:	e01a      	b.n	800a774 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a73e:	4b09      	ldr	r3, [pc, #36]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a742:	4a08      	ldr	r2, [pc, #32]	@ (800a764 <HAL_RCC_OscConfig+0x280>)
 800a744:	f023 0301 	bic.w	r3, r3, #1
 800a748:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a74a:	f7fc ff83 	bl	8007654 <HAL_GetTick>
 800a74e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a750:	e00a      	b.n	800a768 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a752:	f7fc ff7f 	bl	8007654 <HAL_GetTick>
 800a756:	4602      	mov	r2, r0
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d903      	bls.n	800a768 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a760:	2303      	movs	r3, #3
 800a762:	e15c      	b.n	800aa1e <HAL_RCC_OscConfig+0x53a>
 800a764:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a768:	4b91      	ldr	r3, [pc, #580]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a76a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a76c:	f003 0302 	and.w	r3, r3, #2
 800a770:	2b00      	cmp	r3, #0
 800a772:	d1ee      	bne.n	800a752 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f003 0304 	and.w	r3, r3, #4
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f000 80a4 	beq.w	800a8ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a782:	4b8b      	ldr	r3, [pc, #556]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d10d      	bne.n	800a7aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a78e:	4b88      	ldr	r3, [pc, #544]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a792:	4a87      	ldr	r2, [pc, #540]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a798:	6413      	str	r3, [r2, #64]	@ 0x40
 800a79a:	4b85      	ldr	r3, [pc, #532]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a79c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a79e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a7a2:	60bb      	str	r3, [r7, #8]
 800a7a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7aa:	4b82      	ldr	r3, [pc, #520]	@ (800a9b4 <HAL_RCC_OscConfig+0x4d0>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d118      	bne.n	800a7e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a7b6:	4b7f      	ldr	r3, [pc, #508]	@ (800a9b4 <HAL_RCC_OscConfig+0x4d0>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a7e      	ldr	r2, [pc, #504]	@ (800a9b4 <HAL_RCC_OscConfig+0x4d0>)
 800a7bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a7c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a7c2:	f7fc ff47 	bl	8007654 <HAL_GetTick>
 800a7c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7c8:	e008      	b.n	800a7dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7ca:	f7fc ff43 	bl	8007654 <HAL_GetTick>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	1ad3      	subs	r3, r2, r3
 800a7d4:	2b64      	cmp	r3, #100	@ 0x64
 800a7d6:	d901      	bls.n	800a7dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a7d8:	2303      	movs	r3, #3
 800a7da:	e120      	b.n	800aa1e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7dc:	4b75      	ldr	r3, [pc, #468]	@ (800a9b4 <HAL_RCC_OscConfig+0x4d0>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d0f0      	beq.n	800a7ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d106      	bne.n	800a7fe <HAL_RCC_OscConfig+0x31a>
 800a7f0:	4b6f      	ldr	r3, [pc, #444]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a7f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7f4:	4a6e      	ldr	r2, [pc, #440]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a7f6:	f043 0301 	orr.w	r3, r3, #1
 800a7fa:	6713      	str	r3, [r2, #112]	@ 0x70
 800a7fc:	e02d      	b.n	800a85a <HAL_RCC_OscConfig+0x376>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d10c      	bne.n	800a820 <HAL_RCC_OscConfig+0x33c>
 800a806:	4b6a      	ldr	r3, [pc, #424]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a80a:	4a69      	ldr	r2, [pc, #420]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a80c:	f023 0301 	bic.w	r3, r3, #1
 800a810:	6713      	str	r3, [r2, #112]	@ 0x70
 800a812:	4b67      	ldr	r3, [pc, #412]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a816:	4a66      	ldr	r2, [pc, #408]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a818:	f023 0304 	bic.w	r3, r3, #4
 800a81c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a81e:	e01c      	b.n	800a85a <HAL_RCC_OscConfig+0x376>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	2b05      	cmp	r3, #5
 800a826:	d10c      	bne.n	800a842 <HAL_RCC_OscConfig+0x35e>
 800a828:	4b61      	ldr	r3, [pc, #388]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a82a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a82c:	4a60      	ldr	r2, [pc, #384]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a82e:	f043 0304 	orr.w	r3, r3, #4
 800a832:	6713      	str	r3, [r2, #112]	@ 0x70
 800a834:	4b5e      	ldr	r3, [pc, #376]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a838:	4a5d      	ldr	r2, [pc, #372]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a83a:	f043 0301 	orr.w	r3, r3, #1
 800a83e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a840:	e00b      	b.n	800a85a <HAL_RCC_OscConfig+0x376>
 800a842:	4b5b      	ldr	r3, [pc, #364]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a846:	4a5a      	ldr	r2, [pc, #360]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a848:	f023 0301 	bic.w	r3, r3, #1
 800a84c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a84e:	4b58      	ldr	r3, [pc, #352]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a852:	4a57      	ldr	r2, [pc, #348]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a854:	f023 0304 	bic.w	r3, r3, #4
 800a858:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	689b      	ldr	r3, [r3, #8]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d015      	beq.n	800a88e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a862:	f7fc fef7 	bl	8007654 <HAL_GetTick>
 800a866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a868:	e00a      	b.n	800a880 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a86a:	f7fc fef3 	bl	8007654 <HAL_GetTick>
 800a86e:	4602      	mov	r2, r0
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a878:	4293      	cmp	r3, r2
 800a87a:	d901      	bls.n	800a880 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a87c:	2303      	movs	r3, #3
 800a87e:	e0ce      	b.n	800aa1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a880:	4b4b      	ldr	r3, [pc, #300]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a884:	f003 0302 	and.w	r3, r3, #2
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d0ee      	beq.n	800a86a <HAL_RCC_OscConfig+0x386>
 800a88c:	e014      	b.n	800a8b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a88e:	f7fc fee1 	bl	8007654 <HAL_GetTick>
 800a892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a894:	e00a      	b.n	800a8ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a896:	f7fc fedd 	bl	8007654 <HAL_GetTick>
 800a89a:	4602      	mov	r2, r0
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d901      	bls.n	800a8ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	e0b8      	b.n	800aa1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a8ac:	4b40      	ldr	r3, [pc, #256]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a8ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8b0:	f003 0302 	and.w	r3, r3, #2
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d1ee      	bne.n	800a896 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a8b8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d105      	bne.n	800a8ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a8be:	4b3c      	ldr	r3, [pc, #240]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a8c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8c2:	4a3b      	ldr	r2, [pc, #236]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a8c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a8c8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	699b      	ldr	r3, [r3, #24]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	f000 80a4 	beq.w	800aa1c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a8d4:	4b36      	ldr	r3, [pc, #216]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	f003 030c 	and.w	r3, r3, #12
 800a8dc:	2b08      	cmp	r3, #8
 800a8de:	d06b      	beq.n	800a9b8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	699b      	ldr	r3, [r3, #24]
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d149      	bne.n	800a97c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a8e8:	4b31      	ldr	r3, [pc, #196]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a30      	ldr	r2, [pc, #192]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a8ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a8f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8f4:	f7fc feae 	bl	8007654 <HAL_GetTick>
 800a8f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a8fa:	e008      	b.n	800a90e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8fc:	f7fc feaa 	bl	8007654 <HAL_GetTick>
 800a900:	4602      	mov	r2, r0
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	1ad3      	subs	r3, r2, r3
 800a906:	2b02      	cmp	r3, #2
 800a908:	d901      	bls.n	800a90e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a90a:	2303      	movs	r3, #3
 800a90c:	e087      	b.n	800aa1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a90e:	4b28      	ldr	r3, [pc, #160]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a916:	2b00      	cmp	r3, #0
 800a918:	d1f0      	bne.n	800a8fc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	69da      	ldr	r2, [r3, #28]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6a1b      	ldr	r3, [r3, #32]
 800a922:	431a      	orrs	r2, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a928:	019b      	lsls	r3, r3, #6
 800a92a:	431a      	orrs	r2, r3
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a930:	085b      	lsrs	r3, r3, #1
 800a932:	3b01      	subs	r3, #1
 800a934:	041b      	lsls	r3, r3, #16
 800a936:	431a      	orrs	r2, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a93c:	061b      	lsls	r3, r3, #24
 800a93e:	4313      	orrs	r3, r2
 800a940:	4a1b      	ldr	r2, [pc, #108]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a942:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a946:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a948:	4b19      	ldr	r3, [pc, #100]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a18      	ldr	r2, [pc, #96]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a94e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a954:	f7fc fe7e 	bl	8007654 <HAL_GetTick>
 800a958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a95a:	e008      	b.n	800a96e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a95c:	f7fc fe7a 	bl	8007654 <HAL_GetTick>
 800a960:	4602      	mov	r2, r0
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	1ad3      	subs	r3, r2, r3
 800a966:	2b02      	cmp	r3, #2
 800a968:	d901      	bls.n	800a96e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800a96a:	2303      	movs	r3, #3
 800a96c:	e057      	b.n	800aa1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a96e:	4b10      	ldr	r3, [pc, #64]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a976:	2b00      	cmp	r3, #0
 800a978:	d0f0      	beq.n	800a95c <HAL_RCC_OscConfig+0x478>
 800a97a:	e04f      	b.n	800aa1c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a97c:	4b0c      	ldr	r3, [pc, #48]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a0b      	ldr	r2, [pc, #44]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a982:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a988:	f7fc fe64 	bl	8007654 <HAL_GetTick>
 800a98c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a98e:	e008      	b.n	800a9a2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a990:	f7fc fe60 	bl	8007654 <HAL_GetTick>
 800a994:	4602      	mov	r2, r0
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d901      	bls.n	800a9a2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	e03d      	b.n	800aa1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a9a2:	4b03      	ldr	r3, [pc, #12]	@ (800a9b0 <HAL_RCC_OscConfig+0x4cc>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1f0      	bne.n	800a990 <HAL_RCC_OscConfig+0x4ac>
 800a9ae:	e035      	b.n	800aa1c <HAL_RCC_OscConfig+0x538>
 800a9b0:	40023800 	.word	0x40023800
 800a9b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a9b8:	4b1b      	ldr	r3, [pc, #108]	@ (800aa28 <HAL_RCC_OscConfig+0x544>)
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	699b      	ldr	r3, [r3, #24]
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d028      	beq.n	800aa18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d121      	bne.n	800aa18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d11a      	bne.n	800aa18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a9e2:	68fa      	ldr	r2, [r7, #12]
 800a9e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a9e8:	4013      	ands	r3, r2
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a9ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d111      	bne.n	800aa18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9fe:	085b      	lsrs	r3, r3, #1
 800aa00:	3b01      	subs	r3, #1
 800aa02:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d107      	bne.n	800aa18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa12:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d001      	beq.n	800aa1c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e000      	b.n	800aa1e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3718      	adds	r7, #24
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	40023800 	.word	0x40023800

0800aa2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800aa36:	2300      	movs	r3, #0
 800aa38:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d101      	bne.n	800aa44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800aa40:	2301      	movs	r3, #1
 800aa42:	e0d0      	b.n	800abe6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aa44:	4b6a      	ldr	r3, [pc, #424]	@ (800abf0 <HAL_RCC_ClockConfig+0x1c4>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f003 030f 	and.w	r3, r3, #15
 800aa4c:	683a      	ldr	r2, [r7, #0]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d910      	bls.n	800aa74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa52:	4b67      	ldr	r3, [pc, #412]	@ (800abf0 <HAL_RCC_ClockConfig+0x1c4>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f023 020f 	bic.w	r2, r3, #15
 800aa5a:	4965      	ldr	r1, [pc, #404]	@ (800abf0 <HAL_RCC_ClockConfig+0x1c4>)
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa62:	4b63      	ldr	r3, [pc, #396]	@ (800abf0 <HAL_RCC_ClockConfig+0x1c4>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f003 030f 	and.w	r3, r3, #15
 800aa6a:	683a      	ldr	r2, [r7, #0]
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d001      	beq.n	800aa74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800aa70:	2301      	movs	r3, #1
 800aa72:	e0b8      	b.n	800abe6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f003 0302 	and.w	r3, r3, #2
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d020      	beq.n	800aac2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 0304 	and.w	r3, r3, #4
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d005      	beq.n	800aa98 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aa8c:	4b59      	ldr	r3, [pc, #356]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c8>)
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	4a58      	ldr	r2, [pc, #352]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c8>)
 800aa92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800aa96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 0308 	and.w	r3, r3, #8
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d005      	beq.n	800aab0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800aaa4:	4b53      	ldr	r3, [pc, #332]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c8>)
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	4a52      	ldr	r2, [pc, #328]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c8>)
 800aaaa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800aaae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aab0:	4b50      	ldr	r3, [pc, #320]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c8>)
 800aab2:	689b      	ldr	r3, [r3, #8]
 800aab4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	494d      	ldr	r1, [pc, #308]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c8>)
 800aabe:	4313      	orrs	r3, r2
 800aac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 0301 	and.w	r3, r3, #1
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d040      	beq.n	800ab50 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d107      	bne.n	800aae6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aad6:	4b47      	ldr	r3, [pc, #284]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c8>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d115      	bne.n	800ab0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800aae2:	2301      	movs	r3, #1
 800aae4:	e07f      	b.n	800abe6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d107      	bne.n	800aafe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aaee:	4b41      	ldr	r3, [pc, #260]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c8>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d109      	bne.n	800ab0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	e073      	b.n	800abe6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aafe:	4b3d      	ldr	r3, [pc, #244]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c8>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f003 0302 	and.w	r3, r3, #2
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d101      	bne.n	800ab0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e06b      	b.n	800abe6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ab0e:	4b39      	ldr	r3, [pc, #228]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c8>)
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	f023 0203 	bic.w	r2, r3, #3
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	4936      	ldr	r1, [pc, #216]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c8>)
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab20:	f7fc fd98 	bl	8007654 <HAL_GetTick>
 800ab24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab26:	e00a      	b.n	800ab3e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab28:	f7fc fd94 	bl	8007654 <HAL_GetTick>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	1ad3      	subs	r3, r2, r3
 800ab32:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d901      	bls.n	800ab3e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	e053      	b.n	800abe6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab3e:	4b2d      	ldr	r3, [pc, #180]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c8>)
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	f003 020c 	and.w	r2, r3, #12
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d1eb      	bne.n	800ab28 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ab50:	4b27      	ldr	r3, [pc, #156]	@ (800abf0 <HAL_RCC_ClockConfig+0x1c4>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f003 030f 	and.w	r3, r3, #15
 800ab58:	683a      	ldr	r2, [r7, #0]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d210      	bcs.n	800ab80 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab5e:	4b24      	ldr	r3, [pc, #144]	@ (800abf0 <HAL_RCC_ClockConfig+0x1c4>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f023 020f 	bic.w	r2, r3, #15
 800ab66:	4922      	ldr	r1, [pc, #136]	@ (800abf0 <HAL_RCC_ClockConfig+0x1c4>)
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab6e:	4b20      	ldr	r3, [pc, #128]	@ (800abf0 <HAL_RCC_ClockConfig+0x1c4>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f003 030f 	and.w	r3, r3, #15
 800ab76:	683a      	ldr	r2, [r7, #0]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d001      	beq.n	800ab80 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e032      	b.n	800abe6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 0304 	and.w	r3, r3, #4
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d008      	beq.n	800ab9e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ab8c:	4b19      	ldr	r3, [pc, #100]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c8>)
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	4916      	ldr	r1, [pc, #88]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c8>)
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f003 0308 	and.w	r3, r3, #8
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d009      	beq.n	800abbe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800abaa:	4b12      	ldr	r3, [pc, #72]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c8>)
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	00db      	lsls	r3, r3, #3
 800abb8:	490e      	ldr	r1, [pc, #56]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c8>)
 800abba:	4313      	orrs	r3, r2
 800abbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800abbe:	f000 f821 	bl	800ac04 <HAL_RCC_GetSysClockFreq>
 800abc2:	4602      	mov	r2, r0
 800abc4:	4b0b      	ldr	r3, [pc, #44]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c8>)
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	091b      	lsrs	r3, r3, #4
 800abca:	f003 030f 	and.w	r3, r3, #15
 800abce:	490a      	ldr	r1, [pc, #40]	@ (800abf8 <HAL_RCC_ClockConfig+0x1cc>)
 800abd0:	5ccb      	ldrb	r3, [r1, r3]
 800abd2:	fa22 f303 	lsr.w	r3, r2, r3
 800abd6:	4a09      	ldr	r2, [pc, #36]	@ (800abfc <HAL_RCC_ClockConfig+0x1d0>)
 800abd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800abda:	4b09      	ldr	r3, [pc, #36]	@ (800ac00 <HAL_RCC_ClockConfig+0x1d4>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4618      	mov	r0, r3
 800abe0:	f7fa ff54 	bl	8005a8c <HAL_InitTick>

  return HAL_OK;
 800abe4:	2300      	movs	r3, #0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	40023c00 	.word	0x40023c00
 800abf4:	40023800 	.word	0x40023800
 800abf8:	080e6ed0 	.word	0x080e6ed0
 800abfc:	20000068 	.word	0x20000068
 800ac00:	200000a8 	.word	0x200000a8

0800ac04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac08:	b090      	sub	sp, #64	@ 0x40
 800ac0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac10:	2300      	movs	r3, #0
 800ac12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac14:	2300      	movs	r3, #0
 800ac16:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ac1c:	4b59      	ldr	r3, [pc, #356]	@ (800ad84 <HAL_RCC_GetSysClockFreq+0x180>)
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	f003 030c 	and.w	r3, r3, #12
 800ac24:	2b08      	cmp	r3, #8
 800ac26:	d00d      	beq.n	800ac44 <HAL_RCC_GetSysClockFreq+0x40>
 800ac28:	2b08      	cmp	r3, #8
 800ac2a:	f200 80a1 	bhi.w	800ad70 <HAL_RCC_GetSysClockFreq+0x16c>
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d002      	beq.n	800ac38 <HAL_RCC_GetSysClockFreq+0x34>
 800ac32:	2b04      	cmp	r3, #4
 800ac34:	d003      	beq.n	800ac3e <HAL_RCC_GetSysClockFreq+0x3a>
 800ac36:	e09b      	b.n	800ad70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ac38:	4b53      	ldr	r3, [pc, #332]	@ (800ad88 <HAL_RCC_GetSysClockFreq+0x184>)
 800ac3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ac3c:	e09b      	b.n	800ad76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ac3e:	4b53      	ldr	r3, [pc, #332]	@ (800ad8c <HAL_RCC_GetSysClockFreq+0x188>)
 800ac40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ac42:	e098      	b.n	800ad76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ac44:	4b4f      	ldr	r3, [pc, #316]	@ (800ad84 <HAL_RCC_GetSysClockFreq+0x180>)
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac4c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ac4e:	4b4d      	ldr	r3, [pc, #308]	@ (800ad84 <HAL_RCC_GetSysClockFreq+0x180>)
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d028      	beq.n	800acac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ac5a:	4b4a      	ldr	r3, [pc, #296]	@ (800ad84 <HAL_RCC_GetSysClockFreq+0x180>)
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	099b      	lsrs	r3, r3, #6
 800ac60:	2200      	movs	r2, #0
 800ac62:	623b      	str	r3, [r7, #32]
 800ac64:	627a      	str	r2, [r7, #36]	@ 0x24
 800ac66:	6a3b      	ldr	r3, [r7, #32]
 800ac68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	4b47      	ldr	r3, [pc, #284]	@ (800ad8c <HAL_RCC_GetSysClockFreq+0x188>)
 800ac70:	fb03 f201 	mul.w	r2, r3, r1
 800ac74:	2300      	movs	r3, #0
 800ac76:	fb00 f303 	mul.w	r3, r0, r3
 800ac7a:	4413      	add	r3, r2
 800ac7c:	4a43      	ldr	r2, [pc, #268]	@ (800ad8c <HAL_RCC_GetSysClockFreq+0x188>)
 800ac7e:	fba0 1202 	umull	r1, r2, r0, r2
 800ac82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac84:	460a      	mov	r2, r1
 800ac86:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ac88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac8a:	4413      	add	r3, r2
 800ac8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac90:	2200      	movs	r2, #0
 800ac92:	61bb      	str	r3, [r7, #24]
 800ac94:	61fa      	str	r2, [r7, #28]
 800ac96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ac9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800ac9e:	f7f5 fe15 	bl	80008cc <__aeabi_uldivmod>
 800aca2:	4602      	mov	r2, r0
 800aca4:	460b      	mov	r3, r1
 800aca6:	4613      	mov	r3, r2
 800aca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acaa:	e053      	b.n	800ad54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800acac:	4b35      	ldr	r3, [pc, #212]	@ (800ad84 <HAL_RCC_GetSysClockFreq+0x180>)
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	099b      	lsrs	r3, r3, #6
 800acb2:	2200      	movs	r2, #0
 800acb4:	613b      	str	r3, [r7, #16]
 800acb6:	617a      	str	r2, [r7, #20]
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800acbe:	f04f 0b00 	mov.w	fp, #0
 800acc2:	4652      	mov	r2, sl
 800acc4:	465b      	mov	r3, fp
 800acc6:	f04f 0000 	mov.w	r0, #0
 800acca:	f04f 0100 	mov.w	r1, #0
 800acce:	0159      	lsls	r1, r3, #5
 800acd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800acd4:	0150      	lsls	r0, r2, #5
 800acd6:	4602      	mov	r2, r0
 800acd8:	460b      	mov	r3, r1
 800acda:	ebb2 080a 	subs.w	r8, r2, sl
 800acde:	eb63 090b 	sbc.w	r9, r3, fp
 800ace2:	f04f 0200 	mov.w	r2, #0
 800ace6:	f04f 0300 	mov.w	r3, #0
 800acea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800acee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800acf2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800acf6:	ebb2 0408 	subs.w	r4, r2, r8
 800acfa:	eb63 0509 	sbc.w	r5, r3, r9
 800acfe:	f04f 0200 	mov.w	r2, #0
 800ad02:	f04f 0300 	mov.w	r3, #0
 800ad06:	00eb      	lsls	r3, r5, #3
 800ad08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ad0c:	00e2      	lsls	r2, r4, #3
 800ad0e:	4614      	mov	r4, r2
 800ad10:	461d      	mov	r5, r3
 800ad12:	eb14 030a 	adds.w	r3, r4, sl
 800ad16:	603b      	str	r3, [r7, #0]
 800ad18:	eb45 030b 	adc.w	r3, r5, fp
 800ad1c:	607b      	str	r3, [r7, #4]
 800ad1e:	f04f 0200 	mov.w	r2, #0
 800ad22:	f04f 0300 	mov.w	r3, #0
 800ad26:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ad2a:	4629      	mov	r1, r5
 800ad2c:	028b      	lsls	r3, r1, #10
 800ad2e:	4621      	mov	r1, r4
 800ad30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ad34:	4621      	mov	r1, r4
 800ad36:	028a      	lsls	r2, r1, #10
 800ad38:	4610      	mov	r0, r2
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad3e:	2200      	movs	r2, #0
 800ad40:	60bb      	str	r3, [r7, #8]
 800ad42:	60fa      	str	r2, [r7, #12]
 800ad44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ad48:	f7f5 fdc0 	bl	80008cc <__aeabi_uldivmod>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	4613      	mov	r3, r2
 800ad52:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ad54:	4b0b      	ldr	r3, [pc, #44]	@ (800ad84 <HAL_RCC_GetSysClockFreq+0x180>)
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	0c1b      	lsrs	r3, r3, #16
 800ad5a:	f003 0303 	and.w	r3, r3, #3
 800ad5e:	3301      	adds	r3, #1
 800ad60:	005b      	lsls	r3, r3, #1
 800ad62:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800ad64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ad66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad68:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ad6e:	e002      	b.n	800ad76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ad70:	4b05      	ldr	r3, [pc, #20]	@ (800ad88 <HAL_RCC_GetSysClockFreq+0x184>)
 800ad72:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ad74:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ad76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3740      	adds	r7, #64	@ 0x40
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad82:	bf00      	nop
 800ad84:	40023800 	.word	0x40023800
 800ad88:	00f42400 	.word	0x00f42400
 800ad8c:	017d7840 	.word	0x017d7840

0800ad90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad90:	b480      	push	{r7}
 800ad92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ad94:	4b03      	ldr	r3, [pc, #12]	@ (800ada4 <HAL_RCC_GetHCLKFreq+0x14>)
 800ad96:	681b      	ldr	r3, [r3, #0]
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	20000068 	.word	0x20000068

0800ada8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800adac:	f7ff fff0 	bl	800ad90 <HAL_RCC_GetHCLKFreq>
 800adb0:	4602      	mov	r2, r0
 800adb2:	4b05      	ldr	r3, [pc, #20]	@ (800adc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	0a9b      	lsrs	r3, r3, #10
 800adb8:	f003 0307 	and.w	r3, r3, #7
 800adbc:	4903      	ldr	r1, [pc, #12]	@ (800adcc <HAL_RCC_GetPCLK1Freq+0x24>)
 800adbe:	5ccb      	ldrb	r3, [r1, r3]
 800adc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	40023800 	.word	0x40023800
 800adcc:	080e6ee0 	.word	0x080e6ee0

0800add0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800add4:	f7ff ffdc 	bl	800ad90 <HAL_RCC_GetHCLKFreq>
 800add8:	4602      	mov	r2, r0
 800adda:	4b05      	ldr	r3, [pc, #20]	@ (800adf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800addc:	689b      	ldr	r3, [r3, #8]
 800adde:	0b5b      	lsrs	r3, r3, #13
 800ade0:	f003 0307 	and.w	r3, r3, #7
 800ade4:	4903      	ldr	r1, [pc, #12]	@ (800adf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ade6:	5ccb      	ldrb	r3, [r1, r3]
 800ade8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800adec:	4618      	mov	r0, r3
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	40023800 	.word	0x40023800
 800adf4:	080e6ee0 	.word	0x080e6ee0

0800adf8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b083      	sub	sp, #12
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	220f      	movs	r2, #15
 800ae06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ae08:	4b12      	ldr	r3, [pc, #72]	@ (800ae54 <HAL_RCC_GetClockConfig+0x5c>)
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	f003 0203 	and.w	r2, r3, #3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ae14:	4b0f      	ldr	r3, [pc, #60]	@ (800ae54 <HAL_RCC_GetClockConfig+0x5c>)
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ae20:	4b0c      	ldr	r3, [pc, #48]	@ (800ae54 <HAL_RCC_GetClockConfig+0x5c>)
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ae2c:	4b09      	ldr	r3, [pc, #36]	@ (800ae54 <HAL_RCC_GetClockConfig+0x5c>)
 800ae2e:	689b      	ldr	r3, [r3, #8]
 800ae30:	08db      	lsrs	r3, r3, #3
 800ae32:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ae3a:	4b07      	ldr	r3, [pc, #28]	@ (800ae58 <HAL_RCC_GetClockConfig+0x60>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 020f 	and.w	r2, r3, #15
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	601a      	str	r2, [r3, #0]
}
 800ae46:	bf00      	nop
 800ae48:	370c      	adds	r7, #12
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	40023800 	.word	0x40023800
 800ae58:	40023c00 	.word	0x40023c00

0800ae5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b088      	sub	sp, #32
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ae64:	2300      	movs	r3, #0
 800ae66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800ae70:	2300      	movs	r3, #0
 800ae72:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800ae74:	2300      	movs	r3, #0
 800ae76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f003 0301 	and.w	r3, r3, #1
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d012      	beq.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ae84:	4b69      	ldr	r3, [pc, #420]	@ (800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	4a68      	ldr	r2, [pc, #416]	@ (800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae8a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ae8e:	6093      	str	r3, [r2, #8]
 800ae90:	4b66      	ldr	r3, [pc, #408]	@ (800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae92:	689a      	ldr	r2, [r3, #8]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae98:	4964      	ldr	r1, [pc, #400]	@ (800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d101      	bne.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800aea6:	2301      	movs	r3, #1
 800aea8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d017      	beq.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aeb6:	4b5d      	ldr	r3, [pc, #372]	@ (800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aeb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aebc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aec4:	4959      	ldr	r1, [pc, #356]	@ (800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aec6:	4313      	orrs	r3, r2
 800aec8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aed0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aed4:	d101      	bne.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800aed6:	2301      	movs	r3, #1
 800aed8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d101      	bne.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800aee2:	2301      	movs	r3, #1
 800aee4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d017      	beq.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800aef2:	4b4e      	ldr	r3, [pc, #312]	@ (800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aef8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af00:	494a      	ldr	r1, [pc, #296]	@ (800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af02:	4313      	orrs	r3, r2
 800af04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800af10:	d101      	bne.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800af12:	2301      	movs	r3, #1
 800af14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d101      	bne.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800af1e:	2301      	movs	r3, #1
 800af20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d001      	beq.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800af2e:	2301      	movs	r3, #1
 800af30:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f003 0320 	and.w	r3, r3, #32
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	f000 808b 	beq.w	800b056 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800af40:	4b3a      	ldr	r3, [pc, #232]	@ (800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af44:	4a39      	ldr	r2, [pc, #228]	@ (800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af4a:	6413      	str	r3, [r2, #64]	@ 0x40
 800af4c:	4b37      	ldr	r3, [pc, #220]	@ (800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af54:	60bb      	str	r3, [r7, #8]
 800af56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800af58:	4b35      	ldr	r3, [pc, #212]	@ (800b030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a34      	ldr	r2, [pc, #208]	@ (800b030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800af5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af64:	f7fc fb76 	bl	8007654 <HAL_GetTick>
 800af68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800af6a:	e008      	b.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af6c:	f7fc fb72 	bl	8007654 <HAL_GetTick>
 800af70:	4602      	mov	r2, r0
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	1ad3      	subs	r3, r2, r3
 800af76:	2b64      	cmp	r3, #100	@ 0x64
 800af78:	d901      	bls.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800af7a:	2303      	movs	r3, #3
 800af7c:	e357      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800af7e:	4b2c      	ldr	r3, [pc, #176]	@ (800b030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af86:	2b00      	cmp	r3, #0
 800af88:	d0f0      	beq.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800af8a:	4b28      	ldr	r3, [pc, #160]	@ (800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d035      	beq.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800afa2:	693a      	ldr	r2, [r7, #16]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d02e      	beq.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800afa8:	4b20      	ldr	r3, [pc, #128]	@ (800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800afaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800afb0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800afb2:	4b1e      	ldr	r3, [pc, #120]	@ (800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800afb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afb6:	4a1d      	ldr	r2, [pc, #116]	@ (800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800afb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800afbc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800afbe:	4b1b      	ldr	r3, [pc, #108]	@ (800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800afc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afc2:	4a1a      	ldr	r2, [pc, #104]	@ (800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800afc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800afc8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800afca:	4a18      	ldr	r2, [pc, #96]	@ (800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800afd0:	4b16      	ldr	r3, [pc, #88]	@ (800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800afd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afd4:	f003 0301 	and.w	r3, r3, #1
 800afd8:	2b01      	cmp	r3, #1
 800afda:	d114      	bne.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afdc:	f7fc fb3a 	bl	8007654 <HAL_GetTick>
 800afe0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afe2:	e00a      	b.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800afe4:	f7fc fb36 	bl	8007654 <HAL_GetTick>
 800afe8:	4602      	mov	r2, r0
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	1ad3      	subs	r3, r2, r3
 800afee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d901      	bls.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800aff6:	2303      	movs	r3, #3
 800aff8:	e319      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800affa:	4b0c      	ldr	r3, [pc, #48]	@ (800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800affc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800affe:	f003 0302 	and.w	r3, r3, #2
 800b002:	2b00      	cmp	r3, #0
 800b004:	d0ee      	beq.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b00a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b00e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b012:	d111      	bne.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800b014:	4b05      	ldr	r3, [pc, #20]	@ (800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b020:	4b04      	ldr	r3, [pc, #16]	@ (800b034 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b022:	400b      	ands	r3, r1
 800b024:	4901      	ldr	r1, [pc, #4]	@ (800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b026:	4313      	orrs	r3, r2
 800b028:	608b      	str	r3, [r1, #8]
 800b02a:	e00b      	b.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b02c:	40023800 	.word	0x40023800
 800b030:	40007000 	.word	0x40007000
 800b034:	0ffffcff 	.word	0x0ffffcff
 800b038:	4baa      	ldr	r3, [pc, #680]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	4aa9      	ldr	r2, [pc, #676]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b03e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800b042:	6093      	str	r3, [r2, #8]
 800b044:	4ba7      	ldr	r3, [pc, #668]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b046:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b04c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b050:	49a4      	ldr	r1, [pc, #656]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b052:	4313      	orrs	r3, r2
 800b054:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f003 0310 	and.w	r3, r3, #16
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d010      	beq.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b062:	4ba0      	ldr	r3, [pc, #640]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b064:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b068:	4a9e      	ldr	r2, [pc, #632]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b06a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b06e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b072:	4b9c      	ldr	r3, [pc, #624]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b074:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b07c:	4999      	ldr	r1, [pc, #612]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b07e:	4313      	orrs	r3, r2
 800b080:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d00a      	beq.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b090:	4b94      	ldr	r3, [pc, #592]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b096:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b09e:	4991      	ldr	r1, [pc, #580]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00a      	beq.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b0b2:	4b8c      	ldr	r3, [pc, #560]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b0c0:	4988      	ldr	r1, [pc, #544]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00a      	beq.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b0d4:	4b83      	ldr	r3, [pc, #524]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0e2:	4980      	ldr	r1, [pc, #512]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d00a      	beq.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b0f6:	4b7b      	ldr	r3, [pc, #492]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b104:	4977      	ldr	r1, [pc, #476]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b106:	4313      	orrs	r3, r2
 800b108:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00a      	beq.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b118:	4b72      	ldr	r3, [pc, #456]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b11a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b11e:	f023 0203 	bic.w	r2, r3, #3
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b126:	496f      	ldr	r1, [pc, #444]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b128:	4313      	orrs	r3, r2
 800b12a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b136:	2b00      	cmp	r3, #0
 800b138:	d00a      	beq.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b13a:	4b6a      	ldr	r3, [pc, #424]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b13c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b140:	f023 020c 	bic.w	r2, r3, #12
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b148:	4966      	ldr	r1, [pc, #408]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b14a:	4313      	orrs	r3, r2
 800b14c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d00a      	beq.n	800b172 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b15c:	4b61      	ldr	r3, [pc, #388]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b162:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b16a:	495e      	ldr	r1, [pc, #376]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b16c:	4313      	orrs	r3, r2
 800b16e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00a      	beq.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b17e:	4b59      	ldr	r3, [pc, #356]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b184:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b18c:	4955      	ldr	r1, [pc, #340]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b18e:	4313      	orrs	r3, r2
 800b190:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00a      	beq.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b1a0:	4b50      	ldr	r3, [pc, #320]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1ae:	494d      	ldr	r1, [pc, #308]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d00a      	beq.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800b1c2:	4b48      	ldr	r3, [pc, #288]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1c8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1d0:	4944      	ldr	r1, [pc, #272]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d00a      	beq.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b1e4:	4b3f      	ldr	r3, [pc, #252]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1ea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1f2:	493c      	ldr	r1, [pc, #240]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b202:	2b00      	cmp	r3, #0
 800b204:	d00a      	beq.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b206:	4b37      	ldr	r3, [pc, #220]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b20c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b214:	4933      	ldr	r1, [pc, #204]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b216:	4313      	orrs	r3, r2
 800b218:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b224:	2b00      	cmp	r3, #0
 800b226:	d00a      	beq.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b228:	4b2e      	ldr	r3, [pc, #184]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b22a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b22e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b236:	492b      	ldr	r1, [pc, #172]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b238:	4313      	orrs	r3, r2
 800b23a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b246:	2b00      	cmp	r3, #0
 800b248:	d011      	beq.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b24a:	4b26      	ldr	r3, [pc, #152]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b24c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b250:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b258:	4922      	ldr	r1, [pc, #136]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b25a:	4313      	orrs	r3, r2
 800b25c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b264:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b268:	d101      	bne.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b26a:	2301      	movs	r3, #1
 800b26c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f003 0308 	and.w	r3, r3, #8
 800b276:	2b00      	cmp	r3, #0
 800b278:	d001      	beq.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b27a:	2301      	movs	r3, #1
 800b27c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b286:	2b00      	cmp	r3, #0
 800b288:	d00a      	beq.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b28a:	4b16      	ldr	r3, [pc, #88]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b28c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b290:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b298:	4912      	ldr	r1, [pc, #72]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b29a:	4313      	orrs	r3, r2
 800b29c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d00b      	beq.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b2ac:	4b0d      	ldr	r3, [pc, #52]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2b2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2bc:	4909      	ldr	r1, [pc, #36]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d006      	beq.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f000 80d9 	beq.w	800b48a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b2d8:	4b02      	ldr	r3, [pc, #8]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a01      	ldr	r2, [pc, #4]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b2e2:	e001      	b.n	800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800b2e4:	40023800 	.word	0x40023800
 800b2e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2ea:	f7fc f9b3 	bl	8007654 <HAL_GetTick>
 800b2ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b2f0:	e008      	b.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b2f2:	f7fc f9af 	bl	8007654 <HAL_GetTick>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	1ad3      	subs	r3, r2, r3
 800b2fc:	2b64      	cmp	r3, #100	@ 0x64
 800b2fe:	d901      	bls.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b300:	2303      	movs	r3, #3
 800b302:	e194      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b304:	4b6c      	ldr	r3, [pc, #432]	@ (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d1f0      	bne.n	800b2f2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f003 0301 	and.w	r3, r3, #1
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d021      	beq.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b320:	2b00      	cmp	r3, #0
 800b322:	d11d      	bne.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b324:	4b64      	ldr	r3, [pc, #400]	@ (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b32a:	0c1b      	lsrs	r3, r3, #16
 800b32c:	f003 0303 	and.w	r3, r3, #3
 800b330:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b332:	4b61      	ldr	r3, [pc, #388]	@ (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b334:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b338:	0e1b      	lsrs	r3, r3, #24
 800b33a:	f003 030f 	and.w	r3, r3, #15
 800b33e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	019a      	lsls	r2, r3, #6
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	041b      	lsls	r3, r3, #16
 800b34a:	431a      	orrs	r2, r3
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	061b      	lsls	r3, r3, #24
 800b350:	431a      	orrs	r2, r3
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	071b      	lsls	r3, r3, #28
 800b358:	4957      	ldr	r1, [pc, #348]	@ (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b35a:	4313      	orrs	r3, r2
 800b35c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d004      	beq.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b370:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b374:	d00a      	beq.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d02e      	beq.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b386:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b38a:	d129      	bne.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b38c:	4b4a      	ldr	r3, [pc, #296]	@ (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b38e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b392:	0c1b      	lsrs	r3, r3, #16
 800b394:	f003 0303 	and.w	r3, r3, #3
 800b398:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b39a:	4b47      	ldr	r3, [pc, #284]	@ (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b39c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3a0:	0f1b      	lsrs	r3, r3, #28
 800b3a2:	f003 0307 	and.w	r3, r3, #7
 800b3a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	019a      	lsls	r2, r3, #6
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	041b      	lsls	r3, r3, #16
 800b3b2:	431a      	orrs	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	061b      	lsls	r3, r3, #24
 800b3ba:	431a      	orrs	r2, r3
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	071b      	lsls	r3, r3, #28
 800b3c0:	493d      	ldr	r1, [pc, #244]	@ (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b3c8:	4b3b      	ldr	r3, [pc, #236]	@ (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b3ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b3ce:	f023 021f 	bic.w	r2, r3, #31
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	4937      	ldr	r1, [pc, #220]	@ (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d01d      	beq.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b3ec:	4b32      	ldr	r3, [pc, #200]	@ (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b3ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3f2:	0e1b      	lsrs	r3, r3, #24
 800b3f4:	f003 030f 	and.w	r3, r3, #15
 800b3f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b3fa:	4b2f      	ldr	r3, [pc, #188]	@ (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b3fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b400:	0f1b      	lsrs	r3, r3, #28
 800b402:	f003 0307 	and.w	r3, r3, #7
 800b406:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	019a      	lsls	r2, r3, #6
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	691b      	ldr	r3, [r3, #16]
 800b412:	041b      	lsls	r3, r3, #16
 800b414:	431a      	orrs	r2, r3
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	061b      	lsls	r3, r3, #24
 800b41a:	431a      	orrs	r2, r3
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	071b      	lsls	r3, r3, #28
 800b420:	4925      	ldr	r1, [pc, #148]	@ (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b422:	4313      	orrs	r3, r2
 800b424:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b430:	2b00      	cmp	r3, #0
 800b432:	d011      	beq.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	019a      	lsls	r2, r3, #6
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	041b      	lsls	r3, r3, #16
 800b440:	431a      	orrs	r2, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	68db      	ldr	r3, [r3, #12]
 800b446:	061b      	lsls	r3, r3, #24
 800b448:	431a      	orrs	r2, r3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	689b      	ldr	r3, [r3, #8]
 800b44e:	071b      	lsls	r3, r3, #28
 800b450:	4919      	ldr	r1, [pc, #100]	@ (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b452:	4313      	orrs	r3, r2
 800b454:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b458:	4b17      	ldr	r3, [pc, #92]	@ (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a16      	ldr	r2, [pc, #88]	@ (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b45e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b462:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b464:	f7fc f8f6 	bl	8007654 <HAL_GetTick>
 800b468:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b46a:	e008      	b.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b46c:	f7fc f8f2 	bl	8007654 <HAL_GetTick>
 800b470:	4602      	mov	r2, r0
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	1ad3      	subs	r3, r2, r3
 800b476:	2b64      	cmp	r3, #100	@ 0x64
 800b478:	d901      	bls.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b47a:	2303      	movs	r3, #3
 800b47c:	e0d7      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b47e:	4b0e      	ldr	r3, [pc, #56]	@ (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b486:	2b00      	cmp	r3, #0
 800b488:	d0f0      	beq.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b48a:	69bb      	ldr	r3, [r7, #24]
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	f040 80cd 	bne.w	800b62c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b492:	4b09      	ldr	r3, [pc, #36]	@ (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a08      	ldr	r2, [pc, #32]	@ (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b498:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b49c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b49e:	f7fc f8d9 	bl	8007654 <HAL_GetTick>
 800b4a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b4a4:	e00a      	b.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b4a6:	f7fc f8d5 	bl	8007654 <HAL_GetTick>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	1ad3      	subs	r3, r2, r3
 800b4b0:	2b64      	cmp	r3, #100	@ 0x64
 800b4b2:	d903      	bls.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b4b4:	2303      	movs	r3, #3
 800b4b6:	e0ba      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800b4b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b4bc:	4b5e      	ldr	r3, [pc, #376]	@ (800b638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b4c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4c8:	d0ed      	beq.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d003      	beq.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0x682>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d009      	beq.n	800b4f2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d02e      	beq.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d12a      	bne.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b4f2:	4b51      	ldr	r3, [pc, #324]	@ (800b638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b4f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4f8:	0c1b      	lsrs	r3, r3, #16
 800b4fa:	f003 0303 	and.w	r3, r3, #3
 800b4fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b500:	4b4d      	ldr	r3, [pc, #308]	@ (800b638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b506:	0f1b      	lsrs	r3, r3, #28
 800b508:	f003 0307 	and.w	r3, r3, #7
 800b50c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	695b      	ldr	r3, [r3, #20]
 800b512:	019a      	lsls	r2, r3, #6
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	041b      	lsls	r3, r3, #16
 800b518:	431a      	orrs	r2, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	699b      	ldr	r3, [r3, #24]
 800b51e:	061b      	lsls	r3, r3, #24
 800b520:	431a      	orrs	r2, r3
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	071b      	lsls	r3, r3, #28
 800b526:	4944      	ldr	r1, [pc, #272]	@ (800b638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b528:	4313      	orrs	r3, r2
 800b52a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b52e:	4b42      	ldr	r3, [pc, #264]	@ (800b638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b530:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b534:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b53c:	3b01      	subs	r3, #1
 800b53e:	021b      	lsls	r3, r3, #8
 800b540:	493d      	ldr	r1, [pc, #244]	@ (800b638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b542:	4313      	orrs	r3, r2
 800b544:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b550:	2b00      	cmp	r3, #0
 800b552:	d022      	beq.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b558:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b55c:	d11d      	bne.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b55e:	4b36      	ldr	r3, [pc, #216]	@ (800b638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b564:	0e1b      	lsrs	r3, r3, #24
 800b566:	f003 030f 	and.w	r3, r3, #15
 800b56a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b56c:	4b32      	ldr	r3, [pc, #200]	@ (800b638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b56e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b572:	0f1b      	lsrs	r3, r3, #28
 800b574:	f003 0307 	and.w	r3, r3, #7
 800b578:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	695b      	ldr	r3, [r3, #20]
 800b57e:	019a      	lsls	r2, r3, #6
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6a1b      	ldr	r3, [r3, #32]
 800b584:	041b      	lsls	r3, r3, #16
 800b586:	431a      	orrs	r2, r3
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	061b      	lsls	r3, r3, #24
 800b58c:	431a      	orrs	r2, r3
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	071b      	lsls	r3, r3, #28
 800b592:	4929      	ldr	r1, [pc, #164]	@ (800b638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b594:	4313      	orrs	r3, r2
 800b596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f003 0308 	and.w	r3, r3, #8
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d028      	beq.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b5a6:	4b24      	ldr	r3, [pc, #144]	@ (800b638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b5a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5ac:	0e1b      	lsrs	r3, r3, #24
 800b5ae:	f003 030f 	and.w	r3, r3, #15
 800b5b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b5b4:	4b20      	ldr	r3, [pc, #128]	@ (800b638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b5b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5ba:	0c1b      	lsrs	r3, r3, #16
 800b5bc:	f003 0303 	and.w	r3, r3, #3
 800b5c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	695b      	ldr	r3, [r3, #20]
 800b5c6:	019a      	lsls	r2, r3, #6
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	041b      	lsls	r3, r3, #16
 800b5cc:	431a      	orrs	r2, r3
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	061b      	lsls	r3, r3, #24
 800b5d2:	431a      	orrs	r2, r3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	69db      	ldr	r3, [r3, #28]
 800b5d8:	071b      	lsls	r3, r3, #28
 800b5da:	4917      	ldr	r1, [pc, #92]	@ (800b638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b5e2:	4b15      	ldr	r3, [pc, #84]	@ (800b638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b5e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5f0:	4911      	ldr	r1, [pc, #68]	@ (800b638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b5f8:	4b0f      	ldr	r3, [pc, #60]	@ (800b638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a0e      	ldr	r2, [pc, #56]	@ (800b638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b5fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b602:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b604:	f7fc f826 	bl	8007654 <HAL_GetTick>
 800b608:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b60a:	e008      	b.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b60c:	f7fc f822 	bl	8007654 <HAL_GetTick>
 800b610:	4602      	mov	r2, r0
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	1ad3      	subs	r3, r2, r3
 800b616:	2b64      	cmp	r3, #100	@ 0x64
 800b618:	d901      	bls.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b61a:	2303      	movs	r3, #3
 800b61c:	e007      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b61e:	4b06      	ldr	r3, [pc, #24]	@ (800b638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b626:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b62a:	d1ef      	bne.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800b62c:	2300      	movs	r3, #0
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3720      	adds	r7, #32
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	40023800 	.word	0x40023800

0800b63c <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800b644:	2300      	movs	r3, #0
 800b646:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	4a80      	ldr	r2, [pc, #512]	@ (800b84c <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800b64c:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800b64e:	4b80      	ldr	r3, [pc, #512]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b650:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b654:	099b      	lsrs	r3, r3, #6
 800b656:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b65e:	4b7c      	ldr	r3, [pc, #496]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b660:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b664:	0c1b      	lsrs	r3, r3, #16
 800b666:	f003 0203 	and.w	r2, r3, #3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b66e:	4b78      	ldr	r3, [pc, #480]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b670:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b674:	0e1b      	lsrs	r3, r3, #24
 800b676:	f003 020f 	and.w	r2, r3, #15
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b67e:	4b74      	ldr	r3, [pc, #464]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b680:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b684:	0f1b      	lsrs	r3, r3, #28
 800b686:	f003 0207 	and.w	r2, r3, #7
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800b68e:	4b70      	ldr	r3, [pc, #448]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b694:	099b      	lsrs	r3, r3, #6
 800b696:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b69e:	4b6c      	ldr	r3, [pc, #432]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b6a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6a4:	0c1b      	lsrs	r3, r3, #16
 800b6a6:	f003 0203 	and.w	r2, r3, #3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b6ae:	4b68      	ldr	r3, [pc, #416]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b6b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6b4:	0e1b      	lsrs	r3, r3, #24
 800b6b6:	f003 020f 	and.w	r2, r3, #15
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b6be:	4b64      	ldr	r3, [pc, #400]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b6c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6c4:	0f1b      	lsrs	r3, r3, #28
 800b6c6:	f003 0207 	and.w	r2, r3, #7
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800b6ce:	4b60      	ldr	r3, [pc, #384]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b6d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b6d4:	f003 021f 	and.w	r2, r3, #31
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800b6dc:	4b5c      	ldr	r3, [pc, #368]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b6de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b6e2:	0a1b      	lsrs	r3, r3, #8
 800b6e4:	f003 021f 	and.w	r2, r3, #31
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800b6ec:	4b58      	ldr	r3, [pc, #352]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b6ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b6f2:	0c1b      	lsrs	r3, r3, #16
 800b6f4:	f003 0203 	and.w	r2, r3, #3
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800b6fc:	4b54      	ldr	r3, [pc, #336]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b6fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b702:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800b70a:	4b51      	ldr	r3, [pc, #324]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b70c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b710:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800b718:	4b4d      	ldr	r3, [pc, #308]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800b724:	4b4a      	ldr	r3, [pc, #296]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b72a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800b732:	4b47      	ldr	r3, [pc, #284]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b738:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800b740:	4b43      	ldr	r3, [pc, #268]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b746:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800b74e:	4b40      	ldr	r3, [pc, #256]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b754:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800b75c:	4b3c      	ldr	r3, [pc, #240]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b75e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b762:	f003 0203 	and.w	r2, r3, #3
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800b76a:	4b39      	ldr	r3, [pc, #228]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b76c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b770:	f003 020c 	and.w	r2, r3, #12
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800b778:	4b35      	ldr	r3, [pc, #212]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b77a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b77e:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800b786:	4b32      	ldr	r3, [pc, #200]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b78c:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800b794:	4b2e      	ldr	r3, [pc, #184]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b79a:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800b7a2:	4b2b      	ldr	r3, [pc, #172]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b7a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7a8:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800b7b0:	4b27      	ldr	r3, [pc, #156]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b7b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7b6:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800b7be:	4b24      	ldr	r3, [pc, #144]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b7c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7c4:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b7cc:	4b20      	ldr	r3, [pc, #128]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b7ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7d2:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800b7da:	4b1d      	ldr	r3, [pc, #116]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b7dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7e0:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800b7e8:	4b19      	ldr	r3, [pc, #100]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b7ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7ee:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800b7f6:	4b16      	ldr	r3, [pc, #88]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b7f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7fc:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800b806:	4b12      	ldr	r3, [pc, #72]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b808:	689b      	ldr	r3, [r3, #8]
 800b80a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b80e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800b810:	4b0f      	ldr	r3, [pc, #60]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b814:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	431a      	orrs	r2, r3
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800b820:	4b0b      	ldr	r3, [pc, #44]	@ (800b850 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b822:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b826:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d103      	bne.n	800b836 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2200      	movs	r2, #0
 800b832:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800b834:	e003      	b.n	800b83e <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b83c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800b83e:	bf00      	nop
 800b840:	3714      	adds	r7, #20
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr
 800b84a:	bf00      	nop
 800b84c:	00fffff1 	.word	0x00fffff1
 800b850:	40023800 	.word	0x40023800

0800b854 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b854:	b480      	push	{r7}
 800b856:	b087      	sub	sp, #28
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b85c:	2300      	movs	r3, #0
 800b85e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800b860:	2300      	movs	r3, #0
 800b862:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800b864:	2300      	movs	r3, #0
 800b866:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800b868:	2300      	movs	r3, #0
 800b86a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b872:	f040 808d 	bne.w	800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b876:	4b93      	ldr	r3, [pc, #588]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b87c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b884:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b88c:	d07c      	beq.n	800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b894:	d87b      	bhi.n	800b98e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d004      	beq.n	800b8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b8a2:	d039      	beq.n	800b918 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b8a4:	e073      	b.n	800b98e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b8a6:	4b87      	ldr	r3, [pc, #540]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d108      	bne.n	800b8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b8b2:	4b84      	ldr	r3, [pc, #528]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b8ba:	4a83      	ldr	r2, [pc, #524]	@ (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b8bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8c0:	613b      	str	r3, [r7, #16]
 800b8c2:	e007      	b.n	800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b8c4:	4b7f      	ldr	r3, [pc, #508]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b8cc:	4a7f      	ldr	r2, [pc, #508]	@ (800bacc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b8ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8d2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b8d4:	4b7b      	ldr	r3, [pc, #492]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b8d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8da:	0e1b      	lsrs	r3, r3, #24
 800b8dc:	f003 030f 	and.w	r3, r3, #15
 800b8e0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b8e2:	4b78      	ldr	r3, [pc, #480]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b8e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8e8:	099b      	lsrs	r3, r3, #6
 800b8ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8ee:	693a      	ldr	r2, [r7, #16]
 800b8f0:	fb03 f202 	mul.w	r2, r3, r2
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8fa:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b8fc:	4b71      	ldr	r3, [pc, #452]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b8fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b902:	0a1b      	lsrs	r3, r3, #8
 800b904:	f003 031f 	and.w	r3, r3, #31
 800b908:	3301      	adds	r3, #1
 800b90a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b90c:	697a      	ldr	r2, [r7, #20]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	fbb2 f3f3 	udiv	r3, r2, r3
 800b914:	617b      	str	r3, [r7, #20]
        break;
 800b916:	e03b      	b.n	800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b918:	4b6a      	ldr	r3, [pc, #424]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b920:	2b00      	cmp	r3, #0
 800b922:	d108      	bne.n	800b936 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b924:	4b67      	ldr	r3, [pc, #412]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b92c:	4a66      	ldr	r2, [pc, #408]	@ (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b92e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b932:	613b      	str	r3, [r7, #16]
 800b934:	e007      	b.n	800b946 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b936:	4b63      	ldr	r3, [pc, #396]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b93e:	4a63      	ldr	r2, [pc, #396]	@ (800bacc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b940:	fbb2 f3f3 	udiv	r3, r2, r3
 800b944:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b946:	4b5f      	ldr	r3, [pc, #380]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b948:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b94c:	0e1b      	lsrs	r3, r3, #24
 800b94e:	f003 030f 	and.w	r3, r3, #15
 800b952:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b954:	4b5b      	ldr	r3, [pc, #364]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b95a:	099b      	lsrs	r3, r3, #6
 800b95c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b960:	693a      	ldr	r2, [r7, #16]
 800b962:	fb03 f202 	mul.w	r2, r3, r2
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	fbb2 f3f3 	udiv	r3, r2, r3
 800b96c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b96e:	4b55      	ldr	r3, [pc, #340]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b974:	f003 031f 	and.w	r3, r3, #31
 800b978:	3301      	adds	r3, #1
 800b97a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b97c:	697a      	ldr	r2, [r7, #20]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	fbb2 f3f3 	udiv	r3, r2, r3
 800b984:	617b      	str	r3, [r7, #20]
        break;
 800b986:	e003      	b.n	800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b988:	4b51      	ldr	r3, [pc, #324]	@ (800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b98a:	617b      	str	r3, [r7, #20]
        break;
 800b98c:	e000      	b.n	800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800b98e:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b996:	f040 808d 	bne.w	800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b99a:	4b4a      	ldr	r3, [pc, #296]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b99c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b9a0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b9a8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b9b0:	d07c      	beq.n	800baac <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b9b8:	d87b      	bhi.n	800bab2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d004      	beq.n	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b9c6:	d039      	beq.n	800ba3c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b9c8:	e073      	b.n	800bab2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b9ca:	4b3e      	ldr	r3, [pc, #248]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d108      	bne.n	800b9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b9d6:	4b3b      	ldr	r3, [pc, #236]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b9de:	4a3a      	ldr	r2, [pc, #232]	@ (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b9e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9e4:	613b      	str	r3, [r7, #16]
 800b9e6:	e007      	b.n	800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b9e8:	4b36      	ldr	r3, [pc, #216]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b9f0:	4a36      	ldr	r2, [pc, #216]	@ (800bacc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b9f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9f6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b9f8:	4b32      	ldr	r3, [pc, #200]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b9fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9fe:	0e1b      	lsrs	r3, r3, #24
 800ba00:	f003 030f 	and.w	r3, r3, #15
 800ba04:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800ba06:	4b2f      	ldr	r3, [pc, #188]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ba08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba0c:	099b      	lsrs	r3, r3, #6
 800ba0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba12:	693a      	ldr	r2, [r7, #16]
 800ba14:	fb03 f202 	mul.w	r2, r3, r2
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba1e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800ba20:	4b28      	ldr	r3, [pc, #160]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ba22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba26:	0a1b      	lsrs	r3, r3, #8
 800ba28:	f003 031f 	and.w	r3, r3, #31
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ba30:	697a      	ldr	r2, [r7, #20]
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba38:	617b      	str	r3, [r7, #20]
        break;
 800ba3a:	e03b      	b.n	800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ba3c:	4b21      	ldr	r3, [pc, #132]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d108      	bne.n	800ba5a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ba48:	4b1e      	ldr	r3, [pc, #120]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ba50:	4a1d      	ldr	r2, [pc, #116]	@ (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800ba52:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba56:	613b      	str	r3, [r7, #16]
 800ba58:	e007      	b.n	800ba6a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ba5a:	4b1a      	ldr	r3, [pc, #104]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ba62:	4a1a      	ldr	r2, [pc, #104]	@ (800bacc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ba64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba68:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800ba6a:	4b16      	ldr	r3, [pc, #88]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ba6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba70:	0e1b      	lsrs	r3, r3, #24
 800ba72:	f003 030f 	and.w	r3, r3, #15
 800ba76:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800ba78:	4b12      	ldr	r3, [pc, #72]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ba7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba7e:	099b      	lsrs	r3, r3, #6
 800ba80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba84:	693a      	ldr	r2, [r7, #16]
 800ba86:	fb03 f202 	mul.w	r2, r3, r2
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba90:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800ba92:	4b0c      	ldr	r3, [pc, #48]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ba94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba98:	f003 031f 	and.w	r3, r3, #31
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800baa0:	697a      	ldr	r2, [r7, #20]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	fbb2 f3f3 	udiv	r3, r2, r3
 800baa8:	617b      	str	r3, [r7, #20]
        break;
 800baaa:	e003      	b.n	800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800baac:	4b08      	ldr	r3, [pc, #32]	@ (800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800baae:	617b      	str	r3, [r7, #20]
        break;
 800bab0:	e000      	b.n	800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800bab2:	bf00      	nop
      }
    }
  }

  return frequency;
 800bab4:	697b      	ldr	r3, [r7, #20]
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	371c      	adds	r7, #28
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr
 800bac2:	bf00      	nop
 800bac4:	40023800 	.word	0x40023800
 800bac8:	00f42400 	.word	0x00f42400
 800bacc:	017d7840 	.word	0x017d7840
 800bad0:	00bb8000 	.word	0x00bb8000

0800bad4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b088      	sub	sp, #32
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800badc:	2300      	movs	r3, #0
 800bade:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800bae0:	2300      	movs	r3, #0
 800bae2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800bae4:	2300      	movs	r3, #0
 800bae6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d101      	bne.n	800baf2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800baee:	2301      	movs	r3, #1
 800baf0:	e156      	b.n	800bda0 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d106      	bne.n	800bb0c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f7f9 fe88 	bl	800581c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2202      	movs	r2, #2
 800bb10:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 fa85 	bl	800c024 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	68db      	ldr	r3, [r3, #12]
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	d00c      	beq.n	800bb3c <HAL_SAI_Init+0x68>
 800bb22:	2b02      	cmp	r3, #2
 800bb24:	d80d      	bhi.n	800bb42 <HAL_SAI_Init+0x6e>
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d002      	beq.n	800bb30 <HAL_SAI_Init+0x5c>
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d003      	beq.n	800bb36 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800bb2e:	e008      	b.n	800bb42 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800bb30:	2300      	movs	r3, #0
 800bb32:	61fb      	str	r3, [r7, #28]
      break;
 800bb34:	e006      	b.n	800bb44 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800bb36:	2310      	movs	r3, #16
 800bb38:	61fb      	str	r3, [r7, #28]
      break;
 800bb3a:	e003      	b.n	800bb44 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800bb3c:	2320      	movs	r3, #32
 800bb3e:	61fb      	str	r3, [r7, #28]
      break;
 800bb40:	e000      	b.n	800bb44 <HAL_SAI_Init+0x70>
      break;
 800bb42:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	2b03      	cmp	r3, #3
 800bb4a:	d81e      	bhi.n	800bb8a <HAL_SAI_Init+0xb6>
 800bb4c:	a201      	add	r2, pc, #4	@ (adr r2, 800bb54 <HAL_SAI_Init+0x80>)
 800bb4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb52:	bf00      	nop
 800bb54:	0800bb65 	.word	0x0800bb65
 800bb58:	0800bb6b 	.word	0x0800bb6b
 800bb5c:	0800bb73 	.word	0x0800bb73
 800bb60:	0800bb7b 	.word	0x0800bb7b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800bb64:	2300      	movs	r3, #0
 800bb66:	617b      	str	r3, [r7, #20]
    }
    break;
 800bb68:	e010      	b.n	800bb8c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800bb6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb6e:	617b      	str	r3, [r7, #20]
    }
    break;
 800bb70:	e00c      	b.n	800bb8c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bb72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bb76:	617b      	str	r3, [r7, #20]
    }
    break;
 800bb78:	e008      	b.n	800bb8c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bb7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bb7e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	f043 0301 	orr.w	r3, r3, #1
 800bb86:	61fb      	str	r3, [r7, #28]
    }
    break;
 800bb88:	e000      	b.n	800bb8c <HAL_SAI_Init+0xb8>
    default:
      break;
 800bb8a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a85      	ldr	r2, [pc, #532]	@ (800bda8 <HAL_SAI_Init+0x2d4>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d004      	beq.n	800bba0 <HAL_SAI_Init+0xcc>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a84      	ldr	r2, [pc, #528]	@ (800bdac <HAL_SAI_Init+0x2d8>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d103      	bne.n	800bba8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800bba0:	4a83      	ldr	r2, [pc, #524]	@ (800bdb0 <HAL_SAI_Init+0x2dc>)
 800bba2:	69fb      	ldr	r3, [r7, #28]
 800bba4:	6013      	str	r3, [r2, #0]
 800bba6:	e002      	b.n	800bbae <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800bba8:	4a82      	ldr	r2, [pc, #520]	@ (800bdb4 <HAL_SAI_Init+0x2e0>)
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	69db      	ldr	r3, [r3, #28]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d04c      	beq.n	800bc50 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4a7a      	ldr	r2, [pc, #488]	@ (800bda8 <HAL_SAI_Init+0x2d4>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d004      	beq.n	800bbce <HAL_SAI_Init+0xfa>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a78      	ldr	r2, [pc, #480]	@ (800bdac <HAL_SAI_Init+0x2d8>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d104      	bne.n	800bbd8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800bbce:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800bbd2:	f7ff fe3f 	bl	800b854 <HAL_RCCEx_GetPeriphCLKFreq>
 800bbd6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4a76      	ldr	r2, [pc, #472]	@ (800bdb8 <HAL_SAI_Init+0x2e4>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d004      	beq.n	800bbec <HAL_SAI_Init+0x118>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4a75      	ldr	r2, [pc, #468]	@ (800bdbc <HAL_SAI_Init+0x2e8>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d104      	bne.n	800bbf6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800bbec:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800bbf0:	f7ff fe30 	bl	800b854 <HAL_RCCEx_GetPeriphCLKFreq>
 800bbf4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800bbf6:	693a      	ldr	r2, [r7, #16]
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	4413      	add	r3, r2
 800bbfe:	005b      	lsls	r3, r3, #1
 800bc00:	461a      	mov	r2, r3
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	69db      	ldr	r3, [r3, #28]
 800bc06:	025b      	lsls	r3, r3, #9
 800bc08:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc0c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	4a6b      	ldr	r2, [pc, #428]	@ (800bdc0 <HAL_SAI_Init+0x2ec>)
 800bc12:	fba2 2303 	umull	r2, r3, r2, r3
 800bc16:	08da      	lsrs	r2, r3, #3
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800bc1c:	68f9      	ldr	r1, [r7, #12]
 800bc1e:	4b68      	ldr	r3, [pc, #416]	@ (800bdc0 <HAL_SAI_Init+0x2ec>)
 800bc20:	fba3 2301 	umull	r2, r3, r3, r1
 800bc24:	08da      	lsrs	r2, r3, #3
 800bc26:	4613      	mov	r3, r2
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	4413      	add	r3, r2
 800bc2c:	005b      	lsls	r3, r3, #1
 800bc2e:	1aca      	subs	r2, r1, r3
 800bc30:	2a08      	cmp	r2, #8
 800bc32:	d904      	bls.n	800bc3e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6a1b      	ldr	r3, [r3, #32]
 800bc38:	1c5a      	adds	r2, r3, #1
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc42:	2b04      	cmp	r3, #4
 800bc44:	d104      	bne.n	800bc50 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6a1b      	ldr	r3, [r3, #32]
 800bc4a:	085a      	lsrs	r2, r3, #1
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d003      	beq.n	800bc60 <HAL_SAI_Init+0x18c>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d109      	bne.n	800bc74 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d101      	bne.n	800bc6c <HAL_SAI_Init+0x198>
 800bc68:	2300      	movs	r3, #0
 800bc6a:	e001      	b.n	800bc70 <HAL_SAI_Init+0x19c>
 800bc6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bc70:	61bb      	str	r3, [r7, #24]
 800bc72:	e008      	b.n	800bc86 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d102      	bne.n	800bc82 <HAL_SAI_Init+0x1ae>
 800bc7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bc80:	e000      	b.n	800bc84 <HAL_SAI_Init+0x1b0>
 800bc82:	2300      	movs	r3, #0
 800bc84:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	6819      	ldr	r1, [r3, #0]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	4b4c      	ldr	r3, [pc, #304]	@ (800bdc4 <HAL_SAI_Init+0x2f0>)
 800bc92:	400b      	ands	r3, r1
 800bc94:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	6819      	ldr	r1, [r3, #0]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	685a      	ldr	r2, [r3, #4]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bca4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bcaa:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcb0:	431a      	orrs	r2, r3
 800bcb2:	69bb      	ldr	r3, [r7, #24]
 800bcb4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800bcbe:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	691b      	ldr	r3, [r3, #16]
 800bcc4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bcca:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a1b      	ldr	r3, [r3, #32]
 800bcd0:	051b      	lsls	r3, r3, #20
 800bcd2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	430a      	orrs	r2, r1
 800bcda:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	6859      	ldr	r1, [r3, #4]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	4b38      	ldr	r3, [pc, #224]	@ (800bdc8 <HAL_SAI_Init+0x2f4>)
 800bce8:	400b      	ands	r3, r1
 800bcea:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	6859      	ldr	r1, [r3, #4]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	699a      	ldr	r2, [r3, #24]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcfa:	431a      	orrs	r2, r3
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd00:	431a      	orrs	r2, r3
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	430a      	orrs	r2, r1
 800bd08:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	6899      	ldr	r1, [r3, #8]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	4b2d      	ldr	r3, [pc, #180]	@ (800bdcc <HAL_SAI_Init+0x2f8>)
 800bd16:	400b      	ands	r3, r1
 800bd18:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	6899      	ldr	r1, [r3, #8]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd24:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800bd2a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800bd30:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800bd36:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd3c:	3b01      	subs	r3, #1
 800bd3e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800bd40:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	430a      	orrs	r2, r1
 800bd48:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	68d9      	ldr	r1, [r3, #12]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800bd58:	400b      	ands	r3, r1
 800bd5a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	68d9      	ldr	r1, [r3, #12]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd6a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd70:	041b      	lsls	r3, r3, #16
 800bd72:	431a      	orrs	r2, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd78:	3b01      	subs	r3, #1
 800bd7a:	021b      	lsls	r3, r3, #8
 800bd7c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	430a      	orrs	r2, r1
 800bd84:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2201      	movs	r2, #1
 800bd92:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3720      	adds	r7, #32
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	40015804 	.word	0x40015804
 800bdac:	40015824 	.word	0x40015824
 800bdb0:	40015800 	.word	0x40015800
 800bdb4:	40015c00 	.word	0x40015c00
 800bdb8:	40015c04 	.word	0x40015c04
 800bdbc:	40015c24 	.word	0x40015c24
 800bdc0:	cccccccd 	.word	0xcccccccd
 800bdc4:	ff05c010 	.word	0xff05c010
 800bdc8:	ffff1ff0 	.word	0xffff1ff0
 800bdcc:	fff88000 	.word	0xfff88000

0800bdd0 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d101      	bne.n	800bde2 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800bdde:	2301      	movs	r3, #1
 800bde0:	e027      	b.n	800be32 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2202      	movs	r2, #2
 800bde6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bdfa:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 f911 	bl	800c024 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	685a      	ldr	r2, [r3, #4]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f042 0208 	orr.w	r2, r2, #8
 800be10:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f7f9 fde0 	bl	80059d8 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2200      	movs	r2, #0
 800be24:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800be30:	2300      	movs	r3, #0
}
 800be32:	4618      	mov	r0, r3
 800be34:	3708      	adds	r7, #8
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
	...

0800be3c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b086      	sub	sp, #24
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	4613      	mov	r3, r2
 800be48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800be4a:	f7fb fc03 	bl	8007654 <HAL_GetTick>
 800be4e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d002      	beq.n	800be5c <HAL_SAI_Transmit_DMA+0x20>
 800be56:	88fb      	ldrh	r3, [r7, #6]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d101      	bne.n	800be60 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800be5c:	2301      	movs	r3, #1
 800be5e:	e093      	b.n	800bf88 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800be66:	b2db      	uxtb	r3, r3
 800be68:	2b01      	cmp	r3, #1
 800be6a:	f040 808c 	bne.w	800bf86 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800be74:	2b01      	cmp	r3, #1
 800be76:	d101      	bne.n	800be7c <HAL_SAI_Transmit_DMA+0x40>
 800be78:	2302      	movs	r3, #2
 800be7a:	e085      	b.n	800bf88 <HAL_SAI_Transmit_DMA+0x14c>
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2201      	movs	r2, #1
 800be80:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	68ba      	ldr	r2, [r7, #8]
 800be88:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	88fa      	ldrh	r2, [r7, #6]
 800be8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	88fa      	ldrh	r2, [r7, #6]
 800be96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2200      	movs	r2, #0
 800be9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2212      	movs	r2, #18
 800bea6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800beae:	4a38      	ldr	r2, [pc, #224]	@ (800bf90 <HAL_SAI_Transmit_DMA+0x154>)
 800beb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800beb6:	4a37      	ldr	r2, [pc, #220]	@ (800bf94 <HAL_SAI_Transmit_DMA+0x158>)
 800beb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bebe:	4a36      	ldr	r2, [pc, #216]	@ (800bf98 <HAL_SAI_Transmit_DMA+0x15c>)
 800bec0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bec6:	2200      	movs	r2, #0
 800bec8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bed2:	4619      	mov	r1, r3
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	331c      	adds	r3, #28
 800beda:	461a      	mov	r2, r3
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bee2:	f7fc f869 	bl	8007fb8 <HAL_DMA_Start_IT>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d005      	beq.n	800bef8 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2200      	movs	r2, #0
 800bef0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 800bef4:	2301      	movs	r3, #1
 800bef6:	e047      	b.n	800bf88 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800bef8:	2100      	movs	r1, #0
 800befa:	68f8      	ldr	r0, [r7, #12]
 800befc:	f000 f85c 	bl	800bfb8 <SAI_InterruptFlag>
 800bf00:	4601      	mov	r1, r0
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	691a      	ldr	r2, [r3, #16]
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	430a      	orrs	r2, r1
 800bf0e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800bf1e:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800bf20:	e015      	b.n	800bf4e <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800bf22:	f7fb fb97 	bl	8007654 <HAL_GetTick>
 800bf26:	4602      	mov	r2, r0
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	1ad3      	subs	r3, r2, r3
 800bf2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bf30:	d90d      	bls.n	800bf4e <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf38:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2200      	movs	r2, #0
 800bf46:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800bf4a:	2303      	movs	r3, #3
 800bf4c:	e01c      	b.n	800bf88 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	695b      	ldr	r3, [r3, #20]
 800bf54:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d0e2      	beq.n	800bf22 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d107      	bne.n	800bf7a <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800bf78:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800bf82:	2300      	movs	r3, #0
 800bf84:	e000      	b.n	800bf88 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800bf86:	2302      	movs	r3, #2
  }
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3718      	adds	r7, #24
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	0800c0f5 	.word	0x0800c0f5
 800bf94:	0800c095 	.word	0x0800c095
 800bf98:	0800c111 	.word	0x0800c111

0800bf9c <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800bfaa:	b2db      	uxtb	r3, r3
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	370c      	adds	r7, #12
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr

0800bfb8 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b085      	sub	sp, #20
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d103      	bne.n	800bfd4 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f043 0308 	orr.w	r3, r3, #8
 800bfd2:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfd8:	2b08      	cmp	r3, #8
 800bfda:	d10b      	bne.n	800bff4 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800bfe0:	2b03      	cmp	r3, #3
 800bfe2:	d003      	beq.n	800bfec <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d103      	bne.n	800bff4 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f043 0310 	orr.w	r3, r3, #16
 800bff2:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	2b03      	cmp	r3, #3
 800bffa:	d003      	beq.n	800c004 <SAI_InterruptFlag+0x4c>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	2b02      	cmp	r3, #2
 800c002:	d104      	bne.n	800c00e <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800c00a:	60fb      	str	r3, [r7, #12]
 800c00c:	e003      	b.n	800c016 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f043 0304 	orr.w	r3, r3, #4
 800c014:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800c016:	68fb      	ldr	r3, [r7, #12]
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3714      	adds	r7, #20
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800c024:	b480      	push	{r7}
 800c026:	b085      	sub	sp, #20
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800c02c:	4b17      	ldr	r3, [pc, #92]	@ (800c08c <SAI_Disable+0x68>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a17      	ldr	r2, [pc, #92]	@ (800c090 <SAI_Disable+0x6c>)
 800c032:	fba2 2303 	umull	r2, r3, r2, r3
 800c036:	0b1b      	lsrs	r3, r3, #12
 800c038:	009b      	lsls	r3, r3, #2
 800c03a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800c03c:	2300      	movs	r3, #0
 800c03e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c04e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	1e5a      	subs	r2, r3, #1
 800c054:	60fa      	str	r2, [r7, #12]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d10a      	bne.n	800c070 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c060:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800c06a:	2303      	movs	r3, #3
 800c06c:	72fb      	strb	r3, [r7, #11]
      break;
 800c06e:	e006      	b.n	800c07e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d1e8      	bne.n	800c050 <SAI_Disable+0x2c>

  return status;
 800c07e:	7afb      	ldrb	r3, [r7, #11]
}
 800c080:	4618      	mov	r0, r3
 800c082:	3714      	adds	r7, #20
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr
 800c08c:	20000068 	.word	0x20000068
 800c090:	95cbec1b 	.word	0x95cbec1b

0800c094 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0a0:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	69db      	ldr	r3, [r3, #28]
 800c0a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c0aa:	d01c      	beq.n	800c0e6 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800c0c2:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	68f8      	ldr	r0, [r7, #12]
 800c0c8:	f7ff ff76 	bl	800bfb8 <SAI_InterruptFlag>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	43d9      	mvns	r1, r3
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	691a      	ldr	r2, [r3, #16]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	400a      	ands	r2, r1
 800c0dc:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800c0e6:	68f8      	ldr	r0, [r7, #12]
 800c0e8:	f7f7 faaa 	bl	8003640 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800c0ec:	bf00      	nop
 800c0ee:	3710      	adds	r7, #16
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c100:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800c102:	68f8      	ldr	r0, [r7, #12]
 800c104:	f7f7 faa6 	bl	8003654 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800c108:	bf00      	nop
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c11c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c124:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c134:	2b01      	cmp	r3, #1
 800c136:	d004      	beq.n	800c142 <SAI_DMAError+0x32>
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c13c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d112      	bne.n	800c168 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800c150:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800c152:	68f8      	ldr	r0, [r7, #12]
 800c154:	f7ff ff66 	bl	800c024 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2201      	movs	r2, #1
 800c15c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2200      	movs	r2, #0
 800c164:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f7f7 fa7d 	bl	8003668 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800c16e:	bf00      	nop
 800c170:	3710      	adds	r7, #16
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c176:	b580      	push	{r7, lr}
 800c178:	b082      	sub	sp, #8
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d101      	bne.n	800c188 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c184:	2301      	movs	r3, #1
 800c186:	e022      	b.n	800c1ce <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	2b00      	cmp	r3, #0
 800c192:	d105      	bne.n	800c1a0 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f7f9 f8d8 	bl	8005350 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2203      	movs	r2, #3
 800c1a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 f815 	bl	800c1d8 <HAL_SD_InitCard>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d001      	beq.n	800c1b8 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	e00a      	b.n	800c1ce <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c1cc:	2300      	movs	r3, #0
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3708      	adds	r7, #8
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
	...

0800c1d8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c1d8:	b5b0      	push	{r4, r5, r7, lr}
 800c1da:	b08e      	sub	sp, #56	@ 0x38
 800c1dc:	af04      	add	r7, sp, #16
 800c1de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800c1f4:	2376      	movs	r3, #118	@ 0x76
 800c1f6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681d      	ldr	r5, [r3, #0]
 800c1fc:	466c      	mov	r4, sp
 800c1fe:	f107 0314 	add.w	r3, r7, #20
 800c202:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c206:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c20a:	f107 0308 	add.w	r3, r7, #8
 800c20e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c210:	4628      	mov	r0, r5
 800c212:	f002 ffa3 	bl	800f15c <SDMMC_Init>
 800c216:	4603      	mov	r3, r0
 800c218:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800c21c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c220:	2b00      	cmp	r3, #0
 800c222:	d001      	beq.n	800c228 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c224:	2301      	movs	r3, #1
 800c226:	e059      	b.n	800c2dc <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	685a      	ldr	r2, [r3, #4]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c236:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4618      	mov	r0, r3
 800c23e:	f002 ffd7 	bl	800f1f0 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	685a      	ldr	r2, [r3, #4]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c250:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800c252:	2002      	movs	r0, #2
 800c254:	f7fb fa0a 	bl	800766c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 ff59 	bl	800d110 <SD_PowerON>
 800c25e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c260:	6a3b      	ldr	r3, [r7, #32]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d00b      	beq.n	800c27e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2201      	movs	r2, #1
 800c26a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c272:	6a3b      	ldr	r3, [r7, #32]
 800c274:	431a      	orrs	r2, r3
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c27a:	2301      	movs	r3, #1
 800c27c:	e02e      	b.n	800c2dc <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 fe78 	bl	800cf74 <SD_InitCard>
 800c284:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c286:	6a3b      	ldr	r3, [r7, #32]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d00b      	beq.n	800c2a4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2201      	movs	r2, #1
 800c290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c298:	6a3b      	ldr	r3, [r7, #32]
 800c29a:	431a      	orrs	r2, r3
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e01b      	b.n	800c2dc <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f003 f831 	bl	800f314 <SDMMC_CmdBlockLength>
 800c2b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c2b4:	6a3b      	ldr	r3, [r7, #32]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00f      	beq.n	800c2da <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a09      	ldr	r2, [pc, #36]	@ (800c2e4 <HAL_SD_InitCard+0x10c>)
 800c2c0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c2c6:	6a3b      	ldr	r3, [r7, #32]
 800c2c8:	431a      	orrs	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	e000      	b.n	800c2dc <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800c2da:	2300      	movs	r3, #0
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3728      	adds	r7, #40	@ 0x28
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bdb0      	pop	{r4, r5, r7, pc}
 800c2e4:	004005ff 	.word	0x004005ff

0800c2e8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b08c      	sub	sp, #48	@ 0x30
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	607a      	str	r2, [r7, #4]
 800c2f4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d107      	bne.n	800c310 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c304:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c30c:	2301      	movs	r3, #1
 800c30e:	e0c3      	b.n	800c498 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c316:	b2db      	uxtb	r3, r3
 800c318:	2b01      	cmp	r3, #1
 800c31a:	f040 80bc 	bne.w	800c496 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	2200      	movs	r2, #0
 800c322:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c324:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	441a      	add	r2, r3
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c32e:	429a      	cmp	r2, r3
 800c330:	d907      	bls.n	800c342 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c336:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800c33e:	2301      	movs	r3, #1
 800c340:	e0aa      	b.n	800c498 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2203      	movs	r2, #3
 800c346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	2200      	movs	r2, #0
 800c350:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800c360:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c366:	4a4e      	ldr	r2, [pc, #312]	@ (800c4a0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800c368:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c36e:	4a4d      	ldr	r2, [pc, #308]	@ (800c4a4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800c370:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c376:	2200      	movs	r2, #0
 800c378:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c37e:	2200      	movs	r2, #0
 800c380:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c392:	689a      	ldr	r2, [r3, #8]
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	430a      	orrs	r2, r1
 800c39c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	3380      	adds	r3, #128	@ 0x80
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	68ba      	ldr	r2, [r7, #8]
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	025b      	lsls	r3, r3, #9
 800c3b0:	089b      	lsrs	r3, r3, #2
 800c3b2:	f7fb fe01 	bl	8007fb8 <HAL_DMA_Start_IT>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d017      	beq.n	800c3ec <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800c3ca:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a35      	ldr	r2, [pc, #212]	@ (800c4a8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c3d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3d8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	e055      	b.n	800c498 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f042 0208 	orr.w	r2, r2, #8
 800c3fa:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c400:	2b01      	cmp	r3, #1
 800c402:	d002      	beq.n	800c40a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800c404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c406:	025b      	lsls	r3, r3, #9
 800c408:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c40a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c40e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	025b      	lsls	r3, r3, #9
 800c414:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c416:	2390      	movs	r3, #144	@ 0x90
 800c418:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c41a:	2302      	movs	r3, #2
 800c41c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c41e:	2300      	movs	r3, #0
 800c420:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800c422:	2301      	movs	r3, #1
 800c424:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f107 0210 	add.w	r2, r7, #16
 800c42e:	4611      	mov	r1, r2
 800c430:	4618      	mov	r0, r3
 800c432:	f002 ff43 	bl	800f2bc <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	2b01      	cmp	r3, #1
 800c43a:	d90a      	bls.n	800c452 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2282      	movs	r2, #130	@ 0x82
 800c440:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c448:	4618      	mov	r0, r3
 800c44a:	f002 ffa7 	bl	800f39c <SDMMC_CmdReadMultiBlock>
 800c44e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c450:	e009      	b.n	800c466 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2281      	movs	r2, #129	@ 0x81
 800c456:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c45e:	4618      	mov	r0, r3
 800c460:	f002 ff7a 	bl	800f358 <SDMMC_CmdReadSingleBlock>
 800c464:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800c466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d012      	beq.n	800c492 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a0d      	ldr	r2, [pc, #52]	@ (800c4a8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c472:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c47a:	431a      	orrs	r2, r3
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	2201      	movs	r2, #1
 800c484:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2200      	movs	r2, #0
 800c48c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800c48e:	2301      	movs	r3, #1
 800c490:	e002      	b.n	800c498 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800c492:	2300      	movs	r3, #0
 800c494:	e000      	b.n	800c498 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800c496:	2302      	movs	r3, #2
  }
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3730      	adds	r7, #48	@ 0x30
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	0800cd83 	.word	0x0800cd83
 800c4a4:	0800cdf5 	.word	0x0800cdf5
 800c4a8:	004005ff 	.word	0x004005ff

0800c4ac <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b08c      	sub	sp, #48	@ 0x30
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	60b9      	str	r1, [r7, #8]
 800c4b6:	607a      	str	r2, [r7, #4]
 800c4b8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d107      	bne.n	800c4d4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4c8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	e0c6      	b.n	800c662 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	f040 80bf 	bne.w	800c660 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c4e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	441a      	add	r2, r3
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d907      	bls.n	800c506 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4fa:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800c502:	2301      	movs	r3, #1
 800c504:	e0ad      	b.n	800c662 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2203      	movs	r2, #3
 800c50a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2200      	movs	r2, #0
 800c514:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f042 021a 	orr.w	r2, r2, #26
 800c524:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c52a:	4a50      	ldr	r2, [pc, #320]	@ (800c66c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800c52c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c532:	4a4f      	ldr	r2, [pc, #316]	@ (800c670 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800c534:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c53a:	2200      	movs	r2, #0
 800c53c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c542:	2b01      	cmp	r3, #1
 800c544:	d002      	beq.n	800c54c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800c546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c548:	025b      	lsls	r3, r3, #9
 800c54a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d90a      	bls.n	800c568 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	22a0      	movs	r2, #160	@ 0xa0
 800c556:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c55e:	4618      	mov	r0, r3
 800c560:	f002 ff60 	bl	800f424 <SDMMC_CmdWriteMultiBlock>
 800c564:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c566:	e009      	b.n	800c57c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2290      	movs	r2, #144	@ 0x90
 800c56c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c574:	4618      	mov	r0, r3
 800c576:	f002 ff33 	bl	800f3e0 <SDMMC_CmdWriteSingleBlock>
 800c57a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d012      	beq.n	800c5a8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a3b      	ldr	r2, [pc, #236]	@ (800c674 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800c588:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c590:	431a      	orrs	r2, r3
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2201      	movs	r2, #1
 800c59a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	e05c      	b.n	800c662 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f042 0208 	orr.w	r2, r2, #8
 800c5b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5bc:	2240      	movs	r2, #64	@ 0x40
 800c5be:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5d0:	689a      	ldr	r2, [r3, #8]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	430a      	orrs	r2, r1
 800c5da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c5e0:	68b9      	ldr	r1, [r7, #8]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	3380      	adds	r3, #128	@ 0x80
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	025b      	lsls	r3, r3, #9
 800c5ee:	089b      	lsrs	r3, r3, #2
 800c5f0:	f7fb fce2 	bl	8007fb8 <HAL_DMA_Start_IT>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d01a      	beq.n	800c630 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f022 021a 	bic.w	r2, r2, #26
 800c608:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4a19      	ldr	r2, [pc, #100]	@ (800c674 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800c610:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c616:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2201      	movs	r2, #1
 800c622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2200      	movs	r2, #0
 800c62a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c62c:	2301      	movs	r3, #1
 800c62e:	e018      	b.n	800c662 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c630:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c634:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	025b      	lsls	r3, r3, #9
 800c63a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c63c:	2390      	movs	r3, #144	@ 0x90
 800c63e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c640:	2300      	movs	r3, #0
 800c642:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c644:	2300      	movs	r3, #0
 800c646:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800c648:	2301      	movs	r3, #1
 800c64a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f107 0210 	add.w	r2, r7, #16
 800c654:	4611      	mov	r1, r2
 800c656:	4618      	mov	r0, r3
 800c658:	f002 fe30 	bl	800f2bc <SDMMC_ConfigData>

      return HAL_OK;
 800c65c:	2300      	movs	r3, #0
 800c65e:	e000      	b.n	800c662 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800c660:	2302      	movs	r3, #2
  }
}
 800c662:	4618      	mov	r0, r3
 800c664:	3730      	adds	r7, #48	@ 0x30
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	0800cd59 	.word	0x0800cd59
 800c670:	0800cdf5 	.word	0x0800cdf5
 800c674:	004005ff 	.word	0x004005ff

0800c678 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b084      	sub	sp, #16
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c684:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c68c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c690:	2b00      	cmp	r3, #0
 800c692:	d008      	beq.n	800c6a6 <HAL_SD_IRQHandler+0x2e>
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f003 0308 	and.w	r3, r3, #8
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d003      	beq.n	800c6a6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f000 fdec 	bl	800d27c <SD_Read_IT>
 800c6a4:	e15a      	b.n	800c95c <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	f000 808d 	beq.w	800c7d0 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c6be:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	4b9a      	ldr	r3, [pc, #616]	@ (800c934 <HAL_SD_IRQHandler+0x2bc>)
 800c6cc:	400b      	ands	r3, r1
 800c6ce:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f022 0201 	bic.w	r2, r2, #1
 800c6de:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	f003 0308 	and.w	r3, r3, #8
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d039      	beq.n	800c75e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	f003 0302 	and.w	r3, r3, #2
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d104      	bne.n	800c6fe <HAL_SD_IRQHandler+0x86>
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f003 0320 	and.w	r3, r3, #32
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d011      	beq.n	800c722 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4618      	mov	r0, r3
 800c704:	f002 feb0 	bl	800f468 <SDMMC_CmdStopTransfer>
 800c708:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d008      	beq.n	800c722 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	431a      	orrs	r2, r3
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f000 f921 	bl	800c964 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f240 523a 	movw	r2, #1338	@ 0x53a
 800c72a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2201      	movs	r2, #1
 800c730:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2200      	movs	r2, #0
 800c738:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f003 0301 	and.w	r3, r3, #1
 800c740:	2b00      	cmp	r3, #0
 800c742:	d104      	bne.n	800c74e <HAL_SD_IRQHandler+0xd6>
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f003 0302 	and.w	r3, r3, #2
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d003      	beq.n	800c756 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f003 face 	bl	800fcf0 <HAL_SD_RxCpltCallback>
 800c754:	e102      	b.n	800c95c <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f003 fac0 	bl	800fcdc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c75c:	e0fe      	b.n	800c95c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c764:	2b00      	cmp	r3, #0
 800c766:	f000 80f9 	beq.w	800c95c <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f003 0320 	and.w	r3, r3, #32
 800c770:	2b00      	cmp	r3, #0
 800c772:	d011      	beq.n	800c798 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4618      	mov	r0, r3
 800c77a:	f002 fe75 	bl	800f468 <SDMMC_CmdStopTransfer>
 800c77e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d008      	beq.n	800c798 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	431a      	orrs	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f8e6 	bl	800c964 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f003 0301 	and.w	r3, r3, #1
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	f040 80dc 	bne.w	800c95c <HAL_SD_IRQHandler+0x2e4>
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f003 0302 	and.w	r3, r3, #2
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	f040 80d6 	bne.w	800c95c <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f022 0208 	bic.w	r2, r2, #8
 800c7be:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f003 fa87 	bl	800fcdc <HAL_SD_TxCpltCallback>
}
 800c7ce:	e0c5      	b.n	800c95c <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d008      	beq.n	800c7f0 <HAL_SD_IRQHandler+0x178>
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	f003 0308 	and.w	r3, r3, #8
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d003      	beq.n	800c7f0 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 fd98 	bl	800d31e <SD_Write_IT>
 800c7ee:	e0b5      	b.n	800c95c <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7f6:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	f000 80ae 	beq.w	800c95c <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c806:	f003 0302 	and.w	r3, r3, #2
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d005      	beq.n	800c81a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c812:	f043 0202 	orr.w	r2, r3, #2
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c820:	f003 0308 	and.w	r3, r3, #8
 800c824:	2b00      	cmp	r3, #0
 800c826:	d005      	beq.n	800c834 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c82c:	f043 0208 	orr.w	r2, r3, #8
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c83a:	f003 0320 	and.w	r3, r3, #32
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d005      	beq.n	800c84e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c846:	f043 0220 	orr.w	r2, r3, #32
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c854:	f003 0310 	and.w	r3, r3, #16
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d005      	beq.n	800c868 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c860:	f043 0210 	orr.w	r2, r3, #16
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f240 523a 	movw	r2, #1338	@ 0x53a
 800c870:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800c880:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4618      	mov	r0, r3
 800c888:	f002 fdee 	bl	800f468 <SDMMC_CmdStopTransfer>
 800c88c:	4602      	mov	r2, r0
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c892:	431a      	orrs	r2, r3
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f003 0308 	and.w	r3, r3, #8
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d00a      	beq.n	800c8b8 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f000 f857 	bl	800c964 <HAL_SD_ErrorCallback>
}
 800c8b6:	e051      	b.n	800c95c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d04c      	beq.n	800c95c <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f003 0310 	and.w	r3, r3, #16
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d104      	bne.n	800c8d6 <HAL_SD_IRQHandler+0x25e>
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f003 0320 	and.w	r3, r3, #32
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d011      	beq.n	800c8fa <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8da:	4a17      	ldr	r2, [pc, #92]	@ (800c938 <HAL_SD_IRQHandler+0x2c0>)
 800c8dc:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f7fb fc38 	bl	8008158 <HAL_DMA_Abort_IT>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d036      	beq.n	800c95c <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f000 fad0 	bl	800ce98 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c8f8:	e030      	b.n	800c95c <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f003 0301 	and.w	r3, r3, #1
 800c900:	2b00      	cmp	r3, #0
 800c902:	d104      	bne.n	800c90e <HAL_SD_IRQHandler+0x296>
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f003 0302 	and.w	r3, r3, #2
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d018      	beq.n	800c940 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c912:	4a0a      	ldr	r2, [pc, #40]	@ (800c93c <HAL_SD_IRQHandler+0x2c4>)
 800c914:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fb fc1c 	bl	8008158 <HAL_DMA_Abort_IT>
 800c920:	4603      	mov	r3, r0
 800c922:	2b00      	cmp	r3, #0
 800c924:	d01a      	beq.n	800c95c <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c92a:	4618      	mov	r0, r3
 800c92c:	f000 faeb 	bl	800cf06 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c930:	e014      	b.n	800c95c <HAL_SD_IRQHandler+0x2e4>
 800c932:	bf00      	nop
 800c934:	ffff3ec5 	.word	0xffff3ec5
 800c938:	0800ce99 	.word	0x0800ce99
 800c93c:	0800cf07 	.word	0x0800cf07
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2200      	movs	r2, #0
 800c944:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2201      	movs	r2, #1
 800c94a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f003 f9b7 	bl	800fcc8 <HAL_SD_AbortCallback>
}
 800c95a:	e7ff      	b.n	800c95c <HAL_SD_IRQHandler+0x2e4>
 800c95c:	bf00      	nop
 800c95e:	3710      	adds	r7, #16
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c964:	b480      	push	{r7}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c96c:	bf00      	nop
 800c96e:	370c      	adds	r7, #12
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr

0800c978 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c986:	0f9b      	lsrs	r3, r3, #30
 800c988:	b2da      	uxtb	r2, r3
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c992:	0e9b      	lsrs	r3, r3, #26
 800c994:	b2db      	uxtb	r3, r3
 800c996:	f003 030f 	and.w	r3, r3, #15
 800c99a:	b2da      	uxtb	r2, r3
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9a4:	0e1b      	lsrs	r3, r3, #24
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	f003 0303 	and.w	r3, r3, #3
 800c9ac:	b2da      	uxtb	r2, r3
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9b6:	0c1b      	lsrs	r3, r3, #16
 800c9b8:	b2da      	uxtb	r2, r3
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9c2:	0a1b      	lsrs	r3, r3, #8
 800c9c4:	b2da      	uxtb	r2, r3
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9ce:	b2da      	uxtb	r2, r3
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c9d8:	0d1b      	lsrs	r3, r3, #20
 800c9da:	b29a      	uxth	r2, r3
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c9e4:	0c1b      	lsrs	r3, r3, #16
 800c9e6:	b2db      	uxtb	r3, r3
 800c9e8:	f003 030f 	and.w	r3, r3, #15
 800c9ec:	b2da      	uxtb	r2, r3
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c9f6:	0bdb      	lsrs	r3, r3, #15
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	f003 0301 	and.w	r3, r3, #1
 800c9fe:	b2da      	uxtb	r2, r3
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca08:	0b9b      	lsrs	r3, r3, #14
 800ca0a:	b2db      	uxtb	r3, r3
 800ca0c:	f003 0301 	and.w	r3, r3, #1
 800ca10:	b2da      	uxtb	r2, r3
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca1a:	0b5b      	lsrs	r3, r3, #13
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	f003 0301 	and.w	r3, r3, #1
 800ca22:	b2da      	uxtb	r2, r3
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca2c:	0b1b      	lsrs	r3, r3, #12
 800ca2e:	b2db      	uxtb	r3, r3
 800ca30:	f003 0301 	and.w	r3, r3, #1
 800ca34:	b2da      	uxtb	r2, r3
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d163      	bne.n	800cb10 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca4c:	009a      	lsls	r2, r3, #2
 800ca4e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800ca52:	4013      	ands	r3, r2
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800ca58:	0f92      	lsrs	r2, r2, #30
 800ca5a:	431a      	orrs	r2, r3
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca64:	0edb      	lsrs	r3, r3, #27
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	f003 0307 	and.w	r3, r3, #7
 800ca6c:	b2da      	uxtb	r2, r3
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca76:	0e1b      	lsrs	r3, r3, #24
 800ca78:	b2db      	uxtb	r3, r3
 800ca7a:	f003 0307 	and.w	r3, r3, #7
 800ca7e:	b2da      	uxtb	r2, r3
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca88:	0d5b      	lsrs	r3, r3, #21
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	f003 0307 	and.w	r3, r3, #7
 800ca90:	b2da      	uxtb	r2, r3
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca9a:	0c9b      	lsrs	r3, r3, #18
 800ca9c:	b2db      	uxtb	r3, r3
 800ca9e:	f003 0307 	and.w	r3, r3, #7
 800caa2:	b2da      	uxtb	r2, r3
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800caac:	0bdb      	lsrs	r3, r3, #15
 800caae:	b2db      	uxtb	r3, r3
 800cab0:	f003 0307 	and.w	r3, r3, #7
 800cab4:	b2da      	uxtb	r2, r3
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	691b      	ldr	r3, [r3, #16]
 800cabe:	1c5a      	adds	r2, r3, #1
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	7e1b      	ldrb	r3, [r3, #24]
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	f003 0307 	and.w	r3, r3, #7
 800cace:	3302      	adds	r3, #2
 800cad0:	2201      	movs	r2, #1
 800cad2:	fa02 f303 	lsl.w	r3, r2, r3
 800cad6:	687a      	ldr	r2, [r7, #4]
 800cad8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800cada:	fb03 f202 	mul.w	r2, r3, r2
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	7a1b      	ldrb	r3, [r3, #8]
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	f003 030f 	and.w	r3, r3, #15
 800caec:	2201      	movs	r2, #1
 800caee:	409a      	lsls	r2, r3
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800cafc:	0a52      	lsrs	r2, r2, #9
 800cafe:	fb03 f202 	mul.w	r2, r3, r2
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb0c:	661a      	str	r2, [r3, #96]	@ 0x60
 800cb0e:	e031      	b.n	800cb74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d11d      	bne.n	800cb54 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb1c:	041b      	lsls	r3, r3, #16
 800cb1e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb26:	0c1b      	lsrs	r3, r3, #16
 800cb28:	431a      	orrs	r2, r3
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	691b      	ldr	r3, [r3, #16]
 800cb32:	3301      	adds	r3, #1
 800cb34:	029a      	lsls	r2, r3, #10
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb48:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	661a      	str	r2, [r3, #96]	@ 0x60
 800cb52:	e00f      	b.n	800cb74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	4a58      	ldr	r2, [pc, #352]	@ (800ccbc <HAL_SD_GetCardCSD+0x344>)
 800cb5a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb60:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800cb70:	2301      	movs	r3, #1
 800cb72:	e09d      	b.n	800ccb0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb78:	0b9b      	lsrs	r3, r3, #14
 800cb7a:	b2db      	uxtb	r3, r3
 800cb7c:	f003 0301 	and.w	r3, r3, #1
 800cb80:	b2da      	uxtb	r2, r3
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb8a:	09db      	lsrs	r3, r3, #7
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb92:	b2da      	uxtb	r2, r3
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cba2:	b2da      	uxtb	r2, r3
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cbac:	0fdb      	lsrs	r3, r3, #31
 800cbae:	b2da      	uxtb	r2, r3
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cbb8:	0f5b      	lsrs	r3, r3, #29
 800cbba:	b2db      	uxtb	r3, r3
 800cbbc:	f003 0303 	and.w	r3, r3, #3
 800cbc0:	b2da      	uxtb	r2, r3
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cbca:	0e9b      	lsrs	r3, r3, #26
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	f003 0307 	and.w	r3, r3, #7
 800cbd2:	b2da      	uxtb	r2, r3
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cbdc:	0d9b      	lsrs	r3, r3, #22
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	f003 030f 	and.w	r3, r3, #15
 800cbe4:	b2da      	uxtb	r2, r3
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cbee:	0d5b      	lsrs	r3, r3, #21
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	f003 0301 	and.w	r3, r3, #1
 800cbf6:	b2da      	uxtb	r2, r3
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	2200      	movs	r2, #0
 800cc02:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc0a:	0c1b      	lsrs	r3, r3, #16
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	f003 0301 	and.w	r3, r3, #1
 800cc12:	b2da      	uxtb	r2, r3
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc1e:	0bdb      	lsrs	r3, r3, #15
 800cc20:	b2db      	uxtb	r3, r3
 800cc22:	f003 0301 	and.w	r3, r3, #1
 800cc26:	b2da      	uxtb	r2, r3
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc32:	0b9b      	lsrs	r3, r3, #14
 800cc34:	b2db      	uxtb	r3, r3
 800cc36:	f003 0301 	and.w	r3, r3, #1
 800cc3a:	b2da      	uxtb	r2, r3
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc46:	0b5b      	lsrs	r3, r3, #13
 800cc48:	b2db      	uxtb	r3, r3
 800cc4a:	f003 0301 	and.w	r3, r3, #1
 800cc4e:	b2da      	uxtb	r2, r3
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc5a:	0b1b      	lsrs	r3, r3, #12
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	f003 0301 	and.w	r3, r3, #1
 800cc62:	b2da      	uxtb	r2, r3
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc6e:	0a9b      	lsrs	r3, r3, #10
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	f003 0303 	and.w	r3, r3, #3
 800cc76:	b2da      	uxtb	r2, r3
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc82:	0a1b      	lsrs	r3, r3, #8
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	f003 0303 	and.w	r3, r3, #3
 800cc8a:	b2da      	uxtb	r2, r3
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc96:	085b      	lsrs	r3, r3, #1
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc9e:	b2da      	uxtb	r2, r3
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	2201      	movs	r2, #1
 800ccaa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800ccae:	2300      	movs	r3, #0
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr
 800ccbc:	004005ff 	.word	0x004005ff

0800ccc0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b083      	sub	sp, #12
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cd0a:	2300      	movs	r3, #0
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	370c      	adds	r7, #12
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr

0800cd18 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b086      	sub	sp, #24
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cd20:	2300      	movs	r3, #0
 800cd22:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cd24:	f107 030c 	add.w	r3, r7, #12
 800cd28:	4619      	mov	r1, r3
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 fa7e 	bl	800d22c <SD_SendStatus>
 800cd30:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d005      	beq.n	800cd44 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	431a      	orrs	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	0a5b      	lsrs	r3, r3, #9
 800cd48:	f003 030f 	and.w	r3, r3, #15
 800cd4c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cd4e:	693b      	ldr	r3, [r7, #16]
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3718      	adds	r7, #24
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b085      	sub	sp, #20
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd64:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cd74:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800cd76:	bf00      	nop
 800cd78:	3714      	adds	r7, #20
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd80:	4770      	bx	lr

0800cd82 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cd82:	b580      	push	{r7, lr}
 800cd84:	b084      	sub	sp, #16
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd8e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd94:	2b82      	cmp	r3, #130	@ 0x82
 800cd96:	d111      	bne.n	800cdbc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f002 fb63 	bl	800f468 <SDMMC_CmdStopTransfer>
 800cda2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d008      	beq.n	800cdbc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	431a      	orrs	r2, r3
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800cdb6:	68f8      	ldr	r0, [r7, #12]
 800cdb8:	f7ff fdd4 	bl	800c964 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f022 0208 	bic.w	r2, r2, #8
 800cdca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f240 523a 	movw	r2, #1338	@ 0x53a
 800cdd4:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	2201      	movs	r2, #1
 800cdda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2200      	movs	r2, #0
 800cde2:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800cde4:	68f8      	ldr	r0, [r7, #12]
 800cde6:	f002 ff83 	bl	800fcf0 <HAL_SD_RxCpltCallback>
#endif
}
 800cdea:	bf00      	nop
 800cdec:	3710      	adds	r7, #16
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
	...

0800cdf4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b086      	sub	sp, #24
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce00:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f7fb fb54 	bl	80084b0 <HAL_DMA_GetError>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2b02      	cmp	r3, #2
 800ce0c:	d03e      	beq.n	800ce8c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce14:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce1c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d002      	beq.n	800ce2a <SD_DMAError+0x36>
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d12d      	bne.n	800ce86 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	4a19      	ldr	r2, [pc, #100]	@ (800ce94 <SD_DMAError+0xa0>)
 800ce30:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800ce40:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce46:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800ce4e:	6978      	ldr	r0, [r7, #20]
 800ce50:	f7ff ff62 	bl	800cd18 <HAL_SD_GetCardState>
 800ce54:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	2b06      	cmp	r3, #6
 800ce5a:	d002      	beq.n	800ce62 <SD_DMAError+0x6e>
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	2b05      	cmp	r3, #5
 800ce60:	d10a      	bne.n	800ce78 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	4618      	mov	r0, r3
 800ce68:	f002 fafe 	bl	800f468 <SDMMC_CmdStopTransfer>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce72:	431a      	orrs	r2, r3
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	2200      	movs	r2, #0
 800ce84:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800ce86:	6978      	ldr	r0, [r7, #20]
 800ce88:	f7ff fd6c 	bl	800c964 <HAL_SD_ErrorCallback>
#endif
  }
}
 800ce8c:	bf00      	nop
 800ce8e:	3718      	adds	r7, #24
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	004005ff 	.word	0x004005ff

0800ce98 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cea4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f240 523a 	movw	r2, #1338	@ 0x53a
 800ceae:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ceb0:	68f8      	ldr	r0, [r7, #12]
 800ceb2:	f7ff ff31 	bl	800cd18 <HAL_SD_GetCardState>
 800ceb6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2201      	movs	r2, #1
 800cebc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2200      	movs	r2, #0
 800cec4:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	2b06      	cmp	r3, #6
 800ceca:	d002      	beq.n	800ced2 <SD_DMATxAbort+0x3a>
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	2b05      	cmp	r3, #5
 800ced0:	d10a      	bne.n	800cee8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	4618      	mov	r0, r3
 800ced8:	f002 fac6 	bl	800f468 <SDMMC_CmdStopTransfer>
 800cedc:	4602      	mov	r2, r0
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cee2:	431a      	orrs	r2, r3
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d103      	bne.n	800cef8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800cef0:	68f8      	ldr	r0, [r7, #12]
 800cef2:	f002 fee9 	bl	800fcc8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800cef6:	e002      	b.n	800cefe <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800cef8:	68f8      	ldr	r0, [r7, #12]
 800cefa:	f7ff fd33 	bl	800c964 <HAL_SD_ErrorCallback>
}
 800cefe:	bf00      	nop
 800cf00:	3710      	adds	r7, #16
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}

0800cf06 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800cf06:	b580      	push	{r7, lr}
 800cf08:	b084      	sub	sp, #16
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf12:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f240 523a 	movw	r2, #1338	@ 0x53a
 800cf1c:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800cf1e:	68f8      	ldr	r0, [r7, #12]
 800cf20:	f7ff fefa 	bl	800cd18 <HAL_SD_GetCardState>
 800cf24:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2200      	movs	r2, #0
 800cf32:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	2b06      	cmp	r3, #6
 800cf38:	d002      	beq.n	800cf40 <SD_DMARxAbort+0x3a>
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	2b05      	cmp	r3, #5
 800cf3e:	d10a      	bne.n	800cf56 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4618      	mov	r0, r3
 800cf46:	f002 fa8f 	bl	800f468 <SDMMC_CmdStopTransfer>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf50:	431a      	orrs	r2, r3
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d103      	bne.n	800cf66 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800cf5e:	68f8      	ldr	r0, [r7, #12]
 800cf60:	f002 feb2 	bl	800fcc8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800cf64:	e002      	b.n	800cf6c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800cf66:	68f8      	ldr	r0, [r7, #12]
 800cf68:	f7ff fcfc 	bl	800c964 <HAL_SD_ErrorCallback>
}
 800cf6c:	bf00      	nop
 800cf6e:	3710      	adds	r7, #16
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cf74:	b5b0      	push	{r4, r5, r7, lr}
 800cf76:	b094      	sub	sp, #80	@ 0x50
 800cf78:	af04      	add	r7, sp, #16
 800cf7a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4618      	mov	r0, r3
 800cf86:	f002 f941 	bl	800f20c <SDMMC_GetPowerState>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d102      	bne.n	800cf96 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cf90:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800cf94:	e0b8      	b.n	800d108 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf9a:	2b03      	cmp	r3, #3
 800cf9c:	d02f      	beq.n	800cffe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f002 fb28 	bl	800f5f8 <SDMMC_CmdSendCID>
 800cfa8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cfaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d001      	beq.n	800cfb4 <SD_InitCard+0x40>
    {
      return errorstate;
 800cfb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfb2:	e0a9      	b.n	800d108 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2100      	movs	r1, #0
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f002 f96b 	bl	800f296 <SDMMC_GetResponse>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	2104      	movs	r1, #4
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f002 f962 	bl	800f296 <SDMMC_GetResponse>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2108      	movs	r1, #8
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f002 f959 	bl	800f296 <SDMMC_GetResponse>
 800cfe4:	4602      	mov	r2, r0
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	210c      	movs	r1, #12
 800cff0:	4618      	mov	r0, r3
 800cff2:	f002 f950 	bl	800f296 <SDMMC_GetResponse>
 800cff6:	4602      	mov	r2, r0
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d002:	2b03      	cmp	r3, #3
 800d004:	d00d      	beq.n	800d022 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f107 020e 	add.w	r2, r7, #14
 800d00e:	4611      	mov	r1, r2
 800d010:	4618      	mov	r0, r3
 800d012:	f002 fb2e 	bl	800f672 <SDMMC_CmdSetRelAdd>
 800d016:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d001      	beq.n	800d022 <SD_InitCard+0xae>
    {
      return errorstate;
 800d01e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d020:	e072      	b.n	800d108 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d026:	2b03      	cmp	r3, #3
 800d028:	d036      	beq.n	800d098 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d02a:	89fb      	ldrh	r3, [r7, #14]
 800d02c:	461a      	mov	r2, r3
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d03a:	041b      	lsls	r3, r3, #16
 800d03c:	4619      	mov	r1, r3
 800d03e:	4610      	mov	r0, r2
 800d040:	f002 faf8 	bl	800f634 <SDMMC_CmdSendCSD>
 800d044:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d001      	beq.n	800d050 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d04c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d04e:	e05b      	b.n	800d108 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	2100      	movs	r1, #0
 800d056:	4618      	mov	r0, r3
 800d058:	f002 f91d 	bl	800f296 <SDMMC_GetResponse>
 800d05c:	4602      	mov	r2, r0
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	2104      	movs	r1, #4
 800d068:	4618      	mov	r0, r3
 800d06a:	f002 f914 	bl	800f296 <SDMMC_GetResponse>
 800d06e:	4602      	mov	r2, r0
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2108      	movs	r1, #8
 800d07a:	4618      	mov	r0, r3
 800d07c:	f002 f90b 	bl	800f296 <SDMMC_GetResponse>
 800d080:	4602      	mov	r2, r0
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	210c      	movs	r1, #12
 800d08c:	4618      	mov	r0, r3
 800d08e:	f002 f902 	bl	800f296 <SDMMC_GetResponse>
 800d092:	4602      	mov	r2, r0
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	2104      	movs	r1, #4
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f002 f8f9 	bl	800f296 <SDMMC_GetResponse>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	0d1a      	lsrs	r2, r3, #20
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d0ac:	f107 0310 	add.w	r3, r7, #16
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f7ff fc60 	bl	800c978 <HAL_SD_GetCardCSD>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d002      	beq.n	800d0c4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d0be:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d0c2:	e021      	b.n	800d108 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6819      	ldr	r1, [r3, #0]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0cc:	041b      	lsls	r3, r3, #16
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	461c      	mov	r4, r3
 800d0d2:	4615      	mov	r5, r2
 800d0d4:	4622      	mov	r2, r4
 800d0d6:	462b      	mov	r3, r5
 800d0d8:	4608      	mov	r0, r1
 800d0da:	f002 f9e7 	bl	800f4ac <SDMMC_CmdSelDesel>
 800d0de:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d0e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d001      	beq.n	800d0ea <SD_InitCard+0x176>
  {
    return errorstate;
 800d0e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0e8:	e00e      	b.n	800d108 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681d      	ldr	r5, [r3, #0]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	466c      	mov	r4, sp
 800d0f2:	f103 0210 	add.w	r2, r3, #16
 800d0f6:	ca07      	ldmia	r2, {r0, r1, r2}
 800d0f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d0fc:	3304      	adds	r3, #4
 800d0fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d100:	4628      	mov	r0, r5
 800d102:	f002 f82b 	bl	800f15c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d106:	2300      	movs	r3, #0
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3740      	adds	r7, #64	@ 0x40
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bdb0      	pop	{r4, r5, r7, pc}

0800d110 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b086      	sub	sp, #24
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d118:	2300      	movs	r3, #0
 800d11a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d11c:	2300      	movs	r3, #0
 800d11e:	617b      	str	r3, [r7, #20]
 800d120:	2300      	movs	r3, #0
 800d122:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4618      	mov	r0, r3
 800d12a:	f002 f9e2 	bl	800f4f2 <SDMMC_CmdGoIdleState>
 800d12e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d001      	beq.n	800d13a <SD_PowerON+0x2a>
  {
    return errorstate;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	e072      	b.n	800d220 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	4618      	mov	r0, r3
 800d140:	f002 f9f5 	bl	800f52e <SDMMC_CmdOperCond>
 800d144:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d00d      	beq.n	800d168 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2200      	movs	r2, #0
 800d150:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4618      	mov	r0, r3
 800d158:	f002 f9cb 	bl	800f4f2 <SDMMC_CmdGoIdleState>
 800d15c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d004      	beq.n	800d16e <SD_PowerON+0x5e>
    {
      return errorstate;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	e05b      	b.n	800d220 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2201      	movs	r2, #1
 800d16c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d172:	2b01      	cmp	r3, #1
 800d174:	d137      	bne.n	800d1e6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2100      	movs	r1, #0
 800d17c:	4618      	mov	r0, r3
 800d17e:	f002 f9f5 	bl	800f56c <SDMMC_CmdAppCommand>
 800d182:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d02d      	beq.n	800d1e6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d18a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d18e:	e047      	b.n	800d220 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	2100      	movs	r1, #0
 800d196:	4618      	mov	r0, r3
 800d198:	f002 f9e8 	bl	800f56c <SDMMC_CmdAppCommand>
 800d19c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d001      	beq.n	800d1a8 <SD_PowerON+0x98>
    {
      return errorstate;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	e03b      	b.n	800d220 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	491e      	ldr	r1, [pc, #120]	@ (800d228 <SD_PowerON+0x118>)
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f002 f9fe 	bl	800f5b0 <SDMMC_CmdAppOperCommand>
 800d1b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d002      	beq.n	800d1c2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d1bc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d1c0:	e02e      	b.n	800d220 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	2100      	movs	r1, #0
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f002 f864 	bl	800f296 <SDMMC_GetResponse>
 800d1ce:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	0fdb      	lsrs	r3, r3, #31
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d101      	bne.n	800d1dc <SD_PowerON+0xcc>
 800d1d8:	2301      	movs	r3, #1
 800d1da:	e000      	b.n	800d1de <SD_PowerON+0xce>
 800d1dc:	2300      	movs	r3, #0
 800d1de:	613b      	str	r3, [r7, #16]

    count++;
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d802      	bhi.n	800d1f6 <SD_PowerON+0xe6>
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d0cc      	beq.n	800d190 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d902      	bls.n	800d206 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d200:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d204:	e00c      	b.n	800d220 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d003      	beq.n	800d218 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2201      	movs	r2, #1
 800d214:	645a      	str	r2, [r3, #68]	@ 0x44
 800d216:	e002      	b.n	800d21e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2200      	movs	r2, #0
 800d21c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d21e:	2300      	movs	r3, #0
}
 800d220:	4618      	mov	r0, r3
 800d222:	3718      	adds	r7, #24
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}
 800d228:	c1100000 	.word	0xc1100000

0800d22c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d102      	bne.n	800d242 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d23c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d240:	e018      	b.n	800d274 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681a      	ldr	r2, [r3, #0]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d24a:	041b      	lsls	r3, r3, #16
 800d24c:	4619      	mov	r1, r3
 800d24e:	4610      	mov	r0, r2
 800d250:	f002 fa30 	bl	800f6b4 <SDMMC_CmdSendStatus>
 800d254:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d001      	beq.n	800d260 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	e009      	b.n	800d274 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	2100      	movs	r1, #0
 800d266:	4618      	mov	r0, r3
 800d268:	f002 f815 	bl	800f296 <SDMMC_GetResponse>
 800d26c:	4602      	mov	r2, r0
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d272:	2300      	movs	r3, #0
}
 800d274:	4618      	mov	r0, r3
 800d276:	3710      	adds	r7, #16
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b086      	sub	sp, #24
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d288:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d28e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d03f      	beq.n	800d316 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800d296:	2300      	movs	r3, #0
 800d298:	617b      	str	r3, [r7, #20]
 800d29a:	e033      	b.n	800d304 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f001 ff87 	bl	800f1b4 <SDMMC_ReadFIFO>
 800d2a6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	b2da      	uxtb	r2, r3
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	3b01      	subs	r3, #1
 800d2ba:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	0a1b      	lsrs	r3, r3, #8
 800d2c0:	b2da      	uxtb	r2, r3
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	3b01      	subs	r3, #1
 800d2d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	0c1b      	lsrs	r3, r3, #16
 800d2d6:	b2da      	uxtb	r2, r3
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	3301      	adds	r3, #1
 800d2e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	3b01      	subs	r3, #1
 800d2e6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	0e1b      	lsrs	r3, r3, #24
 800d2ec:	b2da      	uxtb	r2, r3
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	3b01      	subs	r3, #1
 800d2fc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	3301      	adds	r3, #1
 800d302:	617b      	str	r3, [r7, #20]
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	2b07      	cmp	r3, #7
 800d308:	d9c8      	bls.n	800d29c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	68fa      	ldr	r2, [r7, #12]
 800d30e:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	693a      	ldr	r2, [r7, #16]
 800d314:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800d316:	bf00      	nop
 800d318:	3718      	adds	r7, #24
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}

0800d31e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d31e:	b580      	push	{r7, lr}
 800d320:	b086      	sub	sp, #24
 800d322:	af00      	add	r7, sp, #0
 800d324:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6a1b      	ldr	r3, [r3, #32]
 800d32a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d330:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d043      	beq.n	800d3c0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800d338:	2300      	movs	r3, #0
 800d33a:	617b      	str	r3, [r7, #20]
 800d33c:	e037      	b.n	800d3ae <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	3301      	adds	r3, #1
 800d348:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	3b01      	subs	r3, #1
 800d34e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	021a      	lsls	r2, r3, #8
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	4313      	orrs	r3, r2
 800d35a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	3301      	adds	r3, #1
 800d360:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	3b01      	subs	r3, #1
 800d366:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	041a      	lsls	r2, r3, #16
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	4313      	orrs	r3, r2
 800d372:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	3301      	adds	r3, #1
 800d378:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	3b01      	subs	r3, #1
 800d37e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	061a      	lsls	r2, r3, #24
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	4313      	orrs	r3, r2
 800d38a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	3301      	adds	r3, #1
 800d390:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	3b01      	subs	r3, #1
 800d396:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f107 0208 	add.w	r2, r7, #8
 800d3a0:	4611      	mov	r1, r2
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f001 ff13 	bl	800f1ce <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	617b      	str	r3, [r7, #20]
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	2b07      	cmp	r3, #7
 800d3b2:	d9c4      	bls.n	800d33e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	68fa      	ldr	r2, [r7, #12]
 800d3b8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	693a      	ldr	r2, [r7, #16]
 800d3be:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800d3c0:	bf00      	nop
 800d3c2:	3718      	adds	r7, #24
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d101      	bne.n	800d3dc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d3d8:	2301      	movs	r3, #1
 800d3da:	e025      	b.n	800d428 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d3e2:	b2db      	uxtb	r3, r3
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d106      	bne.n	800d3f6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f7f8 fa09 	bl	8005808 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2202      	movs	r2, #2
 800d3fa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681a      	ldr	r2, [r3, #0]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	3304      	adds	r3, #4
 800d406:	4619      	mov	r1, r3
 800d408:	4610      	mov	r0, r2
 800d40a:	f001 fda5 	bl	800ef58 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6818      	ldr	r0, [r3, #0]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	461a      	mov	r2, r3
 800d418:	6839      	ldr	r1, [r7, #0]
 800d41a:	f001 fdf9 	bl	800f010 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2201      	movs	r2, #1
 800d422:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d426:	2300      	movs	r3, #0
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3708      	adds	r7, #8
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b086      	sub	sp, #24
 800d434:	af00      	add	r7, sp, #0
 800d436:	60f8      	str	r0, [r7, #12]
 800d438:	60b9      	str	r1, [r7, #8]
 800d43a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d442:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d444:	7dfb      	ldrb	r3, [r7, #23]
 800d446:	2b02      	cmp	r3, #2
 800d448:	d101      	bne.n	800d44e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800d44a:	2302      	movs	r3, #2
 800d44c:	e021      	b.n	800d492 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d44e:	7dfb      	ldrb	r3, [r7, #23]
 800d450:	2b01      	cmp	r3, #1
 800d452:	d002      	beq.n	800d45a <HAL_SDRAM_SendCommand+0x2a>
 800d454:	7dfb      	ldrb	r3, [r7, #23]
 800d456:	2b05      	cmp	r3, #5
 800d458:	d118      	bne.n	800d48c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2202      	movs	r2, #2
 800d45e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	687a      	ldr	r2, [r7, #4]
 800d468:	68b9      	ldr	r1, [r7, #8]
 800d46a:	4618      	mov	r0, r3
 800d46c:	f001 fe3a 	bl	800f0e4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	2b02      	cmp	r3, #2
 800d476:	d104      	bne.n	800d482 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	2205      	movs	r2, #5
 800d47c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d480:	e006      	b.n	800d490 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2201      	movs	r2, #1
 800d486:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d48a:	e001      	b.n	800d490 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800d48c:	2301      	movs	r3, #1
 800d48e:	e000      	b.n	800d492 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800d490:	2300      	movs	r3, #0
}
 800d492:	4618      	mov	r0, r3
 800d494:	3718      	adds	r7, #24
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}

0800d49a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d49a:	b580      	push	{r7, lr}
 800d49c:	b082      	sub	sp, #8
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
 800d4a2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d4aa:	b2db      	uxtb	r3, r3
 800d4ac:	2b02      	cmp	r3, #2
 800d4ae:	d101      	bne.n	800d4b4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d4b0:	2302      	movs	r3, #2
 800d4b2:	e016      	b.n	800d4e2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d4ba:	b2db      	uxtb	r3, r3
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	d10f      	bne.n	800d4e0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2202      	movs	r2, #2
 800d4c4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	6839      	ldr	r1, [r7, #0]
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f001 fe2c 	bl	800f12c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	e000      	b.n	800d4e2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800d4e0:	2301      	movs	r3, #1
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3708      	adds	r7, #8
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}

0800d4ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d4ea:	b580      	push	{r7, lr}
 800d4ec:	b082      	sub	sp, #8
 800d4ee:	af00      	add	r7, sp, #0
 800d4f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d101      	bne.n	800d4fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	e049      	b.n	800d590 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d502:	b2db      	uxtb	r3, r3
 800d504:	2b00      	cmp	r3, #0
 800d506:	d106      	bne.n	800d516 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2200      	movs	r2, #0
 800d50c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f000 f841 	bl	800d598 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2202      	movs	r2, #2
 800d51a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	3304      	adds	r3, #4
 800d526:	4619      	mov	r1, r3
 800d528:	4610      	mov	r0, r2
 800d52a:	f000 f9ff 	bl	800d92c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2201      	movs	r2, #1
 800d532:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2201      	movs	r2, #1
 800d53a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2201      	movs	r2, #1
 800d542:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2201      	movs	r2, #1
 800d54a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2201      	movs	r2, #1
 800d552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2201      	movs	r2, #1
 800d55a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2201      	movs	r2, #1
 800d562:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2201      	movs	r2, #1
 800d56a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2201      	movs	r2, #1
 800d572:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2201      	movs	r2, #1
 800d57a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2201      	movs	r2, #1
 800d582:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2201      	movs	r2, #1
 800d58a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d58e:	2300      	movs	r3, #0
}
 800d590:	4618      	mov	r0, r3
 800d592:	3708      	adds	r7, #8
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d598:	b480      	push	{r7}
 800d59a:	b083      	sub	sp, #12
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d5a0:	bf00      	nop
 800d5a2:	370c      	adds	r7, #12
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr

0800d5ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b085      	sub	sp, #20
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d5ba:	b2db      	uxtb	r3, r3
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d001      	beq.n	800d5c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	e054      	b.n	800d66e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2202      	movs	r2, #2
 800d5c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	68da      	ldr	r2, [r3, #12]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f042 0201 	orr.w	r2, r2, #1
 800d5da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a26      	ldr	r2, [pc, #152]	@ (800d67c <HAL_TIM_Base_Start_IT+0xd0>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d022      	beq.n	800d62c <HAL_TIM_Base_Start_IT+0x80>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d5ee:	d01d      	beq.n	800d62c <HAL_TIM_Base_Start_IT+0x80>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4a22      	ldr	r2, [pc, #136]	@ (800d680 <HAL_TIM_Base_Start_IT+0xd4>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d018      	beq.n	800d62c <HAL_TIM_Base_Start_IT+0x80>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4a21      	ldr	r2, [pc, #132]	@ (800d684 <HAL_TIM_Base_Start_IT+0xd8>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d013      	beq.n	800d62c <HAL_TIM_Base_Start_IT+0x80>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4a1f      	ldr	r2, [pc, #124]	@ (800d688 <HAL_TIM_Base_Start_IT+0xdc>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d00e      	beq.n	800d62c <HAL_TIM_Base_Start_IT+0x80>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	4a1e      	ldr	r2, [pc, #120]	@ (800d68c <HAL_TIM_Base_Start_IT+0xe0>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d009      	beq.n	800d62c <HAL_TIM_Base_Start_IT+0x80>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a1c      	ldr	r2, [pc, #112]	@ (800d690 <HAL_TIM_Base_Start_IT+0xe4>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d004      	beq.n	800d62c <HAL_TIM_Base_Start_IT+0x80>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a1b      	ldr	r2, [pc, #108]	@ (800d694 <HAL_TIM_Base_Start_IT+0xe8>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d115      	bne.n	800d658 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	689a      	ldr	r2, [r3, #8]
 800d632:	4b19      	ldr	r3, [pc, #100]	@ (800d698 <HAL_TIM_Base_Start_IT+0xec>)
 800d634:	4013      	ands	r3, r2
 800d636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2b06      	cmp	r3, #6
 800d63c:	d015      	beq.n	800d66a <HAL_TIM_Base_Start_IT+0xbe>
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d644:	d011      	beq.n	800d66a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	681a      	ldr	r2, [r3, #0]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f042 0201 	orr.w	r2, r2, #1
 800d654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d656:	e008      	b.n	800d66a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f042 0201 	orr.w	r2, r2, #1
 800d666:	601a      	str	r2, [r3, #0]
 800d668:	e000      	b.n	800d66c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d66a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d66c:	2300      	movs	r3, #0
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3714      	adds	r7, #20
 800d672:	46bd      	mov	sp, r7
 800d674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d678:	4770      	bx	lr
 800d67a:	bf00      	nop
 800d67c:	40010000 	.word	0x40010000
 800d680:	40000400 	.word	0x40000400
 800d684:	40000800 	.word	0x40000800
 800d688:	40000c00 	.word	0x40000c00
 800d68c:	40010400 	.word	0x40010400
 800d690:	40014000 	.word	0x40014000
 800d694:	40001800 	.word	0x40001800
 800d698:	00010007 	.word	0x00010007

0800d69c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	691b      	ldr	r3, [r3, #16]
 800d6aa:	f003 0302 	and.w	r3, r3, #2
 800d6ae:	2b02      	cmp	r3, #2
 800d6b0:	d122      	bne.n	800d6f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	68db      	ldr	r3, [r3, #12]
 800d6b8:	f003 0302 	and.w	r3, r3, #2
 800d6bc:	2b02      	cmp	r3, #2
 800d6be:	d11b      	bne.n	800d6f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	f06f 0202 	mvn.w	r2, #2
 800d6c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	699b      	ldr	r3, [r3, #24]
 800d6d6:	f003 0303 	and.w	r3, r3, #3
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d003      	beq.n	800d6e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f000 f905 	bl	800d8ee <HAL_TIM_IC_CaptureCallback>
 800d6e4:	e005      	b.n	800d6f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f000 f8f7 	bl	800d8da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f000 f908 	bl	800d902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	691b      	ldr	r3, [r3, #16]
 800d6fe:	f003 0304 	and.w	r3, r3, #4
 800d702:	2b04      	cmp	r3, #4
 800d704:	d122      	bne.n	800d74c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	68db      	ldr	r3, [r3, #12]
 800d70c:	f003 0304 	and.w	r3, r3, #4
 800d710:	2b04      	cmp	r3, #4
 800d712:	d11b      	bne.n	800d74c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f06f 0204 	mvn.w	r2, #4
 800d71c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2202      	movs	r2, #2
 800d722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	699b      	ldr	r3, [r3, #24]
 800d72a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d003      	beq.n	800d73a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f000 f8db 	bl	800d8ee <HAL_TIM_IC_CaptureCallback>
 800d738:	e005      	b.n	800d746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 f8cd 	bl	800d8da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 f8de 	bl	800d902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2200      	movs	r2, #0
 800d74a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	691b      	ldr	r3, [r3, #16]
 800d752:	f003 0308 	and.w	r3, r3, #8
 800d756:	2b08      	cmp	r3, #8
 800d758:	d122      	bne.n	800d7a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	f003 0308 	and.w	r3, r3, #8
 800d764:	2b08      	cmp	r3, #8
 800d766:	d11b      	bne.n	800d7a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f06f 0208 	mvn.w	r2, #8
 800d770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2204      	movs	r2, #4
 800d776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	69db      	ldr	r3, [r3, #28]
 800d77e:	f003 0303 	and.w	r3, r3, #3
 800d782:	2b00      	cmp	r3, #0
 800d784:	d003      	beq.n	800d78e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f000 f8b1 	bl	800d8ee <HAL_TIM_IC_CaptureCallback>
 800d78c:	e005      	b.n	800d79a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f000 f8a3 	bl	800d8da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f000 f8b4 	bl	800d902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2200      	movs	r2, #0
 800d79e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	691b      	ldr	r3, [r3, #16]
 800d7a6:	f003 0310 	and.w	r3, r3, #16
 800d7aa:	2b10      	cmp	r3, #16
 800d7ac:	d122      	bne.n	800d7f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	68db      	ldr	r3, [r3, #12]
 800d7b4:	f003 0310 	and.w	r3, r3, #16
 800d7b8:	2b10      	cmp	r3, #16
 800d7ba:	d11b      	bne.n	800d7f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f06f 0210 	mvn.w	r2, #16
 800d7c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2208      	movs	r2, #8
 800d7ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	69db      	ldr	r3, [r3, #28]
 800d7d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d003      	beq.n	800d7e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f000 f887 	bl	800d8ee <HAL_TIM_IC_CaptureCallback>
 800d7e0:	e005      	b.n	800d7ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f000 f879 	bl	800d8da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f000 f88a 	bl	800d902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	691b      	ldr	r3, [r3, #16]
 800d7fa:	f003 0301 	and.w	r3, r3, #1
 800d7fe:	2b01      	cmp	r3, #1
 800d800:	d10e      	bne.n	800d820 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	68db      	ldr	r3, [r3, #12]
 800d808:	f003 0301 	and.w	r3, r3, #1
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d107      	bne.n	800d820 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f06f 0201 	mvn.w	r2, #1
 800d818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f7f5 fc7e 	bl	800311c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	691b      	ldr	r3, [r3, #16]
 800d826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d82a:	2b80      	cmp	r3, #128	@ 0x80
 800d82c:	d10e      	bne.n	800d84c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	68db      	ldr	r3, [r3, #12]
 800d834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d838:	2b80      	cmp	r3, #128	@ 0x80
 800d83a:	d107      	bne.n	800d84c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f000 f91a 	bl	800da80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	691b      	ldr	r3, [r3, #16]
 800d852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d85a:	d10e      	bne.n	800d87a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	68db      	ldr	r3, [r3, #12]
 800d862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d866:	2b80      	cmp	r3, #128	@ 0x80
 800d868:	d107      	bne.n	800d87a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 f90d 	bl	800da94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	691b      	ldr	r3, [r3, #16]
 800d880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d884:	2b40      	cmp	r3, #64	@ 0x40
 800d886:	d10e      	bne.n	800d8a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d892:	2b40      	cmp	r3, #64	@ 0x40
 800d894:	d107      	bne.n	800d8a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d89e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f000 f838 	bl	800d916 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	691b      	ldr	r3, [r3, #16]
 800d8ac:	f003 0320 	and.w	r3, r3, #32
 800d8b0:	2b20      	cmp	r3, #32
 800d8b2:	d10e      	bne.n	800d8d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	68db      	ldr	r3, [r3, #12]
 800d8ba:	f003 0320 	and.w	r3, r3, #32
 800d8be:	2b20      	cmp	r3, #32
 800d8c0:	d107      	bne.n	800d8d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f06f 0220 	mvn.w	r2, #32
 800d8ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f000 f8cd 	bl	800da6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d8d2:	bf00      	nop
 800d8d4:	3708      	adds	r7, #8
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}

0800d8da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d8da:	b480      	push	{r7}
 800d8dc:	b083      	sub	sp, #12
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d8e2:	bf00      	nop
 800d8e4:	370c      	adds	r7, #12
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ec:	4770      	bx	lr

0800d8ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d8ee:	b480      	push	{r7}
 800d8f0:	b083      	sub	sp, #12
 800d8f2:	af00      	add	r7, sp, #0
 800d8f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d8f6:	bf00      	nop
 800d8f8:	370c      	adds	r7, #12
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d900:	4770      	bx	lr

0800d902 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d902:	b480      	push	{r7}
 800d904:	b083      	sub	sp, #12
 800d906:	af00      	add	r7, sp, #0
 800d908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d90a:	bf00      	nop
 800d90c:	370c      	adds	r7, #12
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr

0800d916 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d916:	b480      	push	{r7}
 800d918:	b083      	sub	sp, #12
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d91e:	bf00      	nop
 800d920:	370c      	adds	r7, #12
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr
	...

0800d92c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b085      	sub	sp, #20
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	4a40      	ldr	r2, [pc, #256]	@ (800da40 <TIM_Base_SetConfig+0x114>)
 800d940:	4293      	cmp	r3, r2
 800d942:	d013      	beq.n	800d96c <TIM_Base_SetConfig+0x40>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d94a:	d00f      	beq.n	800d96c <TIM_Base_SetConfig+0x40>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	4a3d      	ldr	r2, [pc, #244]	@ (800da44 <TIM_Base_SetConfig+0x118>)
 800d950:	4293      	cmp	r3, r2
 800d952:	d00b      	beq.n	800d96c <TIM_Base_SetConfig+0x40>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	4a3c      	ldr	r2, [pc, #240]	@ (800da48 <TIM_Base_SetConfig+0x11c>)
 800d958:	4293      	cmp	r3, r2
 800d95a:	d007      	beq.n	800d96c <TIM_Base_SetConfig+0x40>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	4a3b      	ldr	r2, [pc, #236]	@ (800da4c <TIM_Base_SetConfig+0x120>)
 800d960:	4293      	cmp	r3, r2
 800d962:	d003      	beq.n	800d96c <TIM_Base_SetConfig+0x40>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	4a3a      	ldr	r2, [pc, #232]	@ (800da50 <TIM_Base_SetConfig+0x124>)
 800d968:	4293      	cmp	r3, r2
 800d96a:	d108      	bne.n	800d97e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	68fa      	ldr	r2, [r7, #12]
 800d97a:	4313      	orrs	r3, r2
 800d97c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	4a2f      	ldr	r2, [pc, #188]	@ (800da40 <TIM_Base_SetConfig+0x114>)
 800d982:	4293      	cmp	r3, r2
 800d984:	d02b      	beq.n	800d9de <TIM_Base_SetConfig+0xb2>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d98c:	d027      	beq.n	800d9de <TIM_Base_SetConfig+0xb2>
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	4a2c      	ldr	r2, [pc, #176]	@ (800da44 <TIM_Base_SetConfig+0x118>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d023      	beq.n	800d9de <TIM_Base_SetConfig+0xb2>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	4a2b      	ldr	r2, [pc, #172]	@ (800da48 <TIM_Base_SetConfig+0x11c>)
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d01f      	beq.n	800d9de <TIM_Base_SetConfig+0xb2>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	4a2a      	ldr	r2, [pc, #168]	@ (800da4c <TIM_Base_SetConfig+0x120>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d01b      	beq.n	800d9de <TIM_Base_SetConfig+0xb2>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	4a29      	ldr	r2, [pc, #164]	@ (800da50 <TIM_Base_SetConfig+0x124>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d017      	beq.n	800d9de <TIM_Base_SetConfig+0xb2>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	4a28      	ldr	r2, [pc, #160]	@ (800da54 <TIM_Base_SetConfig+0x128>)
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d013      	beq.n	800d9de <TIM_Base_SetConfig+0xb2>
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	4a27      	ldr	r2, [pc, #156]	@ (800da58 <TIM_Base_SetConfig+0x12c>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d00f      	beq.n	800d9de <TIM_Base_SetConfig+0xb2>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	4a26      	ldr	r2, [pc, #152]	@ (800da5c <TIM_Base_SetConfig+0x130>)
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d00b      	beq.n	800d9de <TIM_Base_SetConfig+0xb2>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	4a25      	ldr	r2, [pc, #148]	@ (800da60 <TIM_Base_SetConfig+0x134>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d007      	beq.n	800d9de <TIM_Base_SetConfig+0xb2>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	4a24      	ldr	r2, [pc, #144]	@ (800da64 <TIM_Base_SetConfig+0x138>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d003      	beq.n	800d9de <TIM_Base_SetConfig+0xb2>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	4a23      	ldr	r2, [pc, #140]	@ (800da68 <TIM_Base_SetConfig+0x13c>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d108      	bne.n	800d9f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d9e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	68db      	ldr	r3, [r3, #12]
 800d9ea:	68fa      	ldr	r2, [r7, #12]
 800d9ec:	4313      	orrs	r3, r2
 800d9ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	695b      	ldr	r3, [r3, #20]
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	68fa      	ldr	r2, [r7, #12]
 800da02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	689a      	ldr	r2, [r3, #8]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	681a      	ldr	r2, [r3, #0]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	4a0a      	ldr	r2, [pc, #40]	@ (800da40 <TIM_Base_SetConfig+0x114>)
 800da18:	4293      	cmp	r3, r2
 800da1a:	d003      	beq.n	800da24 <TIM_Base_SetConfig+0xf8>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	4a0c      	ldr	r2, [pc, #48]	@ (800da50 <TIM_Base_SetConfig+0x124>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d103      	bne.n	800da2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	691a      	ldr	r2, [r3, #16]
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2201      	movs	r2, #1
 800da30:	615a      	str	r2, [r3, #20]
}
 800da32:	bf00      	nop
 800da34:	3714      	adds	r7, #20
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop
 800da40:	40010000 	.word	0x40010000
 800da44:	40000400 	.word	0x40000400
 800da48:	40000800 	.word	0x40000800
 800da4c:	40000c00 	.word	0x40000c00
 800da50:	40010400 	.word	0x40010400
 800da54:	40014000 	.word	0x40014000
 800da58:	40014400 	.word	0x40014400
 800da5c:	40014800 	.word	0x40014800
 800da60:	40001800 	.word	0x40001800
 800da64:	40001c00 	.word	0x40001c00
 800da68:	40002000 	.word	0x40002000

0800da6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800da6c:	b480      	push	{r7}
 800da6e:	b083      	sub	sp, #12
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800da74:	bf00      	nop
 800da76:	370c      	adds	r7, #12
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr

0800da80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800da80:	b480      	push	{r7}
 800da82:	b083      	sub	sp, #12
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800da88:	bf00      	nop
 800da8a:	370c      	adds	r7, #12
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr

0800da94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800da94:	b480      	push	{r7}
 800da96:	b083      	sub	sp, #12
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800da9c:	bf00      	nop
 800da9e:	370c      	adds	r7, #12
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr

0800daa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d101      	bne.n	800daba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dab6:	2301      	movs	r3, #1
 800dab8:	e040      	b.n	800db3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d106      	bne.n	800dad0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2200      	movs	r2, #0
 800dac6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f7f7 fd2a 	bl	8005524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2224      	movs	r2, #36	@ 0x24
 800dad4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	681a      	ldr	r2, [r3, #0]
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	f022 0201 	bic.w	r2, r2, #1
 800dae4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f000 fb62 	bl	800e1b0 <UART_SetConfig>
 800daec:	4603      	mov	r3, r0
 800daee:	2b01      	cmp	r3, #1
 800daf0:	d101      	bne.n	800daf6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800daf2:	2301      	movs	r3, #1
 800daf4:	e022      	b.n	800db3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d002      	beq.n	800db04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 fdba 	bl	800e678 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	685a      	ldr	r2, [r3, #4]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800db12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	689a      	ldr	r2, [r3, #8]
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800db22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	681a      	ldr	r2, [r3, #0]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f042 0201 	orr.w	r2, r2, #1
 800db32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f000 fe41 	bl	800e7bc <UART_CheckIdleState>
 800db3a:	4603      	mov	r3, r0
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3708      	adds	r7, #8
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}

0800db44 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b08a      	sub	sp, #40	@ 0x28
 800db48:	af00      	add	r7, sp, #0
 800db4a:	60f8      	str	r0, [r7, #12]
 800db4c:	60b9      	str	r1, [r7, #8]
 800db4e:	4613      	mov	r3, r2
 800db50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800db58:	2b20      	cmp	r3, #32
 800db5a:	d132      	bne.n	800dbc2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d002      	beq.n	800db68 <HAL_UART_Receive_IT+0x24>
 800db62:	88fb      	ldrh	r3, [r7, #6]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d101      	bne.n	800db6c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800db68:	2301      	movs	r3, #1
 800db6a:	e02b      	b.n	800dbc4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	2200      	movs	r2, #0
 800db70:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d018      	beq.n	800dbb2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	e853 3f00 	ldrex	r3, [r3]
 800db8c:	613b      	str	r3, [r7, #16]
   return(result);
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800db94:	627b      	str	r3, [r7, #36]	@ 0x24
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	461a      	mov	r2, r3
 800db9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db9e:	623b      	str	r3, [r7, #32]
 800dba0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dba2:	69f9      	ldr	r1, [r7, #28]
 800dba4:	6a3a      	ldr	r2, [r7, #32]
 800dba6:	e841 2300 	strex	r3, r2, [r1]
 800dbaa:	61bb      	str	r3, [r7, #24]
   return(result);
 800dbac:	69bb      	ldr	r3, [r7, #24]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d1e6      	bne.n	800db80 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800dbb2:	88fb      	ldrh	r3, [r7, #6]
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	68b9      	ldr	r1, [r7, #8]
 800dbb8:	68f8      	ldr	r0, [r7, #12]
 800dbba:	f000 fefd 	bl	800e9b8 <UART_Start_Receive_IT>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	e000      	b.n	800dbc4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800dbc2:	2302      	movs	r3, #2
  }
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3728      	adds	r7, #40	@ 0x28
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b0ba      	sub	sp, #232	@ 0xe8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	69db      	ldr	r3, [r3, #28]
 800dbda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	689b      	ldr	r3, [r3, #8]
 800dbee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dbf2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800dbf6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800dbfa:	4013      	ands	r3, r2
 800dbfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800dc00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d115      	bne.n	800dc34 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800dc08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc0c:	f003 0320 	and.w	r3, r3, #32
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d00f      	beq.n	800dc34 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800dc14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc18:	f003 0320 	and.w	r3, r3, #32
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d009      	beq.n	800dc34 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	f000 8297 	beq.w	800e158 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	4798      	blx	r3
      }
      return;
 800dc32:	e291      	b.n	800e158 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800dc34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	f000 8117 	beq.w	800de6c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800dc3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dc42:	f003 0301 	and.w	r3, r3, #1
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d106      	bne.n	800dc58 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800dc4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800dc4e:	4b85      	ldr	r3, [pc, #532]	@ (800de64 <HAL_UART_IRQHandler+0x298>)
 800dc50:	4013      	ands	r3, r2
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	f000 810a 	beq.w	800de6c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dc58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc5c:	f003 0301 	and.w	r3, r3, #1
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d011      	beq.n	800dc88 <HAL_UART_IRQHandler+0xbc>
 800dc64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d00b      	beq.n	800dc88 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	2201      	movs	r2, #1
 800dc76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dc7e:	f043 0201 	orr.w	r2, r3, #1
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc8c:	f003 0302 	and.w	r3, r3, #2
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d011      	beq.n	800dcb8 <HAL_UART_IRQHandler+0xec>
 800dc94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dc98:	f003 0301 	and.w	r3, r3, #1
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d00b      	beq.n	800dcb8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	2202      	movs	r2, #2
 800dca6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dcae:	f043 0204 	orr.w	r2, r3, #4
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dcb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dcbc:	f003 0304 	and.w	r3, r3, #4
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d011      	beq.n	800dce8 <HAL_UART_IRQHandler+0x11c>
 800dcc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dcc8:	f003 0301 	and.w	r3, r3, #1
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d00b      	beq.n	800dce8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	2204      	movs	r2, #4
 800dcd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dcde:	f043 0202 	orr.w	r2, r3, #2
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dcec:	f003 0308 	and.w	r3, r3, #8
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d017      	beq.n	800dd24 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800dcf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dcf8:	f003 0320 	and.w	r3, r3, #32
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d105      	bne.n	800dd0c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800dd00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dd04:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d00b      	beq.n	800dd24 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	2208      	movs	r2, #8
 800dd12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dd1a:	f043 0208 	orr.w	r2, r3, #8
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dd24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dd28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d012      	beq.n	800dd56 <HAL_UART_IRQHandler+0x18a>
 800dd30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dd34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d00c      	beq.n	800dd56 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dd44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dd4c:	f043 0220 	orr.w	r2, r3, #32
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	f000 81fd 	beq.w	800e15c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800dd62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dd66:	f003 0320 	and.w	r3, r3, #32
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d00d      	beq.n	800dd8a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800dd6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dd72:	f003 0320 	and.w	r3, r3, #32
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d007      	beq.n	800dd8a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d003      	beq.n	800dd8a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dd90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	689b      	ldr	r3, [r3, #8]
 800dd9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd9e:	2b40      	cmp	r3, #64	@ 0x40
 800dda0:	d005      	beq.n	800ddae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dda2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dda6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d04f      	beq.n	800de4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f000 fec8 	bl	800eb44 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	689b      	ldr	r3, [r3, #8]
 800ddba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ddbe:	2b40      	cmp	r3, #64	@ 0x40
 800ddc0:	d141      	bne.n	800de46 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	3308      	adds	r3, #8
 800ddc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ddd0:	e853 3f00 	ldrex	r3, [r3]
 800ddd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ddd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dddc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dde0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	3308      	adds	r3, #8
 800ddea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ddee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ddf2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ddfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ddfe:	e841 2300 	strex	r3, r2, [r1]
 800de02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800de06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d1d9      	bne.n	800ddc2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de12:	2b00      	cmp	r3, #0
 800de14:	d013      	beq.n	800de3e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de1a:	4a13      	ldr	r2, [pc, #76]	@ (800de68 <HAL_UART_IRQHandler+0x29c>)
 800de1c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de22:	4618      	mov	r0, r3
 800de24:	f7fa f998 	bl	8008158 <HAL_DMA_Abort_IT>
 800de28:	4603      	mov	r3, r0
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d017      	beq.n	800de5e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800de38:	4610      	mov	r0, r2
 800de3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de3c:	e00f      	b.n	800de5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f000 f9a0 	bl	800e184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de44:	e00b      	b.n	800de5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f000 f99c 	bl	800e184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de4c:	e007      	b.n	800de5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f000 f998 	bl	800e184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2200      	movs	r2, #0
 800de58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800de5c:	e17e      	b.n	800e15c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de5e:	bf00      	nop
    return;
 800de60:	e17c      	b.n	800e15c <HAL_UART_IRQHandler+0x590>
 800de62:	bf00      	nop
 800de64:	04000120 	.word	0x04000120
 800de68:	0800ec0d 	.word	0x0800ec0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de70:	2b01      	cmp	r3, #1
 800de72:	f040 814c 	bne.w	800e10e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800de76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de7a:	f003 0310 	and.w	r3, r3, #16
 800de7e:	2b00      	cmp	r3, #0
 800de80:	f000 8145 	beq.w	800e10e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800de84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de88:	f003 0310 	and.w	r3, r3, #16
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	f000 813e 	beq.w	800e10e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2210      	movs	r2, #16
 800de98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	689b      	ldr	r3, [r3, #8]
 800dea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dea4:	2b40      	cmp	r3, #64	@ 0x40
 800dea6:	f040 80b6 	bne.w	800e016 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	685b      	ldr	r3, [r3, #4]
 800deb2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800deb6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800deba:	2b00      	cmp	r3, #0
 800debc:	f000 8150 	beq.w	800e160 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800dec6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800deca:	429a      	cmp	r2, r3
 800decc:	f080 8148 	bcs.w	800e160 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ded6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dede:	69db      	ldr	r3, [r3, #28]
 800dee0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dee4:	f000 8086 	beq.w	800dff4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800def0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800def4:	e853 3f00 	ldrex	r3, [r3]
 800def8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800defc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800df00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800df04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	461a      	mov	r2, r3
 800df0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800df16:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800df1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800df22:	e841 2300 	strex	r3, r2, [r1]
 800df26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800df2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d1da      	bne.n	800dee8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	3308      	adds	r3, #8
 800df38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800df3c:	e853 3f00 	ldrex	r3, [r3]
 800df40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800df42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800df44:	f023 0301 	bic.w	r3, r3, #1
 800df48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	3308      	adds	r3, #8
 800df52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800df56:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800df5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800df5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800df62:	e841 2300 	strex	r3, r2, [r1]
 800df66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800df68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d1e1      	bne.n	800df32 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	3308      	adds	r3, #8
 800df74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df78:	e853 3f00 	ldrex	r3, [r3]
 800df7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800df7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	3308      	adds	r3, #8
 800df8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800df92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800df94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800df98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800df9a:	e841 2300 	strex	r3, r2, [r1]
 800df9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800dfa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d1e3      	bne.n	800df6e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2220      	movs	r2, #32
 800dfaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfbc:	e853 3f00 	ldrex	r3, [r3]
 800dfc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dfc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfc4:	f023 0310 	bic.w	r3, r3, #16
 800dfc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dfd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dfd8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dfdc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dfde:	e841 2300 	strex	r3, r2, [r1]
 800dfe2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800dfe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d1e4      	bne.n	800dfb4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7fa f842 	bl	8008078 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2202      	movs	r2, #2
 800dff8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e006:	b29b      	uxth	r3, r3
 800e008:	1ad3      	subs	r3, r2, r3
 800e00a:	b29b      	uxth	r3, r3
 800e00c:	4619      	mov	r1, r3
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f000 f8c2 	bl	800e198 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e014:	e0a4      	b.n	800e160 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e022:	b29b      	uxth	r3, r3
 800e024:	1ad3      	subs	r3, r2, r3
 800e026:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e030:	b29b      	uxth	r3, r3
 800e032:	2b00      	cmp	r3, #0
 800e034:	f000 8096 	beq.w	800e164 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800e038:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	f000 8091 	beq.w	800e164 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e04a:	e853 3f00 	ldrex	r3, [r3]
 800e04e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e052:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e056:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	461a      	mov	r2, r3
 800e060:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e064:	647b      	str	r3, [r7, #68]	@ 0x44
 800e066:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e068:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e06a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e06c:	e841 2300 	strex	r3, r2, [r1]
 800e070:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e074:	2b00      	cmp	r3, #0
 800e076:	d1e4      	bne.n	800e042 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	3308      	adds	r3, #8
 800e07e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e082:	e853 3f00 	ldrex	r3, [r3]
 800e086:	623b      	str	r3, [r7, #32]
   return(result);
 800e088:	6a3b      	ldr	r3, [r7, #32]
 800e08a:	f023 0301 	bic.w	r3, r3, #1
 800e08e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	3308      	adds	r3, #8
 800e098:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e09c:	633a      	str	r2, [r7, #48]	@ 0x30
 800e09e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e0a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0a4:	e841 2300 	strex	r3, r2, [r1]
 800e0a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d1e3      	bne.n	800e078 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2220      	movs	r2, #32
 800e0b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0ca:	693b      	ldr	r3, [r7, #16]
 800e0cc:	e853 3f00 	ldrex	r3, [r3]
 800e0d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	f023 0310 	bic.w	r3, r3, #16
 800e0d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	461a      	mov	r2, r3
 800e0e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e0e6:	61fb      	str	r3, [r7, #28]
 800e0e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0ea:	69b9      	ldr	r1, [r7, #24]
 800e0ec:	69fa      	ldr	r2, [r7, #28]
 800e0ee:	e841 2300 	strex	r3, r2, [r1]
 800e0f2:	617b      	str	r3, [r7, #20]
   return(result);
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d1e4      	bne.n	800e0c4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2202      	movs	r2, #2
 800e0fe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e100:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e104:	4619      	mov	r1, r3
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f000 f846 	bl	800e198 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e10c:	e02a      	b.n	800e164 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e10e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00e      	beq.n	800e138 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e11a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e11e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e122:	2b00      	cmp	r3, #0
 800e124:	d008      	beq.n	800e138 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d01c      	beq.n	800e168 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	4798      	blx	r3
    }
    return;
 800e136:	e017      	b.n	800e168 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e13c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e140:	2b00      	cmp	r3, #0
 800e142:	d012      	beq.n	800e16a <HAL_UART_IRQHandler+0x59e>
 800e144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d00c      	beq.n	800e16a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f000 fd71 	bl	800ec38 <UART_EndTransmit_IT>
    return;
 800e156:	e008      	b.n	800e16a <HAL_UART_IRQHandler+0x59e>
      return;
 800e158:	bf00      	nop
 800e15a:	e006      	b.n	800e16a <HAL_UART_IRQHandler+0x59e>
    return;
 800e15c:	bf00      	nop
 800e15e:	e004      	b.n	800e16a <HAL_UART_IRQHandler+0x59e>
      return;
 800e160:	bf00      	nop
 800e162:	e002      	b.n	800e16a <HAL_UART_IRQHandler+0x59e>
      return;
 800e164:	bf00      	nop
 800e166:	e000      	b.n	800e16a <HAL_UART_IRQHandler+0x59e>
    return;
 800e168:	bf00      	nop
  }

}
 800e16a:	37e8      	adds	r7, #232	@ 0xe8
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}

0800e170 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e170:	b480      	push	{r7}
 800e172:	b083      	sub	sp, #12
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e178:	bf00      	nop
 800e17a:	370c      	adds	r7, #12
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr

0800e184 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e184:	b480      	push	{r7}
 800e186:	b083      	sub	sp, #12
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e18c:	bf00      	nop
 800e18e:	370c      	adds	r7, #12
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr

0800e198 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e198:	b480      	push	{r7}
 800e19a:	b083      	sub	sp, #12
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	460b      	mov	r3, r1
 800e1a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e1a4:	bf00      	nop
 800e1a6:	370c      	adds	r7, #12
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ae:	4770      	bx	lr

0800e1b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b088      	sub	sp, #32
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	689a      	ldr	r2, [r3, #8]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	691b      	ldr	r3, [r3, #16]
 800e1c4:	431a      	orrs	r2, r3
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	695b      	ldr	r3, [r3, #20]
 800e1ca:	431a      	orrs	r2, r3
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	69db      	ldr	r3, [r3, #28]
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	681a      	ldr	r2, [r3, #0]
 800e1da:	4ba6      	ldr	r3, [pc, #664]	@ (800e474 <UART_SetConfig+0x2c4>)
 800e1dc:	4013      	ands	r3, r2
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	6812      	ldr	r2, [r2, #0]
 800e1e2:	6979      	ldr	r1, [r7, #20]
 800e1e4:	430b      	orrs	r3, r1
 800e1e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	68da      	ldr	r2, [r3, #12]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	430a      	orrs	r2, r1
 800e1fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	699b      	ldr	r3, [r3, #24]
 800e202:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6a1b      	ldr	r3, [r3, #32]
 800e208:	697a      	ldr	r2, [r7, #20]
 800e20a:	4313      	orrs	r3, r2
 800e20c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	689b      	ldr	r3, [r3, #8]
 800e214:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	697a      	ldr	r2, [r7, #20]
 800e21e:	430a      	orrs	r2, r1
 800e220:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	4a94      	ldr	r2, [pc, #592]	@ (800e478 <UART_SetConfig+0x2c8>)
 800e228:	4293      	cmp	r3, r2
 800e22a:	d120      	bne.n	800e26e <UART_SetConfig+0xbe>
 800e22c:	4b93      	ldr	r3, [pc, #588]	@ (800e47c <UART_SetConfig+0x2cc>)
 800e22e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e232:	f003 0303 	and.w	r3, r3, #3
 800e236:	2b03      	cmp	r3, #3
 800e238:	d816      	bhi.n	800e268 <UART_SetConfig+0xb8>
 800e23a:	a201      	add	r2, pc, #4	@ (adr r2, 800e240 <UART_SetConfig+0x90>)
 800e23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e240:	0800e251 	.word	0x0800e251
 800e244:	0800e25d 	.word	0x0800e25d
 800e248:	0800e257 	.word	0x0800e257
 800e24c:	0800e263 	.word	0x0800e263
 800e250:	2301      	movs	r3, #1
 800e252:	77fb      	strb	r3, [r7, #31]
 800e254:	e150      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e256:	2302      	movs	r3, #2
 800e258:	77fb      	strb	r3, [r7, #31]
 800e25a:	e14d      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e25c:	2304      	movs	r3, #4
 800e25e:	77fb      	strb	r3, [r7, #31]
 800e260:	e14a      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e262:	2308      	movs	r3, #8
 800e264:	77fb      	strb	r3, [r7, #31]
 800e266:	e147      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e268:	2310      	movs	r3, #16
 800e26a:	77fb      	strb	r3, [r7, #31]
 800e26c:	e144      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	4a83      	ldr	r2, [pc, #524]	@ (800e480 <UART_SetConfig+0x2d0>)
 800e274:	4293      	cmp	r3, r2
 800e276:	d132      	bne.n	800e2de <UART_SetConfig+0x12e>
 800e278:	4b80      	ldr	r3, [pc, #512]	@ (800e47c <UART_SetConfig+0x2cc>)
 800e27a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e27e:	f003 030c 	and.w	r3, r3, #12
 800e282:	2b0c      	cmp	r3, #12
 800e284:	d828      	bhi.n	800e2d8 <UART_SetConfig+0x128>
 800e286:	a201      	add	r2, pc, #4	@ (adr r2, 800e28c <UART_SetConfig+0xdc>)
 800e288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e28c:	0800e2c1 	.word	0x0800e2c1
 800e290:	0800e2d9 	.word	0x0800e2d9
 800e294:	0800e2d9 	.word	0x0800e2d9
 800e298:	0800e2d9 	.word	0x0800e2d9
 800e29c:	0800e2cd 	.word	0x0800e2cd
 800e2a0:	0800e2d9 	.word	0x0800e2d9
 800e2a4:	0800e2d9 	.word	0x0800e2d9
 800e2a8:	0800e2d9 	.word	0x0800e2d9
 800e2ac:	0800e2c7 	.word	0x0800e2c7
 800e2b0:	0800e2d9 	.word	0x0800e2d9
 800e2b4:	0800e2d9 	.word	0x0800e2d9
 800e2b8:	0800e2d9 	.word	0x0800e2d9
 800e2bc:	0800e2d3 	.word	0x0800e2d3
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	77fb      	strb	r3, [r7, #31]
 800e2c4:	e118      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e2c6:	2302      	movs	r3, #2
 800e2c8:	77fb      	strb	r3, [r7, #31]
 800e2ca:	e115      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e2cc:	2304      	movs	r3, #4
 800e2ce:	77fb      	strb	r3, [r7, #31]
 800e2d0:	e112      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e2d2:	2308      	movs	r3, #8
 800e2d4:	77fb      	strb	r3, [r7, #31]
 800e2d6:	e10f      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e2d8:	2310      	movs	r3, #16
 800e2da:	77fb      	strb	r3, [r7, #31]
 800e2dc:	e10c      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	4a68      	ldr	r2, [pc, #416]	@ (800e484 <UART_SetConfig+0x2d4>)
 800e2e4:	4293      	cmp	r3, r2
 800e2e6:	d120      	bne.n	800e32a <UART_SetConfig+0x17a>
 800e2e8:	4b64      	ldr	r3, [pc, #400]	@ (800e47c <UART_SetConfig+0x2cc>)
 800e2ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e2ee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800e2f2:	2b30      	cmp	r3, #48	@ 0x30
 800e2f4:	d013      	beq.n	800e31e <UART_SetConfig+0x16e>
 800e2f6:	2b30      	cmp	r3, #48	@ 0x30
 800e2f8:	d814      	bhi.n	800e324 <UART_SetConfig+0x174>
 800e2fa:	2b20      	cmp	r3, #32
 800e2fc:	d009      	beq.n	800e312 <UART_SetConfig+0x162>
 800e2fe:	2b20      	cmp	r3, #32
 800e300:	d810      	bhi.n	800e324 <UART_SetConfig+0x174>
 800e302:	2b00      	cmp	r3, #0
 800e304:	d002      	beq.n	800e30c <UART_SetConfig+0x15c>
 800e306:	2b10      	cmp	r3, #16
 800e308:	d006      	beq.n	800e318 <UART_SetConfig+0x168>
 800e30a:	e00b      	b.n	800e324 <UART_SetConfig+0x174>
 800e30c:	2300      	movs	r3, #0
 800e30e:	77fb      	strb	r3, [r7, #31]
 800e310:	e0f2      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e312:	2302      	movs	r3, #2
 800e314:	77fb      	strb	r3, [r7, #31]
 800e316:	e0ef      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e318:	2304      	movs	r3, #4
 800e31a:	77fb      	strb	r3, [r7, #31]
 800e31c:	e0ec      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e31e:	2308      	movs	r3, #8
 800e320:	77fb      	strb	r3, [r7, #31]
 800e322:	e0e9      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e324:	2310      	movs	r3, #16
 800e326:	77fb      	strb	r3, [r7, #31]
 800e328:	e0e6      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	4a56      	ldr	r2, [pc, #344]	@ (800e488 <UART_SetConfig+0x2d8>)
 800e330:	4293      	cmp	r3, r2
 800e332:	d120      	bne.n	800e376 <UART_SetConfig+0x1c6>
 800e334:	4b51      	ldr	r3, [pc, #324]	@ (800e47c <UART_SetConfig+0x2cc>)
 800e336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e33a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800e33e:	2bc0      	cmp	r3, #192	@ 0xc0
 800e340:	d013      	beq.n	800e36a <UART_SetConfig+0x1ba>
 800e342:	2bc0      	cmp	r3, #192	@ 0xc0
 800e344:	d814      	bhi.n	800e370 <UART_SetConfig+0x1c0>
 800e346:	2b80      	cmp	r3, #128	@ 0x80
 800e348:	d009      	beq.n	800e35e <UART_SetConfig+0x1ae>
 800e34a:	2b80      	cmp	r3, #128	@ 0x80
 800e34c:	d810      	bhi.n	800e370 <UART_SetConfig+0x1c0>
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d002      	beq.n	800e358 <UART_SetConfig+0x1a8>
 800e352:	2b40      	cmp	r3, #64	@ 0x40
 800e354:	d006      	beq.n	800e364 <UART_SetConfig+0x1b4>
 800e356:	e00b      	b.n	800e370 <UART_SetConfig+0x1c0>
 800e358:	2300      	movs	r3, #0
 800e35a:	77fb      	strb	r3, [r7, #31]
 800e35c:	e0cc      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e35e:	2302      	movs	r3, #2
 800e360:	77fb      	strb	r3, [r7, #31]
 800e362:	e0c9      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e364:	2304      	movs	r3, #4
 800e366:	77fb      	strb	r3, [r7, #31]
 800e368:	e0c6      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e36a:	2308      	movs	r3, #8
 800e36c:	77fb      	strb	r3, [r7, #31]
 800e36e:	e0c3      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e370:	2310      	movs	r3, #16
 800e372:	77fb      	strb	r3, [r7, #31]
 800e374:	e0c0      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4a44      	ldr	r2, [pc, #272]	@ (800e48c <UART_SetConfig+0x2dc>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d125      	bne.n	800e3cc <UART_SetConfig+0x21c>
 800e380:	4b3e      	ldr	r3, [pc, #248]	@ (800e47c <UART_SetConfig+0x2cc>)
 800e382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e386:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e38a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e38e:	d017      	beq.n	800e3c0 <UART_SetConfig+0x210>
 800e390:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e394:	d817      	bhi.n	800e3c6 <UART_SetConfig+0x216>
 800e396:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e39a:	d00b      	beq.n	800e3b4 <UART_SetConfig+0x204>
 800e39c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e3a0:	d811      	bhi.n	800e3c6 <UART_SetConfig+0x216>
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d003      	beq.n	800e3ae <UART_SetConfig+0x1fe>
 800e3a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e3aa:	d006      	beq.n	800e3ba <UART_SetConfig+0x20a>
 800e3ac:	e00b      	b.n	800e3c6 <UART_SetConfig+0x216>
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	77fb      	strb	r3, [r7, #31]
 800e3b2:	e0a1      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e3b4:	2302      	movs	r3, #2
 800e3b6:	77fb      	strb	r3, [r7, #31]
 800e3b8:	e09e      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e3ba:	2304      	movs	r3, #4
 800e3bc:	77fb      	strb	r3, [r7, #31]
 800e3be:	e09b      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e3c0:	2308      	movs	r3, #8
 800e3c2:	77fb      	strb	r3, [r7, #31]
 800e3c4:	e098      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e3c6:	2310      	movs	r3, #16
 800e3c8:	77fb      	strb	r3, [r7, #31]
 800e3ca:	e095      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4a2f      	ldr	r2, [pc, #188]	@ (800e490 <UART_SetConfig+0x2e0>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d125      	bne.n	800e422 <UART_SetConfig+0x272>
 800e3d6:	4b29      	ldr	r3, [pc, #164]	@ (800e47c <UART_SetConfig+0x2cc>)
 800e3d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e3e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e3e4:	d017      	beq.n	800e416 <UART_SetConfig+0x266>
 800e3e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e3ea:	d817      	bhi.n	800e41c <UART_SetConfig+0x26c>
 800e3ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e3f0:	d00b      	beq.n	800e40a <UART_SetConfig+0x25a>
 800e3f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e3f6:	d811      	bhi.n	800e41c <UART_SetConfig+0x26c>
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d003      	beq.n	800e404 <UART_SetConfig+0x254>
 800e3fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e400:	d006      	beq.n	800e410 <UART_SetConfig+0x260>
 800e402:	e00b      	b.n	800e41c <UART_SetConfig+0x26c>
 800e404:	2301      	movs	r3, #1
 800e406:	77fb      	strb	r3, [r7, #31]
 800e408:	e076      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e40a:	2302      	movs	r3, #2
 800e40c:	77fb      	strb	r3, [r7, #31]
 800e40e:	e073      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e410:	2304      	movs	r3, #4
 800e412:	77fb      	strb	r3, [r7, #31]
 800e414:	e070      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e416:	2308      	movs	r3, #8
 800e418:	77fb      	strb	r3, [r7, #31]
 800e41a:	e06d      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e41c:	2310      	movs	r3, #16
 800e41e:	77fb      	strb	r3, [r7, #31]
 800e420:	e06a      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	4a1b      	ldr	r2, [pc, #108]	@ (800e494 <UART_SetConfig+0x2e4>)
 800e428:	4293      	cmp	r3, r2
 800e42a:	d138      	bne.n	800e49e <UART_SetConfig+0x2ee>
 800e42c:	4b13      	ldr	r3, [pc, #76]	@ (800e47c <UART_SetConfig+0x2cc>)
 800e42e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e432:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800e436:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e43a:	d017      	beq.n	800e46c <UART_SetConfig+0x2bc>
 800e43c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e440:	d82a      	bhi.n	800e498 <UART_SetConfig+0x2e8>
 800e442:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e446:	d00b      	beq.n	800e460 <UART_SetConfig+0x2b0>
 800e448:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e44c:	d824      	bhi.n	800e498 <UART_SetConfig+0x2e8>
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d003      	beq.n	800e45a <UART_SetConfig+0x2aa>
 800e452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e456:	d006      	beq.n	800e466 <UART_SetConfig+0x2b6>
 800e458:	e01e      	b.n	800e498 <UART_SetConfig+0x2e8>
 800e45a:	2300      	movs	r3, #0
 800e45c:	77fb      	strb	r3, [r7, #31]
 800e45e:	e04b      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e460:	2302      	movs	r3, #2
 800e462:	77fb      	strb	r3, [r7, #31]
 800e464:	e048      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e466:	2304      	movs	r3, #4
 800e468:	77fb      	strb	r3, [r7, #31]
 800e46a:	e045      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e46c:	2308      	movs	r3, #8
 800e46e:	77fb      	strb	r3, [r7, #31]
 800e470:	e042      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e472:	bf00      	nop
 800e474:	efff69f3 	.word	0xefff69f3
 800e478:	40011000 	.word	0x40011000
 800e47c:	40023800 	.word	0x40023800
 800e480:	40004400 	.word	0x40004400
 800e484:	40004800 	.word	0x40004800
 800e488:	40004c00 	.word	0x40004c00
 800e48c:	40005000 	.word	0x40005000
 800e490:	40011400 	.word	0x40011400
 800e494:	40007800 	.word	0x40007800
 800e498:	2310      	movs	r3, #16
 800e49a:	77fb      	strb	r3, [r7, #31]
 800e49c:	e02c      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	4a72      	ldr	r2, [pc, #456]	@ (800e66c <UART_SetConfig+0x4bc>)
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d125      	bne.n	800e4f4 <UART_SetConfig+0x344>
 800e4a8:	4b71      	ldr	r3, [pc, #452]	@ (800e670 <UART_SetConfig+0x4c0>)
 800e4aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800e4b2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e4b6:	d017      	beq.n	800e4e8 <UART_SetConfig+0x338>
 800e4b8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e4bc:	d817      	bhi.n	800e4ee <UART_SetConfig+0x33e>
 800e4be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e4c2:	d00b      	beq.n	800e4dc <UART_SetConfig+0x32c>
 800e4c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e4c8:	d811      	bhi.n	800e4ee <UART_SetConfig+0x33e>
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d003      	beq.n	800e4d6 <UART_SetConfig+0x326>
 800e4ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e4d2:	d006      	beq.n	800e4e2 <UART_SetConfig+0x332>
 800e4d4:	e00b      	b.n	800e4ee <UART_SetConfig+0x33e>
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	77fb      	strb	r3, [r7, #31]
 800e4da:	e00d      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e4dc:	2302      	movs	r3, #2
 800e4de:	77fb      	strb	r3, [r7, #31]
 800e4e0:	e00a      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e4e2:	2304      	movs	r3, #4
 800e4e4:	77fb      	strb	r3, [r7, #31]
 800e4e6:	e007      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e4e8:	2308      	movs	r3, #8
 800e4ea:	77fb      	strb	r3, [r7, #31]
 800e4ec:	e004      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e4ee:	2310      	movs	r3, #16
 800e4f0:	77fb      	strb	r3, [r7, #31]
 800e4f2:	e001      	b.n	800e4f8 <UART_SetConfig+0x348>
 800e4f4:	2310      	movs	r3, #16
 800e4f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	69db      	ldr	r3, [r3, #28]
 800e4fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e500:	d15b      	bne.n	800e5ba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800e502:	7ffb      	ldrb	r3, [r7, #31]
 800e504:	2b08      	cmp	r3, #8
 800e506:	d828      	bhi.n	800e55a <UART_SetConfig+0x3aa>
 800e508:	a201      	add	r2, pc, #4	@ (adr r2, 800e510 <UART_SetConfig+0x360>)
 800e50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e50e:	bf00      	nop
 800e510:	0800e535 	.word	0x0800e535
 800e514:	0800e53d 	.word	0x0800e53d
 800e518:	0800e545 	.word	0x0800e545
 800e51c:	0800e55b 	.word	0x0800e55b
 800e520:	0800e54b 	.word	0x0800e54b
 800e524:	0800e55b 	.word	0x0800e55b
 800e528:	0800e55b 	.word	0x0800e55b
 800e52c:	0800e55b 	.word	0x0800e55b
 800e530:	0800e553 	.word	0x0800e553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e534:	f7fc fc38 	bl	800ada8 <HAL_RCC_GetPCLK1Freq>
 800e538:	61b8      	str	r0, [r7, #24]
        break;
 800e53a:	e013      	b.n	800e564 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e53c:	f7fc fc48 	bl	800add0 <HAL_RCC_GetPCLK2Freq>
 800e540:	61b8      	str	r0, [r7, #24]
        break;
 800e542:	e00f      	b.n	800e564 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e544:	4b4b      	ldr	r3, [pc, #300]	@ (800e674 <UART_SetConfig+0x4c4>)
 800e546:	61bb      	str	r3, [r7, #24]
        break;
 800e548:	e00c      	b.n	800e564 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e54a:	f7fc fb5b 	bl	800ac04 <HAL_RCC_GetSysClockFreq>
 800e54e:	61b8      	str	r0, [r7, #24]
        break;
 800e550:	e008      	b.n	800e564 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e556:	61bb      	str	r3, [r7, #24]
        break;
 800e558:	e004      	b.n	800e564 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800e55a:	2300      	movs	r3, #0
 800e55c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e55e:	2301      	movs	r3, #1
 800e560:	77bb      	strb	r3, [r7, #30]
        break;
 800e562:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e564:	69bb      	ldr	r3, [r7, #24]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d074      	beq.n	800e654 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e56a:	69bb      	ldr	r3, [r7, #24]
 800e56c:	005a      	lsls	r2, r3, #1
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	085b      	lsrs	r3, r3, #1
 800e574:	441a      	add	r2, r3
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e57e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	2b0f      	cmp	r3, #15
 800e584:	d916      	bls.n	800e5b4 <UART_SetConfig+0x404>
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e58c:	d212      	bcs.n	800e5b4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	b29b      	uxth	r3, r3
 800e592:	f023 030f 	bic.w	r3, r3, #15
 800e596:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	085b      	lsrs	r3, r3, #1
 800e59c:	b29b      	uxth	r3, r3
 800e59e:	f003 0307 	and.w	r3, r3, #7
 800e5a2:	b29a      	uxth	r2, r3
 800e5a4:	89fb      	ldrh	r3, [r7, #14]
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	89fa      	ldrh	r2, [r7, #14]
 800e5b0:	60da      	str	r2, [r3, #12]
 800e5b2:	e04f      	b.n	800e654 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	77bb      	strb	r3, [r7, #30]
 800e5b8:	e04c      	b.n	800e654 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e5ba:	7ffb      	ldrb	r3, [r7, #31]
 800e5bc:	2b08      	cmp	r3, #8
 800e5be:	d828      	bhi.n	800e612 <UART_SetConfig+0x462>
 800e5c0:	a201      	add	r2, pc, #4	@ (adr r2, 800e5c8 <UART_SetConfig+0x418>)
 800e5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c6:	bf00      	nop
 800e5c8:	0800e5ed 	.word	0x0800e5ed
 800e5cc:	0800e5f5 	.word	0x0800e5f5
 800e5d0:	0800e5fd 	.word	0x0800e5fd
 800e5d4:	0800e613 	.word	0x0800e613
 800e5d8:	0800e603 	.word	0x0800e603
 800e5dc:	0800e613 	.word	0x0800e613
 800e5e0:	0800e613 	.word	0x0800e613
 800e5e4:	0800e613 	.word	0x0800e613
 800e5e8:	0800e60b 	.word	0x0800e60b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e5ec:	f7fc fbdc 	bl	800ada8 <HAL_RCC_GetPCLK1Freq>
 800e5f0:	61b8      	str	r0, [r7, #24]
        break;
 800e5f2:	e013      	b.n	800e61c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e5f4:	f7fc fbec 	bl	800add0 <HAL_RCC_GetPCLK2Freq>
 800e5f8:	61b8      	str	r0, [r7, #24]
        break;
 800e5fa:	e00f      	b.n	800e61c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e5fc:	4b1d      	ldr	r3, [pc, #116]	@ (800e674 <UART_SetConfig+0x4c4>)
 800e5fe:	61bb      	str	r3, [r7, #24]
        break;
 800e600:	e00c      	b.n	800e61c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e602:	f7fc faff 	bl	800ac04 <HAL_RCC_GetSysClockFreq>
 800e606:	61b8      	str	r0, [r7, #24]
        break;
 800e608:	e008      	b.n	800e61c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e60a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e60e:	61bb      	str	r3, [r7, #24]
        break;
 800e610:	e004      	b.n	800e61c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800e612:	2300      	movs	r3, #0
 800e614:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e616:	2301      	movs	r3, #1
 800e618:	77bb      	strb	r3, [r7, #30]
        break;
 800e61a:	bf00      	nop
    }

    if (pclk != 0U)
 800e61c:	69bb      	ldr	r3, [r7, #24]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d018      	beq.n	800e654 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	085a      	lsrs	r2, r3, #1
 800e628:	69bb      	ldr	r3, [r7, #24]
 800e62a:	441a      	add	r2, r3
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	fbb2 f3f3 	udiv	r3, r2, r3
 800e634:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e636:	693b      	ldr	r3, [r7, #16]
 800e638:	2b0f      	cmp	r3, #15
 800e63a:	d909      	bls.n	800e650 <UART_SetConfig+0x4a0>
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e642:	d205      	bcs.n	800e650 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	b29a      	uxth	r2, r3
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	60da      	str	r2, [r3, #12]
 800e64e:	e001      	b.n	800e654 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e650:	2301      	movs	r3, #1
 800e652:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2200      	movs	r2, #0
 800e658:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2200      	movs	r2, #0
 800e65e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800e660:	7fbb      	ldrb	r3, [r7, #30]
}
 800e662:	4618      	mov	r0, r3
 800e664:	3720      	adds	r7, #32
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
 800e66a:	bf00      	nop
 800e66c:	40007c00 	.word	0x40007c00
 800e670:	40023800 	.word	0x40023800
 800e674:	00f42400 	.word	0x00f42400

0800e678 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e678:	b480      	push	{r7}
 800e67a:	b083      	sub	sp, #12
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e684:	f003 0301 	and.w	r3, r3, #1
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d00a      	beq.n	800e6a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	430a      	orrs	r2, r1
 800e6a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6a6:	f003 0302 	and.w	r3, r3, #2
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d00a      	beq.n	800e6c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	685b      	ldr	r3, [r3, #4]
 800e6b4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	430a      	orrs	r2, r1
 800e6c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6c8:	f003 0304 	and.w	r3, r3, #4
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d00a      	beq.n	800e6e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	685b      	ldr	r3, [r3, #4]
 800e6d6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	430a      	orrs	r2, r1
 800e6e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6ea:	f003 0308 	and.w	r3, r3, #8
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d00a      	beq.n	800e708 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	685b      	ldr	r3, [r3, #4]
 800e6f8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	430a      	orrs	r2, r1
 800e706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e70c:	f003 0310 	and.w	r3, r3, #16
 800e710:	2b00      	cmp	r3, #0
 800e712:	d00a      	beq.n	800e72a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	689b      	ldr	r3, [r3, #8]
 800e71a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	430a      	orrs	r2, r1
 800e728:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e72e:	f003 0320 	and.w	r3, r3, #32
 800e732:	2b00      	cmp	r3, #0
 800e734:	d00a      	beq.n	800e74c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	689b      	ldr	r3, [r3, #8]
 800e73c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	430a      	orrs	r2, r1
 800e74a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e754:	2b00      	cmp	r3, #0
 800e756:	d01a      	beq.n	800e78e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	685b      	ldr	r3, [r3, #4]
 800e75e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	430a      	orrs	r2, r1
 800e76c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e772:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e776:	d10a      	bne.n	800e78e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	685b      	ldr	r3, [r3, #4]
 800e77e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	430a      	orrs	r2, r1
 800e78c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e796:	2b00      	cmp	r3, #0
 800e798:	d00a      	beq.n	800e7b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	430a      	orrs	r2, r1
 800e7ae:	605a      	str	r2, [r3, #4]
  }
}
 800e7b0:	bf00      	nop
 800e7b2:	370c      	adds	r7, #12
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr

0800e7bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b086      	sub	sp, #24
 800e7c0:	af02      	add	r7, sp, #8
 800e7c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e7cc:	f7f8 ff42 	bl	8007654 <HAL_GetTick>
 800e7d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f003 0308 	and.w	r3, r3, #8
 800e7dc:	2b08      	cmp	r3, #8
 800e7de:	d10e      	bne.n	800e7fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e7e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e7e4:	9300      	str	r3, [sp, #0]
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f000 f81b 	bl	800e82a <UART_WaitOnFlagUntilTimeout>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d001      	beq.n	800e7fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e7fa:	2303      	movs	r3, #3
 800e7fc:	e011      	b.n	800e822 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2220      	movs	r2, #32
 800e802:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2220      	movs	r2, #32
 800e808:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2200      	movs	r2, #0
 800e810:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2200      	movs	r2, #0
 800e816:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2200      	movs	r2, #0
 800e81c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800e820:	2300      	movs	r3, #0
}
 800e822:	4618      	mov	r0, r3
 800e824:	3710      	adds	r7, #16
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}

0800e82a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e82a:	b580      	push	{r7, lr}
 800e82c:	b09c      	sub	sp, #112	@ 0x70
 800e82e:	af00      	add	r7, sp, #0
 800e830:	60f8      	str	r0, [r7, #12]
 800e832:	60b9      	str	r1, [r7, #8]
 800e834:	603b      	str	r3, [r7, #0]
 800e836:	4613      	mov	r3, r2
 800e838:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e83a:	e0a7      	b.n	800e98c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e83c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e83e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e842:	f000 80a3 	beq.w	800e98c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e846:	f7f8 ff05 	bl	8007654 <HAL_GetTick>
 800e84a:	4602      	mov	r2, r0
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	1ad3      	subs	r3, r2, r3
 800e850:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800e852:	429a      	cmp	r2, r3
 800e854:	d302      	bcc.n	800e85c <UART_WaitOnFlagUntilTimeout+0x32>
 800e856:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d13f      	bne.n	800e8dc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e862:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e864:	e853 3f00 	ldrex	r3, [r3]
 800e868:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e86a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e86c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800e870:	667b      	str	r3, [r7, #100]	@ 0x64
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	461a      	mov	r2, r3
 800e878:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e87a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e87c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e87e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e880:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e882:	e841 2300 	strex	r3, r2, [r1]
 800e886:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800e888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d1e6      	bne.n	800e85c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	3308      	adds	r3, #8
 800e894:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e898:	e853 3f00 	ldrex	r3, [r3]
 800e89c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8a0:	f023 0301 	bic.w	r3, r3, #1
 800e8a4:	663b      	str	r3, [r7, #96]	@ 0x60
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	3308      	adds	r3, #8
 800e8ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e8ae:	64ba      	str	r2, [r7, #72]	@ 0x48
 800e8b0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e8b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e8b6:	e841 2300 	strex	r3, r2, [r1]
 800e8ba:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e8bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d1e5      	bne.n	800e88e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2220      	movs	r2, #32
 800e8c6:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	2220      	movs	r2, #32
 800e8cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800e8d8:	2303      	movs	r3, #3
 800e8da:	e068      	b.n	800e9ae <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	f003 0304 	and.w	r3, r3, #4
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d050      	beq.n	800e98c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	69db      	ldr	r3, [r3, #28]
 800e8f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e8f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e8f8:	d148      	bne.n	800e98c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e902:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e90c:	e853 3f00 	ldrex	r3, [r3]
 800e910:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e914:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800e918:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	461a      	mov	r2, r3
 800e920:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e922:	637b      	str	r3, [r7, #52]	@ 0x34
 800e924:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e926:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e928:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e92a:	e841 2300 	strex	r3, r2, [r1]
 800e92e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e932:	2b00      	cmp	r3, #0
 800e934:	d1e6      	bne.n	800e904 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	3308      	adds	r3, #8
 800e93c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	e853 3f00 	ldrex	r3, [r3]
 800e944:	613b      	str	r3, [r7, #16]
   return(result);
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	f023 0301 	bic.w	r3, r3, #1
 800e94c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	3308      	adds	r3, #8
 800e954:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e956:	623a      	str	r2, [r7, #32]
 800e958:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e95a:	69f9      	ldr	r1, [r7, #28]
 800e95c:	6a3a      	ldr	r2, [r7, #32]
 800e95e:	e841 2300 	strex	r3, r2, [r1]
 800e962:	61bb      	str	r3, [r7, #24]
   return(result);
 800e964:	69bb      	ldr	r3, [r7, #24]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d1e5      	bne.n	800e936 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	2220      	movs	r2, #32
 800e96e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2220      	movs	r2, #32
 800e974:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	2220      	movs	r2, #32
 800e97c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	2200      	movs	r2, #0
 800e984:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800e988:	2303      	movs	r3, #3
 800e98a:	e010      	b.n	800e9ae <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	69da      	ldr	r2, [r3, #28]
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	4013      	ands	r3, r2
 800e996:	68ba      	ldr	r2, [r7, #8]
 800e998:	429a      	cmp	r2, r3
 800e99a:	bf0c      	ite	eq
 800e99c:	2301      	moveq	r3, #1
 800e99e:	2300      	movne	r3, #0
 800e9a0:	b2db      	uxtb	r3, r3
 800e9a2:	461a      	mov	r2, r3
 800e9a4:	79fb      	ldrb	r3, [r7, #7]
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	f43f af48 	beq.w	800e83c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e9ac:	2300      	movs	r3, #0
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3770      	adds	r7, #112	@ 0x70
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}
	...

0800e9b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b097      	sub	sp, #92	@ 0x5c
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	60f8      	str	r0, [r7, #12]
 800e9c0:	60b9      	str	r1, [r7, #8]
 800e9c2:	4613      	mov	r3, r2
 800e9c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	68ba      	ldr	r2, [r7, #8]
 800e9ca:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	88fa      	ldrh	r2, [r7, #6]
 800e9d0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	88fa      	ldrh	r2, [r7, #6]
 800e9d8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	689b      	ldr	r3, [r3, #8]
 800e9e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e9ea:	d10e      	bne.n	800ea0a <UART_Start_Receive_IT+0x52>
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	691b      	ldr	r3, [r3, #16]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d105      	bne.n	800ea00 <UART_Start_Receive_IT+0x48>
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e9fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e9fe:	e02d      	b.n	800ea5c <UART_Start_Receive_IT+0xa4>
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	22ff      	movs	r2, #255	@ 0xff
 800ea04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ea08:	e028      	b.n	800ea5c <UART_Start_Receive_IT+0xa4>
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	689b      	ldr	r3, [r3, #8]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d10d      	bne.n	800ea2e <UART_Start_Receive_IT+0x76>
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	691b      	ldr	r3, [r3, #16]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d104      	bne.n	800ea24 <UART_Start_Receive_IT+0x6c>
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	22ff      	movs	r2, #255	@ 0xff
 800ea1e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ea22:	e01b      	b.n	800ea5c <UART_Start_Receive_IT+0xa4>
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	227f      	movs	r2, #127	@ 0x7f
 800ea28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ea2c:	e016      	b.n	800ea5c <UART_Start_Receive_IT+0xa4>
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	689b      	ldr	r3, [r3, #8]
 800ea32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea36:	d10d      	bne.n	800ea54 <UART_Start_Receive_IT+0x9c>
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	691b      	ldr	r3, [r3, #16]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d104      	bne.n	800ea4a <UART_Start_Receive_IT+0x92>
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	227f      	movs	r2, #127	@ 0x7f
 800ea44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ea48:	e008      	b.n	800ea5c <UART_Start_Receive_IT+0xa4>
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	223f      	movs	r2, #63	@ 0x3f
 800ea4e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ea52:	e003      	b.n	800ea5c <UART_Start_Receive_IT+0xa4>
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2200      	movs	r2, #0
 800ea58:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	2222      	movs	r2, #34	@ 0x22
 800ea68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	3308      	adds	r3, #8
 800ea72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea76:	e853 3f00 	ldrex	r3, [r3]
 800ea7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ea7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea7e:	f043 0301 	orr.w	r3, r3, #1
 800ea82:	657b      	str	r3, [r7, #84]	@ 0x54
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	3308      	adds	r3, #8
 800ea8a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ea8c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800ea8e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea90:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ea92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ea94:	e841 2300 	strex	r3, r2, [r1]
 800ea98:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ea9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d1e5      	bne.n	800ea6c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	689b      	ldr	r3, [r3, #8]
 800eaa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eaa8:	d107      	bne.n	800eaba <UART_Start_Receive_IT+0x102>
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	691b      	ldr	r3, [r3, #16]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d103      	bne.n	800eaba <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	4a21      	ldr	r2, [pc, #132]	@ (800eb3c <UART_Start_Receive_IT+0x184>)
 800eab6:	669a      	str	r2, [r3, #104]	@ 0x68
 800eab8:	e002      	b.n	800eac0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	4a20      	ldr	r2, [pc, #128]	@ (800eb40 <UART_Start_Receive_IT+0x188>)
 800eabe:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	691b      	ldr	r3, [r3, #16]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d019      	beq.n	800eafc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ead0:	e853 3f00 	ldrex	r3, [r3]
 800ead4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ead6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ead8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800eadc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	461a      	mov	r2, r3
 800eae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eae6:	637b      	str	r3, [r7, #52]	@ 0x34
 800eae8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800eaec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eaee:	e841 2300 	strex	r3, r2, [r1]
 800eaf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800eaf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d1e6      	bne.n	800eac8 <UART_Start_Receive_IT+0x110>
 800eafa:	e018      	b.n	800eb2e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	e853 3f00 	ldrex	r3, [r3]
 800eb08:	613b      	str	r3, [r7, #16]
   return(result);
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	f043 0320 	orr.w	r3, r3, #32
 800eb10:	653b      	str	r3, [r7, #80]	@ 0x50
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	461a      	mov	r2, r3
 800eb18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb1a:	623b      	str	r3, [r7, #32]
 800eb1c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb1e:	69f9      	ldr	r1, [r7, #28]
 800eb20:	6a3a      	ldr	r2, [r7, #32]
 800eb22:	e841 2300 	strex	r3, r2, [r1]
 800eb26:	61bb      	str	r3, [r7, #24]
   return(result);
 800eb28:	69bb      	ldr	r3, [r7, #24]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d1e6      	bne.n	800eafc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800eb2e:	2300      	movs	r3, #0
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	375c      	adds	r7, #92	@ 0x5c
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr
 800eb3c:	0800edf3 	.word	0x0800edf3
 800eb40:	0800ec8d 	.word	0x0800ec8d

0800eb44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eb44:	b480      	push	{r7}
 800eb46:	b095      	sub	sp, #84	@ 0x54
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb54:	e853 3f00 	ldrex	r3, [r3]
 800eb58:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800eb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eb60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	461a      	mov	r2, r3
 800eb68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb6a:	643b      	str	r3, [r7, #64]	@ 0x40
 800eb6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800eb70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eb72:	e841 2300 	strex	r3, r2, [r1]
 800eb76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eb78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d1e6      	bne.n	800eb4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	3308      	adds	r3, #8
 800eb84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb86:	6a3b      	ldr	r3, [r7, #32]
 800eb88:	e853 3f00 	ldrex	r3, [r3]
 800eb8c:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb8e:	69fb      	ldr	r3, [r7, #28]
 800eb90:	f023 0301 	bic.w	r3, r3, #1
 800eb94:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	3308      	adds	r3, #8
 800eb9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eb9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800eba0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eba2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eba4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eba6:	e841 2300 	strex	r3, r2, [r1]
 800ebaa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ebac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d1e5      	bne.n	800eb7e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ebb6:	2b01      	cmp	r3, #1
 800ebb8:	d118      	bne.n	800ebec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	e853 3f00 	ldrex	r3, [r3]
 800ebc6:	60bb      	str	r3, [r7, #8]
   return(result);
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	f023 0310 	bic.w	r3, r3, #16
 800ebce:	647b      	str	r3, [r7, #68]	@ 0x44
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	461a      	mov	r2, r3
 800ebd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebd8:	61bb      	str	r3, [r7, #24]
 800ebda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebdc:	6979      	ldr	r1, [r7, #20]
 800ebde:	69ba      	ldr	r2, [r7, #24]
 800ebe0:	e841 2300 	strex	r3, r2, [r1]
 800ebe4:	613b      	str	r3, [r7, #16]
   return(result);
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d1e6      	bne.n	800ebba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2220      	movs	r2, #32
 800ebf0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ec00:	bf00      	nop
 800ec02:	3754      	adds	r7, #84	@ 0x54
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr

0800ec0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	2200      	movs	r2, #0
 800ec26:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ec2a:	68f8      	ldr	r0, [r7, #12]
 800ec2c:	f7ff faaa 	bl	800e184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec30:	bf00      	nop
 800ec32:	3710      	adds	r7, #16
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b088      	sub	sp, #32
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	e853 3f00 	ldrex	r3, [r3]
 800ec4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ec54:	61fb      	str	r3, [r7, #28]
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	461a      	mov	r2, r3
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	61bb      	str	r3, [r7, #24]
 800ec60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec62:	6979      	ldr	r1, [r7, #20]
 800ec64:	69ba      	ldr	r2, [r7, #24]
 800ec66:	e841 2300 	strex	r3, r2, [r1]
 800ec6a:	613b      	str	r3, [r7, #16]
   return(result);
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d1e6      	bne.n	800ec40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2220      	movs	r2, #32
 800ec76:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f7ff fa76 	bl	800e170 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec84:	bf00      	nop
 800ec86:	3720      	adds	r7, #32
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}

0800ec8c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b096      	sub	sp, #88	@ 0x58
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ec9a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eca4:	2b22      	cmp	r3, #34	@ 0x22
 800eca6:	f040 8098 	bne.w	800edda <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecb0:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ecb4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800ecb8:	b2d9      	uxtb	r1, r3
 800ecba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ecbe:	b2da      	uxtb	r2, r3
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecc4:	400a      	ands	r2, r1
 800ecc6:	b2d2      	uxtb	r2, r2
 800ecc8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecce:	1c5a      	adds	r2, r3, #1
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ecda:	b29b      	uxth	r3, r3
 800ecdc:	3b01      	subs	r3, #1
 800ecde:	b29a      	uxth	r2, r3
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ecec:	b29b      	uxth	r3, r3
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d17b      	bne.n	800edea <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecfa:	e853 3f00 	ldrex	r3, [r3]
 800ecfe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ed00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ed06:	653b      	str	r3, [r7, #80]	@ 0x50
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	461a      	mov	r2, r3
 800ed0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed10:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed12:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ed16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ed18:	e841 2300 	strex	r3, r2, [r1]
 800ed1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ed1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d1e6      	bne.n	800ecf2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	3308      	adds	r3, #8
 800ed2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed2e:	e853 3f00 	ldrex	r3, [r3]
 800ed32:	623b      	str	r3, [r7, #32]
   return(result);
 800ed34:	6a3b      	ldr	r3, [r7, #32]
 800ed36:	f023 0301 	bic.w	r3, r3, #1
 800ed3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	3308      	adds	r3, #8
 800ed42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ed44:	633a      	str	r2, [r7, #48]	@ 0x30
 800ed46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ed4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed4c:	e841 2300 	strex	r3, r2, [r1]
 800ed50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ed52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d1e5      	bne.n	800ed24 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2220      	movs	r2, #32
 800ed5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2200      	movs	r2, #0
 800ed64:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2200      	movs	r2, #0
 800ed6a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ed70:	2b01      	cmp	r3, #1
 800ed72:	d12e      	bne.n	800edd2 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2200      	movs	r2, #0
 800ed78:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	e853 3f00 	ldrex	r3, [r3]
 800ed86:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	f023 0310 	bic.w	r3, r3, #16
 800ed8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	461a      	mov	r2, r3
 800ed96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed98:	61fb      	str	r3, [r7, #28]
 800ed9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed9c:	69b9      	ldr	r1, [r7, #24]
 800ed9e:	69fa      	ldr	r2, [r7, #28]
 800eda0:	e841 2300 	strex	r3, r2, [r1]
 800eda4:	617b      	str	r3, [r7, #20]
   return(result);
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d1e6      	bne.n	800ed7a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	69db      	ldr	r3, [r3, #28]
 800edb2:	f003 0310 	and.w	r3, r3, #16
 800edb6:	2b10      	cmp	r3, #16
 800edb8:	d103      	bne.n	800edc2 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	2210      	movs	r2, #16
 800edc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800edc8:	4619      	mov	r1, r3
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f7ff f9e4 	bl	800e198 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800edd0:	e00b      	b.n	800edea <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f7f2 fa7c 	bl	80012d0 <HAL_UART_RxCpltCallback>
}
 800edd8:	e007      	b.n	800edea <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	699a      	ldr	r2, [r3, #24]
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	f042 0208 	orr.w	r2, r2, #8
 800ede8:	619a      	str	r2, [r3, #24]
}
 800edea:	bf00      	nop
 800edec:	3758      	adds	r7, #88	@ 0x58
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}

0800edf2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800edf2:	b580      	push	{r7, lr}
 800edf4:	b096      	sub	sp, #88	@ 0x58
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ee00:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee0a:	2b22      	cmp	r3, #34	@ 0x22
 800ee0c:	f040 8098 	bne.w	800ef40 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee16:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee1e:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800ee20:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800ee24:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ee28:	4013      	ands	r3, r2
 800ee2a:	b29a      	uxth	r2, r3
 800ee2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee2e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee34:	1c9a      	adds	r2, r3, #2
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ee40:	b29b      	uxth	r3, r3
 800ee42:	3b01      	subs	r3, #1
 800ee44:	b29a      	uxth	r2, r3
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ee52:	b29b      	uxth	r3, r3
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d17b      	bne.n	800ef50 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee60:	e853 3f00 	ldrex	r3, [r3]
 800ee64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ee66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ee6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	461a      	mov	r2, r3
 800ee74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee76:	643b      	str	r3, [r7, #64]	@ 0x40
 800ee78:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ee7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ee7e:	e841 2300 	strex	r3, r2, [r1]
 800ee82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ee84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d1e6      	bne.n	800ee58 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	3308      	adds	r3, #8
 800ee90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee92:	6a3b      	ldr	r3, [r7, #32]
 800ee94:	e853 3f00 	ldrex	r3, [r3]
 800ee98:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee9a:	69fb      	ldr	r3, [r7, #28]
 800ee9c:	f023 0301 	bic.w	r3, r3, #1
 800eea0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	3308      	adds	r3, #8
 800eea8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eeaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800eeac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eeb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eeb2:	e841 2300 	strex	r3, r2, [r1]
 800eeb6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eeb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d1e5      	bne.n	800ee8a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2220      	movs	r2, #32
 800eec2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2200      	movs	r2, #0
 800eeca:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2200      	movs	r2, #0
 800eed0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eed6:	2b01      	cmp	r3, #1
 800eed8:	d12e      	bne.n	800ef38 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2200      	movs	r2, #0
 800eede:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	e853 3f00 	ldrex	r3, [r3]
 800eeec:	60bb      	str	r3, [r7, #8]
   return(result);
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	f023 0310 	bic.w	r3, r3, #16
 800eef4:	647b      	str	r3, [r7, #68]	@ 0x44
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	461a      	mov	r2, r3
 800eefc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eefe:	61bb      	str	r3, [r7, #24]
 800ef00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef02:	6979      	ldr	r1, [r7, #20]
 800ef04:	69ba      	ldr	r2, [r7, #24]
 800ef06:	e841 2300 	strex	r3, r2, [r1]
 800ef0a:	613b      	str	r3, [r7, #16]
   return(result);
 800ef0c:	693b      	ldr	r3, [r7, #16]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d1e6      	bne.n	800eee0 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	69db      	ldr	r3, [r3, #28]
 800ef18:	f003 0310 	and.w	r3, r3, #16
 800ef1c:	2b10      	cmp	r3, #16
 800ef1e:	d103      	bne.n	800ef28 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	2210      	movs	r2, #16
 800ef26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ef2e:	4619      	mov	r1, r3
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f7ff f931 	bl	800e198 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ef36:	e00b      	b.n	800ef50 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f7f2 f9c9 	bl	80012d0 <HAL_UART_RxCpltCallback>
}
 800ef3e:	e007      	b.n	800ef50 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	699a      	ldr	r2, [r3, #24]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	f042 0208 	orr.w	r2, r2, #8
 800ef4e:	619a      	str	r2, [r3, #24]
}
 800ef50:	bf00      	nop
 800ef52:	3758      	adds	r7, #88	@ 0x58
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}

0800ef58 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ef58:	b480      	push	{r7}
 800ef5a:	b083      	sub	sp, #12
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
 800ef60:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d121      	bne.n	800efae <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	4b27      	ldr	r3, [pc, #156]	@ (800f00c <FMC_SDRAM_Init+0xb4>)
 800ef70:	4013      	ands	r3, r2
 800ef72:	683a      	ldr	r2, [r7, #0]
 800ef74:	6851      	ldr	r1, [r2, #4]
 800ef76:	683a      	ldr	r2, [r7, #0]
 800ef78:	6892      	ldr	r2, [r2, #8]
 800ef7a:	4311      	orrs	r1, r2
 800ef7c:	683a      	ldr	r2, [r7, #0]
 800ef7e:	68d2      	ldr	r2, [r2, #12]
 800ef80:	4311      	orrs	r1, r2
 800ef82:	683a      	ldr	r2, [r7, #0]
 800ef84:	6912      	ldr	r2, [r2, #16]
 800ef86:	4311      	orrs	r1, r2
 800ef88:	683a      	ldr	r2, [r7, #0]
 800ef8a:	6952      	ldr	r2, [r2, #20]
 800ef8c:	4311      	orrs	r1, r2
 800ef8e:	683a      	ldr	r2, [r7, #0]
 800ef90:	6992      	ldr	r2, [r2, #24]
 800ef92:	4311      	orrs	r1, r2
 800ef94:	683a      	ldr	r2, [r7, #0]
 800ef96:	69d2      	ldr	r2, [r2, #28]
 800ef98:	4311      	orrs	r1, r2
 800ef9a:	683a      	ldr	r2, [r7, #0]
 800ef9c:	6a12      	ldr	r2, [r2, #32]
 800ef9e:	4311      	orrs	r1, r2
 800efa0:	683a      	ldr	r2, [r7, #0]
 800efa2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800efa4:	430a      	orrs	r2, r1
 800efa6:	431a      	orrs	r2, r3
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	601a      	str	r2, [r3, #0]
 800efac:	e026      	b.n	800effc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	69d9      	ldr	r1, [r3, #28]
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	6a1b      	ldr	r3, [r3, #32]
 800efbe:	4319      	orrs	r1, r3
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efc4:	430b      	orrs	r3, r1
 800efc6:	431a      	orrs	r2, r3
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	685a      	ldr	r2, [r3, #4]
 800efd0:	4b0e      	ldr	r3, [pc, #56]	@ (800f00c <FMC_SDRAM_Init+0xb4>)
 800efd2:	4013      	ands	r3, r2
 800efd4:	683a      	ldr	r2, [r7, #0]
 800efd6:	6851      	ldr	r1, [r2, #4]
 800efd8:	683a      	ldr	r2, [r7, #0]
 800efda:	6892      	ldr	r2, [r2, #8]
 800efdc:	4311      	orrs	r1, r2
 800efde:	683a      	ldr	r2, [r7, #0]
 800efe0:	68d2      	ldr	r2, [r2, #12]
 800efe2:	4311      	orrs	r1, r2
 800efe4:	683a      	ldr	r2, [r7, #0]
 800efe6:	6912      	ldr	r2, [r2, #16]
 800efe8:	4311      	orrs	r1, r2
 800efea:	683a      	ldr	r2, [r7, #0]
 800efec:	6952      	ldr	r2, [r2, #20]
 800efee:	4311      	orrs	r1, r2
 800eff0:	683a      	ldr	r2, [r7, #0]
 800eff2:	6992      	ldr	r2, [r2, #24]
 800eff4:	430a      	orrs	r2, r1
 800eff6:	431a      	orrs	r2, r3
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800effc:	2300      	movs	r3, #0
}
 800effe:	4618      	mov	r0, r3
 800f000:	370c      	adds	r7, #12
 800f002:	46bd      	mov	sp, r7
 800f004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f008:	4770      	bx	lr
 800f00a:	bf00      	nop
 800f00c:	ffff8000 	.word	0xffff8000

0800f010 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f010:	b480      	push	{r7}
 800f012:	b085      	sub	sp, #20
 800f014:	af00      	add	r7, sp, #0
 800f016:	60f8      	str	r0, [r7, #12]
 800f018:	60b9      	str	r1, [r7, #8]
 800f01a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d128      	bne.n	800f074 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	689b      	ldr	r3, [r3, #8]
 800f026:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	1e59      	subs	r1, r3, #1
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	685b      	ldr	r3, [r3, #4]
 800f034:	3b01      	subs	r3, #1
 800f036:	011b      	lsls	r3, r3, #4
 800f038:	4319      	orrs	r1, r3
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	689b      	ldr	r3, [r3, #8]
 800f03e:	3b01      	subs	r3, #1
 800f040:	021b      	lsls	r3, r3, #8
 800f042:	4319      	orrs	r1, r3
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	68db      	ldr	r3, [r3, #12]
 800f048:	3b01      	subs	r3, #1
 800f04a:	031b      	lsls	r3, r3, #12
 800f04c:	4319      	orrs	r1, r3
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	691b      	ldr	r3, [r3, #16]
 800f052:	3b01      	subs	r3, #1
 800f054:	041b      	lsls	r3, r3, #16
 800f056:	4319      	orrs	r1, r3
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	695b      	ldr	r3, [r3, #20]
 800f05c:	3b01      	subs	r3, #1
 800f05e:	051b      	lsls	r3, r3, #20
 800f060:	4319      	orrs	r1, r3
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	699b      	ldr	r3, [r3, #24]
 800f066:	3b01      	subs	r3, #1
 800f068:	061b      	lsls	r3, r3, #24
 800f06a:	430b      	orrs	r3, r1
 800f06c:	431a      	orrs	r2, r3
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	609a      	str	r2, [r3, #8]
 800f072:	e02d      	b.n	800f0d0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	689a      	ldr	r2, [r3, #8]
 800f078:	4b19      	ldr	r3, [pc, #100]	@ (800f0e0 <FMC_SDRAM_Timing_Init+0xd0>)
 800f07a:	4013      	ands	r3, r2
 800f07c:	68ba      	ldr	r2, [r7, #8]
 800f07e:	68d2      	ldr	r2, [r2, #12]
 800f080:	3a01      	subs	r2, #1
 800f082:	0311      	lsls	r1, r2, #12
 800f084:	68ba      	ldr	r2, [r7, #8]
 800f086:	6952      	ldr	r2, [r2, #20]
 800f088:	3a01      	subs	r2, #1
 800f08a:	0512      	lsls	r2, r2, #20
 800f08c:	430a      	orrs	r2, r1
 800f08e:	431a      	orrs	r2, r3
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	68db      	ldr	r3, [r3, #12]
 800f098:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	1e59      	subs	r1, r3, #1
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	685b      	ldr	r3, [r3, #4]
 800f0a6:	3b01      	subs	r3, #1
 800f0a8:	011b      	lsls	r3, r3, #4
 800f0aa:	4319      	orrs	r1, r3
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	689b      	ldr	r3, [r3, #8]
 800f0b0:	3b01      	subs	r3, #1
 800f0b2:	021b      	lsls	r3, r3, #8
 800f0b4:	4319      	orrs	r1, r3
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	691b      	ldr	r3, [r3, #16]
 800f0ba:	3b01      	subs	r3, #1
 800f0bc:	041b      	lsls	r3, r3, #16
 800f0be:	4319      	orrs	r1, r3
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	699b      	ldr	r3, [r3, #24]
 800f0c4:	3b01      	subs	r3, #1
 800f0c6:	061b      	lsls	r3, r3, #24
 800f0c8:	430b      	orrs	r3, r1
 800f0ca:	431a      	orrs	r2, r3
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800f0d0:	2300      	movs	r3, #0
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3714      	adds	r7, #20
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0dc:	4770      	bx	lr
 800f0de:	bf00      	nop
 800f0e0:	ff0f0fff 	.word	0xff0f0fff

0800f0e4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b085      	sub	sp, #20
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	60f8      	str	r0, [r7, #12]
 800f0ec:	60b9      	str	r1, [r7, #8]
 800f0ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	691a      	ldr	r2, [r3, #16]
 800f0f4:	4b0c      	ldr	r3, [pc, #48]	@ (800f128 <FMC_SDRAM_SendCommand+0x44>)
 800f0f6:	4013      	ands	r3, r2
 800f0f8:	68ba      	ldr	r2, [r7, #8]
 800f0fa:	6811      	ldr	r1, [r2, #0]
 800f0fc:	68ba      	ldr	r2, [r7, #8]
 800f0fe:	6852      	ldr	r2, [r2, #4]
 800f100:	4311      	orrs	r1, r2
 800f102:	68ba      	ldr	r2, [r7, #8]
 800f104:	6892      	ldr	r2, [r2, #8]
 800f106:	3a01      	subs	r2, #1
 800f108:	0152      	lsls	r2, r2, #5
 800f10a:	4311      	orrs	r1, r2
 800f10c:	68ba      	ldr	r2, [r7, #8]
 800f10e:	68d2      	ldr	r2, [r2, #12]
 800f110:	0252      	lsls	r2, r2, #9
 800f112:	430a      	orrs	r2, r1
 800f114:	431a      	orrs	r2, r3
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800f11a:	2300      	movs	r3, #0
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3714      	adds	r7, #20
 800f120:	46bd      	mov	sp, r7
 800f122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f126:	4770      	bx	lr
 800f128:	ffc00000 	.word	0xffc00000

0800f12c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800f12c:	b480      	push	{r7}
 800f12e:	b083      	sub	sp, #12
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	695a      	ldr	r2, [r3, #20]
 800f13a:	4b07      	ldr	r3, [pc, #28]	@ (800f158 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800f13c:	4013      	ands	r3, r2
 800f13e:	683a      	ldr	r2, [r7, #0]
 800f140:	0052      	lsls	r2, r2, #1
 800f142:	431a      	orrs	r2, r3
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800f148:	2300      	movs	r3, #0
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	370c      	adds	r7, #12
 800f14e:	46bd      	mov	sp, r7
 800f150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f154:	4770      	bx	lr
 800f156:	bf00      	nop
 800f158:	ffffc001 	.word	0xffffc001

0800f15c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f15c:	b084      	sub	sp, #16
 800f15e:	b480      	push	{r7}
 800f160:	b085      	sub	sp, #20
 800f162:	af00      	add	r7, sp, #0
 800f164:	6078      	str	r0, [r7, #4]
 800f166:	f107 001c 	add.w	r0, r7, #28
 800f16a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f16e:	2300      	movs	r3, #0
 800f170:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f172:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f174:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f176:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800f178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800f17a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800f17e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800f182:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800f186:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f188:	68fa      	ldr	r2, [r7, #12]
 800f18a:	4313      	orrs	r3, r2
 800f18c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	685a      	ldr	r2, [r3, #4]
 800f192:	4b07      	ldr	r3, [pc, #28]	@ (800f1b0 <SDMMC_Init+0x54>)
 800f194:	4013      	ands	r3, r2
 800f196:	68fa      	ldr	r2, [r7, #12]
 800f198:	431a      	orrs	r2, r3
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f19e:	2300      	movs	r3, #0
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3714      	adds	r7, #20
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	b004      	add	sp, #16
 800f1ac:	4770      	bx	lr
 800f1ae:	bf00      	nop
 800f1b0:	ffff8100 	.word	0xffff8100

0800f1b4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800f1b4:	b480      	push	{r7}
 800f1b6:	b083      	sub	sp, #12
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	370c      	adds	r7, #12
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1cc:	4770      	bx	lr

0800f1ce <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800f1ce:	b480      	push	{r7}
 800f1d0:	b083      	sub	sp, #12
 800f1d2:	af00      	add	r7, sp, #0
 800f1d4:	6078      	str	r0, [r7, #4]
 800f1d6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	681a      	ldr	r2, [r3, #0]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800f1e2:	2300      	movs	r3, #0
}
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	370c      	adds	r7, #12
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ee:	4770      	bx	lr

0800f1f0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800f1f0:	b480      	push	{r7}
 800f1f2:	b083      	sub	sp, #12
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2203      	movs	r2, #3
 800f1fc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800f1fe:	2300      	movs	r3, #0
}
 800f200:	4618      	mov	r0, r3
 800f202:	370c      	adds	r7, #12
 800f204:	46bd      	mov	sp, r7
 800f206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20a:	4770      	bx	lr

0800f20c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800f20c:	b480      	push	{r7}
 800f20e:	b083      	sub	sp, #12
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	f003 0303 	and.w	r3, r3, #3
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	370c      	adds	r7, #12
 800f220:	46bd      	mov	sp, r7
 800f222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f226:	4770      	bx	lr

0800f228 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f228:	b480      	push	{r7}
 800f22a:	b085      	sub	sp, #20
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f232:	2300      	movs	r3, #0
 800f234:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	681a      	ldr	r2, [r3, #0]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f246:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f24c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f252:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f254:	68fa      	ldr	r2, [r7, #12]
 800f256:	4313      	orrs	r3, r2
 800f258:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	68da      	ldr	r2, [r3, #12]
 800f25e:	4b06      	ldr	r3, [pc, #24]	@ (800f278 <SDMMC_SendCommand+0x50>)
 800f260:	4013      	ands	r3, r2
 800f262:	68fa      	ldr	r2, [r7, #12]
 800f264:	431a      	orrs	r2, r3
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f26a:	2300      	movs	r3, #0
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3714      	adds	r7, #20
 800f270:	46bd      	mov	sp, r7
 800f272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f276:	4770      	bx	lr
 800f278:	fffff000 	.word	0xfffff000

0800f27c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800f27c:	b480      	push	{r7}
 800f27e:	b083      	sub	sp, #12
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	691b      	ldr	r3, [r3, #16]
 800f288:	b2db      	uxtb	r3, r3
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	370c      	adds	r7, #12
 800f28e:	46bd      	mov	sp, r7
 800f290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f294:	4770      	bx	lr

0800f296 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800f296:	b480      	push	{r7}
 800f298:	b085      	sub	sp, #20
 800f29a:	af00      	add	r7, sp, #0
 800f29c:	6078      	str	r0, [r7, #4]
 800f29e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	3314      	adds	r3, #20
 800f2a4:	461a      	mov	r2, r3
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	4413      	add	r3, r2
 800f2aa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	681b      	ldr	r3, [r3, #0]
}  
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3714      	adds	r7, #20
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ba:	4770      	bx	lr

0800f2bc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b085      	sub	sp, #20
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	681a      	ldr	r2, [r3, #0]
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	685a      	ldr	r2, [r3, #4]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f2e2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f2e8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f2ee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f2f0:	68fa      	ldr	r2, [r7, #12]
 800f2f2:	4313      	orrs	r3, r2
 800f2f4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2fa:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	431a      	orrs	r2, r3
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800f306:	2300      	movs	r3, #0

}
 800f308:	4618      	mov	r0, r3
 800f30a:	3714      	adds	r7, #20
 800f30c:	46bd      	mov	sp, r7
 800f30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f312:	4770      	bx	lr

0800f314 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b088      	sub	sp, #32
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
 800f31c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f322:	2310      	movs	r3, #16
 800f324:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f326:	2340      	movs	r3, #64	@ 0x40
 800f328:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f32a:	2300      	movs	r3, #0
 800f32c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f32e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f332:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f334:	f107 0308 	add.w	r3, r7, #8
 800f338:	4619      	mov	r1, r3
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f7ff ff74 	bl	800f228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800f340:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f344:	2110      	movs	r1, #16
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f000 f9d6 	bl	800f6f8 <SDMMC_GetCmdResp1>
 800f34c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f34e:	69fb      	ldr	r3, [r7, #28]
}
 800f350:	4618      	mov	r0, r3
 800f352:	3720      	adds	r7, #32
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b088      	sub	sp, #32
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f366:	2311      	movs	r3, #17
 800f368:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f36a:	2340      	movs	r3, #64	@ 0x40
 800f36c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f36e:	2300      	movs	r3, #0
 800f370:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f372:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f376:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f378:	f107 0308 	add.w	r3, r7, #8
 800f37c:	4619      	mov	r1, r3
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f7ff ff52 	bl	800f228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f384:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f388:	2111      	movs	r1, #17
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f000 f9b4 	bl	800f6f8 <SDMMC_GetCmdResp1>
 800f390:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f392:	69fb      	ldr	r3, [r7, #28]
}
 800f394:	4618      	mov	r0, r3
 800f396:	3720      	adds	r7, #32
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}

0800f39c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b088      	sub	sp, #32
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f3aa:	2312      	movs	r3, #18
 800f3ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f3ae:	2340      	movs	r3, #64	@ 0x40
 800f3b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f3b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f3ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f3bc:	f107 0308 	add.w	r3, r7, #8
 800f3c0:	4619      	mov	r1, r3
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f7ff ff30 	bl	800f228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f3c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f3cc:	2112      	movs	r1, #18
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f000 f992 	bl	800f6f8 <SDMMC_GetCmdResp1>
 800f3d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f3d6:	69fb      	ldr	r3, [r7, #28]
}
 800f3d8:	4618      	mov	r0, r3
 800f3da:	3720      	adds	r7, #32
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}

0800f3e0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b088      	sub	sp, #32
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f3ee:	2318      	movs	r3, #24
 800f3f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f3f2:	2340      	movs	r3, #64	@ 0x40
 800f3f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f3fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f3fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f400:	f107 0308 	add.w	r3, r7, #8
 800f404:	4619      	mov	r1, r3
 800f406:	6878      	ldr	r0, [r7, #4]
 800f408:	f7ff ff0e 	bl	800f228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f40c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f410:	2118      	movs	r1, #24
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f000 f970 	bl	800f6f8 <SDMMC_GetCmdResp1>
 800f418:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f41a:	69fb      	ldr	r3, [r7, #28]
}
 800f41c:	4618      	mov	r0, r3
 800f41e:	3720      	adds	r7, #32
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}

0800f424 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b088      	sub	sp, #32
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
 800f42c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f432:	2319      	movs	r3, #25
 800f434:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f436:	2340      	movs	r3, #64	@ 0x40
 800f438:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f43a:	2300      	movs	r3, #0
 800f43c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f43e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f442:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f444:	f107 0308 	add.w	r3, r7, #8
 800f448:	4619      	mov	r1, r3
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f7ff feec 	bl	800f228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f450:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f454:	2119      	movs	r1, #25
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f000 f94e 	bl	800f6f8 <SDMMC_GetCmdResp1>
 800f45c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f45e:	69fb      	ldr	r3, [r7, #28]
}
 800f460:	4618      	mov	r0, r3
 800f462:	3720      	adds	r7, #32
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b088      	sub	sp, #32
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f470:	2300      	movs	r3, #0
 800f472:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f474:	230c      	movs	r3, #12
 800f476:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f478:	2340      	movs	r3, #64	@ 0x40
 800f47a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f47c:	2300      	movs	r3, #0
 800f47e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f480:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f484:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f486:	f107 0308 	add.w	r3, r7, #8
 800f48a:	4619      	mov	r1, r3
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f7ff fecb 	bl	800f228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800f492:	4a05      	ldr	r2, [pc, #20]	@ (800f4a8 <SDMMC_CmdStopTransfer+0x40>)
 800f494:	210c      	movs	r1, #12
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f000 f92e 	bl	800f6f8 <SDMMC_GetCmdResp1>
 800f49c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f49e:	69fb      	ldr	r3, [r7, #28]
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3720      	adds	r7, #32
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}
 800f4a8:	05f5e100 	.word	0x05f5e100

0800f4ac <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b08a      	sub	sp, #40	@ 0x28
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	60f8      	str	r0, [r7, #12]
 800f4b4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f4bc:	2307      	movs	r3, #7
 800f4be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f4c0:	2340      	movs	r3, #64	@ 0x40
 800f4c2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f4c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f4cc:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f4ce:	f107 0310 	add.w	r3, r7, #16
 800f4d2:	4619      	mov	r1, r3
 800f4d4:	68f8      	ldr	r0, [r7, #12]
 800f4d6:	f7ff fea7 	bl	800f228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800f4da:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f4de:	2107      	movs	r1, #7
 800f4e0:	68f8      	ldr	r0, [r7, #12]
 800f4e2:	f000 f909 	bl	800f6f8 <SDMMC_GetCmdResp1>
 800f4e6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800f4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	3728      	adds	r7, #40	@ 0x28
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}

0800f4f2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800f4f2:	b580      	push	{r7, lr}
 800f4f4:	b088      	sub	sp, #32
 800f4f6:	af00      	add	r7, sp, #0
 800f4f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f4fe:	2300      	movs	r3, #0
 800f500:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800f502:	2300      	movs	r3, #0
 800f504:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f506:	2300      	movs	r3, #0
 800f508:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f50a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f50e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f510:	f107 0308 	add.w	r3, r7, #8
 800f514:	4619      	mov	r1, r3
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f7ff fe86 	bl	800f228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f000 fb23 	bl	800fb68 <SDMMC_GetCmdError>
 800f522:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f524:	69fb      	ldr	r3, [r7, #28]
}
 800f526:	4618      	mov	r0, r3
 800f528:	3720      	adds	r7, #32
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}

0800f52e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800f52e:	b580      	push	{r7, lr}
 800f530:	b088      	sub	sp, #32
 800f532:	af00      	add	r7, sp, #0
 800f534:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f536:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800f53a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f53c:	2308      	movs	r3, #8
 800f53e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f540:	2340      	movs	r3, #64	@ 0x40
 800f542:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f544:	2300      	movs	r3, #0
 800f546:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f548:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f54c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f54e:	f107 0308 	add.w	r3, r7, #8
 800f552:	4619      	mov	r1, r3
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f7ff fe67 	bl	800f228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f000 fab6 	bl	800facc <SDMMC_GetCmdResp7>
 800f560:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f562:	69fb      	ldr	r3, [r7, #28]
}
 800f564:	4618      	mov	r0, r3
 800f566:	3720      	adds	r7, #32
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}

0800f56c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b088      	sub	sp, #32
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f57a:	2337      	movs	r3, #55	@ 0x37
 800f57c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f57e:	2340      	movs	r3, #64	@ 0x40
 800f580:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f582:	2300      	movs	r3, #0
 800f584:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f586:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f58a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f58c:	f107 0308 	add.w	r3, r7, #8
 800f590:	4619      	mov	r1, r3
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f7ff fe48 	bl	800f228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800f598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f59c:	2137      	movs	r1, #55	@ 0x37
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f000 f8aa 	bl	800f6f8 <SDMMC_GetCmdResp1>
 800f5a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f5a6:	69fb      	ldr	r3, [r7, #28]
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	3720      	adds	r7, #32
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}

0800f5b0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b088      	sub	sp, #32
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f5ba:	683a      	ldr	r2, [r7, #0]
 800f5bc:	4b0d      	ldr	r3, [pc, #52]	@ (800f5f4 <SDMMC_CmdAppOperCommand+0x44>)
 800f5be:	4313      	orrs	r3, r2
 800f5c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f5c2:	2329      	movs	r3, #41	@ 0x29
 800f5c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f5c6:	2340      	movs	r3, #64	@ 0x40
 800f5c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f5ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f5d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f5d4:	f107 0308 	add.w	r3, r7, #8
 800f5d8:	4619      	mov	r1, r3
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f7ff fe24 	bl	800f228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f000 f9bf 	bl	800f964 <SDMMC_GetCmdResp3>
 800f5e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f5e8:	69fb      	ldr	r3, [r7, #28]
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3720      	adds	r7, #32
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}
 800f5f2:	bf00      	nop
 800f5f4:	80100000 	.word	0x80100000

0800f5f8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b088      	sub	sp, #32
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f600:	2300      	movs	r3, #0
 800f602:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f604:	2302      	movs	r3, #2
 800f606:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f608:	23c0      	movs	r3, #192	@ 0xc0
 800f60a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f60c:	2300      	movs	r3, #0
 800f60e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f610:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f614:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f616:	f107 0308 	add.w	r3, r7, #8
 800f61a:	4619      	mov	r1, r3
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f7ff fe03 	bl	800f228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f000 f956 	bl	800f8d4 <SDMMC_GetCmdResp2>
 800f628:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f62a:	69fb      	ldr	r3, [r7, #28]
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3720      	adds	r7, #32
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}

0800f634 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b088      	sub	sp, #32
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
 800f63c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f642:	2309      	movs	r3, #9
 800f644:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f646:	23c0      	movs	r3, #192	@ 0xc0
 800f648:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f64a:	2300      	movs	r3, #0
 800f64c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f64e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f652:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f654:	f107 0308 	add.w	r3, r7, #8
 800f658:	4619      	mov	r1, r3
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f7ff fde4 	bl	800f228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f000 f937 	bl	800f8d4 <SDMMC_GetCmdResp2>
 800f666:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f668:	69fb      	ldr	r3, [r7, #28]
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3720      	adds	r7, #32
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}

0800f672 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800f672:	b580      	push	{r7, lr}
 800f674:	b088      	sub	sp, #32
 800f676:	af00      	add	r7, sp, #0
 800f678:	6078      	str	r0, [r7, #4]
 800f67a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f67c:	2300      	movs	r3, #0
 800f67e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f680:	2303      	movs	r3, #3
 800f682:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f684:	2340      	movs	r3, #64	@ 0x40
 800f686:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f688:	2300      	movs	r3, #0
 800f68a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f68c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f690:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f692:	f107 0308 	add.w	r3, r7, #8
 800f696:	4619      	mov	r1, r3
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f7ff fdc5 	bl	800f228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f69e:	683a      	ldr	r2, [r7, #0]
 800f6a0:	2103      	movs	r1, #3
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f000 f99c 	bl	800f9e0 <SDMMC_GetCmdResp6>
 800f6a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f6aa:	69fb      	ldr	r3, [r7, #28]
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	3720      	adds	r7, #32
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b088      	sub	sp, #32
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
 800f6bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f6c2:	230d      	movs	r3, #13
 800f6c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f6c6:	2340      	movs	r3, #64	@ 0x40
 800f6c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f6ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f6d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f6d4:	f107 0308 	add.w	r3, r7, #8
 800f6d8:	4619      	mov	r1, r3
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f7ff fda4 	bl	800f228 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800f6e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f6e4:	210d      	movs	r1, #13
 800f6e6:	6878      	ldr	r0, [r7, #4]
 800f6e8:	f000 f806 	bl	800f6f8 <SDMMC_GetCmdResp1>
 800f6ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f6ee:	69fb      	ldr	r3, [r7, #28]
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3720      	adds	r7, #32
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}

0800f6f8 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b088      	sub	sp, #32
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	60f8      	str	r0, [r7, #12]
 800f700:	460b      	mov	r3, r1
 800f702:	607a      	str	r2, [r7, #4]
 800f704:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f706:	4b70      	ldr	r3, [pc, #448]	@ (800f8c8 <SDMMC_GetCmdResp1+0x1d0>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	4a70      	ldr	r2, [pc, #448]	@ (800f8cc <SDMMC_GetCmdResp1+0x1d4>)
 800f70c:	fba2 2303 	umull	r2, r3, r2, r3
 800f710:	0a5a      	lsrs	r2, r3, #9
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	fb02 f303 	mul.w	r3, r2, r3
 800f718:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f71a:	69fb      	ldr	r3, [r7, #28]
 800f71c:	1e5a      	subs	r2, r3, #1
 800f71e:	61fa      	str	r2, [r7, #28]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d102      	bne.n	800f72a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f724:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f728:	e0c9      	b.n	800f8be <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f72e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f730:	69bb      	ldr	r3, [r7, #24]
 800f732:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f736:	2b00      	cmp	r3, #0
 800f738:	d0ef      	beq.n	800f71a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f73a:	69bb      	ldr	r3, [r7, #24]
 800f73c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f740:	2b00      	cmp	r3, #0
 800f742:	d1ea      	bne.n	800f71a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f748:	f003 0304 	and.w	r3, r3, #4
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d004      	beq.n	800f75a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	2204      	movs	r2, #4
 800f754:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f756:	2304      	movs	r3, #4
 800f758:	e0b1      	b.n	800f8be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f75e:	f003 0301 	and.w	r3, r3, #1
 800f762:	2b00      	cmp	r3, #0
 800f764:	d004      	beq.n	800f770 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	2201      	movs	r2, #1
 800f76a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f76c:	2301      	movs	r3, #1
 800f76e:	e0a6      	b.n	800f8be <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	22c5      	movs	r2, #197	@ 0xc5
 800f774:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f776:	68f8      	ldr	r0, [r7, #12]
 800f778:	f7ff fd80 	bl	800f27c <SDMMC_GetCommandResponse>
 800f77c:	4603      	mov	r3, r0
 800f77e:	461a      	mov	r2, r3
 800f780:	7afb      	ldrb	r3, [r7, #11]
 800f782:	4293      	cmp	r3, r2
 800f784:	d001      	beq.n	800f78a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f786:	2301      	movs	r3, #1
 800f788:	e099      	b.n	800f8be <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f78a:	2100      	movs	r1, #0
 800f78c:	68f8      	ldr	r0, [r7, #12]
 800f78e:	f7ff fd82 	bl	800f296 <SDMMC_GetResponse>
 800f792:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f794:	697a      	ldr	r2, [r7, #20]
 800f796:	4b4e      	ldr	r3, [pc, #312]	@ (800f8d0 <SDMMC_GetCmdResp1+0x1d8>)
 800f798:	4013      	ands	r3, r2
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d101      	bne.n	800f7a2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	e08d      	b.n	800f8be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	da02      	bge.n	800f7ae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f7a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f7ac:	e087      	b.n	800f8be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d001      	beq.n	800f7bc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f7b8:	2340      	movs	r3, #64	@ 0x40
 800f7ba:	e080      	b.n	800f8be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d001      	beq.n	800f7ca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f7c6:	2380      	movs	r3, #128	@ 0x80
 800f7c8:	e079      	b.n	800f8be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f7ca:	697b      	ldr	r3, [r7, #20]
 800f7cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d002      	beq.n	800f7da <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f7d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f7d8:	e071      	b.n	800f8be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d002      	beq.n	800f7ea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f7e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f7e8:	e069      	b.n	800f8be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d002      	beq.n	800f7fa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f7f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f7f8:	e061      	b.n	800f8be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f800:	2b00      	cmp	r3, #0
 800f802:	d002      	beq.n	800f80a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f804:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f808:	e059      	b.n	800f8be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f810:	2b00      	cmp	r3, #0
 800f812:	d002      	beq.n	800f81a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f814:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f818:	e051      	b.n	800f8be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f820:	2b00      	cmp	r3, #0
 800f822:	d002      	beq.n	800f82a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f824:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f828:	e049      	b.n	800f8be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f830:	2b00      	cmp	r3, #0
 800f832:	d002      	beq.n	800f83a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f834:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800f838:	e041      	b.n	800f8be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f840:	2b00      	cmp	r3, #0
 800f842:	d002      	beq.n	800f84a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f844:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f848:	e039      	b.n	800f8be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f850:	2b00      	cmp	r3, #0
 800f852:	d002      	beq.n	800f85a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f854:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800f858:	e031      	b.n	800f8be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f860:	2b00      	cmp	r3, #0
 800f862:	d002      	beq.n	800f86a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f864:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800f868:	e029      	b.n	800f8be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f86a:	697b      	ldr	r3, [r7, #20]
 800f86c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f870:	2b00      	cmp	r3, #0
 800f872:	d002      	beq.n	800f87a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f874:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f878:	e021      	b.n	800f8be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f880:	2b00      	cmp	r3, #0
 800f882:	d002      	beq.n	800f88a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f884:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f888:	e019      	b.n	800f8be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f88a:	697b      	ldr	r3, [r7, #20]
 800f88c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f890:	2b00      	cmp	r3, #0
 800f892:	d002      	beq.n	800f89a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f894:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800f898:	e011      	b.n	800f8be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d002      	beq.n	800f8aa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f8a4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800f8a8:	e009      	b.n	800f8be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	f003 0308 	and.w	r3, r3, #8
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d002      	beq.n	800f8ba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f8b4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800f8b8:	e001      	b.n	800f8be <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f8ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800f8be:	4618      	mov	r0, r3
 800f8c0:	3720      	adds	r7, #32
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}
 800f8c6:	bf00      	nop
 800f8c8:	20000068 	.word	0x20000068
 800f8cc:	10624dd3 	.word	0x10624dd3
 800f8d0:	fdffe008 	.word	0xfdffe008

0800f8d4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b085      	sub	sp, #20
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f8dc:	4b1f      	ldr	r3, [pc, #124]	@ (800f95c <SDMMC_GetCmdResp2+0x88>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	4a1f      	ldr	r2, [pc, #124]	@ (800f960 <SDMMC_GetCmdResp2+0x8c>)
 800f8e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f8e6:	0a5b      	lsrs	r3, r3, #9
 800f8e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f8ec:	fb02 f303 	mul.w	r3, r2, r3
 800f8f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	1e5a      	subs	r2, r3, #1
 800f8f6:	60fa      	str	r2, [r7, #12]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d102      	bne.n	800f902 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f8fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f900:	e026      	b.n	800f950 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f906:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f908:	68bb      	ldr	r3, [r7, #8]
 800f90a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d0ef      	beq.n	800f8f2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d1ea      	bne.n	800f8f2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f920:	f003 0304 	and.w	r3, r3, #4
 800f924:	2b00      	cmp	r3, #0
 800f926:	d004      	beq.n	800f932 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2204      	movs	r2, #4
 800f92c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f92e:	2304      	movs	r3, #4
 800f930:	e00e      	b.n	800f950 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f936:	f003 0301 	and.w	r3, r3, #1
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d004      	beq.n	800f948 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2201      	movs	r2, #1
 800f942:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f944:	2301      	movs	r3, #1
 800f946:	e003      	b.n	800f950 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	22c5      	movs	r2, #197	@ 0xc5
 800f94c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800f94e:	2300      	movs	r3, #0
}
 800f950:	4618      	mov	r0, r3
 800f952:	3714      	adds	r7, #20
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr
 800f95c:	20000068 	.word	0x20000068
 800f960:	10624dd3 	.word	0x10624dd3

0800f964 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f964:	b480      	push	{r7}
 800f966:	b085      	sub	sp, #20
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f96c:	4b1a      	ldr	r3, [pc, #104]	@ (800f9d8 <SDMMC_GetCmdResp3+0x74>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	4a1a      	ldr	r2, [pc, #104]	@ (800f9dc <SDMMC_GetCmdResp3+0x78>)
 800f972:	fba2 2303 	umull	r2, r3, r2, r3
 800f976:	0a5b      	lsrs	r3, r3, #9
 800f978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f97c:	fb02 f303 	mul.w	r3, r2, r3
 800f980:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	1e5a      	subs	r2, r3, #1
 800f986:	60fa      	str	r2, [r7, #12]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d102      	bne.n	800f992 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f98c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f990:	e01b      	b.n	800f9ca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f996:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f998:	68bb      	ldr	r3, [r7, #8]
 800f99a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d0ef      	beq.n	800f982 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d1ea      	bne.n	800f982 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f9b0:	f003 0304 	and.w	r3, r3, #4
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d004      	beq.n	800f9c2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2204      	movs	r2, #4
 800f9bc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f9be:	2304      	movs	r3, #4
 800f9c0:	e003      	b.n	800f9ca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	22c5      	movs	r2, #197	@ 0xc5
 800f9c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f9c8:	2300      	movs	r3, #0
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3714      	adds	r7, #20
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d4:	4770      	bx	lr
 800f9d6:	bf00      	nop
 800f9d8:	20000068 	.word	0x20000068
 800f9dc:	10624dd3 	.word	0x10624dd3

0800f9e0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b088      	sub	sp, #32
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	60f8      	str	r0, [r7, #12]
 800f9e8:	460b      	mov	r3, r1
 800f9ea:	607a      	str	r2, [r7, #4]
 800f9ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f9ee:	4b35      	ldr	r3, [pc, #212]	@ (800fac4 <SDMMC_GetCmdResp6+0xe4>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	4a35      	ldr	r2, [pc, #212]	@ (800fac8 <SDMMC_GetCmdResp6+0xe8>)
 800f9f4:	fba2 2303 	umull	r2, r3, r2, r3
 800f9f8:	0a5b      	lsrs	r3, r3, #9
 800f9fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f9fe:	fb02 f303 	mul.w	r3, r2, r3
 800fa02:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800fa04:	69fb      	ldr	r3, [r7, #28]
 800fa06:	1e5a      	subs	r2, r3, #1
 800fa08:	61fa      	str	r2, [r7, #28]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d102      	bne.n	800fa14 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fa0e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fa12:	e052      	b.n	800faba <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa18:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fa1a:	69bb      	ldr	r3, [r7, #24]
 800fa1c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d0ef      	beq.n	800fa04 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fa24:	69bb      	ldr	r3, [r7, #24]
 800fa26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d1ea      	bne.n	800fa04 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa32:	f003 0304 	and.w	r3, r3, #4
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d004      	beq.n	800fa44 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	2204      	movs	r2, #4
 800fa3e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fa40:	2304      	movs	r3, #4
 800fa42:	e03a      	b.n	800faba <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa48:	f003 0301 	and.w	r3, r3, #1
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d004      	beq.n	800fa5a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	2201      	movs	r2, #1
 800fa54:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fa56:	2301      	movs	r3, #1
 800fa58:	e02f      	b.n	800faba <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fa5a:	68f8      	ldr	r0, [r7, #12]
 800fa5c:	f7ff fc0e 	bl	800f27c <SDMMC_GetCommandResponse>
 800fa60:	4603      	mov	r3, r0
 800fa62:	461a      	mov	r2, r3
 800fa64:	7afb      	ldrb	r3, [r7, #11]
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d001      	beq.n	800fa6e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	e025      	b.n	800faba <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	22c5      	movs	r2, #197	@ 0xc5
 800fa72:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800fa74:	2100      	movs	r1, #0
 800fa76:	68f8      	ldr	r0, [r7, #12]
 800fa78:	f7ff fc0d 	bl	800f296 <SDMMC_GetResponse>
 800fa7c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d106      	bne.n	800fa96 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	0c1b      	lsrs	r3, r3, #16
 800fa8c:	b29a      	uxth	r2, r3
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800fa92:	2300      	movs	r3, #0
 800fa94:	e011      	b.n	800faba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800fa96:	697b      	ldr	r3, [r7, #20]
 800fa98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d002      	beq.n	800faa6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800faa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800faa4:	e009      	b.n	800faba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800faa6:	697b      	ldr	r3, [r7, #20]
 800faa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800faac:	2b00      	cmp	r3, #0
 800faae:	d002      	beq.n	800fab6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fab0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fab4:	e001      	b.n	800faba <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fab6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3720      	adds	r7, #32
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}
 800fac2:	bf00      	nop
 800fac4:	20000068 	.word	0x20000068
 800fac8:	10624dd3 	.word	0x10624dd3

0800facc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800facc:	b480      	push	{r7}
 800face:	b085      	sub	sp, #20
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fad4:	4b22      	ldr	r3, [pc, #136]	@ (800fb60 <SDMMC_GetCmdResp7+0x94>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	4a22      	ldr	r2, [pc, #136]	@ (800fb64 <SDMMC_GetCmdResp7+0x98>)
 800fada:	fba2 2303 	umull	r2, r3, r2, r3
 800fade:	0a5b      	lsrs	r3, r3, #9
 800fae0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fae4:	fb02 f303 	mul.w	r3, r2, r3
 800fae8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	1e5a      	subs	r2, r3, #1
 800faee:	60fa      	str	r2, [r7, #12]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d102      	bne.n	800fafa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800faf4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800faf8:	e02c      	b.n	800fb54 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fafe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d0ef      	beq.n	800faea <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d1ea      	bne.n	800faea <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb18:	f003 0304 	and.w	r3, r3, #4
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d004      	beq.n	800fb2a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2204      	movs	r2, #4
 800fb24:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fb26:	2304      	movs	r3, #4
 800fb28:	e014      	b.n	800fb54 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb2e:	f003 0301 	and.w	r3, r3, #1
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d004      	beq.n	800fb40 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2201      	movs	r2, #1
 800fb3a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	e009      	b.n	800fb54 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d002      	beq.n	800fb52 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2240      	movs	r2, #64	@ 0x40
 800fb50:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fb52:	2300      	movs	r3, #0
  
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3714      	adds	r7, #20
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5e:	4770      	bx	lr
 800fb60:	20000068 	.word	0x20000068
 800fb64:	10624dd3 	.word	0x10624dd3

0800fb68 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800fb68:	b480      	push	{r7}
 800fb6a:	b085      	sub	sp, #20
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fb70:	4b11      	ldr	r3, [pc, #68]	@ (800fbb8 <SDMMC_GetCmdError+0x50>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	4a11      	ldr	r2, [pc, #68]	@ (800fbbc <SDMMC_GetCmdError+0x54>)
 800fb76:	fba2 2303 	umull	r2, r3, r2, r3
 800fb7a:	0a5b      	lsrs	r3, r3, #9
 800fb7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fb80:	fb02 f303 	mul.w	r3, r2, r3
 800fb84:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	1e5a      	subs	r2, r3, #1
 800fb8a:	60fa      	str	r2, [r7, #12]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d102      	bne.n	800fb96 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fb90:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fb94:	e009      	b.n	800fbaa <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d0f1      	beq.n	800fb86 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	22c5      	movs	r2, #197	@ 0xc5
 800fba6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800fba8:	2300      	movs	r3, #0
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3714      	adds	r7, #20
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb4:	4770      	bx	lr
 800fbb6:	bf00      	nop
 800fbb8:	20000068 	.word	0x20000068
 800fbbc:	10624dd3 	.word	0x10624dd3

0800fbc0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fbc4:	4904      	ldr	r1, [pc, #16]	@ (800fbd8 <MX_FATFS_Init+0x18>)
 800fbc6:	4805      	ldr	r0, [pc, #20]	@ (800fbdc <MX_FATFS_Init+0x1c>)
 800fbc8:	f003 f96c 	bl	8012ea4 <FATFS_LinkDriver>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	461a      	mov	r2, r3
 800fbd0:	4b03      	ldr	r3, [pc, #12]	@ (800fbe0 <MX_FATFS_Init+0x20>)
 800fbd2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fbd4:	bf00      	nop
 800fbd6:	bd80      	pop	{r7, pc}
 800fbd8:	200013fc 	.word	0x200013fc
 800fbdc:	080e6ef0 	.word	0x080e6ef0
 800fbe0:	200013f8 	.word	0x200013f8

0800fbe4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800fbe8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	46bd      	mov	sp, r7
 800fbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf2:	4770      	bx	lr

0800fbf4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b082      	sub	sp, #8
 800fbf8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800fbfe:	f000 f888 	bl	800fd12 <BSP_SD_IsDetected>
 800fc02:	4603      	mov	r3, r0
 800fc04:	2b01      	cmp	r3, #1
 800fc06:	d001      	beq.n	800fc0c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800fc08:	2302      	movs	r3, #2
 800fc0a:	e005      	b.n	800fc18 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800fc0c:	4804      	ldr	r0, [pc, #16]	@ (800fc20 <BSP_SD_Init+0x2c>)
 800fc0e:	f7fc fab2 	bl	800c176 <HAL_SD_Init>
 800fc12:	4603      	mov	r3, r0
 800fc14:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800fc16:	79fb      	ldrb	r3, [r7, #7]
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3708      	adds	r7, #8
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd80      	pop	{r7, pc}
 800fc20:	20000b8c 	.word	0x20000b8c

0800fc24 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b086      	sub	sp, #24
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	60f8      	str	r0, [r7, #12]
 800fc2c:	60b9      	str	r1, [r7, #8]
 800fc2e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fc30:	2300      	movs	r3, #0
 800fc32:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	68ba      	ldr	r2, [r7, #8]
 800fc38:	68f9      	ldr	r1, [r7, #12]
 800fc3a:	4806      	ldr	r0, [pc, #24]	@ (800fc54 <BSP_SD_ReadBlocks_DMA+0x30>)
 800fc3c:	f7fc fb54 	bl	800c2e8 <HAL_SD_ReadBlocks_DMA>
 800fc40:	4603      	mov	r3, r0
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d001      	beq.n	800fc4a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fc46:	2301      	movs	r3, #1
 800fc48:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fc4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3718      	adds	r7, #24
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}
 800fc54:	20000b8c 	.word	0x20000b8c

0800fc58 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b086      	sub	sp, #24
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	60f8      	str	r0, [r7, #12]
 800fc60:	60b9      	str	r1, [r7, #8]
 800fc62:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fc64:	2300      	movs	r3, #0
 800fc66:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	68ba      	ldr	r2, [r7, #8]
 800fc6c:	68f9      	ldr	r1, [r7, #12]
 800fc6e:	4806      	ldr	r0, [pc, #24]	@ (800fc88 <BSP_SD_WriteBlocks_DMA+0x30>)
 800fc70:	f7fc fc1c 	bl	800c4ac <HAL_SD_WriteBlocks_DMA>
 800fc74:	4603      	mov	r3, r0
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d001      	beq.n	800fc7e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fc7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	3718      	adds	r7, #24
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}
 800fc88:	20000b8c 	.word	0x20000b8c

0800fc8c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fc90:	4805      	ldr	r0, [pc, #20]	@ (800fca8 <BSP_SD_GetCardState+0x1c>)
 800fc92:	f7fd f841 	bl	800cd18 <HAL_SD_GetCardState>
 800fc96:	4603      	mov	r3, r0
 800fc98:	2b04      	cmp	r3, #4
 800fc9a:	bf14      	ite	ne
 800fc9c:	2301      	movne	r3, #1
 800fc9e:	2300      	moveq	r3, #0
 800fca0:	b2db      	uxtb	r3, r3
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	bd80      	pop	{r7, pc}
 800fca6:	bf00      	nop
 800fca8:	20000b8c 	.word	0x20000b8c

0800fcac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800fcb4:	6879      	ldr	r1, [r7, #4]
 800fcb6:	4803      	ldr	r0, [pc, #12]	@ (800fcc4 <BSP_SD_GetCardInfo+0x18>)
 800fcb8:	f7fd f802 	bl	800ccc0 <HAL_SD_GetCardInfo>
}
 800fcbc:	bf00      	nop
 800fcbe:	3708      	adds	r7, #8
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}
 800fcc4:	20000b8c 	.word	0x20000b8c

0800fcc8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800fcd0:	f000 f818 	bl	800fd04 <BSP_SD_AbortCallback>
}
 800fcd4:	bf00      	nop
 800fcd6:	3708      	adds	r7, #8
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd80      	pop	{r7, pc}

0800fcdc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800fce4:	f000 f9c4 	bl	8010070 <BSP_SD_WriteCpltCallback>
}
 800fce8:	bf00      	nop
 800fcea:	3708      	adds	r7, #8
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}

0800fcf0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b082      	sub	sp, #8
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800fcf8:	f000 f9c8 	bl	801008c <BSP_SD_ReadCpltCallback>
}
 800fcfc:	bf00      	nop
 800fcfe:	3708      	adds	r7, #8
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}

0800fd04 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800fd04:	b480      	push	{r7}
 800fd06:	af00      	add	r7, sp, #0

}
 800fd08:	bf00      	nop
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd10:	4770      	bx	lr

0800fd12 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fd12:	b580      	push	{r7, lr}
 800fd14:	b082      	sub	sp, #8
 800fd16:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fd18:	2301      	movs	r3, #1
 800fd1a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800fd1c:	f000 f80c 	bl	800fd38 <BSP_PlatformIsDetected>
 800fd20:	4603      	mov	r3, r0
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d101      	bne.n	800fd2a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800fd26:	2300      	movs	r3, #0
 800fd28:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800fd2a:	79fb      	ldrb	r3, [r7, #7]
 800fd2c:	b2db      	uxtb	r3, r3
}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	3708      	adds	r7, #8
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}
	...

0800fd38 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b082      	sub	sp, #8
 800fd3c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800fd3e:	2301      	movs	r3, #1
 800fd40:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fd42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fd46:	4806      	ldr	r0, [pc, #24]	@ (800fd60 <BSP_PlatformIsDetected+0x28>)
 800fd48:	f7f9 f9e2 	bl	8009110 <HAL_GPIO_ReadPin>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d001      	beq.n	800fd56 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800fd52:	2300      	movs	r3, #0
 800fd54:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800fd56:	79fb      	ldrb	r3, [r7, #7]
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3708      	adds	r7, #8
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}
 800fd60:	40020800 	.word	0x40020800

0800fd64 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b084      	sub	sp, #16
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800fd6c:	f003 f932 	bl	8012fd4 <osKernelSysTick>
 800fd70:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800fd72:	e006      	b.n	800fd82 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fd74:	f7ff ff8a 	bl	800fc8c <BSP_SD_GetCardState>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d101      	bne.n	800fd82 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	e009      	b.n	800fd96 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800fd82:	f003 f927 	bl	8012fd4 <osKernelSysTick>
 800fd86:	4602      	mov	r2, r0
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	1ad3      	subs	r3, r2, r3
 800fd8c:	687a      	ldr	r2, [r7, #4]
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d8f0      	bhi.n	800fd74 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800fd92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800fd96:	4618      	mov	r0, r3
 800fd98:	3710      	adds	r7, #16
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}
	...

0800fda0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	4603      	mov	r3, r0
 800fda8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fdaa:	4b0b      	ldr	r3, [pc, #44]	@ (800fdd8 <SD_CheckStatus+0x38>)
 800fdac:	2201      	movs	r2, #1
 800fdae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fdb0:	f7ff ff6c 	bl	800fc8c <BSP_SD_GetCardState>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d107      	bne.n	800fdca <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fdba:	4b07      	ldr	r3, [pc, #28]	@ (800fdd8 <SD_CheckStatus+0x38>)
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	b2db      	uxtb	r3, r3
 800fdc0:	f023 0301 	bic.w	r3, r3, #1
 800fdc4:	b2da      	uxtb	r2, r3
 800fdc6:	4b04      	ldr	r3, [pc, #16]	@ (800fdd8 <SD_CheckStatus+0x38>)
 800fdc8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800fdca:	4b03      	ldr	r3, [pc, #12]	@ (800fdd8 <SD_CheckStatus+0x38>)
 800fdcc:	781b      	ldrb	r3, [r3, #0]
 800fdce:	b2db      	uxtb	r3, r3
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3708      	adds	r7, #8
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}
 800fdd8:	200000ad 	.word	0x200000ad

0800fddc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fddc:	b590      	push	{r4, r7, lr}
 800fdde:	b087      	sub	sp, #28
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	4603      	mov	r3, r0
 800fde4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800fde6:	4b20      	ldr	r3, [pc, #128]	@ (800fe68 <SD_initialize+0x8c>)
 800fde8:	2201      	movs	r2, #1
 800fdea:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800fdec:	f003 f8e6 	bl	8012fbc <osKernelRunning>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d030      	beq.n	800fe58 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800fdf6:	f7ff fefd 	bl	800fbf4 <BSP_SD_Init>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d107      	bne.n	800fe10 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800fe00:	79fb      	ldrb	r3, [r7, #7]
 800fe02:	4618      	mov	r0, r3
 800fe04:	f7ff ffcc 	bl	800fda0 <SD_CheckStatus>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	461a      	mov	r2, r3
 800fe0c:	4b16      	ldr	r3, [pc, #88]	@ (800fe68 <SD_initialize+0x8c>)
 800fe0e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800fe10:	4b15      	ldr	r3, [pc, #84]	@ (800fe68 <SD_initialize+0x8c>)
 800fe12:	781b      	ldrb	r3, [r3, #0]
 800fe14:	b2db      	uxtb	r3, r3
 800fe16:	2b01      	cmp	r3, #1
 800fe18:	d01e      	beq.n	800fe58 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800fe1a:	4b14      	ldr	r3, [pc, #80]	@ (800fe6c <SD_initialize+0x90>)
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d10e      	bne.n	800fe40 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800fe22:	4b13      	ldr	r3, [pc, #76]	@ (800fe70 <SD_initialize+0x94>)
 800fe24:	f107 0408 	add.w	r4, r7, #8
 800fe28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800fe2e:	f107 0308 	add.w	r3, r7, #8
 800fe32:	2100      	movs	r1, #0
 800fe34:	4618      	mov	r0, r3
 800fe36:	f003 fa1e 	bl	8013276 <osMessageCreate>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	4a0b      	ldr	r2, [pc, #44]	@ (800fe6c <SD_initialize+0x90>)
 800fe3e:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800fe40:	4b0a      	ldr	r3, [pc, #40]	@ (800fe6c <SD_initialize+0x90>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d107      	bne.n	800fe58 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800fe48:	4b07      	ldr	r3, [pc, #28]	@ (800fe68 <SD_initialize+0x8c>)
 800fe4a:	781b      	ldrb	r3, [r3, #0]
 800fe4c:	b2db      	uxtb	r3, r3
 800fe4e:	f043 0301 	orr.w	r3, r3, #1
 800fe52:	b2da      	uxtb	r2, r3
 800fe54:	4b04      	ldr	r3, [pc, #16]	@ (800fe68 <SD_initialize+0x8c>)
 800fe56:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800fe58:	4b03      	ldr	r3, [pc, #12]	@ (800fe68 <SD_initialize+0x8c>)
 800fe5a:	781b      	ldrb	r3, [r3, #0]
 800fe5c:	b2db      	uxtb	r3, r3
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	371c      	adds	r7, #28
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd90      	pop	{r4, r7, pc}
 800fe66:	bf00      	nop
 800fe68:	200000ad 	.word	0x200000ad
 800fe6c:	20001864 	.word	0x20001864
 800fe70:	08016d44 	.word	0x08016d44

0800fe74 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800fe7e:	79fb      	ldrb	r3, [r7, #7]
 800fe80:	4618      	mov	r0, r3
 800fe82:	f7ff ff8d 	bl	800fda0 <SD_CheckStatus>
 800fe86:	4603      	mov	r3, r0
}
 800fe88:	4618      	mov	r0, r3
 800fe8a:	3708      	adds	r7, #8
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}

0800fe90 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b08a      	sub	sp, #40	@ 0x28
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	60b9      	str	r1, [r7, #8]
 800fe98:	607a      	str	r2, [r7, #4]
 800fe9a:	603b      	str	r3, [r7, #0]
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800fea0:	2301      	movs	r3, #1
 800fea2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fea6:	f247 5030 	movw	r0, #30000	@ 0x7530
 800feaa:	f7ff ff5b 	bl	800fd64 <SD_CheckStatusWithTimeout>
 800feae:	4603      	mov	r3, r0
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	da02      	bge.n	800feba <SD_read+0x2a>
  {
    return res;
 800feb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800feb8:	e032      	b.n	800ff20 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800feba:	683a      	ldr	r2, [r7, #0]
 800febc:	6879      	ldr	r1, [r7, #4]
 800febe:	68b8      	ldr	r0, [r7, #8]
 800fec0:	f7ff feb0 	bl	800fc24 <BSP_SD_ReadBlocks_DMA>
 800fec4:	4603      	mov	r3, r0
 800fec6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800feca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d124      	bne.n	800ff1c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800fed2:	4b15      	ldr	r3, [pc, #84]	@ (800ff28 <SD_read+0x98>)
 800fed4:	6819      	ldr	r1, [r3, #0]
 800fed6:	f107 0314 	add.w	r3, r7, #20
 800feda:	f247 5230 	movw	r2, #30000	@ 0x7530
 800fede:	4618      	mov	r0, r3
 800fee0:	f003 fa32 	bl	8013348 <osMessageGet>

    if (event.status == osEventMessage)
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	2b10      	cmp	r3, #16
 800fee8:	d118      	bne.n	800ff1c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800feea:	69bb      	ldr	r3, [r7, #24]
 800feec:	2b01      	cmp	r3, #1
 800feee:	d115      	bne.n	800ff1c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800fef0:	f003 f870 	bl	8012fd4 <osKernelSysTick>
 800fef4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800fef6:	e008      	b.n	800ff0a <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fef8:	f7ff fec8 	bl	800fc8c <BSP_SD_GetCardState>
 800fefc:	4603      	mov	r3, r0
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d103      	bne.n	800ff0a <SD_read+0x7a>
              {
                res = RES_OK;
 800ff02:	2300      	movs	r3, #0
 800ff04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800ff08:	e008      	b.n	800ff1c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ff0a:	f003 f863 	bl	8012fd4 <osKernelSysTick>
 800ff0e:	4602      	mov	r2, r0
 800ff10:	6a3b      	ldr	r3, [r7, #32]
 800ff12:	1ad3      	subs	r3, r2, r3
 800ff14:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ff18:	4293      	cmp	r3, r2
 800ff1a:	d9ed      	bls.n	800fef8 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800ff1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3728      	adds	r7, #40	@ 0x28
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}
 800ff28:	20001864 	.word	0x20001864

0800ff2c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b08a      	sub	sp, #40	@ 0x28
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	60b9      	str	r1, [r7, #8]
 800ff34:	607a      	str	r2, [r7, #4]
 800ff36:	603b      	str	r3, [r7, #0]
 800ff38:	4603      	mov	r3, r0
 800ff3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ff42:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ff46:	f7ff ff0d 	bl	800fd64 <SD_CheckStatusWithTimeout>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	da02      	bge.n	800ff56 <SD_write+0x2a>
  {
    return res;
 800ff50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff54:	e02e      	b.n	800ffb4 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ff56:	683a      	ldr	r2, [r7, #0]
 800ff58:	6879      	ldr	r1, [r7, #4]
 800ff5a:	68b8      	ldr	r0, [r7, #8]
 800ff5c:	f7ff fe7c 	bl	800fc58 <BSP_SD_WriteBlocks_DMA>
 800ff60:	4603      	mov	r3, r0
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d124      	bne.n	800ffb0 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ff66:	4b15      	ldr	r3, [pc, #84]	@ (800ffbc <SD_write+0x90>)
 800ff68:	6819      	ldr	r1, [r3, #0]
 800ff6a:	f107 0314 	add.w	r3, r7, #20
 800ff6e:	f247 5230 	movw	r2, #30000	@ 0x7530
 800ff72:	4618      	mov	r0, r3
 800ff74:	f003 f9e8 	bl	8013348 <osMessageGet>

    if (event.status == osEventMessage)
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	2b10      	cmp	r3, #16
 800ff7c:	d118      	bne.n	800ffb0 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800ff7e:	69bb      	ldr	r3, [r7, #24]
 800ff80:	2b02      	cmp	r3, #2
 800ff82:	d115      	bne.n	800ffb0 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800ff84:	f003 f826 	bl	8012fd4 <osKernelSysTick>
 800ff88:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800ff8a:	e008      	b.n	800ff9e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ff8c:	f7ff fe7e 	bl	800fc8c <BSP_SD_GetCardState>
 800ff90:	4603      	mov	r3, r0
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d103      	bne.n	800ff9e <SD_write+0x72>
          {
            res = RES_OK;
 800ff96:	2300      	movs	r3, #0
 800ff98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800ff9c:	e008      	b.n	800ffb0 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800ff9e:	f003 f819 	bl	8012fd4 <osKernelSysTick>
 800ffa2:	4602      	mov	r2, r0
 800ffa4:	6a3b      	ldr	r3, [r7, #32]
 800ffa6:	1ad3      	subs	r3, r2, r3
 800ffa8:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ffac:	4293      	cmp	r3, r2
 800ffae:	d9ed      	bls.n	800ff8c <SD_write+0x60>
    }

  }
#endif

  return res;
 800ffb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3728      	adds	r7, #40	@ 0x28
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}
 800ffbc:	20001864 	.word	0x20001864

0800ffc0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b08c      	sub	sp, #48	@ 0x30
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	603a      	str	r2, [r7, #0]
 800ffca:	71fb      	strb	r3, [r7, #7]
 800ffcc:	460b      	mov	r3, r1
 800ffce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ffd6:	4b25      	ldr	r3, [pc, #148]	@ (801006c <SD_ioctl+0xac>)
 800ffd8:	781b      	ldrb	r3, [r3, #0]
 800ffda:	b2db      	uxtb	r3, r3
 800ffdc:	f003 0301 	and.w	r3, r3, #1
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d001      	beq.n	800ffe8 <SD_ioctl+0x28>
 800ffe4:	2303      	movs	r3, #3
 800ffe6:	e03c      	b.n	8010062 <SD_ioctl+0xa2>

  switch (cmd)
 800ffe8:	79bb      	ldrb	r3, [r7, #6]
 800ffea:	2b03      	cmp	r3, #3
 800ffec:	d834      	bhi.n	8010058 <SD_ioctl+0x98>
 800ffee:	a201      	add	r2, pc, #4	@ (adr r2, 800fff4 <SD_ioctl+0x34>)
 800fff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fff4:	08010005 	.word	0x08010005
 800fff8:	0801000d 	.word	0x0801000d
 800fffc:	08010025 	.word	0x08010025
 8010000:	0801003f 	.word	0x0801003f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010004:	2300      	movs	r3, #0
 8010006:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801000a:	e028      	b.n	801005e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801000c:	f107 030c 	add.w	r3, r7, #12
 8010010:	4618      	mov	r0, r3
 8010012:	f7ff fe4b 	bl	800fcac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801001c:	2300      	movs	r3, #0
 801001e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010022:	e01c      	b.n	801005e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010024:	f107 030c 	add.w	r3, r7, #12
 8010028:	4618      	mov	r0, r3
 801002a:	f7ff fe3f 	bl	800fcac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801002e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010030:	b29a      	uxth	r2, r3
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010036:	2300      	movs	r3, #0
 8010038:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801003c:	e00f      	b.n	801005e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801003e:	f107 030c 	add.w	r3, r7, #12
 8010042:	4618      	mov	r0, r3
 8010044:	f7ff fe32 	bl	800fcac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801004a:	0a5a      	lsrs	r2, r3, #9
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010050:	2300      	movs	r3, #0
 8010052:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010056:	e002      	b.n	801005e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010058:	2304      	movs	r3, #4
 801005a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 801005e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010062:	4618      	mov	r0, r3
 8010064:	3730      	adds	r7, #48	@ 0x30
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}
 801006a:	bf00      	nop
 801006c:	200000ad 	.word	0x200000ad

08010070 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8010074:	4b04      	ldr	r3, [pc, #16]	@ (8010088 <BSP_SD_WriteCpltCallback+0x18>)
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	2200      	movs	r2, #0
 801007a:	2102      	movs	r1, #2
 801007c:	4618      	mov	r0, r3
 801007e:	f003 f923 	bl	80132c8 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 8010082:	bf00      	nop
 8010084:	bd80      	pop	{r7, pc}
 8010086:	bf00      	nop
 8010088:	20001864 	.word	0x20001864

0801008c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8010090:	4b04      	ldr	r3, [pc, #16]	@ (80100a4 <BSP_SD_ReadCpltCallback+0x18>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	2200      	movs	r2, #0
 8010096:	2101      	movs	r1, #1
 8010098:	4618      	mov	r0, r3
 801009a:	f003 f915 	bl	80132c8 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 801009e:	bf00      	nop
 80100a0:	bd80      	pop	{r7, pc}
 80100a2:	bf00      	nop
 80100a4:	20001864 	.word	0x20001864

080100a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b084      	sub	sp, #16
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	4603      	mov	r3, r0
 80100b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80100b2:	79fb      	ldrb	r3, [r7, #7]
 80100b4:	4a08      	ldr	r2, [pc, #32]	@ (80100d8 <disk_status+0x30>)
 80100b6:	009b      	lsls	r3, r3, #2
 80100b8:	4413      	add	r3, r2
 80100ba:	685b      	ldr	r3, [r3, #4]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	79fa      	ldrb	r2, [r7, #7]
 80100c0:	4905      	ldr	r1, [pc, #20]	@ (80100d8 <disk_status+0x30>)
 80100c2:	440a      	add	r2, r1
 80100c4:	7a12      	ldrb	r2, [r2, #8]
 80100c6:	4610      	mov	r0, r2
 80100c8:	4798      	blx	r3
 80100ca:	4603      	mov	r3, r0
 80100cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80100ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3710      	adds	r7, #16
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}
 80100d8:	20001890 	.word	0x20001890

080100dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b084      	sub	sp, #16
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	4603      	mov	r3, r0
 80100e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80100e6:	2300      	movs	r3, #0
 80100e8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80100ea:	79fb      	ldrb	r3, [r7, #7]
 80100ec:	4a0d      	ldr	r2, [pc, #52]	@ (8010124 <disk_initialize+0x48>)
 80100ee:	5cd3      	ldrb	r3, [r2, r3]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d111      	bne.n	8010118 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80100f4:	79fb      	ldrb	r3, [r7, #7]
 80100f6:	4a0b      	ldr	r2, [pc, #44]	@ (8010124 <disk_initialize+0x48>)
 80100f8:	2101      	movs	r1, #1
 80100fa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80100fc:	79fb      	ldrb	r3, [r7, #7]
 80100fe:	4a09      	ldr	r2, [pc, #36]	@ (8010124 <disk_initialize+0x48>)
 8010100:	009b      	lsls	r3, r3, #2
 8010102:	4413      	add	r3, r2
 8010104:	685b      	ldr	r3, [r3, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	79fa      	ldrb	r2, [r7, #7]
 801010a:	4906      	ldr	r1, [pc, #24]	@ (8010124 <disk_initialize+0x48>)
 801010c:	440a      	add	r2, r1
 801010e:	7a12      	ldrb	r2, [r2, #8]
 8010110:	4610      	mov	r0, r2
 8010112:	4798      	blx	r3
 8010114:	4603      	mov	r3, r0
 8010116:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010118:	7bfb      	ldrb	r3, [r7, #15]
}
 801011a:	4618      	mov	r0, r3
 801011c:	3710      	adds	r7, #16
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}
 8010122:	bf00      	nop
 8010124:	20001890 	.word	0x20001890

08010128 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010128:	b590      	push	{r4, r7, lr}
 801012a:	b087      	sub	sp, #28
 801012c:	af00      	add	r7, sp, #0
 801012e:	60b9      	str	r1, [r7, #8]
 8010130:	607a      	str	r2, [r7, #4]
 8010132:	603b      	str	r3, [r7, #0]
 8010134:	4603      	mov	r3, r0
 8010136:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010138:	7bfb      	ldrb	r3, [r7, #15]
 801013a:	4a0a      	ldr	r2, [pc, #40]	@ (8010164 <disk_read+0x3c>)
 801013c:	009b      	lsls	r3, r3, #2
 801013e:	4413      	add	r3, r2
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	689c      	ldr	r4, [r3, #8]
 8010144:	7bfb      	ldrb	r3, [r7, #15]
 8010146:	4a07      	ldr	r2, [pc, #28]	@ (8010164 <disk_read+0x3c>)
 8010148:	4413      	add	r3, r2
 801014a:	7a18      	ldrb	r0, [r3, #8]
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	687a      	ldr	r2, [r7, #4]
 8010150:	68b9      	ldr	r1, [r7, #8]
 8010152:	47a0      	blx	r4
 8010154:	4603      	mov	r3, r0
 8010156:	75fb      	strb	r3, [r7, #23]
  return res;
 8010158:	7dfb      	ldrb	r3, [r7, #23]
}
 801015a:	4618      	mov	r0, r3
 801015c:	371c      	adds	r7, #28
 801015e:	46bd      	mov	sp, r7
 8010160:	bd90      	pop	{r4, r7, pc}
 8010162:	bf00      	nop
 8010164:	20001890 	.word	0x20001890

08010168 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010168:	b590      	push	{r4, r7, lr}
 801016a:	b087      	sub	sp, #28
 801016c:	af00      	add	r7, sp, #0
 801016e:	60b9      	str	r1, [r7, #8]
 8010170:	607a      	str	r2, [r7, #4]
 8010172:	603b      	str	r3, [r7, #0]
 8010174:	4603      	mov	r3, r0
 8010176:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010178:	7bfb      	ldrb	r3, [r7, #15]
 801017a:	4a0a      	ldr	r2, [pc, #40]	@ (80101a4 <disk_write+0x3c>)
 801017c:	009b      	lsls	r3, r3, #2
 801017e:	4413      	add	r3, r2
 8010180:	685b      	ldr	r3, [r3, #4]
 8010182:	68dc      	ldr	r4, [r3, #12]
 8010184:	7bfb      	ldrb	r3, [r7, #15]
 8010186:	4a07      	ldr	r2, [pc, #28]	@ (80101a4 <disk_write+0x3c>)
 8010188:	4413      	add	r3, r2
 801018a:	7a18      	ldrb	r0, [r3, #8]
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	687a      	ldr	r2, [r7, #4]
 8010190:	68b9      	ldr	r1, [r7, #8]
 8010192:	47a0      	blx	r4
 8010194:	4603      	mov	r3, r0
 8010196:	75fb      	strb	r3, [r7, #23]
  return res;
 8010198:	7dfb      	ldrb	r3, [r7, #23]
}
 801019a:	4618      	mov	r0, r3
 801019c:	371c      	adds	r7, #28
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd90      	pop	{r4, r7, pc}
 80101a2:	bf00      	nop
 80101a4:	20001890 	.word	0x20001890

080101a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b084      	sub	sp, #16
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	4603      	mov	r3, r0
 80101b0:	603a      	str	r2, [r7, #0]
 80101b2:	71fb      	strb	r3, [r7, #7]
 80101b4:	460b      	mov	r3, r1
 80101b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80101b8:	79fb      	ldrb	r3, [r7, #7]
 80101ba:	4a09      	ldr	r2, [pc, #36]	@ (80101e0 <disk_ioctl+0x38>)
 80101bc:	009b      	lsls	r3, r3, #2
 80101be:	4413      	add	r3, r2
 80101c0:	685b      	ldr	r3, [r3, #4]
 80101c2:	691b      	ldr	r3, [r3, #16]
 80101c4:	79fa      	ldrb	r2, [r7, #7]
 80101c6:	4906      	ldr	r1, [pc, #24]	@ (80101e0 <disk_ioctl+0x38>)
 80101c8:	440a      	add	r2, r1
 80101ca:	7a10      	ldrb	r0, [r2, #8]
 80101cc:	79b9      	ldrb	r1, [r7, #6]
 80101ce:	683a      	ldr	r2, [r7, #0]
 80101d0:	4798      	blx	r3
 80101d2:	4603      	mov	r3, r0
 80101d4:	73fb      	strb	r3, [r7, #15]
  return res;
 80101d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80101d8:	4618      	mov	r0, r3
 80101da:	3710      	adds	r7, #16
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}
 80101e0:	20001890 	.word	0x20001890

080101e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80101e4:	b480      	push	{r7}
 80101e6:	b085      	sub	sp, #20
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	3301      	adds	r3, #1
 80101f0:	781b      	ldrb	r3, [r3, #0]
 80101f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80101f4:	89fb      	ldrh	r3, [r7, #14]
 80101f6:	021b      	lsls	r3, r3, #8
 80101f8:	b21a      	sxth	r2, r3
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	781b      	ldrb	r3, [r3, #0]
 80101fe:	b21b      	sxth	r3, r3
 8010200:	4313      	orrs	r3, r2
 8010202:	b21b      	sxth	r3, r3
 8010204:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010206:	89fb      	ldrh	r3, [r7, #14]
}
 8010208:	4618      	mov	r0, r3
 801020a:	3714      	adds	r7, #20
 801020c:	46bd      	mov	sp, r7
 801020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010212:	4770      	bx	lr

08010214 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010214:	b480      	push	{r7}
 8010216:	b085      	sub	sp, #20
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	3303      	adds	r3, #3
 8010220:	781b      	ldrb	r3, [r3, #0]
 8010222:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	021b      	lsls	r3, r3, #8
 8010228:	687a      	ldr	r2, [r7, #4]
 801022a:	3202      	adds	r2, #2
 801022c:	7812      	ldrb	r2, [r2, #0]
 801022e:	4313      	orrs	r3, r2
 8010230:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	021b      	lsls	r3, r3, #8
 8010236:	687a      	ldr	r2, [r7, #4]
 8010238:	3201      	adds	r2, #1
 801023a:	7812      	ldrb	r2, [r2, #0]
 801023c:	4313      	orrs	r3, r2
 801023e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	021b      	lsls	r3, r3, #8
 8010244:	687a      	ldr	r2, [r7, #4]
 8010246:	7812      	ldrb	r2, [r2, #0]
 8010248:	4313      	orrs	r3, r2
 801024a:	60fb      	str	r3, [r7, #12]
	return rv;
 801024c:	68fb      	ldr	r3, [r7, #12]
}
 801024e:	4618      	mov	r0, r3
 8010250:	3714      	adds	r7, #20
 8010252:	46bd      	mov	sp, r7
 8010254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010258:	4770      	bx	lr

0801025a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801025a:	b480      	push	{r7}
 801025c:	b083      	sub	sp, #12
 801025e:	af00      	add	r7, sp, #0
 8010260:	6078      	str	r0, [r7, #4]
 8010262:	460b      	mov	r3, r1
 8010264:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	1c5a      	adds	r2, r3, #1
 801026a:	607a      	str	r2, [r7, #4]
 801026c:	887a      	ldrh	r2, [r7, #2]
 801026e:	b2d2      	uxtb	r2, r2
 8010270:	701a      	strb	r2, [r3, #0]
 8010272:	887b      	ldrh	r3, [r7, #2]
 8010274:	0a1b      	lsrs	r3, r3, #8
 8010276:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	1c5a      	adds	r2, r3, #1
 801027c:	607a      	str	r2, [r7, #4]
 801027e:	887a      	ldrh	r2, [r7, #2]
 8010280:	b2d2      	uxtb	r2, r2
 8010282:	701a      	strb	r2, [r3, #0]
}
 8010284:	bf00      	nop
 8010286:	370c      	adds	r7, #12
 8010288:	46bd      	mov	sp, r7
 801028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028e:	4770      	bx	lr

08010290 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010290:	b480      	push	{r7}
 8010292:	b083      	sub	sp, #12
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	1c5a      	adds	r2, r3, #1
 801029e:	607a      	str	r2, [r7, #4]
 80102a0:	683a      	ldr	r2, [r7, #0]
 80102a2:	b2d2      	uxtb	r2, r2
 80102a4:	701a      	strb	r2, [r3, #0]
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	0a1b      	lsrs	r3, r3, #8
 80102aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	1c5a      	adds	r2, r3, #1
 80102b0:	607a      	str	r2, [r7, #4]
 80102b2:	683a      	ldr	r2, [r7, #0]
 80102b4:	b2d2      	uxtb	r2, r2
 80102b6:	701a      	strb	r2, [r3, #0]
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	0a1b      	lsrs	r3, r3, #8
 80102bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	1c5a      	adds	r2, r3, #1
 80102c2:	607a      	str	r2, [r7, #4]
 80102c4:	683a      	ldr	r2, [r7, #0]
 80102c6:	b2d2      	uxtb	r2, r2
 80102c8:	701a      	strb	r2, [r3, #0]
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	0a1b      	lsrs	r3, r3, #8
 80102ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	1c5a      	adds	r2, r3, #1
 80102d4:	607a      	str	r2, [r7, #4]
 80102d6:	683a      	ldr	r2, [r7, #0]
 80102d8:	b2d2      	uxtb	r2, r2
 80102da:	701a      	strb	r2, [r3, #0]
}
 80102dc:	bf00      	nop
 80102de:	370c      	adds	r7, #12
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr

080102e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80102e8:	b480      	push	{r7}
 80102ea:	b087      	sub	sp, #28
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	60f8      	str	r0, [r7, #12]
 80102f0:	60b9      	str	r1, [r7, #8]
 80102f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d00d      	beq.n	801031e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010302:	693a      	ldr	r2, [r7, #16]
 8010304:	1c53      	adds	r3, r2, #1
 8010306:	613b      	str	r3, [r7, #16]
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	1c59      	adds	r1, r3, #1
 801030c:	6179      	str	r1, [r7, #20]
 801030e:	7812      	ldrb	r2, [r2, #0]
 8010310:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	3b01      	subs	r3, #1
 8010316:	607b      	str	r3, [r7, #4]
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d1f1      	bne.n	8010302 <mem_cpy+0x1a>
	}
}
 801031e:	bf00      	nop
 8010320:	371c      	adds	r7, #28
 8010322:	46bd      	mov	sp, r7
 8010324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010328:	4770      	bx	lr

0801032a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801032a:	b480      	push	{r7}
 801032c:	b087      	sub	sp, #28
 801032e:	af00      	add	r7, sp, #0
 8010330:	60f8      	str	r0, [r7, #12]
 8010332:	60b9      	str	r1, [r7, #8]
 8010334:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	1c5a      	adds	r2, r3, #1
 801033e:	617a      	str	r2, [r7, #20]
 8010340:	68ba      	ldr	r2, [r7, #8]
 8010342:	b2d2      	uxtb	r2, r2
 8010344:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	3b01      	subs	r3, #1
 801034a:	607b      	str	r3, [r7, #4]
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d1f3      	bne.n	801033a <mem_set+0x10>
}
 8010352:	bf00      	nop
 8010354:	bf00      	nop
 8010356:	371c      	adds	r7, #28
 8010358:	46bd      	mov	sp, r7
 801035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035e:	4770      	bx	lr

08010360 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010360:	b480      	push	{r7}
 8010362:	b089      	sub	sp, #36	@ 0x24
 8010364:	af00      	add	r7, sp, #0
 8010366:	60f8      	str	r0, [r7, #12]
 8010368:	60b9      	str	r1, [r7, #8]
 801036a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	61fb      	str	r3, [r7, #28]
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010374:	2300      	movs	r3, #0
 8010376:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010378:	69fb      	ldr	r3, [r7, #28]
 801037a:	1c5a      	adds	r2, r3, #1
 801037c:	61fa      	str	r2, [r7, #28]
 801037e:	781b      	ldrb	r3, [r3, #0]
 8010380:	4619      	mov	r1, r3
 8010382:	69bb      	ldr	r3, [r7, #24]
 8010384:	1c5a      	adds	r2, r3, #1
 8010386:	61ba      	str	r2, [r7, #24]
 8010388:	781b      	ldrb	r3, [r3, #0]
 801038a:	1acb      	subs	r3, r1, r3
 801038c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	3b01      	subs	r3, #1
 8010392:	607b      	str	r3, [r7, #4]
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d002      	beq.n	80103a0 <mem_cmp+0x40>
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d0eb      	beq.n	8010378 <mem_cmp+0x18>

	return r;
 80103a0:	697b      	ldr	r3, [r7, #20]
}
 80103a2:	4618      	mov	r0, r3
 80103a4:	3724      	adds	r7, #36	@ 0x24
 80103a6:	46bd      	mov	sp, r7
 80103a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ac:	4770      	bx	lr

080103ae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80103ae:	b480      	push	{r7}
 80103b0:	b083      	sub	sp, #12
 80103b2:	af00      	add	r7, sp, #0
 80103b4:	6078      	str	r0, [r7, #4]
 80103b6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80103b8:	e002      	b.n	80103c0 <chk_chr+0x12>
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	3301      	adds	r3, #1
 80103be:	607b      	str	r3, [r7, #4]
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	781b      	ldrb	r3, [r3, #0]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d005      	beq.n	80103d4 <chk_chr+0x26>
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	781b      	ldrb	r3, [r3, #0]
 80103cc:	461a      	mov	r2, r3
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	4293      	cmp	r3, r2
 80103d2:	d1f2      	bne.n	80103ba <chk_chr+0xc>
	return *str;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	781b      	ldrb	r3, [r3, #0]
}
 80103d8:	4618      	mov	r0, r3
 80103da:	370c      	adds	r7, #12
 80103dc:	46bd      	mov	sp, r7
 80103de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e2:	4770      	bx	lr

080103e4 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b082      	sub	sp, #8
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d009      	beq.n	8010406 <lock_fs+0x22>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	68db      	ldr	r3, [r3, #12]
 80103f6:	4618      	mov	r0, r3
 80103f8:	f002 fd8f 	bl	8012f1a <ff_req_grant>
 80103fc:	4603      	mov	r3, r0
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d001      	beq.n	8010406 <lock_fs+0x22>
 8010402:	2301      	movs	r3, #1
 8010404:	e000      	b.n	8010408 <lock_fs+0x24>
 8010406:	2300      	movs	r3, #0
}
 8010408:	4618      	mov	r0, r3
 801040a:	3708      	adds	r7, #8
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}

08010410 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b082      	sub	sp, #8
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
 8010418:	460b      	mov	r3, r1
 801041a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d00d      	beq.n	801043e <unlock_fs+0x2e>
 8010422:	78fb      	ldrb	r3, [r7, #3]
 8010424:	2b0c      	cmp	r3, #12
 8010426:	d00a      	beq.n	801043e <unlock_fs+0x2e>
 8010428:	78fb      	ldrb	r3, [r7, #3]
 801042a:	2b0b      	cmp	r3, #11
 801042c:	d007      	beq.n	801043e <unlock_fs+0x2e>
 801042e:	78fb      	ldrb	r3, [r7, #3]
 8010430:	2b0f      	cmp	r3, #15
 8010432:	d004      	beq.n	801043e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	68db      	ldr	r3, [r3, #12]
 8010438:	4618      	mov	r0, r3
 801043a:	f002 fd83 	bl	8012f44 <ff_rel_grant>
	}
}
 801043e:	bf00      	nop
 8010440:	3708      	adds	r7, #8
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}
	...

08010448 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010448:	b480      	push	{r7}
 801044a:	b085      	sub	sp, #20
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010452:	2300      	movs	r3, #0
 8010454:	60bb      	str	r3, [r7, #8]
 8010456:	68bb      	ldr	r3, [r7, #8]
 8010458:	60fb      	str	r3, [r7, #12]
 801045a:	e029      	b.n	80104b0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801045c:	4a27      	ldr	r2, [pc, #156]	@ (80104fc <chk_lock+0xb4>)
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	011b      	lsls	r3, r3, #4
 8010462:	4413      	add	r3, r2
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d01d      	beq.n	80104a6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801046a:	4a24      	ldr	r2, [pc, #144]	@ (80104fc <chk_lock+0xb4>)
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	011b      	lsls	r3, r3, #4
 8010470:	4413      	add	r3, r2
 8010472:	681a      	ldr	r2, [r3, #0]
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	429a      	cmp	r2, r3
 801047a:	d116      	bne.n	80104aa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801047c:	4a1f      	ldr	r2, [pc, #124]	@ (80104fc <chk_lock+0xb4>)
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	011b      	lsls	r3, r3, #4
 8010482:	4413      	add	r3, r2
 8010484:	3304      	adds	r3, #4
 8010486:	681a      	ldr	r2, [r3, #0]
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801048c:	429a      	cmp	r2, r3
 801048e:	d10c      	bne.n	80104aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010490:	4a1a      	ldr	r2, [pc, #104]	@ (80104fc <chk_lock+0xb4>)
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	011b      	lsls	r3, r3, #4
 8010496:	4413      	add	r3, r2
 8010498:	3308      	adds	r3, #8
 801049a:	681a      	ldr	r2, [r3, #0]
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d102      	bne.n	80104aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80104a4:	e007      	b.n	80104b6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80104a6:	2301      	movs	r3, #1
 80104a8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	3301      	adds	r3, #1
 80104ae:	60fb      	str	r3, [r7, #12]
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	2b01      	cmp	r3, #1
 80104b4:	d9d2      	bls.n	801045c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	2b02      	cmp	r3, #2
 80104ba:	d109      	bne.n	80104d0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d102      	bne.n	80104c8 <chk_lock+0x80>
 80104c2:	683b      	ldr	r3, [r7, #0]
 80104c4:	2b02      	cmp	r3, #2
 80104c6:	d101      	bne.n	80104cc <chk_lock+0x84>
 80104c8:	2300      	movs	r3, #0
 80104ca:	e010      	b.n	80104ee <chk_lock+0xa6>
 80104cc:	2312      	movs	r3, #18
 80104ce:	e00e      	b.n	80104ee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d108      	bne.n	80104e8 <chk_lock+0xa0>
 80104d6:	4a09      	ldr	r2, [pc, #36]	@ (80104fc <chk_lock+0xb4>)
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	011b      	lsls	r3, r3, #4
 80104dc:	4413      	add	r3, r2
 80104de:	330c      	adds	r3, #12
 80104e0:	881b      	ldrh	r3, [r3, #0]
 80104e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80104e6:	d101      	bne.n	80104ec <chk_lock+0xa4>
 80104e8:	2310      	movs	r3, #16
 80104ea:	e000      	b.n	80104ee <chk_lock+0xa6>
 80104ec:	2300      	movs	r3, #0
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3714      	adds	r7, #20
 80104f2:	46bd      	mov	sp, r7
 80104f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop
 80104fc:	20001870 	.word	0x20001870

08010500 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010500:	b480      	push	{r7}
 8010502:	b083      	sub	sp, #12
 8010504:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010506:	2300      	movs	r3, #0
 8010508:	607b      	str	r3, [r7, #4]
 801050a:	e002      	b.n	8010512 <enq_lock+0x12>
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	3301      	adds	r3, #1
 8010510:	607b      	str	r3, [r7, #4]
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2b01      	cmp	r3, #1
 8010516:	d806      	bhi.n	8010526 <enq_lock+0x26>
 8010518:	4a09      	ldr	r2, [pc, #36]	@ (8010540 <enq_lock+0x40>)
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	011b      	lsls	r3, r3, #4
 801051e:	4413      	add	r3, r2
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d1f2      	bne.n	801050c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2b02      	cmp	r3, #2
 801052a:	bf14      	ite	ne
 801052c:	2301      	movne	r3, #1
 801052e:	2300      	moveq	r3, #0
 8010530:	b2db      	uxtb	r3, r3
}
 8010532:	4618      	mov	r0, r3
 8010534:	370c      	adds	r7, #12
 8010536:	46bd      	mov	sp, r7
 8010538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053c:	4770      	bx	lr
 801053e:	bf00      	nop
 8010540:	20001870 	.word	0x20001870

08010544 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010544:	b480      	push	{r7}
 8010546:	b085      	sub	sp, #20
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
 801054c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801054e:	2300      	movs	r3, #0
 8010550:	60fb      	str	r3, [r7, #12]
 8010552:	e01f      	b.n	8010594 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010554:	4a41      	ldr	r2, [pc, #260]	@ (801065c <inc_lock+0x118>)
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	011b      	lsls	r3, r3, #4
 801055a:	4413      	add	r3, r2
 801055c:	681a      	ldr	r2, [r3, #0]
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	429a      	cmp	r2, r3
 8010564:	d113      	bne.n	801058e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010566:	4a3d      	ldr	r2, [pc, #244]	@ (801065c <inc_lock+0x118>)
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	011b      	lsls	r3, r3, #4
 801056c:	4413      	add	r3, r2
 801056e:	3304      	adds	r3, #4
 8010570:	681a      	ldr	r2, [r3, #0]
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010576:	429a      	cmp	r2, r3
 8010578:	d109      	bne.n	801058e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801057a:	4a38      	ldr	r2, [pc, #224]	@ (801065c <inc_lock+0x118>)
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	011b      	lsls	r3, r3, #4
 8010580:	4413      	add	r3, r2
 8010582:	3308      	adds	r3, #8
 8010584:	681a      	ldr	r2, [r3, #0]
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801058a:	429a      	cmp	r2, r3
 801058c:	d006      	beq.n	801059c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	3301      	adds	r3, #1
 8010592:	60fb      	str	r3, [r7, #12]
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	2b01      	cmp	r3, #1
 8010598:	d9dc      	bls.n	8010554 <inc_lock+0x10>
 801059a:	e000      	b.n	801059e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801059c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	2b02      	cmp	r3, #2
 80105a2:	d132      	bne.n	801060a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80105a4:	2300      	movs	r3, #0
 80105a6:	60fb      	str	r3, [r7, #12]
 80105a8:	e002      	b.n	80105b0 <inc_lock+0x6c>
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	3301      	adds	r3, #1
 80105ae:	60fb      	str	r3, [r7, #12]
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	2b01      	cmp	r3, #1
 80105b4:	d806      	bhi.n	80105c4 <inc_lock+0x80>
 80105b6:	4a29      	ldr	r2, [pc, #164]	@ (801065c <inc_lock+0x118>)
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	011b      	lsls	r3, r3, #4
 80105bc:	4413      	add	r3, r2
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d1f2      	bne.n	80105aa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	2b02      	cmp	r3, #2
 80105c8:	d101      	bne.n	80105ce <inc_lock+0x8a>
 80105ca:	2300      	movs	r3, #0
 80105cc:	e040      	b.n	8010650 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681a      	ldr	r2, [r3, #0]
 80105d2:	4922      	ldr	r1, [pc, #136]	@ (801065c <inc_lock+0x118>)
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	011b      	lsls	r3, r3, #4
 80105d8:	440b      	add	r3, r1
 80105da:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	689a      	ldr	r2, [r3, #8]
 80105e0:	491e      	ldr	r1, [pc, #120]	@ (801065c <inc_lock+0x118>)
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	011b      	lsls	r3, r3, #4
 80105e6:	440b      	add	r3, r1
 80105e8:	3304      	adds	r3, #4
 80105ea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	695a      	ldr	r2, [r3, #20]
 80105f0:	491a      	ldr	r1, [pc, #104]	@ (801065c <inc_lock+0x118>)
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	011b      	lsls	r3, r3, #4
 80105f6:	440b      	add	r3, r1
 80105f8:	3308      	adds	r3, #8
 80105fa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80105fc:	4a17      	ldr	r2, [pc, #92]	@ (801065c <inc_lock+0x118>)
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	011b      	lsls	r3, r3, #4
 8010602:	4413      	add	r3, r2
 8010604:	330c      	adds	r3, #12
 8010606:	2200      	movs	r2, #0
 8010608:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d009      	beq.n	8010624 <inc_lock+0xe0>
 8010610:	4a12      	ldr	r2, [pc, #72]	@ (801065c <inc_lock+0x118>)
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	011b      	lsls	r3, r3, #4
 8010616:	4413      	add	r3, r2
 8010618:	330c      	adds	r3, #12
 801061a:	881b      	ldrh	r3, [r3, #0]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d001      	beq.n	8010624 <inc_lock+0xe0>
 8010620:	2300      	movs	r3, #0
 8010622:	e015      	b.n	8010650 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d108      	bne.n	801063c <inc_lock+0xf8>
 801062a:	4a0c      	ldr	r2, [pc, #48]	@ (801065c <inc_lock+0x118>)
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	011b      	lsls	r3, r3, #4
 8010630:	4413      	add	r3, r2
 8010632:	330c      	adds	r3, #12
 8010634:	881b      	ldrh	r3, [r3, #0]
 8010636:	3301      	adds	r3, #1
 8010638:	b29a      	uxth	r2, r3
 801063a:	e001      	b.n	8010640 <inc_lock+0xfc>
 801063c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010640:	4906      	ldr	r1, [pc, #24]	@ (801065c <inc_lock+0x118>)
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	011b      	lsls	r3, r3, #4
 8010646:	440b      	add	r3, r1
 8010648:	330c      	adds	r3, #12
 801064a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	3301      	adds	r3, #1
}
 8010650:	4618      	mov	r0, r3
 8010652:	3714      	adds	r7, #20
 8010654:	46bd      	mov	sp, r7
 8010656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065a:	4770      	bx	lr
 801065c:	20001870 	.word	0x20001870

08010660 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010660:	b480      	push	{r7}
 8010662:	b085      	sub	sp, #20
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	3b01      	subs	r3, #1
 801066c:	607b      	str	r3, [r7, #4]
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	2b01      	cmp	r3, #1
 8010672:	d825      	bhi.n	80106c0 <dec_lock+0x60>
		n = Files[i].ctr;
 8010674:	4a17      	ldr	r2, [pc, #92]	@ (80106d4 <dec_lock+0x74>)
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	011b      	lsls	r3, r3, #4
 801067a:	4413      	add	r3, r2
 801067c:	330c      	adds	r3, #12
 801067e:	881b      	ldrh	r3, [r3, #0]
 8010680:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010682:	89fb      	ldrh	r3, [r7, #14]
 8010684:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010688:	d101      	bne.n	801068e <dec_lock+0x2e>
 801068a:	2300      	movs	r3, #0
 801068c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801068e:	89fb      	ldrh	r3, [r7, #14]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d002      	beq.n	801069a <dec_lock+0x3a>
 8010694:	89fb      	ldrh	r3, [r7, #14]
 8010696:	3b01      	subs	r3, #1
 8010698:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801069a:	4a0e      	ldr	r2, [pc, #56]	@ (80106d4 <dec_lock+0x74>)
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	011b      	lsls	r3, r3, #4
 80106a0:	4413      	add	r3, r2
 80106a2:	330c      	adds	r3, #12
 80106a4:	89fa      	ldrh	r2, [r7, #14]
 80106a6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80106a8:	89fb      	ldrh	r3, [r7, #14]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d105      	bne.n	80106ba <dec_lock+0x5a>
 80106ae:	4a09      	ldr	r2, [pc, #36]	@ (80106d4 <dec_lock+0x74>)
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	011b      	lsls	r3, r3, #4
 80106b4:	4413      	add	r3, r2
 80106b6:	2200      	movs	r2, #0
 80106b8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80106ba:	2300      	movs	r3, #0
 80106bc:	737b      	strb	r3, [r7, #13]
 80106be:	e001      	b.n	80106c4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80106c0:	2302      	movs	r3, #2
 80106c2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80106c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3714      	adds	r7, #20
 80106ca:	46bd      	mov	sp, r7
 80106cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d0:	4770      	bx	lr
 80106d2:	bf00      	nop
 80106d4:	20001870 	.word	0x20001870

080106d8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80106d8:	b480      	push	{r7}
 80106da:	b085      	sub	sp, #20
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80106e0:	2300      	movs	r3, #0
 80106e2:	60fb      	str	r3, [r7, #12]
 80106e4:	e010      	b.n	8010708 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80106e6:	4a0d      	ldr	r2, [pc, #52]	@ (801071c <clear_lock+0x44>)
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	011b      	lsls	r3, r3, #4
 80106ec:	4413      	add	r3, r2
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	687a      	ldr	r2, [r7, #4]
 80106f2:	429a      	cmp	r2, r3
 80106f4:	d105      	bne.n	8010702 <clear_lock+0x2a>
 80106f6:	4a09      	ldr	r2, [pc, #36]	@ (801071c <clear_lock+0x44>)
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	011b      	lsls	r3, r3, #4
 80106fc:	4413      	add	r3, r2
 80106fe:	2200      	movs	r2, #0
 8010700:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	3301      	adds	r3, #1
 8010706:	60fb      	str	r3, [r7, #12]
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	2b01      	cmp	r3, #1
 801070c:	d9eb      	bls.n	80106e6 <clear_lock+0xe>
	}
}
 801070e:	bf00      	nop
 8010710:	bf00      	nop
 8010712:	3714      	adds	r7, #20
 8010714:	46bd      	mov	sp, r7
 8010716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071a:	4770      	bx	lr
 801071c:	20001870 	.word	0x20001870

08010720 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b086      	sub	sp, #24
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010728:	2300      	movs	r3, #0
 801072a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	78db      	ldrb	r3, [r3, #3]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d034      	beq.n	801079e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010738:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	7858      	ldrb	r0, [r3, #1]
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8010744:	2301      	movs	r3, #1
 8010746:	697a      	ldr	r2, [r7, #20]
 8010748:	f7ff fd0e 	bl	8010168 <disk_write>
 801074c:	4603      	mov	r3, r0
 801074e:	2b00      	cmp	r3, #0
 8010750:	d002      	beq.n	8010758 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010752:	2301      	movs	r3, #1
 8010754:	73fb      	strb	r3, [r7, #15]
 8010756:	e022      	b.n	801079e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2200      	movs	r2, #0
 801075c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010762:	697a      	ldr	r2, [r7, #20]
 8010764:	1ad2      	subs	r2, r2, r3
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	69db      	ldr	r3, [r3, #28]
 801076a:	429a      	cmp	r2, r3
 801076c:	d217      	bcs.n	801079e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	789b      	ldrb	r3, [r3, #2]
 8010772:	613b      	str	r3, [r7, #16]
 8010774:	e010      	b.n	8010798 <sync_window+0x78>
					wsect += fs->fsize;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	69db      	ldr	r3, [r3, #28]
 801077a:	697a      	ldr	r2, [r7, #20]
 801077c:	4413      	add	r3, r2
 801077e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	7858      	ldrb	r0, [r3, #1]
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 801078a:	2301      	movs	r3, #1
 801078c:	697a      	ldr	r2, [r7, #20]
 801078e:	f7ff fceb 	bl	8010168 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010792:	693b      	ldr	r3, [r7, #16]
 8010794:	3b01      	subs	r3, #1
 8010796:	613b      	str	r3, [r7, #16]
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	2b01      	cmp	r3, #1
 801079c:	d8eb      	bhi.n	8010776 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801079e:	7bfb      	ldrb	r3, [r7, #15]
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	3718      	adds	r7, #24
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}

080107a8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b084      	sub	sp, #16
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80107b2:	2300      	movs	r3, #0
 80107b4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107ba:	683a      	ldr	r2, [r7, #0]
 80107bc:	429a      	cmp	r2, r3
 80107be:	d01b      	beq.n	80107f8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f7ff ffad 	bl	8010720 <sync_window>
 80107c6:	4603      	mov	r3, r0
 80107c8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80107ca:	7bfb      	ldrb	r3, [r7, #15]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d113      	bne.n	80107f8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	7858      	ldrb	r0, [r3, #1]
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80107da:	2301      	movs	r3, #1
 80107dc:	683a      	ldr	r2, [r7, #0]
 80107de:	f7ff fca3 	bl	8010128 <disk_read>
 80107e2:	4603      	mov	r3, r0
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d004      	beq.n	80107f2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80107e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80107ec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80107ee:	2301      	movs	r3, #1
 80107f0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	683a      	ldr	r2, [r7, #0]
 80107f6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80107f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	3710      	adds	r7, #16
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}
	...

08010804 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b084      	sub	sp, #16
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	f7ff ff87 	bl	8010720 <sync_window>
 8010812:	4603      	mov	r3, r0
 8010814:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010816:	7bfb      	ldrb	r3, [r7, #15]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d158      	bne.n	80108ce <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	781b      	ldrb	r3, [r3, #0]
 8010820:	2b03      	cmp	r3, #3
 8010822:	d148      	bne.n	80108b6 <sync_fs+0xb2>
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	791b      	ldrb	r3, [r3, #4]
 8010828:	2b01      	cmp	r3, #1
 801082a:	d144      	bne.n	80108b6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	3334      	adds	r3, #52	@ 0x34
 8010830:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010834:	2100      	movs	r1, #0
 8010836:	4618      	mov	r0, r3
 8010838:	f7ff fd77 	bl	801032a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	3334      	adds	r3, #52	@ 0x34
 8010840:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010844:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8010848:	4618      	mov	r0, r3
 801084a:	f7ff fd06 	bl	801025a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	3334      	adds	r3, #52	@ 0x34
 8010852:	4921      	ldr	r1, [pc, #132]	@ (80108d8 <sync_fs+0xd4>)
 8010854:	4618      	mov	r0, r3
 8010856:	f7ff fd1b 	bl	8010290 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	3334      	adds	r3, #52	@ 0x34
 801085e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010862:	491e      	ldr	r1, [pc, #120]	@ (80108dc <sync_fs+0xd8>)
 8010864:	4618      	mov	r0, r3
 8010866:	f7ff fd13 	bl	8010290 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	3334      	adds	r3, #52	@ 0x34
 801086e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	695b      	ldr	r3, [r3, #20]
 8010876:	4619      	mov	r1, r3
 8010878:	4610      	mov	r0, r2
 801087a:	f7ff fd09 	bl	8010290 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	3334      	adds	r3, #52	@ 0x34
 8010882:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	691b      	ldr	r3, [r3, #16]
 801088a:	4619      	mov	r1, r3
 801088c:	4610      	mov	r0, r2
 801088e:	f7ff fcff 	bl	8010290 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	6a1b      	ldr	r3, [r3, #32]
 8010896:	1c5a      	adds	r2, r3, #1
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	7858      	ldrb	r0, [r3, #1]
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80108aa:	2301      	movs	r3, #1
 80108ac:	f7ff fc5c 	bl	8010168 <disk_write>
			fs->fsi_flag = 0;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2200      	movs	r2, #0
 80108b4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	785b      	ldrb	r3, [r3, #1]
 80108ba:	2200      	movs	r2, #0
 80108bc:	2100      	movs	r1, #0
 80108be:	4618      	mov	r0, r3
 80108c0:	f7ff fc72 	bl	80101a8 <disk_ioctl>
 80108c4:	4603      	mov	r3, r0
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d001      	beq.n	80108ce <sync_fs+0xca>
 80108ca:	2301      	movs	r3, #1
 80108cc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80108ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80108d0:	4618      	mov	r0, r3
 80108d2:	3710      	adds	r7, #16
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}
 80108d8:	41615252 	.word	0x41615252
 80108dc:	61417272 	.word	0x61417272

080108e0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80108e0:	b480      	push	{r7}
 80108e2:	b083      	sub	sp, #12
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	3b02      	subs	r3, #2
 80108ee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	699b      	ldr	r3, [r3, #24]
 80108f4:	3b02      	subs	r3, #2
 80108f6:	683a      	ldr	r2, [r7, #0]
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d301      	bcc.n	8010900 <clust2sect+0x20>
 80108fc:	2300      	movs	r3, #0
 80108fe:	e008      	b.n	8010912 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	895b      	ldrh	r3, [r3, #10]
 8010904:	461a      	mov	r2, r3
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	fb03 f202 	mul.w	r2, r3, r2
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010910:	4413      	add	r3, r2
}
 8010912:	4618      	mov	r0, r3
 8010914:	370c      	adds	r7, #12
 8010916:	46bd      	mov	sp, r7
 8010918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091c:	4770      	bx	lr

0801091e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801091e:	b580      	push	{r7, lr}
 8010920:	b086      	sub	sp, #24
 8010922:	af00      	add	r7, sp, #0
 8010924:	6078      	str	r0, [r7, #4]
 8010926:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	2b01      	cmp	r3, #1
 8010932:	d904      	bls.n	801093e <get_fat+0x20>
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	699b      	ldr	r3, [r3, #24]
 8010938:	683a      	ldr	r2, [r7, #0]
 801093a:	429a      	cmp	r2, r3
 801093c:	d302      	bcc.n	8010944 <get_fat+0x26>
		val = 1;	/* Internal error */
 801093e:	2301      	movs	r3, #1
 8010940:	617b      	str	r3, [r7, #20]
 8010942:	e08e      	b.n	8010a62 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010944:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010948:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801094a:	693b      	ldr	r3, [r7, #16]
 801094c:	781b      	ldrb	r3, [r3, #0]
 801094e:	2b03      	cmp	r3, #3
 8010950:	d061      	beq.n	8010a16 <get_fat+0xf8>
 8010952:	2b03      	cmp	r3, #3
 8010954:	dc7b      	bgt.n	8010a4e <get_fat+0x130>
 8010956:	2b01      	cmp	r3, #1
 8010958:	d002      	beq.n	8010960 <get_fat+0x42>
 801095a:	2b02      	cmp	r3, #2
 801095c:	d041      	beq.n	80109e2 <get_fat+0xc4>
 801095e:	e076      	b.n	8010a4e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	60fb      	str	r3, [r7, #12]
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	085b      	lsrs	r3, r3, #1
 8010968:	68fa      	ldr	r2, [r7, #12]
 801096a:	4413      	add	r3, r2
 801096c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801096e:	693b      	ldr	r3, [r7, #16]
 8010970:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	0a5b      	lsrs	r3, r3, #9
 8010976:	4413      	add	r3, r2
 8010978:	4619      	mov	r1, r3
 801097a:	6938      	ldr	r0, [r7, #16]
 801097c:	f7ff ff14 	bl	80107a8 <move_window>
 8010980:	4603      	mov	r3, r0
 8010982:	2b00      	cmp	r3, #0
 8010984:	d166      	bne.n	8010a54 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	1c5a      	adds	r2, r3, #1
 801098a:	60fa      	str	r2, [r7, #12]
 801098c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010990:	693a      	ldr	r2, [r7, #16]
 8010992:	4413      	add	r3, r2
 8010994:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010998:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801099a:	693b      	ldr	r3, [r7, #16]
 801099c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	0a5b      	lsrs	r3, r3, #9
 80109a2:	4413      	add	r3, r2
 80109a4:	4619      	mov	r1, r3
 80109a6:	6938      	ldr	r0, [r7, #16]
 80109a8:	f7ff fefe 	bl	80107a8 <move_window>
 80109ac:	4603      	mov	r3, r0
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d152      	bne.n	8010a58 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109b8:	693a      	ldr	r2, [r7, #16]
 80109ba:	4413      	add	r3, r2
 80109bc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80109c0:	021b      	lsls	r3, r3, #8
 80109c2:	68ba      	ldr	r2, [r7, #8]
 80109c4:	4313      	orrs	r3, r2
 80109c6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	f003 0301 	and.w	r3, r3, #1
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d002      	beq.n	80109d8 <get_fat+0xba>
 80109d2:	68bb      	ldr	r3, [r7, #8]
 80109d4:	091b      	lsrs	r3, r3, #4
 80109d6:	e002      	b.n	80109de <get_fat+0xc0>
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80109de:	617b      	str	r3, [r7, #20]
			break;
 80109e0:	e03f      	b.n	8010a62 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80109e2:	693b      	ldr	r3, [r7, #16]
 80109e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	0a1b      	lsrs	r3, r3, #8
 80109ea:	4413      	add	r3, r2
 80109ec:	4619      	mov	r1, r3
 80109ee:	6938      	ldr	r0, [r7, #16]
 80109f0:	f7ff feda 	bl	80107a8 <move_window>
 80109f4:	4603      	mov	r3, r0
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d130      	bne.n	8010a5c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80109fa:	693b      	ldr	r3, [r7, #16]
 80109fc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	005b      	lsls	r3, r3, #1
 8010a04:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8010a08:	4413      	add	r3, r2
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f7ff fbea 	bl	80101e4 <ld_word>
 8010a10:	4603      	mov	r3, r0
 8010a12:	617b      	str	r3, [r7, #20]
			break;
 8010a14:	e025      	b.n	8010a62 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010a16:	693b      	ldr	r3, [r7, #16]
 8010a18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	09db      	lsrs	r3, r3, #7
 8010a1e:	4413      	add	r3, r2
 8010a20:	4619      	mov	r1, r3
 8010a22:	6938      	ldr	r0, [r7, #16]
 8010a24:	f7ff fec0 	bl	80107a8 <move_window>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d118      	bne.n	8010a60 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010a2e:	693b      	ldr	r3, [r7, #16]
 8010a30:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010a34:	683b      	ldr	r3, [r7, #0]
 8010a36:	009b      	lsls	r3, r3, #2
 8010a38:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8010a3c:	4413      	add	r3, r2
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7ff fbe8 	bl	8010214 <ld_dword>
 8010a44:	4603      	mov	r3, r0
 8010a46:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8010a4a:	617b      	str	r3, [r7, #20]
			break;
 8010a4c:	e009      	b.n	8010a62 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010a4e:	2301      	movs	r3, #1
 8010a50:	617b      	str	r3, [r7, #20]
 8010a52:	e006      	b.n	8010a62 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010a54:	bf00      	nop
 8010a56:	e004      	b.n	8010a62 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010a58:	bf00      	nop
 8010a5a:	e002      	b.n	8010a62 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010a5c:	bf00      	nop
 8010a5e:	e000      	b.n	8010a62 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010a60:	bf00      	nop
		}
	}

	return val;
 8010a62:	697b      	ldr	r3, [r7, #20]
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	3718      	adds	r7, #24
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}

08010a6c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010a6c:	b590      	push	{r4, r7, lr}
 8010a6e:	b089      	sub	sp, #36	@ 0x24
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	60f8      	str	r0, [r7, #12]
 8010a74:	60b9      	str	r1, [r7, #8]
 8010a76:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010a78:	2302      	movs	r3, #2
 8010a7a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010a7c:	68bb      	ldr	r3, [r7, #8]
 8010a7e:	2b01      	cmp	r3, #1
 8010a80:	f240 80d9 	bls.w	8010c36 <put_fat+0x1ca>
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	699b      	ldr	r3, [r3, #24]
 8010a88:	68ba      	ldr	r2, [r7, #8]
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	f080 80d3 	bcs.w	8010c36 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	2b03      	cmp	r3, #3
 8010a96:	f000 8096 	beq.w	8010bc6 <put_fat+0x15a>
 8010a9a:	2b03      	cmp	r3, #3
 8010a9c:	f300 80cb 	bgt.w	8010c36 <put_fat+0x1ca>
 8010aa0:	2b01      	cmp	r3, #1
 8010aa2:	d002      	beq.n	8010aaa <put_fat+0x3e>
 8010aa4:	2b02      	cmp	r3, #2
 8010aa6:	d06e      	beq.n	8010b86 <put_fat+0x11a>
 8010aa8:	e0c5      	b.n	8010c36 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010aaa:	68bb      	ldr	r3, [r7, #8]
 8010aac:	61bb      	str	r3, [r7, #24]
 8010aae:	69bb      	ldr	r3, [r7, #24]
 8010ab0:	085b      	lsrs	r3, r3, #1
 8010ab2:	69ba      	ldr	r2, [r7, #24]
 8010ab4:	4413      	add	r3, r2
 8010ab6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010abc:	69bb      	ldr	r3, [r7, #24]
 8010abe:	0a5b      	lsrs	r3, r3, #9
 8010ac0:	4413      	add	r3, r2
 8010ac2:	4619      	mov	r1, r3
 8010ac4:	68f8      	ldr	r0, [r7, #12]
 8010ac6:	f7ff fe6f 	bl	80107a8 <move_window>
 8010aca:	4603      	mov	r3, r0
 8010acc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010ace:	7ffb      	ldrb	r3, [r7, #31]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	f040 80a9 	bne.w	8010c28 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010adc:	69bb      	ldr	r3, [r7, #24]
 8010ade:	1c59      	adds	r1, r3, #1
 8010ae0:	61b9      	str	r1, [r7, #24]
 8010ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ae6:	4413      	add	r3, r2
 8010ae8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010aea:	68bb      	ldr	r3, [r7, #8]
 8010aec:	f003 0301 	and.w	r3, r3, #1
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d00d      	beq.n	8010b10 <put_fat+0xa4>
 8010af4:	697b      	ldr	r3, [r7, #20]
 8010af6:	781b      	ldrb	r3, [r3, #0]
 8010af8:	b25b      	sxtb	r3, r3
 8010afa:	f003 030f 	and.w	r3, r3, #15
 8010afe:	b25a      	sxtb	r2, r3
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	b2db      	uxtb	r3, r3
 8010b04:	011b      	lsls	r3, r3, #4
 8010b06:	b25b      	sxtb	r3, r3
 8010b08:	4313      	orrs	r3, r2
 8010b0a:	b25b      	sxtb	r3, r3
 8010b0c:	b2db      	uxtb	r3, r3
 8010b0e:	e001      	b.n	8010b14 <put_fat+0xa8>
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	b2db      	uxtb	r3, r3
 8010b14:	697a      	ldr	r2, [r7, #20]
 8010b16:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	2201      	movs	r2, #1
 8010b1c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010b22:	69bb      	ldr	r3, [r7, #24]
 8010b24:	0a5b      	lsrs	r3, r3, #9
 8010b26:	4413      	add	r3, r2
 8010b28:	4619      	mov	r1, r3
 8010b2a:	68f8      	ldr	r0, [r7, #12]
 8010b2c:	f7ff fe3c 	bl	80107a8 <move_window>
 8010b30:	4603      	mov	r3, r0
 8010b32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010b34:	7ffb      	ldrb	r3, [r7, #31]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d178      	bne.n	8010c2c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010b40:	69bb      	ldr	r3, [r7, #24]
 8010b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b46:	4413      	add	r3, r2
 8010b48:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010b4a:	68bb      	ldr	r3, [r7, #8]
 8010b4c:	f003 0301 	and.w	r3, r3, #1
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d003      	beq.n	8010b5c <put_fat+0xf0>
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	091b      	lsrs	r3, r3, #4
 8010b58:	b2db      	uxtb	r3, r3
 8010b5a:	e00e      	b.n	8010b7a <put_fat+0x10e>
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	781b      	ldrb	r3, [r3, #0]
 8010b60:	b25b      	sxtb	r3, r3
 8010b62:	f023 030f 	bic.w	r3, r3, #15
 8010b66:	b25a      	sxtb	r2, r3
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	0a1b      	lsrs	r3, r3, #8
 8010b6c:	b25b      	sxtb	r3, r3
 8010b6e:	f003 030f 	and.w	r3, r3, #15
 8010b72:	b25b      	sxtb	r3, r3
 8010b74:	4313      	orrs	r3, r2
 8010b76:	b25b      	sxtb	r3, r3
 8010b78:	b2db      	uxtb	r3, r3
 8010b7a:	697a      	ldr	r2, [r7, #20]
 8010b7c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	2201      	movs	r2, #1
 8010b82:	70da      	strb	r2, [r3, #3]
			break;
 8010b84:	e057      	b.n	8010c36 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	0a1b      	lsrs	r3, r3, #8
 8010b8e:	4413      	add	r3, r2
 8010b90:	4619      	mov	r1, r3
 8010b92:	68f8      	ldr	r0, [r7, #12]
 8010b94:	f7ff fe08 	bl	80107a8 <move_window>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010b9c:	7ffb      	ldrb	r3, [r7, #31]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d146      	bne.n	8010c30 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	005b      	lsls	r3, r3, #1
 8010bac:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8010bb0:	4413      	add	r3, r2
 8010bb2:	687a      	ldr	r2, [r7, #4]
 8010bb4:	b292      	uxth	r2, r2
 8010bb6:	4611      	mov	r1, r2
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f7ff fb4e 	bl	801025a <st_word>
			fs->wflag = 1;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	2201      	movs	r2, #1
 8010bc2:	70da      	strb	r2, [r3, #3]
			break;
 8010bc4:	e037      	b.n	8010c36 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010bca:	68bb      	ldr	r3, [r7, #8]
 8010bcc:	09db      	lsrs	r3, r3, #7
 8010bce:	4413      	add	r3, r2
 8010bd0:	4619      	mov	r1, r3
 8010bd2:	68f8      	ldr	r0, [r7, #12]
 8010bd4:	f7ff fde8 	bl	80107a8 <move_window>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010bdc:	7ffb      	ldrb	r3, [r7, #31]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d128      	bne.n	8010c34 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010bee:	68bb      	ldr	r3, [r7, #8]
 8010bf0:	009b      	lsls	r3, r3, #2
 8010bf2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8010bf6:	4413      	add	r3, r2
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7ff fb0b 	bl	8010214 <ld_dword>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8010c04:	4323      	orrs	r3, r4
 8010c06:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	009b      	lsls	r3, r3, #2
 8010c12:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8010c16:	4413      	add	r3, r2
 8010c18:	6879      	ldr	r1, [r7, #4]
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f7ff fb38 	bl	8010290 <st_dword>
			fs->wflag = 1;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	2201      	movs	r2, #1
 8010c24:	70da      	strb	r2, [r3, #3]
			break;
 8010c26:	e006      	b.n	8010c36 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010c28:	bf00      	nop
 8010c2a:	e004      	b.n	8010c36 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010c2c:	bf00      	nop
 8010c2e:	e002      	b.n	8010c36 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010c30:	bf00      	nop
 8010c32:	e000      	b.n	8010c36 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010c34:	bf00      	nop
		}
	}
	return res;
 8010c36:	7ffb      	ldrb	r3, [r7, #31]
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3724      	adds	r7, #36	@ 0x24
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd90      	pop	{r4, r7, pc}

08010c40 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b088      	sub	sp, #32
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	60f8      	str	r0, [r7, #12]
 8010c48:	60b9      	str	r1, [r7, #8]
 8010c4a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	2b01      	cmp	r3, #1
 8010c5a:	d904      	bls.n	8010c66 <remove_chain+0x26>
 8010c5c:	69bb      	ldr	r3, [r7, #24]
 8010c5e:	699b      	ldr	r3, [r3, #24]
 8010c60:	68ba      	ldr	r2, [r7, #8]
 8010c62:	429a      	cmp	r2, r3
 8010c64:	d301      	bcc.n	8010c6a <remove_chain+0x2a>
 8010c66:	2302      	movs	r3, #2
 8010c68:	e04b      	b.n	8010d02 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d00c      	beq.n	8010c8a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010c70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010c74:	6879      	ldr	r1, [r7, #4]
 8010c76:	69b8      	ldr	r0, [r7, #24]
 8010c78:	f7ff fef8 	bl	8010a6c <put_fat>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010c80:	7ffb      	ldrb	r3, [r7, #31]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d001      	beq.n	8010c8a <remove_chain+0x4a>
 8010c86:	7ffb      	ldrb	r3, [r7, #31]
 8010c88:	e03b      	b.n	8010d02 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010c8a:	68b9      	ldr	r1, [r7, #8]
 8010c8c:	68f8      	ldr	r0, [r7, #12]
 8010c8e:	f7ff fe46 	bl	801091e <get_fat>
 8010c92:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d031      	beq.n	8010cfe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010c9a:	697b      	ldr	r3, [r7, #20]
 8010c9c:	2b01      	cmp	r3, #1
 8010c9e:	d101      	bne.n	8010ca4 <remove_chain+0x64>
 8010ca0:	2302      	movs	r3, #2
 8010ca2:	e02e      	b.n	8010d02 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010caa:	d101      	bne.n	8010cb0 <remove_chain+0x70>
 8010cac:	2301      	movs	r3, #1
 8010cae:	e028      	b.n	8010d02 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	68b9      	ldr	r1, [r7, #8]
 8010cb4:	69b8      	ldr	r0, [r7, #24]
 8010cb6:	f7ff fed9 	bl	8010a6c <put_fat>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010cbe:	7ffb      	ldrb	r3, [r7, #31]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d001      	beq.n	8010cc8 <remove_chain+0x88>
 8010cc4:	7ffb      	ldrb	r3, [r7, #31]
 8010cc6:	e01c      	b.n	8010d02 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010cc8:	69bb      	ldr	r3, [r7, #24]
 8010cca:	695a      	ldr	r2, [r3, #20]
 8010ccc:	69bb      	ldr	r3, [r7, #24]
 8010cce:	699b      	ldr	r3, [r3, #24]
 8010cd0:	3b02      	subs	r3, #2
 8010cd2:	429a      	cmp	r2, r3
 8010cd4:	d20b      	bcs.n	8010cee <remove_chain+0xae>
			fs->free_clst++;
 8010cd6:	69bb      	ldr	r3, [r7, #24]
 8010cd8:	695b      	ldr	r3, [r3, #20]
 8010cda:	1c5a      	adds	r2, r3, #1
 8010cdc:	69bb      	ldr	r3, [r7, #24]
 8010cde:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8010ce0:	69bb      	ldr	r3, [r7, #24]
 8010ce2:	791b      	ldrb	r3, [r3, #4]
 8010ce4:	f043 0301 	orr.w	r3, r3, #1
 8010ce8:	b2da      	uxtb	r2, r3
 8010cea:	69bb      	ldr	r3, [r7, #24]
 8010cec:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010cf2:	69bb      	ldr	r3, [r7, #24]
 8010cf4:	699b      	ldr	r3, [r3, #24]
 8010cf6:	68ba      	ldr	r2, [r7, #8]
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d3c6      	bcc.n	8010c8a <remove_chain+0x4a>
 8010cfc:	e000      	b.n	8010d00 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010cfe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010d00:	2300      	movs	r3, #0
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3720      	adds	r7, #32
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}

08010d0a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010d0a:	b580      	push	{r7, lr}
 8010d0c:	b088      	sub	sp, #32
 8010d0e:	af00      	add	r7, sp, #0
 8010d10:	6078      	str	r0, [r7, #4]
 8010d12:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d10d      	bne.n	8010d3c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	691b      	ldr	r3, [r3, #16]
 8010d24:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010d26:	69bb      	ldr	r3, [r7, #24]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d004      	beq.n	8010d36 <create_chain+0x2c>
 8010d2c:	693b      	ldr	r3, [r7, #16]
 8010d2e:	699b      	ldr	r3, [r3, #24]
 8010d30:	69ba      	ldr	r2, [r7, #24]
 8010d32:	429a      	cmp	r2, r3
 8010d34:	d31b      	bcc.n	8010d6e <create_chain+0x64>
 8010d36:	2301      	movs	r3, #1
 8010d38:	61bb      	str	r3, [r7, #24]
 8010d3a:	e018      	b.n	8010d6e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010d3c:	6839      	ldr	r1, [r7, #0]
 8010d3e:	6878      	ldr	r0, [r7, #4]
 8010d40:	f7ff fded 	bl	801091e <get_fat>
 8010d44:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	2b01      	cmp	r3, #1
 8010d4a:	d801      	bhi.n	8010d50 <create_chain+0x46>
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	e070      	b.n	8010e32 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010d56:	d101      	bne.n	8010d5c <create_chain+0x52>
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	e06a      	b.n	8010e32 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010d5c:	693b      	ldr	r3, [r7, #16]
 8010d5e:	699b      	ldr	r3, [r3, #24]
 8010d60:	68fa      	ldr	r2, [r7, #12]
 8010d62:	429a      	cmp	r2, r3
 8010d64:	d201      	bcs.n	8010d6a <create_chain+0x60>
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	e063      	b.n	8010e32 <create_chain+0x128>
		scl = clst;
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010d6e:	69bb      	ldr	r3, [r7, #24]
 8010d70:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010d72:	69fb      	ldr	r3, [r7, #28]
 8010d74:	3301      	adds	r3, #1
 8010d76:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010d78:	693b      	ldr	r3, [r7, #16]
 8010d7a:	699b      	ldr	r3, [r3, #24]
 8010d7c:	69fa      	ldr	r2, [r7, #28]
 8010d7e:	429a      	cmp	r2, r3
 8010d80:	d307      	bcc.n	8010d92 <create_chain+0x88>
				ncl = 2;
 8010d82:	2302      	movs	r3, #2
 8010d84:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010d86:	69fa      	ldr	r2, [r7, #28]
 8010d88:	69bb      	ldr	r3, [r7, #24]
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	d901      	bls.n	8010d92 <create_chain+0x88>
 8010d8e:	2300      	movs	r3, #0
 8010d90:	e04f      	b.n	8010e32 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010d92:	69f9      	ldr	r1, [r7, #28]
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f7ff fdc2 	bl	801091e <get_fat>
 8010d9a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d00e      	beq.n	8010dc0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	2b01      	cmp	r3, #1
 8010da6:	d003      	beq.n	8010db0 <create_chain+0xa6>
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010dae:	d101      	bne.n	8010db4 <create_chain+0xaa>
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	e03e      	b.n	8010e32 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010db4:	69fa      	ldr	r2, [r7, #28]
 8010db6:	69bb      	ldr	r3, [r7, #24]
 8010db8:	429a      	cmp	r2, r3
 8010dba:	d1da      	bne.n	8010d72 <create_chain+0x68>
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	e038      	b.n	8010e32 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010dc0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010dc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010dc6:	69f9      	ldr	r1, [r7, #28]
 8010dc8:	6938      	ldr	r0, [r7, #16]
 8010dca:	f7ff fe4f 	bl	8010a6c <put_fat>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010dd2:	7dfb      	ldrb	r3, [r7, #23]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d109      	bne.n	8010dec <create_chain+0xe2>
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d006      	beq.n	8010dec <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010dde:	69fa      	ldr	r2, [r7, #28]
 8010de0:	6839      	ldr	r1, [r7, #0]
 8010de2:	6938      	ldr	r0, [r7, #16]
 8010de4:	f7ff fe42 	bl	8010a6c <put_fat>
 8010de8:	4603      	mov	r3, r0
 8010dea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010dec:	7dfb      	ldrb	r3, [r7, #23]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d116      	bne.n	8010e20 <create_chain+0x116>
		fs->last_clst = ncl;
 8010df2:	693b      	ldr	r3, [r7, #16]
 8010df4:	69fa      	ldr	r2, [r7, #28]
 8010df6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010df8:	693b      	ldr	r3, [r7, #16]
 8010dfa:	695a      	ldr	r2, [r3, #20]
 8010dfc:	693b      	ldr	r3, [r7, #16]
 8010dfe:	699b      	ldr	r3, [r3, #24]
 8010e00:	3b02      	subs	r3, #2
 8010e02:	429a      	cmp	r2, r3
 8010e04:	d804      	bhi.n	8010e10 <create_chain+0x106>
 8010e06:	693b      	ldr	r3, [r7, #16]
 8010e08:	695b      	ldr	r3, [r3, #20]
 8010e0a:	1e5a      	subs	r2, r3, #1
 8010e0c:	693b      	ldr	r3, [r7, #16]
 8010e0e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	791b      	ldrb	r3, [r3, #4]
 8010e14:	f043 0301 	orr.w	r3, r3, #1
 8010e18:	b2da      	uxtb	r2, r3
 8010e1a:	693b      	ldr	r3, [r7, #16]
 8010e1c:	711a      	strb	r2, [r3, #4]
 8010e1e:	e007      	b.n	8010e30 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010e20:	7dfb      	ldrb	r3, [r7, #23]
 8010e22:	2b01      	cmp	r3, #1
 8010e24:	d102      	bne.n	8010e2c <create_chain+0x122>
 8010e26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010e2a:	e000      	b.n	8010e2e <create_chain+0x124>
 8010e2c:	2301      	movs	r3, #1
 8010e2e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010e30:	69fb      	ldr	r3, [r7, #28]
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3720      	adds	r7, #32
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}

08010e3a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010e3a:	b480      	push	{r7}
 8010e3c:	b087      	sub	sp, #28
 8010e3e:	af00      	add	r7, sp, #0
 8010e40:	6078      	str	r0, [r7, #4]
 8010e42:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e4e:	3304      	adds	r3, #4
 8010e50:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	0a5b      	lsrs	r3, r3, #9
 8010e56:	68fa      	ldr	r2, [r7, #12]
 8010e58:	8952      	ldrh	r2, [r2, #10]
 8010e5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8010e5e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010e60:	693b      	ldr	r3, [r7, #16]
 8010e62:	1d1a      	adds	r2, r3, #4
 8010e64:	613a      	str	r2, [r7, #16]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d101      	bne.n	8010e74 <clmt_clust+0x3a>
 8010e70:	2300      	movs	r3, #0
 8010e72:	e010      	b.n	8010e96 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010e74:	697a      	ldr	r2, [r7, #20]
 8010e76:	68bb      	ldr	r3, [r7, #8]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d307      	bcc.n	8010e8c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010e7c:	697a      	ldr	r2, [r7, #20]
 8010e7e:	68bb      	ldr	r3, [r7, #8]
 8010e80:	1ad3      	subs	r3, r2, r3
 8010e82:	617b      	str	r3, [r7, #20]
 8010e84:	693b      	ldr	r3, [r7, #16]
 8010e86:	3304      	adds	r3, #4
 8010e88:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010e8a:	e7e9      	b.n	8010e60 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010e8c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	681a      	ldr	r2, [r3, #0]
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	4413      	add	r3, r2
}
 8010e96:	4618      	mov	r0, r3
 8010e98:	371c      	adds	r7, #28
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea0:	4770      	bx	lr

08010ea2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010ea2:	b580      	push	{r7, lr}
 8010ea4:	b086      	sub	sp, #24
 8010ea6:	af00      	add	r7, sp, #0
 8010ea8:	6078      	str	r0, [r7, #4]
 8010eaa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010eb8:	d204      	bcs.n	8010ec4 <dir_sdi+0x22>
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	f003 031f 	and.w	r3, r3, #31
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d001      	beq.n	8010ec8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8010ec4:	2302      	movs	r3, #2
 8010ec6:	e063      	b.n	8010f90 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	683a      	ldr	r2, [r7, #0]
 8010ecc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	689b      	ldr	r3, [r3, #8]
 8010ed2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d106      	bne.n	8010ee8 <dir_sdi+0x46>
 8010eda:	693b      	ldr	r3, [r7, #16]
 8010edc:	781b      	ldrb	r3, [r3, #0]
 8010ede:	2b02      	cmp	r3, #2
 8010ee0:	d902      	bls.n	8010ee8 <dir_sdi+0x46>
		clst = fs->dirbase;
 8010ee2:	693b      	ldr	r3, [r7, #16]
 8010ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ee6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010ee8:	697b      	ldr	r3, [r7, #20]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d10c      	bne.n	8010f08 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	095b      	lsrs	r3, r3, #5
 8010ef2:	693a      	ldr	r2, [r7, #16]
 8010ef4:	8912      	ldrh	r2, [r2, #8]
 8010ef6:	4293      	cmp	r3, r2
 8010ef8:	d301      	bcc.n	8010efe <dir_sdi+0x5c>
 8010efa:	2302      	movs	r3, #2
 8010efc:	e048      	b.n	8010f90 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010efe:	693b      	ldr	r3, [r7, #16]
 8010f00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	61da      	str	r2, [r3, #28]
 8010f06:	e029      	b.n	8010f5c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010f08:	693b      	ldr	r3, [r7, #16]
 8010f0a:	895b      	ldrh	r3, [r3, #10]
 8010f0c:	025b      	lsls	r3, r3, #9
 8010f0e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010f10:	e019      	b.n	8010f46 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6979      	ldr	r1, [r7, #20]
 8010f16:	4618      	mov	r0, r3
 8010f18:	f7ff fd01 	bl	801091e <get_fat>
 8010f1c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010f1e:	697b      	ldr	r3, [r7, #20]
 8010f20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010f24:	d101      	bne.n	8010f2a <dir_sdi+0x88>
 8010f26:	2301      	movs	r3, #1
 8010f28:	e032      	b.n	8010f90 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010f2a:	697b      	ldr	r3, [r7, #20]
 8010f2c:	2b01      	cmp	r3, #1
 8010f2e:	d904      	bls.n	8010f3a <dir_sdi+0x98>
 8010f30:	693b      	ldr	r3, [r7, #16]
 8010f32:	699b      	ldr	r3, [r3, #24]
 8010f34:	697a      	ldr	r2, [r7, #20]
 8010f36:	429a      	cmp	r2, r3
 8010f38:	d301      	bcc.n	8010f3e <dir_sdi+0x9c>
 8010f3a:	2302      	movs	r3, #2
 8010f3c:	e028      	b.n	8010f90 <dir_sdi+0xee>
			ofs -= csz;
 8010f3e:	683a      	ldr	r2, [r7, #0]
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	1ad3      	subs	r3, r2, r3
 8010f44:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010f46:	683a      	ldr	r2, [r7, #0]
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	429a      	cmp	r2, r3
 8010f4c:	d2e1      	bcs.n	8010f12 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8010f4e:	6979      	ldr	r1, [r7, #20]
 8010f50:	6938      	ldr	r0, [r7, #16]
 8010f52:	f7ff fcc5 	bl	80108e0 <clust2sect>
 8010f56:	4602      	mov	r2, r0
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	697a      	ldr	r2, [r7, #20]
 8010f60:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	69db      	ldr	r3, [r3, #28]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d101      	bne.n	8010f6e <dir_sdi+0xcc>
 8010f6a:	2302      	movs	r3, #2
 8010f6c:	e010      	b.n	8010f90 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	69da      	ldr	r2, [r3, #28]
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	0a5b      	lsrs	r3, r3, #9
 8010f76:	441a      	add	r2, r3
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010f7c:	693b      	ldr	r3, [r7, #16]
 8010f7e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010f82:	683b      	ldr	r3, [r7, #0]
 8010f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f88:	441a      	add	r2, r3
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010f8e:	2300      	movs	r3, #0
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	3718      	adds	r7, #24
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd80      	pop	{r7, pc}

08010f98 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b086      	sub	sp, #24
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
 8010fa0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	695b      	ldr	r3, [r3, #20]
 8010fac:	3320      	adds	r3, #32
 8010fae:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	69db      	ldr	r3, [r3, #28]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d003      	beq.n	8010fc0 <dir_next+0x28>
 8010fb8:	68bb      	ldr	r3, [r7, #8]
 8010fba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010fbe:	d301      	bcc.n	8010fc4 <dir_next+0x2c>
 8010fc0:	2304      	movs	r3, #4
 8010fc2:	e0aa      	b.n	801111a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010fc4:	68bb      	ldr	r3, [r7, #8]
 8010fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	f040 8098 	bne.w	8011100 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	69db      	ldr	r3, [r3, #28]
 8010fd4:	1c5a      	adds	r2, r3, #1
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	699b      	ldr	r3, [r3, #24]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d10b      	bne.n	8010ffa <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010fe2:	68bb      	ldr	r3, [r7, #8]
 8010fe4:	095b      	lsrs	r3, r3, #5
 8010fe6:	68fa      	ldr	r2, [r7, #12]
 8010fe8:	8912      	ldrh	r2, [r2, #8]
 8010fea:	4293      	cmp	r3, r2
 8010fec:	f0c0 8088 	bcc.w	8011100 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	61da      	str	r2, [r3, #28]
 8010ff6:	2304      	movs	r3, #4
 8010ff8:	e08f      	b.n	801111a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	0a5b      	lsrs	r3, r3, #9
 8010ffe:	68fa      	ldr	r2, [r7, #12]
 8011000:	8952      	ldrh	r2, [r2, #10]
 8011002:	3a01      	subs	r2, #1
 8011004:	4013      	ands	r3, r2
 8011006:	2b00      	cmp	r3, #0
 8011008:	d17a      	bne.n	8011100 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801100a:	687a      	ldr	r2, [r7, #4]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	699b      	ldr	r3, [r3, #24]
 8011010:	4619      	mov	r1, r3
 8011012:	4610      	mov	r0, r2
 8011014:	f7ff fc83 	bl	801091e <get_fat>
 8011018:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801101a:	697b      	ldr	r3, [r7, #20]
 801101c:	2b01      	cmp	r3, #1
 801101e:	d801      	bhi.n	8011024 <dir_next+0x8c>
 8011020:	2302      	movs	r3, #2
 8011022:	e07a      	b.n	801111a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011024:	697b      	ldr	r3, [r7, #20]
 8011026:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801102a:	d101      	bne.n	8011030 <dir_next+0x98>
 801102c:	2301      	movs	r3, #1
 801102e:	e074      	b.n	801111a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	699b      	ldr	r3, [r3, #24]
 8011034:	697a      	ldr	r2, [r7, #20]
 8011036:	429a      	cmp	r2, r3
 8011038:	d358      	bcc.n	80110ec <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d104      	bne.n	801104a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2200      	movs	r2, #0
 8011044:	61da      	str	r2, [r3, #28]
 8011046:	2304      	movs	r3, #4
 8011048:	e067      	b.n	801111a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801104a:	687a      	ldr	r2, [r7, #4]
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	699b      	ldr	r3, [r3, #24]
 8011050:	4619      	mov	r1, r3
 8011052:	4610      	mov	r0, r2
 8011054:	f7ff fe59 	bl	8010d0a <create_chain>
 8011058:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801105a:	697b      	ldr	r3, [r7, #20]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d101      	bne.n	8011064 <dir_next+0xcc>
 8011060:	2307      	movs	r3, #7
 8011062:	e05a      	b.n	801111a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011064:	697b      	ldr	r3, [r7, #20]
 8011066:	2b01      	cmp	r3, #1
 8011068:	d101      	bne.n	801106e <dir_next+0xd6>
 801106a:	2302      	movs	r3, #2
 801106c:	e055      	b.n	801111a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801106e:	697b      	ldr	r3, [r7, #20]
 8011070:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011074:	d101      	bne.n	801107a <dir_next+0xe2>
 8011076:	2301      	movs	r3, #1
 8011078:	e04f      	b.n	801111a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801107a:	68f8      	ldr	r0, [r7, #12]
 801107c:	f7ff fb50 	bl	8010720 <sync_window>
 8011080:	4603      	mov	r3, r0
 8011082:	2b00      	cmp	r3, #0
 8011084:	d001      	beq.n	801108a <dir_next+0xf2>
 8011086:	2301      	movs	r3, #1
 8011088:	e047      	b.n	801111a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	3334      	adds	r3, #52	@ 0x34
 801108e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011092:	2100      	movs	r1, #0
 8011094:	4618      	mov	r0, r3
 8011096:	f7ff f948 	bl	801032a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801109a:	2300      	movs	r3, #0
 801109c:	613b      	str	r3, [r7, #16]
 801109e:	6979      	ldr	r1, [r7, #20]
 80110a0:	68f8      	ldr	r0, [r7, #12]
 80110a2:	f7ff fc1d 	bl	80108e0 <clust2sect>
 80110a6:	4602      	mov	r2, r0
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80110ac:	e012      	b.n	80110d4 <dir_next+0x13c>
						fs->wflag = 1;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	2201      	movs	r2, #1
 80110b2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80110b4:	68f8      	ldr	r0, [r7, #12]
 80110b6:	f7ff fb33 	bl	8010720 <sync_window>
 80110ba:	4603      	mov	r3, r0
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d001      	beq.n	80110c4 <dir_next+0x12c>
 80110c0:	2301      	movs	r3, #1
 80110c2:	e02a      	b.n	801111a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	3301      	adds	r3, #1
 80110c8:	613b      	str	r3, [r7, #16]
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80110ce:	1c5a      	adds	r2, r3, #1
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	895b      	ldrh	r3, [r3, #10]
 80110d8:	461a      	mov	r2, r3
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	4293      	cmp	r3, r2
 80110de:	d3e6      	bcc.n	80110ae <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80110e4:	693b      	ldr	r3, [r7, #16]
 80110e6:	1ad2      	subs	r2, r2, r3
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	697a      	ldr	r2, [r7, #20]
 80110f0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80110f2:	6979      	ldr	r1, [r7, #20]
 80110f4:	68f8      	ldr	r0, [r7, #12]
 80110f6:	f7ff fbf3 	bl	80108e0 <clust2sect>
 80110fa:	4602      	mov	r2, r0
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	68ba      	ldr	r2, [r7, #8]
 8011104:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011112:	441a      	add	r2, r3
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011118:	2300      	movs	r3, #0
}
 801111a:	4618      	mov	r0, r3
 801111c:	3718      	adds	r7, #24
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}

08011122 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011122:	b580      	push	{r7, lr}
 8011124:	b086      	sub	sp, #24
 8011126:	af00      	add	r7, sp, #0
 8011128:	6078      	str	r0, [r7, #4]
 801112a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011132:	2100      	movs	r1, #0
 8011134:	6878      	ldr	r0, [r7, #4]
 8011136:	f7ff feb4 	bl	8010ea2 <dir_sdi>
 801113a:	4603      	mov	r3, r0
 801113c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801113e:	7dfb      	ldrb	r3, [r7, #23]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d12b      	bne.n	801119c <dir_alloc+0x7a>
		n = 0;
 8011144:	2300      	movs	r3, #0
 8011146:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	69db      	ldr	r3, [r3, #28]
 801114c:	4619      	mov	r1, r3
 801114e:	68f8      	ldr	r0, [r7, #12]
 8011150:	f7ff fb2a 	bl	80107a8 <move_window>
 8011154:	4603      	mov	r3, r0
 8011156:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011158:	7dfb      	ldrb	r3, [r7, #23]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d11d      	bne.n	801119a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	6a1b      	ldr	r3, [r3, #32]
 8011162:	781b      	ldrb	r3, [r3, #0]
 8011164:	2be5      	cmp	r3, #229	@ 0xe5
 8011166:	d004      	beq.n	8011172 <dir_alloc+0x50>
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6a1b      	ldr	r3, [r3, #32]
 801116c:	781b      	ldrb	r3, [r3, #0]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d107      	bne.n	8011182 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011172:	693b      	ldr	r3, [r7, #16]
 8011174:	3301      	adds	r3, #1
 8011176:	613b      	str	r3, [r7, #16]
 8011178:	693a      	ldr	r2, [r7, #16]
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	429a      	cmp	r2, r3
 801117e:	d102      	bne.n	8011186 <dir_alloc+0x64>
 8011180:	e00c      	b.n	801119c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011182:	2300      	movs	r3, #0
 8011184:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011186:	2101      	movs	r1, #1
 8011188:	6878      	ldr	r0, [r7, #4]
 801118a:	f7ff ff05 	bl	8010f98 <dir_next>
 801118e:	4603      	mov	r3, r0
 8011190:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011192:	7dfb      	ldrb	r3, [r7, #23]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d0d7      	beq.n	8011148 <dir_alloc+0x26>
 8011198:	e000      	b.n	801119c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801119a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801119c:	7dfb      	ldrb	r3, [r7, #23]
 801119e:	2b04      	cmp	r3, #4
 80111a0:	d101      	bne.n	80111a6 <dir_alloc+0x84>
 80111a2:	2307      	movs	r3, #7
 80111a4:	75fb      	strb	r3, [r7, #23]
	return res;
 80111a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80111a8:	4618      	mov	r0, r3
 80111aa:	3718      	adds	r7, #24
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd80      	pop	{r7, pc}

080111b0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b084      	sub	sp, #16
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	331a      	adds	r3, #26
 80111be:	4618      	mov	r0, r3
 80111c0:	f7ff f810 	bl	80101e4 <ld_word>
 80111c4:	4603      	mov	r3, r0
 80111c6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	2b03      	cmp	r3, #3
 80111ce:	d109      	bne.n	80111e4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80111d0:	683b      	ldr	r3, [r7, #0]
 80111d2:	3314      	adds	r3, #20
 80111d4:	4618      	mov	r0, r3
 80111d6:	f7ff f805 	bl	80101e4 <ld_word>
 80111da:	4603      	mov	r3, r0
 80111dc:	041b      	lsls	r3, r3, #16
 80111de:	68fa      	ldr	r2, [r7, #12]
 80111e0:	4313      	orrs	r3, r2
 80111e2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80111e4:	68fb      	ldr	r3, [r7, #12]
}
 80111e6:	4618      	mov	r0, r3
 80111e8:	3710      	adds	r7, #16
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bd80      	pop	{r7, pc}

080111ee <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80111ee:	b580      	push	{r7, lr}
 80111f0:	b084      	sub	sp, #16
 80111f2:	af00      	add	r7, sp, #0
 80111f4:	60f8      	str	r0, [r7, #12]
 80111f6:	60b9      	str	r1, [r7, #8]
 80111f8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80111fa:	68bb      	ldr	r3, [r7, #8]
 80111fc:	331a      	adds	r3, #26
 80111fe:	687a      	ldr	r2, [r7, #4]
 8011200:	b292      	uxth	r2, r2
 8011202:	4611      	mov	r1, r2
 8011204:	4618      	mov	r0, r3
 8011206:	f7ff f828 	bl	801025a <st_word>
	if (fs->fs_type == FS_FAT32) {
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	781b      	ldrb	r3, [r3, #0]
 801120e:	2b03      	cmp	r3, #3
 8011210:	d109      	bne.n	8011226 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011212:	68bb      	ldr	r3, [r7, #8]
 8011214:	f103 0214 	add.w	r2, r3, #20
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	0c1b      	lsrs	r3, r3, #16
 801121c:	b29b      	uxth	r3, r3
 801121e:	4619      	mov	r1, r3
 8011220:	4610      	mov	r0, r2
 8011222:	f7ff f81a 	bl	801025a <st_word>
	}
}
 8011226:	bf00      	nop
 8011228:	3710      	adds	r7, #16
 801122a:	46bd      	mov	sp, r7
 801122c:	bd80      	pop	{r7, pc}

0801122e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801122e:	b580      	push	{r7, lr}
 8011230:	b086      	sub	sp, #24
 8011232:	af00      	add	r7, sp, #0
 8011234:	6078      	str	r0, [r7, #4]
 8011236:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011238:	2304      	movs	r3, #4
 801123a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8011242:	e03c      	b.n	80112be <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	69db      	ldr	r3, [r3, #28]
 8011248:	4619      	mov	r1, r3
 801124a:	6938      	ldr	r0, [r7, #16]
 801124c:	f7ff faac 	bl	80107a8 <move_window>
 8011250:	4603      	mov	r3, r0
 8011252:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011254:	7dfb      	ldrb	r3, [r7, #23]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d136      	bne.n	80112c8 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	6a1b      	ldr	r3, [r3, #32]
 801125e:	781b      	ldrb	r3, [r3, #0]
 8011260:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8011262:	7bfb      	ldrb	r3, [r7, #15]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d102      	bne.n	801126e <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011268:	2304      	movs	r3, #4
 801126a:	75fb      	strb	r3, [r7, #23]
 801126c:	e031      	b.n	80112d2 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	6a1b      	ldr	r3, [r3, #32]
 8011272:	330b      	adds	r3, #11
 8011274:	781b      	ldrb	r3, [r3, #0]
 8011276:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801127a:	73bb      	strb	r3, [r7, #14]
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	7bba      	ldrb	r2, [r7, #14]
 8011280:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8011282:	7bfb      	ldrb	r3, [r7, #15]
 8011284:	2be5      	cmp	r3, #229	@ 0xe5
 8011286:	d011      	beq.n	80112ac <dir_read+0x7e>
 8011288:	7bfb      	ldrb	r3, [r7, #15]
 801128a:	2b2e      	cmp	r3, #46	@ 0x2e
 801128c:	d00e      	beq.n	80112ac <dir_read+0x7e>
 801128e:	7bbb      	ldrb	r3, [r7, #14]
 8011290:	2b0f      	cmp	r3, #15
 8011292:	d00b      	beq.n	80112ac <dir_read+0x7e>
 8011294:	7bbb      	ldrb	r3, [r7, #14]
 8011296:	f023 0320 	bic.w	r3, r3, #32
 801129a:	2b08      	cmp	r3, #8
 801129c:	bf0c      	ite	eq
 801129e:	2301      	moveq	r3, #1
 80112a0:	2300      	movne	r3, #0
 80112a2:	b2db      	uxtb	r3, r3
 80112a4:	461a      	mov	r2, r3
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	4293      	cmp	r3, r2
 80112aa:	d00f      	beq.n	80112cc <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80112ac:	2100      	movs	r1, #0
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f7ff fe72 	bl	8010f98 <dir_next>
 80112b4:	4603      	mov	r3, r0
 80112b6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80112b8:	7dfb      	ldrb	r3, [r7, #23]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d108      	bne.n	80112d0 <dir_read+0xa2>
	while (dp->sect) {
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	69db      	ldr	r3, [r3, #28]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d1be      	bne.n	8011244 <dir_read+0x16>
 80112c6:	e004      	b.n	80112d2 <dir_read+0xa4>
		if (res != FR_OK) break;
 80112c8:	bf00      	nop
 80112ca:	e002      	b.n	80112d2 <dir_read+0xa4>
				break;
 80112cc:	bf00      	nop
 80112ce:	e000      	b.n	80112d2 <dir_read+0xa4>
		if (res != FR_OK) break;
 80112d0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80112d2:	7dfb      	ldrb	r3, [r7, #23]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d002      	beq.n	80112de <dir_read+0xb0>
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2200      	movs	r2, #0
 80112dc:	61da      	str	r2, [r3, #28]
	return res;
 80112de:	7dfb      	ldrb	r3, [r7, #23]
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	3718      	adds	r7, #24
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}

080112e8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b086      	sub	sp, #24
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80112f6:	2100      	movs	r1, #0
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f7ff fdd2 	bl	8010ea2 <dir_sdi>
 80112fe:	4603      	mov	r3, r0
 8011300:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011302:	7dfb      	ldrb	r3, [r7, #23]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d001      	beq.n	801130c <dir_find+0x24>
 8011308:	7dfb      	ldrb	r3, [r7, #23]
 801130a:	e03e      	b.n	801138a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	69db      	ldr	r3, [r3, #28]
 8011310:	4619      	mov	r1, r3
 8011312:	6938      	ldr	r0, [r7, #16]
 8011314:	f7ff fa48 	bl	80107a8 <move_window>
 8011318:	4603      	mov	r3, r0
 801131a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801131c:	7dfb      	ldrb	r3, [r7, #23]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d12f      	bne.n	8011382 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	6a1b      	ldr	r3, [r3, #32]
 8011326:	781b      	ldrb	r3, [r3, #0]
 8011328:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801132a:	7bfb      	ldrb	r3, [r7, #15]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d102      	bne.n	8011336 <dir_find+0x4e>
 8011330:	2304      	movs	r3, #4
 8011332:	75fb      	strb	r3, [r7, #23]
 8011334:	e028      	b.n	8011388 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6a1b      	ldr	r3, [r3, #32]
 801133a:	330b      	adds	r3, #11
 801133c:	781b      	ldrb	r3, [r3, #0]
 801133e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011342:	b2da      	uxtb	r2, r3
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	6a1b      	ldr	r3, [r3, #32]
 801134c:	330b      	adds	r3, #11
 801134e:	781b      	ldrb	r3, [r3, #0]
 8011350:	f003 0308 	and.w	r3, r3, #8
 8011354:	2b00      	cmp	r3, #0
 8011356:	d10a      	bne.n	801136e <dir_find+0x86>
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	6a18      	ldr	r0, [r3, #32]
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	3324      	adds	r3, #36	@ 0x24
 8011360:	220b      	movs	r2, #11
 8011362:	4619      	mov	r1, r3
 8011364:	f7fe fffc 	bl	8010360 <mem_cmp>
 8011368:	4603      	mov	r3, r0
 801136a:	2b00      	cmp	r3, #0
 801136c:	d00b      	beq.n	8011386 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801136e:	2100      	movs	r1, #0
 8011370:	6878      	ldr	r0, [r7, #4]
 8011372:	f7ff fe11 	bl	8010f98 <dir_next>
 8011376:	4603      	mov	r3, r0
 8011378:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801137a:	7dfb      	ldrb	r3, [r7, #23]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d0c5      	beq.n	801130c <dir_find+0x24>
 8011380:	e002      	b.n	8011388 <dir_find+0xa0>
		if (res != FR_OK) break;
 8011382:	bf00      	nop
 8011384:	e000      	b.n	8011388 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011386:	bf00      	nop

	return res;
 8011388:	7dfb      	ldrb	r3, [r7, #23]
}
 801138a:	4618      	mov	r0, r3
 801138c:	3718      	adds	r7, #24
 801138e:	46bd      	mov	sp, r7
 8011390:	bd80      	pop	{r7, pc}

08011392 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011392:	b580      	push	{r7, lr}
 8011394:	b084      	sub	sp, #16
 8011396:	af00      	add	r7, sp, #0
 8011398:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80113a0:	2101      	movs	r1, #1
 80113a2:	6878      	ldr	r0, [r7, #4]
 80113a4:	f7ff febd 	bl	8011122 <dir_alloc>
 80113a8:	4603      	mov	r3, r0
 80113aa:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80113ac:	7bfb      	ldrb	r3, [r7, #15]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d11c      	bne.n	80113ec <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	69db      	ldr	r3, [r3, #28]
 80113b6:	4619      	mov	r1, r3
 80113b8:	68b8      	ldr	r0, [r7, #8]
 80113ba:	f7ff f9f5 	bl	80107a8 <move_window>
 80113be:	4603      	mov	r3, r0
 80113c0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80113c2:	7bfb      	ldrb	r3, [r7, #15]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d111      	bne.n	80113ec <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	6a1b      	ldr	r3, [r3, #32]
 80113cc:	2220      	movs	r2, #32
 80113ce:	2100      	movs	r1, #0
 80113d0:	4618      	mov	r0, r3
 80113d2:	f7fe ffaa 	bl	801032a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	6a18      	ldr	r0, [r3, #32]
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	3324      	adds	r3, #36	@ 0x24
 80113de:	220b      	movs	r2, #11
 80113e0:	4619      	mov	r1, r3
 80113e2:	f7fe ff81 	bl	80102e8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	2201      	movs	r2, #1
 80113ea:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80113ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80113ee:	4618      	mov	r0, r3
 80113f0:	3710      	adds	r7, #16
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd80      	pop	{r7, pc}

080113f6 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80113f6:	b580      	push	{r7, lr}
 80113f8:	b086      	sub	sp, #24
 80113fa:	af00      	add	r7, sp, #0
 80113fc:	6078      	str	r0, [r7, #4]
 80113fe:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	2200      	movs	r2, #0
 8011404:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	69db      	ldr	r3, [r3, #28]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d04f      	beq.n	80114ae <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 801140e:	2300      	movs	r3, #0
 8011410:	613b      	str	r3, [r7, #16]
 8011412:	693b      	ldr	r3, [r7, #16]
 8011414:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8011416:	e022      	b.n	801145e <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	6a1a      	ldr	r2, [r3, #32]
 801141c:	697b      	ldr	r3, [r7, #20]
 801141e:	1c59      	adds	r1, r3, #1
 8011420:	6179      	str	r1, [r7, #20]
 8011422:	4413      	add	r3, r2
 8011424:	781b      	ldrb	r3, [r3, #0]
 8011426:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8011428:	7bfb      	ldrb	r3, [r7, #15]
 801142a:	2b20      	cmp	r3, #32
 801142c:	d016      	beq.n	801145c <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801142e:	7bfb      	ldrb	r3, [r7, #15]
 8011430:	2b05      	cmp	r3, #5
 8011432:	d101      	bne.n	8011438 <get_fileinfo+0x42>
 8011434:	23e5      	movs	r3, #229	@ 0xe5
 8011436:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8011438:	697b      	ldr	r3, [r7, #20]
 801143a:	2b09      	cmp	r3, #9
 801143c:	d106      	bne.n	801144c <get_fileinfo+0x56>
 801143e:	693b      	ldr	r3, [r7, #16]
 8011440:	1c5a      	adds	r2, r3, #1
 8011442:	613a      	str	r2, [r7, #16]
 8011444:	683a      	ldr	r2, [r7, #0]
 8011446:	4413      	add	r3, r2
 8011448:	222e      	movs	r2, #46	@ 0x2e
 801144a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 801144c:	693b      	ldr	r3, [r7, #16]
 801144e:	1c5a      	adds	r2, r3, #1
 8011450:	613a      	str	r2, [r7, #16]
 8011452:	683a      	ldr	r2, [r7, #0]
 8011454:	4413      	add	r3, r2
 8011456:	7bfa      	ldrb	r2, [r7, #15]
 8011458:	725a      	strb	r2, [r3, #9]
 801145a:	e000      	b.n	801145e <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 801145c:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	2b0a      	cmp	r3, #10
 8011462:	d9d9      	bls.n	8011418 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8011464:	683a      	ldr	r2, [r7, #0]
 8011466:	693b      	ldr	r3, [r7, #16]
 8011468:	4413      	add	r3, r2
 801146a:	3309      	adds	r3, #9
 801146c:	2200      	movs	r2, #0
 801146e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	6a1b      	ldr	r3, [r3, #32]
 8011474:	7ada      	ldrb	r2, [r3, #11]
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	6a1b      	ldr	r3, [r3, #32]
 801147e:	331c      	adds	r3, #28
 8011480:	4618      	mov	r0, r3
 8011482:	f7fe fec7 	bl	8010214 <ld_dword>
 8011486:	4602      	mov	r2, r0
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	6a1b      	ldr	r3, [r3, #32]
 8011490:	3316      	adds	r3, #22
 8011492:	4618      	mov	r0, r3
 8011494:	f7fe febe 	bl	8010214 <ld_dword>
 8011498:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	b29a      	uxth	r2, r3
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	80da      	strh	r2, [r3, #6]
 80114a2:	68bb      	ldr	r3, [r7, #8]
 80114a4:	0c1b      	lsrs	r3, r3, #16
 80114a6:	b29a      	uxth	r2, r3
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	809a      	strh	r2, [r3, #4]
 80114ac:	e000      	b.n	80114b0 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80114ae:	bf00      	nop
}
 80114b0:	3718      	adds	r7, #24
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}
	...

080114b8 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 80114b8:	b480      	push	{r7}
 80114ba:	b085      	sub	sp, #20
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	1c59      	adds	r1, r3, #1
 80114c6:	687a      	ldr	r2, [r7, #4]
 80114c8:	6011      	str	r1, [r2, #0]
 80114ca:	781b      	ldrb	r3, [r3, #0]
 80114cc:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 80114ce:	89fb      	ldrh	r3, [r7, #14]
 80114d0:	2b60      	cmp	r3, #96	@ 0x60
 80114d2:	d905      	bls.n	80114e0 <get_achar+0x28>
 80114d4:	89fb      	ldrh	r3, [r7, #14]
 80114d6:	2b7a      	cmp	r3, #122	@ 0x7a
 80114d8:	d802      	bhi.n	80114e0 <get_achar+0x28>
 80114da:	89fb      	ldrh	r3, [r7, #14]
 80114dc:	3b20      	subs	r3, #32
 80114de:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 80114e0:	89fb      	ldrh	r3, [r7, #14]
 80114e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80114e4:	d904      	bls.n	80114f0 <get_achar+0x38>
 80114e6:	89fb      	ldrh	r3, [r7, #14]
 80114e8:	3b80      	subs	r3, #128	@ 0x80
 80114ea:	4a05      	ldr	r2, [pc, #20]	@ (8011500 <get_achar+0x48>)
 80114ec:	5cd3      	ldrb	r3, [r2, r3]
 80114ee:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 80114f0:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 80114f2:	4618      	mov	r0, r3
 80114f4:	3714      	adds	r7, #20
 80114f6:	46bd      	mov	sp, r7
 80114f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fc:	4770      	bx	lr
 80114fe:	bf00      	nop
 8011500:	080e6f04 	.word	0x080e6f04

08011504 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b08a      	sub	sp, #40	@ 0x28
 8011508:	af00      	add	r7, sp, #0
 801150a:	60f8      	str	r0, [r7, #12]
 801150c:	60b9      	str	r1, [r7, #8]
 801150e:	607a      	str	r2, [r7, #4]
 8011510:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8011512:	e009      	b.n	8011528 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8011514:	f107 0308 	add.w	r3, r7, #8
 8011518:	4618      	mov	r0, r3
 801151a:	f7ff ffcd 	bl	80114b8 <get_achar>
 801151e:	4603      	mov	r3, r0
 8011520:	2b00      	cmp	r3, #0
 8011522:	d101      	bne.n	8011528 <pattern_matching+0x24>
 8011524:	2300      	movs	r3, #0
 8011526:	e064      	b.n	80115f2 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	1e5a      	subs	r2, r3, #1
 801152c:	607a      	str	r2, [r7, #4]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d1f0      	bne.n	8011514 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	781b      	ldrb	r3, [r3, #0]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d104      	bne.n	8011544 <pattern_matching+0x40>
 801153a:	683b      	ldr	r3, [r7, #0]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d001      	beq.n	8011544 <pattern_matching+0x40>
 8011540:	2301      	movs	r3, #1
 8011542:	e056      	b.n	80115f2 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	617b      	str	r3, [r7, #20]
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 801154c:	697b      	ldr	r3, [r7, #20]
 801154e:	781b      	ldrb	r3, [r3, #0]
 8011550:	2b3f      	cmp	r3, #63	@ 0x3f
 8011552:	d003      	beq.n	801155c <pattern_matching+0x58>
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	781b      	ldrb	r3, [r3, #0]
 8011558:	2b2a      	cmp	r3, #42	@ 0x2a
 801155a:	d126      	bne.n	80115aa <pattern_matching+0xa6>
				nm = nx = 0;
 801155c:	2300      	movs	r3, #0
 801155e:	61fb      	str	r3, [r7, #28]
 8011560:	69fb      	ldr	r3, [r7, #28]
 8011562:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8011564:	697b      	ldr	r3, [r7, #20]
 8011566:	1c5a      	adds	r2, r3, #1
 8011568:	617a      	str	r2, [r7, #20]
 801156a:	781b      	ldrb	r3, [r3, #0]
 801156c:	2b3f      	cmp	r3, #63	@ 0x3f
 801156e:	d103      	bne.n	8011578 <pattern_matching+0x74>
 8011570:	6a3b      	ldr	r3, [r7, #32]
 8011572:	3301      	adds	r3, #1
 8011574:	623b      	str	r3, [r7, #32]
 8011576:	e001      	b.n	801157c <pattern_matching+0x78>
 8011578:	2301      	movs	r3, #1
 801157a:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 801157c:	697b      	ldr	r3, [r7, #20]
 801157e:	781b      	ldrb	r3, [r3, #0]
 8011580:	2b3f      	cmp	r3, #63	@ 0x3f
 8011582:	d0ef      	beq.n	8011564 <pattern_matching+0x60>
 8011584:	697b      	ldr	r3, [r7, #20]
 8011586:	781b      	ldrb	r3, [r3, #0]
 8011588:	2b2a      	cmp	r3, #42	@ 0x2a
 801158a:	d0eb      	beq.n	8011564 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 801158c:	6978      	ldr	r0, [r7, #20]
 801158e:	6939      	ldr	r1, [r7, #16]
 8011590:	69fb      	ldr	r3, [r7, #28]
 8011592:	6a3a      	ldr	r2, [r7, #32]
 8011594:	f7ff ffb6 	bl	8011504 <pattern_matching>
 8011598:	4603      	mov	r3, r0
 801159a:	2b00      	cmp	r3, #0
 801159c:	d001      	beq.n	80115a2 <pattern_matching+0x9e>
 801159e:	2301      	movs	r3, #1
 80115a0:	e027      	b.n	80115f2 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 80115a2:	693b      	ldr	r3, [r7, #16]
 80115a4:	781b      	ldrb	r3, [r3, #0]
 80115a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80115a8:	e017      	b.n	80115da <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 80115aa:	f107 0314 	add.w	r3, r7, #20
 80115ae:	4618      	mov	r0, r3
 80115b0:	f7ff ff82 	bl	80114b8 <get_achar>
 80115b4:	4603      	mov	r3, r0
 80115b6:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 80115b8:	f107 0310 	add.w	r3, r7, #16
 80115bc:	4618      	mov	r0, r3
 80115be:	f7ff ff7b 	bl	80114b8 <get_achar>
 80115c2:	4603      	mov	r3, r0
 80115c4:	84fb      	strh	r3, [r7, #38]	@ 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 80115c6:	8b7a      	ldrh	r2, [r7, #26]
 80115c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80115ca:	429a      	cmp	r2, r3
 80115cc:	d104      	bne.n	80115d8 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 80115ce:	8b7b      	ldrh	r3, [r7, #26]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d1bb      	bne.n	801154c <pattern_matching+0x48>
 80115d4:	2301      	movs	r3, #1
 80115d6:	e00c      	b.n	80115f2 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 80115d8:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 80115da:	f107 0308 	add.w	r3, r7, #8
 80115de:	4618      	mov	r0, r3
 80115e0:	f7ff ff6a 	bl	80114b8 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 80115e4:	683b      	ldr	r3, [r7, #0]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d002      	beq.n	80115f0 <pattern_matching+0xec>
 80115ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d1a9      	bne.n	8011544 <pattern_matching+0x40>

	return 0;
 80115f0:	2300      	movs	r3, #0
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	3728      	adds	r7, #40	@ 0x28
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}
	...

080115fc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b088      	sub	sp, #32
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
 8011604:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	60fb      	str	r3, [r7, #12]
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	3324      	adds	r3, #36	@ 0x24
 8011610:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011612:	220b      	movs	r2, #11
 8011614:	2120      	movs	r1, #32
 8011616:	68b8      	ldr	r0, [r7, #8]
 8011618:	f7fe fe87 	bl	801032a <mem_set>
	si = i = 0; ni = 8;
 801161c:	2300      	movs	r3, #0
 801161e:	613b      	str	r3, [r7, #16]
 8011620:	693b      	ldr	r3, [r7, #16]
 8011622:	61fb      	str	r3, [r7, #28]
 8011624:	2308      	movs	r3, #8
 8011626:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011628:	69fb      	ldr	r3, [r7, #28]
 801162a:	1c5a      	adds	r2, r3, #1
 801162c:	61fa      	str	r2, [r7, #28]
 801162e:	68fa      	ldr	r2, [r7, #12]
 8011630:	4413      	add	r3, r2
 8011632:	781b      	ldrb	r3, [r3, #0]
 8011634:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011636:	7efb      	ldrb	r3, [r7, #27]
 8011638:	2b20      	cmp	r3, #32
 801163a:	d94e      	bls.n	80116da <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801163c:	7efb      	ldrb	r3, [r7, #27]
 801163e:	2b2f      	cmp	r3, #47	@ 0x2f
 8011640:	d006      	beq.n	8011650 <create_name+0x54>
 8011642:	7efb      	ldrb	r3, [r7, #27]
 8011644:	2b5c      	cmp	r3, #92	@ 0x5c
 8011646:	d110      	bne.n	801166a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011648:	e002      	b.n	8011650 <create_name+0x54>
 801164a:	69fb      	ldr	r3, [r7, #28]
 801164c:	3301      	adds	r3, #1
 801164e:	61fb      	str	r3, [r7, #28]
 8011650:	68fa      	ldr	r2, [r7, #12]
 8011652:	69fb      	ldr	r3, [r7, #28]
 8011654:	4413      	add	r3, r2
 8011656:	781b      	ldrb	r3, [r3, #0]
 8011658:	2b2f      	cmp	r3, #47	@ 0x2f
 801165a:	d0f6      	beq.n	801164a <create_name+0x4e>
 801165c:	68fa      	ldr	r2, [r7, #12]
 801165e:	69fb      	ldr	r3, [r7, #28]
 8011660:	4413      	add	r3, r2
 8011662:	781b      	ldrb	r3, [r3, #0]
 8011664:	2b5c      	cmp	r3, #92	@ 0x5c
 8011666:	d0f0      	beq.n	801164a <create_name+0x4e>
			break;
 8011668:	e038      	b.n	80116dc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801166a:	7efb      	ldrb	r3, [r7, #27]
 801166c:	2b2e      	cmp	r3, #46	@ 0x2e
 801166e:	d003      	beq.n	8011678 <create_name+0x7c>
 8011670:	693a      	ldr	r2, [r7, #16]
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	429a      	cmp	r2, r3
 8011676:	d30c      	bcc.n	8011692 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	2b0b      	cmp	r3, #11
 801167c:	d002      	beq.n	8011684 <create_name+0x88>
 801167e:	7efb      	ldrb	r3, [r7, #27]
 8011680:	2b2e      	cmp	r3, #46	@ 0x2e
 8011682:	d001      	beq.n	8011688 <create_name+0x8c>
 8011684:	2306      	movs	r3, #6
 8011686:	e044      	b.n	8011712 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8011688:	2308      	movs	r3, #8
 801168a:	613b      	str	r3, [r7, #16]
 801168c:	230b      	movs	r3, #11
 801168e:	617b      	str	r3, [r7, #20]
			continue;
 8011690:	e022      	b.n	80116d8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011692:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011696:	2b00      	cmp	r3, #0
 8011698:	da04      	bge.n	80116a4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801169a:	7efb      	ldrb	r3, [r7, #27]
 801169c:	3b80      	subs	r3, #128	@ 0x80
 801169e:	4a1f      	ldr	r2, [pc, #124]	@ (801171c <create_name+0x120>)
 80116a0:	5cd3      	ldrb	r3, [r2, r3]
 80116a2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80116a4:	7efb      	ldrb	r3, [r7, #27]
 80116a6:	4619      	mov	r1, r3
 80116a8:	481d      	ldr	r0, [pc, #116]	@ (8011720 <create_name+0x124>)
 80116aa:	f7fe fe80 	bl	80103ae <chk_chr>
 80116ae:	4603      	mov	r3, r0
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d001      	beq.n	80116b8 <create_name+0xbc>
 80116b4:	2306      	movs	r3, #6
 80116b6:	e02c      	b.n	8011712 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80116b8:	7efb      	ldrb	r3, [r7, #27]
 80116ba:	2b60      	cmp	r3, #96	@ 0x60
 80116bc:	d905      	bls.n	80116ca <create_name+0xce>
 80116be:	7efb      	ldrb	r3, [r7, #27]
 80116c0:	2b7a      	cmp	r3, #122	@ 0x7a
 80116c2:	d802      	bhi.n	80116ca <create_name+0xce>
 80116c4:	7efb      	ldrb	r3, [r7, #27]
 80116c6:	3b20      	subs	r3, #32
 80116c8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80116ca:	693b      	ldr	r3, [r7, #16]
 80116cc:	1c5a      	adds	r2, r3, #1
 80116ce:	613a      	str	r2, [r7, #16]
 80116d0:	68ba      	ldr	r2, [r7, #8]
 80116d2:	4413      	add	r3, r2
 80116d4:	7efa      	ldrb	r2, [r7, #27]
 80116d6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80116d8:	e7a6      	b.n	8011628 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80116da:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80116dc:	68fa      	ldr	r2, [r7, #12]
 80116de:	69fb      	ldr	r3, [r7, #28]
 80116e0:	441a      	add	r2, r3
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80116e6:	693b      	ldr	r3, [r7, #16]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d101      	bne.n	80116f0 <create_name+0xf4>
 80116ec:	2306      	movs	r3, #6
 80116ee:	e010      	b.n	8011712 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80116f0:	68bb      	ldr	r3, [r7, #8]
 80116f2:	781b      	ldrb	r3, [r3, #0]
 80116f4:	2be5      	cmp	r3, #229	@ 0xe5
 80116f6:	d102      	bne.n	80116fe <create_name+0x102>
 80116f8:	68bb      	ldr	r3, [r7, #8]
 80116fa:	2205      	movs	r2, #5
 80116fc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80116fe:	7efb      	ldrb	r3, [r7, #27]
 8011700:	2b20      	cmp	r3, #32
 8011702:	d801      	bhi.n	8011708 <create_name+0x10c>
 8011704:	2204      	movs	r2, #4
 8011706:	e000      	b.n	801170a <create_name+0x10e>
 8011708:	2200      	movs	r2, #0
 801170a:	68bb      	ldr	r3, [r7, #8]
 801170c:	330b      	adds	r3, #11
 801170e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011710:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011712:	4618      	mov	r0, r3
 8011714:	3720      	adds	r7, #32
 8011716:	46bd      	mov	sp, r7
 8011718:	bd80      	pop	{r7, pc}
 801171a:	bf00      	nop
 801171c:	080e6f04 	.word	0x080e6f04
 8011720:	08016d54 	.word	0x08016d54

08011724 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b086      	sub	sp, #24
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
 801172c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011732:	693b      	ldr	r3, [r7, #16]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011738:	e002      	b.n	8011740 <follow_path+0x1c>
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	3301      	adds	r3, #1
 801173e:	603b      	str	r3, [r7, #0]
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	781b      	ldrb	r3, [r3, #0]
 8011744:	2b2f      	cmp	r3, #47	@ 0x2f
 8011746:	d0f8      	beq.n	801173a <follow_path+0x16>
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	781b      	ldrb	r3, [r3, #0]
 801174c:	2b5c      	cmp	r3, #92	@ 0x5c
 801174e:	d0f4      	beq.n	801173a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011750:	693b      	ldr	r3, [r7, #16]
 8011752:	2200      	movs	r2, #0
 8011754:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	781b      	ldrb	r3, [r3, #0]
 801175a:	2b1f      	cmp	r3, #31
 801175c:	d80a      	bhi.n	8011774 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	2280      	movs	r2, #128	@ 0x80
 8011762:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8011766:	2100      	movs	r1, #0
 8011768:	6878      	ldr	r0, [r7, #4]
 801176a:	f7ff fb9a 	bl	8010ea2 <dir_sdi>
 801176e:	4603      	mov	r3, r0
 8011770:	75fb      	strb	r3, [r7, #23]
 8011772:	e043      	b.n	80117fc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011774:	463b      	mov	r3, r7
 8011776:	4619      	mov	r1, r3
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f7ff ff3f 	bl	80115fc <create_name>
 801177e:	4603      	mov	r3, r0
 8011780:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011782:	7dfb      	ldrb	r3, [r7, #23]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d134      	bne.n	80117f2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	f7ff fdad 	bl	80112e8 <dir_find>
 801178e:	4603      	mov	r3, r0
 8011790:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011798:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801179a:	7dfb      	ldrb	r3, [r7, #23]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d00a      	beq.n	80117b6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80117a0:	7dfb      	ldrb	r3, [r7, #23]
 80117a2:	2b04      	cmp	r3, #4
 80117a4:	d127      	bne.n	80117f6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80117a6:	7afb      	ldrb	r3, [r7, #11]
 80117a8:	f003 0304 	and.w	r3, r3, #4
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d122      	bne.n	80117f6 <follow_path+0xd2>
 80117b0:	2305      	movs	r3, #5
 80117b2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80117b4:	e01f      	b.n	80117f6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80117b6:	7afb      	ldrb	r3, [r7, #11]
 80117b8:	f003 0304 	and.w	r3, r3, #4
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d11c      	bne.n	80117fa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80117c0:	693b      	ldr	r3, [r7, #16]
 80117c2:	799b      	ldrb	r3, [r3, #6]
 80117c4:	f003 0310 	and.w	r3, r3, #16
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d102      	bne.n	80117d2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80117cc:	2305      	movs	r3, #5
 80117ce:	75fb      	strb	r3, [r7, #23]
 80117d0:	e014      	b.n	80117fc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	695b      	ldr	r3, [r3, #20]
 80117dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117e0:	4413      	add	r3, r2
 80117e2:	4619      	mov	r1, r3
 80117e4:	68f8      	ldr	r0, [r7, #12]
 80117e6:	f7ff fce3 	bl	80111b0 <ld_clust>
 80117ea:	4602      	mov	r2, r0
 80117ec:	693b      	ldr	r3, [r7, #16]
 80117ee:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80117f0:	e7c0      	b.n	8011774 <follow_path+0x50>
			if (res != FR_OK) break;
 80117f2:	bf00      	nop
 80117f4:	e002      	b.n	80117fc <follow_path+0xd8>
				break;
 80117f6:	bf00      	nop
 80117f8:	e000      	b.n	80117fc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80117fa:	bf00      	nop
			}
		}
	}

	return res;
 80117fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80117fe:	4618      	mov	r0, r3
 8011800:	3718      	adds	r7, #24
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}

08011806 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011806:	b480      	push	{r7}
 8011808:	b087      	sub	sp, #28
 801180a:	af00      	add	r7, sp, #0
 801180c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801180e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011812:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d031      	beq.n	8011880 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	617b      	str	r3, [r7, #20]
 8011822:	e002      	b.n	801182a <get_ldnumber+0x24>
 8011824:	697b      	ldr	r3, [r7, #20]
 8011826:	3301      	adds	r3, #1
 8011828:	617b      	str	r3, [r7, #20]
 801182a:	697b      	ldr	r3, [r7, #20]
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	2b20      	cmp	r3, #32
 8011830:	d903      	bls.n	801183a <get_ldnumber+0x34>
 8011832:	697b      	ldr	r3, [r7, #20]
 8011834:	781b      	ldrb	r3, [r3, #0]
 8011836:	2b3a      	cmp	r3, #58	@ 0x3a
 8011838:	d1f4      	bne.n	8011824 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	781b      	ldrb	r3, [r3, #0]
 801183e:	2b3a      	cmp	r3, #58	@ 0x3a
 8011840:	d11c      	bne.n	801187c <get_ldnumber+0x76>
			tp = *path;
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	1c5a      	adds	r2, r3, #1
 801184c:	60fa      	str	r2, [r7, #12]
 801184e:	781b      	ldrb	r3, [r3, #0]
 8011850:	3b30      	subs	r3, #48	@ 0x30
 8011852:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	2b09      	cmp	r3, #9
 8011858:	d80e      	bhi.n	8011878 <get_ldnumber+0x72>
 801185a:	68fa      	ldr	r2, [r7, #12]
 801185c:	697b      	ldr	r3, [r7, #20]
 801185e:	429a      	cmp	r2, r3
 8011860:	d10a      	bne.n	8011878 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011862:	68bb      	ldr	r3, [r7, #8]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d107      	bne.n	8011878 <get_ldnumber+0x72>
					vol = (int)i;
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	3301      	adds	r3, #1
 8011870:	617b      	str	r3, [r7, #20]
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	697a      	ldr	r2, [r7, #20]
 8011876:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011878:	693b      	ldr	r3, [r7, #16]
 801187a:	e002      	b.n	8011882 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801187c:	2300      	movs	r3, #0
 801187e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011880:	693b      	ldr	r3, [r7, #16]
}
 8011882:	4618      	mov	r0, r3
 8011884:	371c      	adds	r7, #28
 8011886:	46bd      	mov	sp, r7
 8011888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188c:	4770      	bx	lr
	...

08011890 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b082      	sub	sp, #8
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
 8011898:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	2200      	movs	r2, #0
 801189e:	70da      	strb	r2, [r3, #3]
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80118a6:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80118a8:	6839      	ldr	r1, [r7, #0]
 80118aa:	6878      	ldr	r0, [r7, #4]
 80118ac:	f7fe ff7c 	bl	80107a8 <move_window>
 80118b0:	4603      	mov	r3, r0
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d001      	beq.n	80118ba <check_fs+0x2a>
 80118b6:	2304      	movs	r3, #4
 80118b8:	e038      	b.n	801192c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	3334      	adds	r3, #52	@ 0x34
 80118be:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80118c2:	4618      	mov	r0, r3
 80118c4:	f7fe fc8e 	bl	80101e4 <ld_word>
 80118c8:	4603      	mov	r3, r0
 80118ca:	461a      	mov	r2, r3
 80118cc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80118d0:	429a      	cmp	r2, r3
 80118d2:	d001      	beq.n	80118d8 <check_fs+0x48>
 80118d4:	2303      	movs	r3, #3
 80118d6:	e029      	b.n	801192c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80118de:	2be9      	cmp	r3, #233	@ 0xe9
 80118e0:	d009      	beq.n	80118f6 <check_fs+0x66>
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80118e8:	2beb      	cmp	r3, #235	@ 0xeb
 80118ea:	d11e      	bne.n	801192a <check_fs+0x9a>
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80118f2:	2b90      	cmp	r3, #144	@ 0x90
 80118f4:	d119      	bne.n	801192a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	3334      	adds	r3, #52	@ 0x34
 80118fa:	3336      	adds	r3, #54	@ 0x36
 80118fc:	4618      	mov	r0, r3
 80118fe:	f7fe fc89 	bl	8010214 <ld_dword>
 8011902:	4603      	mov	r3, r0
 8011904:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8011908:	4a0a      	ldr	r2, [pc, #40]	@ (8011934 <check_fs+0xa4>)
 801190a:	4293      	cmp	r3, r2
 801190c:	d101      	bne.n	8011912 <check_fs+0x82>
 801190e:	2300      	movs	r3, #0
 8011910:	e00c      	b.n	801192c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	3334      	adds	r3, #52	@ 0x34
 8011916:	3352      	adds	r3, #82	@ 0x52
 8011918:	4618      	mov	r0, r3
 801191a:	f7fe fc7b 	bl	8010214 <ld_dword>
 801191e:	4603      	mov	r3, r0
 8011920:	4a05      	ldr	r2, [pc, #20]	@ (8011938 <check_fs+0xa8>)
 8011922:	4293      	cmp	r3, r2
 8011924:	d101      	bne.n	801192a <check_fs+0x9a>
 8011926:	2300      	movs	r3, #0
 8011928:	e000      	b.n	801192c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801192a:	2302      	movs	r3, #2
}
 801192c:	4618      	mov	r0, r3
 801192e:	3708      	adds	r7, #8
 8011930:	46bd      	mov	sp, r7
 8011932:	bd80      	pop	{r7, pc}
 8011934:	00544146 	.word	0x00544146
 8011938:	33544146 	.word	0x33544146

0801193c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b096      	sub	sp, #88	@ 0x58
 8011940:	af00      	add	r7, sp, #0
 8011942:	60f8      	str	r0, [r7, #12]
 8011944:	60b9      	str	r1, [r7, #8]
 8011946:	4613      	mov	r3, r2
 8011948:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801194a:	68bb      	ldr	r3, [r7, #8]
 801194c:	2200      	movs	r2, #0
 801194e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011950:	68f8      	ldr	r0, [r7, #12]
 8011952:	f7ff ff58 	bl	8011806 <get_ldnumber>
 8011956:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801195a:	2b00      	cmp	r3, #0
 801195c:	da01      	bge.n	8011962 <find_volume+0x26>
 801195e:	230b      	movs	r3, #11
 8011960:	e235      	b.n	8011dce <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011962:	4aa5      	ldr	r2, [pc, #660]	@ (8011bf8 <find_volume+0x2bc>)
 8011964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801196a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801196c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801196e:	2b00      	cmp	r3, #0
 8011970:	d101      	bne.n	8011976 <find_volume+0x3a>
 8011972:	230c      	movs	r3, #12
 8011974:	e22b      	b.n	8011dce <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8011976:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011978:	f7fe fd34 	bl	80103e4 <lock_fs>
 801197c:	4603      	mov	r3, r0
 801197e:	2b00      	cmp	r3, #0
 8011980:	d101      	bne.n	8011986 <find_volume+0x4a>
 8011982:	230f      	movs	r3, #15
 8011984:	e223      	b.n	8011dce <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8011986:	68bb      	ldr	r3, [r7, #8]
 8011988:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801198a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801198c:	79fb      	ldrb	r3, [r7, #7]
 801198e:	f023 0301 	bic.w	r3, r3, #1
 8011992:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011996:	781b      	ldrb	r3, [r3, #0]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d01a      	beq.n	80119d2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 801199c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801199e:	785b      	ldrb	r3, [r3, #1]
 80119a0:	4618      	mov	r0, r3
 80119a2:	f7fe fb81 	bl	80100a8 <disk_status>
 80119a6:	4603      	mov	r3, r0
 80119a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80119ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80119b0:	f003 0301 	and.w	r3, r3, #1
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d10c      	bne.n	80119d2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80119b8:	79fb      	ldrb	r3, [r7, #7]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d007      	beq.n	80119ce <find_volume+0x92>
 80119be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80119c2:	f003 0304 	and.w	r3, r3, #4
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d001      	beq.n	80119ce <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80119ca:	230a      	movs	r3, #10
 80119cc:	e1ff      	b.n	8011dce <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 80119ce:	2300      	movs	r3, #0
 80119d0:	e1fd      	b.n	8011dce <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80119d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119d4:	2200      	movs	r2, #0
 80119d6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80119d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119da:	b2da      	uxtb	r2, r3
 80119dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119de:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80119e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119e2:	785b      	ldrb	r3, [r3, #1]
 80119e4:	4618      	mov	r0, r3
 80119e6:	f7fe fb79 	bl	80100dc <disk_initialize>
 80119ea:	4603      	mov	r3, r0
 80119ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80119f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80119f4:	f003 0301 	and.w	r3, r3, #1
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d001      	beq.n	8011a00 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80119fc:	2303      	movs	r3, #3
 80119fe:	e1e6      	b.n	8011dce <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011a00:	79fb      	ldrb	r3, [r7, #7]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d007      	beq.n	8011a16 <find_volume+0xda>
 8011a06:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011a0a:	f003 0304 	and.w	r3, r3, #4
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d001      	beq.n	8011a16 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8011a12:	230a      	movs	r3, #10
 8011a14:	e1db      	b.n	8011dce <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011a16:	2300      	movs	r3, #0
 8011a18:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011a1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011a1c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011a1e:	f7ff ff37 	bl	8011890 <check_fs>
 8011a22:	4603      	mov	r3, r0
 8011a24:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011a28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011a2c:	2b02      	cmp	r3, #2
 8011a2e:	d149      	bne.n	8011ac4 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011a30:	2300      	movs	r3, #0
 8011a32:	643b      	str	r3, [r7, #64]	@ 0x40
 8011a34:	e01e      	b.n	8011a74 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a38:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011a3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a3e:	011b      	lsls	r3, r3, #4
 8011a40:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8011a44:	4413      	add	r3, r2
 8011a46:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a4a:	3304      	adds	r3, #4
 8011a4c:	781b      	ldrb	r3, [r3, #0]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d006      	beq.n	8011a60 <find_volume+0x124>
 8011a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a54:	3308      	adds	r3, #8
 8011a56:	4618      	mov	r0, r3
 8011a58:	f7fe fbdc 	bl	8010214 <ld_dword>
 8011a5c:	4602      	mov	r2, r0
 8011a5e:	e000      	b.n	8011a62 <find_volume+0x126>
 8011a60:	2200      	movs	r2, #0
 8011a62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a64:	009b      	lsls	r3, r3, #2
 8011a66:	3358      	adds	r3, #88	@ 0x58
 8011a68:	443b      	add	r3, r7
 8011a6a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a70:	3301      	adds	r3, #1
 8011a72:	643b      	str	r3, [r7, #64]	@ 0x40
 8011a74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a76:	2b03      	cmp	r3, #3
 8011a78:	d9dd      	bls.n	8011a36 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8011a7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d002      	beq.n	8011a8a <find_volume+0x14e>
 8011a84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a86:	3b01      	subs	r3, #1
 8011a88:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a8c:	009b      	lsls	r3, r3, #2
 8011a8e:	3358      	adds	r3, #88	@ 0x58
 8011a90:	443b      	add	r3, r7
 8011a92:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011a96:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011a98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d005      	beq.n	8011aaa <find_volume+0x16e>
 8011a9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011aa0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011aa2:	f7ff fef5 	bl	8011890 <check_fs>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	e000      	b.n	8011aac <find_volume+0x170>
 8011aaa:	2303      	movs	r3, #3
 8011aac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011ab0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011ab4:	2b01      	cmp	r3, #1
 8011ab6:	d905      	bls.n	8011ac4 <find_volume+0x188>
 8011ab8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011aba:	3301      	adds	r3, #1
 8011abc:	643b      	str	r3, [r7, #64]	@ 0x40
 8011abe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ac0:	2b03      	cmp	r3, #3
 8011ac2:	d9e2      	bls.n	8011a8a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011ac4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011ac8:	2b04      	cmp	r3, #4
 8011aca:	d101      	bne.n	8011ad0 <find_volume+0x194>
 8011acc:	2301      	movs	r3, #1
 8011ace:	e17e      	b.n	8011dce <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011ad0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011ad4:	2b01      	cmp	r3, #1
 8011ad6:	d901      	bls.n	8011adc <find_volume+0x1a0>
 8011ad8:	230d      	movs	r3, #13
 8011ada:	e178      	b.n	8011dce <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ade:	3334      	adds	r3, #52	@ 0x34
 8011ae0:	330b      	adds	r3, #11
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f7fe fb7e 	bl	80101e4 <ld_word>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011aee:	d001      	beq.n	8011af4 <find_volume+0x1b8>
 8011af0:	230d      	movs	r3, #13
 8011af2:	e16c      	b.n	8011dce <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011af6:	3334      	adds	r3, #52	@ 0x34
 8011af8:	3316      	adds	r3, #22
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7fe fb72 	bl	80101e4 <ld_word>
 8011b00:	4603      	mov	r3, r0
 8011b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011b04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d106      	bne.n	8011b18 <find_volume+0x1dc>
 8011b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b0c:	3334      	adds	r3, #52	@ 0x34
 8011b0e:	3324      	adds	r3, #36	@ 0x24
 8011b10:	4618      	mov	r0, r3
 8011b12:	f7fe fb7f 	bl	8010214 <ld_dword>
 8011b16:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8011b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011b1c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b20:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8011b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b26:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b2a:	789b      	ldrb	r3, [r3, #2]
 8011b2c:	2b01      	cmp	r3, #1
 8011b2e:	d005      	beq.n	8011b3c <find_volume+0x200>
 8011b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b32:	789b      	ldrb	r3, [r3, #2]
 8011b34:	2b02      	cmp	r3, #2
 8011b36:	d001      	beq.n	8011b3c <find_volume+0x200>
 8011b38:	230d      	movs	r3, #13
 8011b3a:	e148      	b.n	8011dce <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b3e:	789b      	ldrb	r3, [r3, #2]
 8011b40:	461a      	mov	r2, r3
 8011b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b44:	fb02 f303 	mul.w	r3, r2, r3
 8011b48:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011b50:	461a      	mov	r2, r3
 8011b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b54:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b58:	895b      	ldrh	r3, [r3, #10]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d008      	beq.n	8011b70 <find_volume+0x234>
 8011b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b60:	895b      	ldrh	r3, [r3, #10]
 8011b62:	461a      	mov	r2, r3
 8011b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b66:	895b      	ldrh	r3, [r3, #10]
 8011b68:	3b01      	subs	r3, #1
 8011b6a:	4013      	ands	r3, r2
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d001      	beq.n	8011b74 <find_volume+0x238>
 8011b70:	230d      	movs	r3, #13
 8011b72:	e12c      	b.n	8011dce <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b76:	3334      	adds	r3, #52	@ 0x34
 8011b78:	3311      	adds	r3, #17
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f7fe fb32 	bl	80101e4 <ld_word>
 8011b80:	4603      	mov	r3, r0
 8011b82:	461a      	mov	r2, r3
 8011b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b86:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b8a:	891b      	ldrh	r3, [r3, #8]
 8011b8c:	f003 030f 	and.w	r3, r3, #15
 8011b90:	b29b      	uxth	r3, r3
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d001      	beq.n	8011b9a <find_volume+0x25e>
 8011b96:	230d      	movs	r3, #13
 8011b98:	e119      	b.n	8011dce <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b9c:	3334      	adds	r3, #52	@ 0x34
 8011b9e:	3313      	adds	r3, #19
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f7fe fb1f 	bl	80101e4 <ld_word>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011baa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d106      	bne.n	8011bbe <find_volume+0x282>
 8011bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bb2:	3334      	adds	r3, #52	@ 0x34
 8011bb4:	3320      	adds	r3, #32
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f7fe fb2c 	bl	8010214 <ld_dword>
 8011bbc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bc0:	3334      	adds	r3, #52	@ 0x34
 8011bc2:	330e      	adds	r3, #14
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f7fe fb0d 	bl	80101e4 <ld_word>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011bce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d101      	bne.n	8011bd8 <find_volume+0x29c>
 8011bd4:	230d      	movs	r3, #13
 8011bd6:	e0fa      	b.n	8011dce <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011bd8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011bda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bdc:	4413      	add	r3, r2
 8011bde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011be0:	8912      	ldrh	r2, [r2, #8]
 8011be2:	0912      	lsrs	r2, r2, #4
 8011be4:	b292      	uxth	r2, r2
 8011be6:	4413      	add	r3, r2
 8011be8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011bea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bee:	429a      	cmp	r2, r3
 8011bf0:	d204      	bcs.n	8011bfc <find_volume+0x2c0>
 8011bf2:	230d      	movs	r3, #13
 8011bf4:	e0eb      	b.n	8011dce <find_volume+0x492>
 8011bf6:	bf00      	nop
 8011bf8:	20001868 	.word	0x20001868
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011bfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c00:	1ad3      	subs	r3, r2, r3
 8011c02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011c04:	8952      	ldrh	r2, [r2, #10]
 8011c06:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c0a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d101      	bne.n	8011c16 <find_volume+0x2da>
 8011c12:	230d      	movs	r3, #13
 8011c14:	e0db      	b.n	8011dce <find_volume+0x492>
		fmt = FS_FAT32;
 8011c16:	2303      	movs	r3, #3
 8011c18:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c1e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8011c22:	4293      	cmp	r3, r2
 8011c24:	d802      	bhi.n	8011c2c <find_volume+0x2f0>
 8011c26:	2302      	movs	r3, #2
 8011c28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c2e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8011c32:	4293      	cmp	r3, r2
 8011c34:	d802      	bhi.n	8011c3c <find_volume+0x300>
 8011c36:	2301      	movs	r3, #1
 8011c38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c3e:	1c9a      	adds	r2, r3, #2
 8011c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c42:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8011c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c46:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011c48:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011c4a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011c4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c4e:	441a      	add	r2, r3
 8011c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c52:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8011c54:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c58:	441a      	add	r2, r3
 8011c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8011c5e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011c62:	2b03      	cmp	r3, #3
 8011c64:	d11e      	bne.n	8011ca4 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c68:	3334      	adds	r3, #52	@ 0x34
 8011c6a:	332a      	adds	r3, #42	@ 0x2a
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	f7fe fab9 	bl	80101e4 <ld_word>
 8011c72:	4603      	mov	r3, r0
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d001      	beq.n	8011c7c <find_volume+0x340>
 8011c78:	230d      	movs	r3, #13
 8011c7a:	e0a8      	b.n	8011dce <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c7e:	891b      	ldrh	r3, [r3, #8]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d001      	beq.n	8011c88 <find_volume+0x34c>
 8011c84:	230d      	movs	r3, #13
 8011c86:	e0a2      	b.n	8011dce <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c8a:	3334      	adds	r3, #52	@ 0x34
 8011c8c:	332c      	adds	r3, #44	@ 0x2c
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7fe fac0 	bl	8010214 <ld_dword>
 8011c94:	4602      	mov	r2, r0
 8011c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c98:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c9c:	699b      	ldr	r3, [r3, #24]
 8011c9e:	009b      	lsls	r3, r3, #2
 8011ca0:	647b      	str	r3, [r7, #68]	@ 0x44
 8011ca2:	e01f      	b.n	8011ce4 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ca6:	891b      	ldrh	r3, [r3, #8]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d101      	bne.n	8011cb0 <find_volume+0x374>
 8011cac:	230d      	movs	r3, #13
 8011cae:	e08e      	b.n	8011dce <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011cb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011cb6:	441a      	add	r2, r3
 8011cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cba:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011cbc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011cc0:	2b02      	cmp	r3, #2
 8011cc2:	d103      	bne.n	8011ccc <find_volume+0x390>
 8011cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cc6:	699b      	ldr	r3, [r3, #24]
 8011cc8:	005b      	lsls	r3, r3, #1
 8011cca:	e00a      	b.n	8011ce2 <find_volume+0x3a6>
 8011ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cce:	699a      	ldr	r2, [r3, #24]
 8011cd0:	4613      	mov	r3, r2
 8011cd2:	005b      	lsls	r3, r3, #1
 8011cd4:	4413      	add	r3, r2
 8011cd6:	085a      	lsrs	r2, r3, #1
 8011cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cda:	699b      	ldr	r3, [r3, #24]
 8011cdc:	f003 0301 	and.w	r3, r3, #1
 8011ce0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011ce2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ce6:	69da      	ldr	r2, [r3, #28]
 8011ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011cea:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8011cee:	0a5b      	lsrs	r3, r3, #9
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	d201      	bcs.n	8011cf8 <find_volume+0x3bc>
 8011cf4:	230d      	movs	r3, #13
 8011cf6:	e06a      	b.n	8011dce <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011cfe:	615a      	str	r2, [r3, #20]
 8011d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d02:	695a      	ldr	r2, [r3, #20]
 8011d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d06:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8011d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d0a:	2280      	movs	r2, #128	@ 0x80
 8011d0c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011d0e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011d12:	2b03      	cmp	r3, #3
 8011d14:	d149      	bne.n	8011daa <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d18:	3334      	adds	r3, #52	@ 0x34
 8011d1a:	3330      	adds	r3, #48	@ 0x30
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f7fe fa61 	bl	80101e4 <ld_word>
 8011d22:	4603      	mov	r3, r0
 8011d24:	2b01      	cmp	r3, #1
 8011d26:	d140      	bne.n	8011daa <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011d28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d2a:	3301      	adds	r3, #1
 8011d2c:	4619      	mov	r1, r3
 8011d2e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011d30:	f7fe fd3a 	bl	80107a8 <move_window>
 8011d34:	4603      	mov	r3, r0
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d137      	bne.n	8011daa <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8011d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d42:	3334      	adds	r3, #52	@ 0x34
 8011d44:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011d48:	4618      	mov	r0, r3
 8011d4a:	f7fe fa4b 	bl	80101e4 <ld_word>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	461a      	mov	r2, r3
 8011d52:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011d56:	429a      	cmp	r2, r3
 8011d58:	d127      	bne.n	8011daa <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d5c:	3334      	adds	r3, #52	@ 0x34
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f7fe fa58 	bl	8010214 <ld_dword>
 8011d64:	4603      	mov	r3, r0
 8011d66:	4a1c      	ldr	r2, [pc, #112]	@ (8011dd8 <find_volume+0x49c>)
 8011d68:	4293      	cmp	r3, r2
 8011d6a:	d11e      	bne.n	8011daa <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d6e:	3334      	adds	r3, #52	@ 0x34
 8011d70:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011d74:	4618      	mov	r0, r3
 8011d76:	f7fe fa4d 	bl	8010214 <ld_dword>
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	4a17      	ldr	r2, [pc, #92]	@ (8011ddc <find_volume+0x4a0>)
 8011d7e:	4293      	cmp	r3, r2
 8011d80:	d113      	bne.n	8011daa <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d84:	3334      	adds	r3, #52	@ 0x34
 8011d86:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f7fe fa42 	bl	8010214 <ld_dword>
 8011d90:	4602      	mov	r2, r0
 8011d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d94:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d98:	3334      	adds	r3, #52	@ 0x34
 8011d9a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8011d9e:	4618      	mov	r0, r3
 8011da0:	f7fe fa38 	bl	8010214 <ld_dword>
 8011da4:	4602      	mov	r2, r0
 8011da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011da8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dac:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8011db0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011db2:	4b0b      	ldr	r3, [pc, #44]	@ (8011de0 <find_volume+0x4a4>)
 8011db4:	881b      	ldrh	r3, [r3, #0]
 8011db6:	3301      	adds	r3, #1
 8011db8:	b29a      	uxth	r2, r3
 8011dba:	4b09      	ldr	r3, [pc, #36]	@ (8011de0 <find_volume+0x4a4>)
 8011dbc:	801a      	strh	r2, [r3, #0]
 8011dbe:	4b08      	ldr	r3, [pc, #32]	@ (8011de0 <find_volume+0x4a4>)
 8011dc0:	881a      	ldrh	r2, [r3, #0]
 8011dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dc4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011dc6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011dc8:	f7fe fc86 	bl	80106d8 <clear_lock>
#endif
	return FR_OK;
 8011dcc:	2300      	movs	r3, #0
}
 8011dce:	4618      	mov	r0, r3
 8011dd0:	3758      	adds	r7, #88	@ 0x58
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	bd80      	pop	{r7, pc}
 8011dd6:	bf00      	nop
 8011dd8:	41615252 	.word	0x41615252
 8011ddc:	61417272 	.word	0x61417272
 8011de0:	2000186c 	.word	0x2000186c

08011de4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b084      	sub	sp, #16
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
 8011dec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011dee:	2309      	movs	r3, #9
 8011df0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d02e      	beq.n	8011e56 <validate+0x72>
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d02a      	beq.n	8011e56 <validate+0x72>
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	781b      	ldrb	r3, [r3, #0]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d025      	beq.n	8011e56 <validate+0x72>
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	889a      	ldrh	r2, [r3, #4]
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	88db      	ldrh	r3, [r3, #6]
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d11e      	bne.n	8011e56 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f7fe fae1 	bl	80103e4 <lock_fs>
 8011e22:	4603      	mov	r3, r0
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d014      	beq.n	8011e52 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	785b      	ldrb	r3, [r3, #1]
 8011e2e:	4618      	mov	r0, r3
 8011e30:	f7fe f93a 	bl	80100a8 <disk_status>
 8011e34:	4603      	mov	r3, r0
 8011e36:	f003 0301 	and.w	r3, r3, #1
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d102      	bne.n	8011e44 <validate+0x60>
				res = FR_OK;
 8011e3e:	2300      	movs	r3, #0
 8011e40:	73fb      	strb	r3, [r7, #15]
 8011e42:	e008      	b.n	8011e56 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	2100      	movs	r1, #0
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7fe fae0 	bl	8010410 <unlock_fs>
 8011e50:	e001      	b.n	8011e56 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8011e52:	230f      	movs	r3, #15
 8011e54:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011e56:	7bfb      	ldrb	r3, [r7, #15]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d102      	bne.n	8011e62 <validate+0x7e>
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	e000      	b.n	8011e64 <validate+0x80>
 8011e62:	2300      	movs	r3, #0
 8011e64:	683a      	ldr	r2, [r7, #0]
 8011e66:	6013      	str	r3, [r2, #0]
	return res;
 8011e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	3710      	adds	r7, #16
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	bd80      	pop	{r7, pc}
	...

08011e74 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b088      	sub	sp, #32
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	60f8      	str	r0, [r7, #12]
 8011e7c:	60b9      	str	r1, [r7, #8]
 8011e7e:	4613      	mov	r3, r2
 8011e80:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011e86:	f107 0310 	add.w	r3, r7, #16
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f7ff fcbb 	bl	8011806 <get_ldnumber>
 8011e90:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011e92:	69fb      	ldr	r3, [r7, #28]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	da01      	bge.n	8011e9c <f_mount+0x28>
 8011e98:	230b      	movs	r3, #11
 8011e9a:	e048      	b.n	8011f2e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011e9c:	4a26      	ldr	r2, [pc, #152]	@ (8011f38 <f_mount+0xc4>)
 8011e9e:	69fb      	ldr	r3, [r7, #28]
 8011ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ea4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011ea6:	69bb      	ldr	r3, [r7, #24]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d00f      	beq.n	8011ecc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011eac:	69b8      	ldr	r0, [r7, #24]
 8011eae:	f7fe fc13 	bl	80106d8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8011eb2:	69bb      	ldr	r3, [r7, #24]
 8011eb4:	68db      	ldr	r3, [r3, #12]
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f001 f823 	bl	8012f02 <ff_del_syncobj>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d101      	bne.n	8011ec6 <f_mount+0x52>
 8011ec2:	2302      	movs	r3, #2
 8011ec4:	e033      	b.n	8011f2e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011ec6:	69bb      	ldr	r3, [r7, #24]
 8011ec8:	2200      	movs	r2, #0
 8011eca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d00f      	beq.n	8011ef2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8011ed8:	69fb      	ldr	r3, [r7, #28]
 8011eda:	b2da      	uxtb	r2, r3
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	330c      	adds	r3, #12
 8011ee0:	4619      	mov	r1, r3
 8011ee2:	4610      	mov	r0, r2
 8011ee4:	f000 ffed 	bl	8012ec2 <ff_cre_syncobj>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d101      	bne.n	8011ef2 <f_mount+0x7e>
 8011eee:	2302      	movs	r3, #2
 8011ef0:	e01d      	b.n	8011f2e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011ef2:	68fa      	ldr	r2, [r7, #12]
 8011ef4:	4910      	ldr	r1, [pc, #64]	@ (8011f38 <f_mount+0xc4>)
 8011ef6:	69fb      	ldr	r3, [r7, #28]
 8011ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d002      	beq.n	8011f08 <f_mount+0x94>
 8011f02:	79fb      	ldrb	r3, [r7, #7]
 8011f04:	2b01      	cmp	r3, #1
 8011f06:	d001      	beq.n	8011f0c <f_mount+0x98>
 8011f08:	2300      	movs	r3, #0
 8011f0a:	e010      	b.n	8011f2e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011f0c:	f107 010c 	add.w	r1, r7, #12
 8011f10:	f107 0308 	add.w	r3, r7, #8
 8011f14:	2200      	movs	r2, #0
 8011f16:	4618      	mov	r0, r3
 8011f18:	f7ff fd10 	bl	801193c <find_volume>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	7dfa      	ldrb	r2, [r7, #23]
 8011f24:	4611      	mov	r1, r2
 8011f26:	4618      	mov	r0, r3
 8011f28:	f7fe fa72 	bl	8010410 <unlock_fs>
 8011f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f2e:	4618      	mov	r0, r3
 8011f30:	3720      	adds	r7, #32
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bd80      	pop	{r7, pc}
 8011f36:	bf00      	nop
 8011f38:	20001868 	.word	0x20001868

08011f3c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b09a      	sub	sp, #104	@ 0x68
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	60f8      	str	r0, [r7, #12]
 8011f44:	60b9      	str	r1, [r7, #8]
 8011f46:	4613      	mov	r3, r2
 8011f48:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d101      	bne.n	8011f54 <f_open+0x18>
 8011f50:	2309      	movs	r3, #9
 8011f52:	e1b0      	b.n	80122b6 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011f54:	79fb      	ldrb	r3, [r7, #7]
 8011f56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011f5a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011f5c:	79fa      	ldrb	r2, [r7, #7]
 8011f5e:	f107 0114 	add.w	r1, r7, #20
 8011f62:	f107 0308 	add.w	r3, r7, #8
 8011f66:	4618      	mov	r0, r3
 8011f68:	f7ff fce8 	bl	801193c <find_volume>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8011f72:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	f040 818d 	bne.w	8012296 <f_open+0x35a>
		dj.obj.fs = fs;
 8011f7c:	697b      	ldr	r3, [r7, #20]
 8011f7e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011f80:	68ba      	ldr	r2, [r7, #8]
 8011f82:	f107 0318 	add.w	r3, r7, #24
 8011f86:	4611      	mov	r1, r2
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f7ff fbcb 	bl	8011724 <follow_path>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011f94:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d118      	bne.n	8011fce <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011f9c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011fa0:	b25b      	sxtb	r3, r3
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	da03      	bge.n	8011fae <f_open+0x72>
				res = FR_INVALID_NAME;
 8011fa6:	2306      	movs	r3, #6
 8011fa8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011fac:	e00f      	b.n	8011fce <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011fae:	79fb      	ldrb	r3, [r7, #7]
 8011fb0:	2b01      	cmp	r3, #1
 8011fb2:	bf8c      	ite	hi
 8011fb4:	2301      	movhi	r3, #1
 8011fb6:	2300      	movls	r3, #0
 8011fb8:	b2db      	uxtb	r3, r3
 8011fba:	461a      	mov	r2, r3
 8011fbc:	f107 0318 	add.w	r3, r7, #24
 8011fc0:	4611      	mov	r1, r2
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	f7fe fa40 	bl	8010448 <chk_lock>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011fce:	79fb      	ldrb	r3, [r7, #7]
 8011fd0:	f003 031c 	and.w	r3, r3, #28
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d07f      	beq.n	80120d8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8011fd8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d017      	beq.n	8012010 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011fe0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011fe4:	2b04      	cmp	r3, #4
 8011fe6:	d10e      	bne.n	8012006 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011fe8:	f7fe fa8a 	bl	8010500 <enq_lock>
 8011fec:	4603      	mov	r3, r0
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d006      	beq.n	8012000 <f_open+0xc4>
 8011ff2:	f107 0318 	add.w	r3, r7, #24
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f7ff f9cb 	bl	8011392 <dir_register>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	e000      	b.n	8012002 <f_open+0xc6>
 8012000:	2312      	movs	r3, #18
 8012002:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012006:	79fb      	ldrb	r3, [r7, #7]
 8012008:	f043 0308 	orr.w	r3, r3, #8
 801200c:	71fb      	strb	r3, [r7, #7]
 801200e:	e010      	b.n	8012032 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012010:	7fbb      	ldrb	r3, [r7, #30]
 8012012:	f003 0311 	and.w	r3, r3, #17
 8012016:	2b00      	cmp	r3, #0
 8012018:	d003      	beq.n	8012022 <f_open+0xe6>
					res = FR_DENIED;
 801201a:	2307      	movs	r3, #7
 801201c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8012020:	e007      	b.n	8012032 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012022:	79fb      	ldrb	r3, [r7, #7]
 8012024:	f003 0304 	and.w	r3, r3, #4
 8012028:	2b00      	cmp	r3, #0
 801202a:	d002      	beq.n	8012032 <f_open+0xf6>
 801202c:	2308      	movs	r3, #8
 801202e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012032:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012036:	2b00      	cmp	r3, #0
 8012038:	d168      	bne.n	801210c <f_open+0x1d0>
 801203a:	79fb      	ldrb	r3, [r7, #7]
 801203c:	f003 0308 	and.w	r3, r3, #8
 8012040:	2b00      	cmp	r3, #0
 8012042:	d063      	beq.n	801210c <f_open+0x1d0>
				dw = GET_FATTIME();
 8012044:	f7fd fdce 	bl	800fbe4 <get_fattime>
 8012048:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801204a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801204c:	330e      	adds	r3, #14
 801204e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012050:	4618      	mov	r0, r3
 8012052:	f7fe f91d 	bl	8010290 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012058:	3316      	adds	r3, #22
 801205a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801205c:	4618      	mov	r0, r3
 801205e:	f7fe f917 	bl	8010290 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012064:	330b      	adds	r3, #11
 8012066:	2220      	movs	r2, #32
 8012068:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801206a:	697b      	ldr	r3, [r7, #20]
 801206c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801206e:	4611      	mov	r1, r2
 8012070:	4618      	mov	r0, r3
 8012072:	f7ff f89d 	bl	80111b0 <ld_clust>
 8012076:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012078:	697b      	ldr	r3, [r7, #20]
 801207a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801207c:	2200      	movs	r2, #0
 801207e:	4618      	mov	r0, r3
 8012080:	f7ff f8b5 	bl	80111ee <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012086:	331c      	adds	r3, #28
 8012088:	2100      	movs	r1, #0
 801208a:	4618      	mov	r0, r3
 801208c:	f7fe f900 	bl	8010290 <st_dword>
					fs->wflag = 1;
 8012090:	697b      	ldr	r3, [r7, #20]
 8012092:	2201      	movs	r2, #1
 8012094:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012098:	2b00      	cmp	r3, #0
 801209a:	d037      	beq.n	801210c <f_open+0x1d0>
						dw = fs->winsect;
 801209c:	697b      	ldr	r3, [r7, #20]
 801209e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120a0:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80120a2:	f107 0318 	add.w	r3, r7, #24
 80120a6:	2200      	movs	r2, #0
 80120a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80120aa:	4618      	mov	r0, r3
 80120ac:	f7fe fdc8 	bl	8010c40 <remove_chain>
 80120b0:	4603      	mov	r3, r0
 80120b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80120b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d126      	bne.n	801210c <f_open+0x1d0>
							res = move_window(fs, dw);
 80120be:	697b      	ldr	r3, [r7, #20]
 80120c0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80120c2:	4618      	mov	r0, r3
 80120c4:	f7fe fb70 	bl	80107a8 <move_window>
 80120c8:	4603      	mov	r3, r0
 80120ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80120ce:	697b      	ldr	r3, [r7, #20]
 80120d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80120d2:	3a01      	subs	r2, #1
 80120d4:	611a      	str	r2, [r3, #16]
 80120d6:	e019      	b.n	801210c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80120d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d115      	bne.n	801210c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80120e0:	7fbb      	ldrb	r3, [r7, #30]
 80120e2:	f003 0310 	and.w	r3, r3, #16
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d003      	beq.n	80120f2 <f_open+0x1b6>
					res = FR_NO_FILE;
 80120ea:	2304      	movs	r3, #4
 80120ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80120f0:	e00c      	b.n	801210c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80120f2:	79fb      	ldrb	r3, [r7, #7]
 80120f4:	f003 0302 	and.w	r3, r3, #2
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d007      	beq.n	801210c <f_open+0x1d0>
 80120fc:	7fbb      	ldrb	r3, [r7, #30]
 80120fe:	f003 0301 	and.w	r3, r3, #1
 8012102:	2b00      	cmp	r3, #0
 8012104:	d002      	beq.n	801210c <f_open+0x1d0>
						res = FR_DENIED;
 8012106:	2307      	movs	r3, #7
 8012108:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801210c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012110:	2b00      	cmp	r3, #0
 8012112:	d126      	bne.n	8012162 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012114:	79fb      	ldrb	r3, [r7, #7]
 8012116:	f003 0308 	and.w	r3, r3, #8
 801211a:	2b00      	cmp	r3, #0
 801211c:	d003      	beq.n	8012126 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801211e:	79fb      	ldrb	r3, [r7, #7]
 8012120:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012124:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801212e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012134:	79fb      	ldrb	r3, [r7, #7]
 8012136:	2b01      	cmp	r3, #1
 8012138:	bf8c      	ite	hi
 801213a:	2301      	movhi	r3, #1
 801213c:	2300      	movls	r3, #0
 801213e:	b2db      	uxtb	r3, r3
 8012140:	461a      	mov	r2, r3
 8012142:	f107 0318 	add.w	r3, r7, #24
 8012146:	4611      	mov	r1, r2
 8012148:	4618      	mov	r0, r3
 801214a:	f7fe f9fb 	bl	8010544 <inc_lock>
 801214e:	4602      	mov	r2, r0
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	691b      	ldr	r3, [r3, #16]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d102      	bne.n	8012162 <f_open+0x226>
 801215c:	2302      	movs	r3, #2
 801215e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012162:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012166:	2b00      	cmp	r3, #0
 8012168:	f040 8095 	bne.w	8012296 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801216c:	697b      	ldr	r3, [r7, #20]
 801216e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012170:	4611      	mov	r1, r2
 8012172:	4618      	mov	r0, r3
 8012174:	f7ff f81c 	bl	80111b0 <ld_clust>
 8012178:	4602      	mov	r2, r0
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801217e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012180:	331c      	adds	r3, #28
 8012182:	4618      	mov	r0, r3
 8012184:	f7fe f846 	bl	8010214 <ld_dword>
 8012188:	4602      	mov	r2, r0
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	2200      	movs	r2, #0
 8012192:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012194:	697a      	ldr	r2, [r7, #20]
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801219a:	697b      	ldr	r3, [r7, #20]
 801219c:	88da      	ldrh	r2, [r3, #6]
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	79fa      	ldrb	r2, [r7, #7]
 80121a6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	2200      	movs	r2, #0
 80121ac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	2200      	movs	r2, #0
 80121b2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	2200      	movs	r2, #0
 80121b8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	3330      	adds	r3, #48	@ 0x30
 80121be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80121c2:	2100      	movs	r1, #0
 80121c4:	4618      	mov	r0, r3
 80121c6:	f7fe f8b0 	bl	801032a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80121ca:	79fb      	ldrb	r3, [r7, #7]
 80121cc:	f003 0320 	and.w	r3, r3, #32
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d060      	beq.n	8012296 <f_open+0x35a>
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	68db      	ldr	r3, [r3, #12]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d05c      	beq.n	8012296 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	68da      	ldr	r2, [r3, #12]
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80121e4:	697b      	ldr	r3, [r7, #20]
 80121e6:	895b      	ldrh	r3, [r3, #10]
 80121e8:	025b      	lsls	r3, r3, #9
 80121ea:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	689b      	ldr	r3, [r3, #8]
 80121f0:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	68db      	ldr	r3, [r3, #12]
 80121f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80121f8:	e016      	b.n	8012228 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80121fe:	4618      	mov	r0, r3
 8012200:	f7fe fb8d 	bl	801091e <get_fat>
 8012204:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8012206:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012208:	2b01      	cmp	r3, #1
 801220a:	d802      	bhi.n	8012212 <f_open+0x2d6>
 801220c:	2302      	movs	r3, #2
 801220e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012212:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012214:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012218:	d102      	bne.n	8012220 <f_open+0x2e4>
 801221a:	2301      	movs	r3, #1
 801221c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012220:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012222:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012224:	1ad3      	subs	r3, r2, r3
 8012226:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012228:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801222c:	2b00      	cmp	r3, #0
 801222e:	d103      	bne.n	8012238 <f_open+0x2fc>
 8012230:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012234:	429a      	cmp	r2, r3
 8012236:	d8e0      	bhi.n	80121fa <f_open+0x2be>
				}
				fp->clust = clst;
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801223c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801223e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012242:	2b00      	cmp	r3, #0
 8012244:	d127      	bne.n	8012296 <f_open+0x35a>
 8012246:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801224c:	2b00      	cmp	r3, #0
 801224e:	d022      	beq.n	8012296 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012250:	697b      	ldr	r3, [r7, #20]
 8012252:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012254:	4618      	mov	r0, r3
 8012256:	f7fe fb43 	bl	80108e0 <clust2sect>
 801225a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801225c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801225e:	2b00      	cmp	r3, #0
 8012260:	d103      	bne.n	801226a <f_open+0x32e>
						res = FR_INT_ERR;
 8012262:	2302      	movs	r3, #2
 8012264:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8012268:	e015      	b.n	8012296 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801226a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801226c:	0a5a      	lsrs	r2, r3, #9
 801226e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012270:	441a      	add	r2, r3
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012276:	697b      	ldr	r3, [r7, #20]
 8012278:	7858      	ldrb	r0, [r3, #1]
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	6a1a      	ldr	r2, [r3, #32]
 8012284:	2301      	movs	r3, #1
 8012286:	f7fd ff4f 	bl	8010128 <disk_read>
 801228a:	4603      	mov	r3, r0
 801228c:	2b00      	cmp	r3, #0
 801228e:	d002      	beq.n	8012296 <f_open+0x35a>
 8012290:	2301      	movs	r3, #1
 8012292:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012296:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801229a:	2b00      	cmp	r3, #0
 801229c:	d002      	beq.n	80122a4 <f_open+0x368>
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	2200      	movs	r2, #0
 80122a2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80122a4:	697b      	ldr	r3, [r7, #20]
 80122a6:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80122aa:	4611      	mov	r1, r2
 80122ac:	4618      	mov	r0, r3
 80122ae:	f7fe f8af 	bl	8010410 <unlock_fs>
 80122b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80122b6:	4618      	mov	r0, r3
 80122b8:	3768      	adds	r7, #104	@ 0x68
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}

080122be <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80122be:	b580      	push	{r7, lr}
 80122c0:	b08e      	sub	sp, #56	@ 0x38
 80122c2:	af00      	add	r7, sp, #0
 80122c4:	60f8      	str	r0, [r7, #12]
 80122c6:	60b9      	str	r1, [r7, #8]
 80122c8:	607a      	str	r2, [r7, #4]
 80122ca:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80122cc:	68bb      	ldr	r3, [r7, #8]
 80122ce:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	2200      	movs	r2, #0
 80122d4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	f107 0214 	add.w	r2, r7, #20
 80122dc:	4611      	mov	r1, r2
 80122de:	4618      	mov	r0, r3
 80122e0:	f7ff fd80 	bl	8011de4 <validate>
 80122e4:	4603      	mov	r3, r0
 80122e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80122ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d107      	bne.n	8012302 <f_read+0x44>
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	7d5b      	ldrb	r3, [r3, #21]
 80122f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80122fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d009      	beq.n	8012316 <f_read+0x58>
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8012308:	4611      	mov	r1, r2
 801230a:	4618      	mov	r0, r3
 801230c:	f7fe f880 	bl	8010410 <unlock_fs>
 8012310:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012314:	e13d      	b.n	8012592 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	7d1b      	ldrb	r3, [r3, #20]
 801231a:	f003 0301 	and.w	r3, r3, #1
 801231e:	2b00      	cmp	r3, #0
 8012320:	d106      	bne.n	8012330 <f_read+0x72>
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	2107      	movs	r1, #7
 8012326:	4618      	mov	r0, r3
 8012328:	f7fe f872 	bl	8010410 <unlock_fs>
 801232c:	2307      	movs	r3, #7
 801232e:	e130      	b.n	8012592 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	68da      	ldr	r2, [r3, #12]
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	699b      	ldr	r3, [r3, #24]
 8012338:	1ad3      	subs	r3, r2, r3
 801233a:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801233c:	687a      	ldr	r2, [r7, #4]
 801233e:	6a3b      	ldr	r3, [r7, #32]
 8012340:	429a      	cmp	r2, r3
 8012342:	f240 811c 	bls.w	801257e <f_read+0x2c0>
 8012346:	6a3b      	ldr	r3, [r7, #32]
 8012348:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801234a:	e118      	b.n	801257e <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	699b      	ldr	r3, [r3, #24]
 8012350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012354:	2b00      	cmp	r3, #0
 8012356:	f040 80e4 	bne.w	8012522 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	699b      	ldr	r3, [r3, #24]
 801235e:	0a5b      	lsrs	r3, r3, #9
 8012360:	697a      	ldr	r2, [r7, #20]
 8012362:	8952      	ldrh	r2, [r2, #10]
 8012364:	3a01      	subs	r2, #1
 8012366:	4013      	ands	r3, r2
 8012368:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801236a:	69fb      	ldr	r3, [r7, #28]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d139      	bne.n	80123e4 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	699b      	ldr	r3, [r3, #24]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d103      	bne.n	8012380 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	689b      	ldr	r3, [r3, #8]
 801237c:	633b      	str	r3, [r7, #48]	@ 0x30
 801237e:	e013      	b.n	80123a8 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012384:	2b00      	cmp	r3, #0
 8012386:	d007      	beq.n	8012398 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	699b      	ldr	r3, [r3, #24]
 801238c:	4619      	mov	r1, r3
 801238e:	68f8      	ldr	r0, [r7, #12]
 8012390:	f7fe fd53 	bl	8010e3a <clmt_clust>
 8012394:	6338      	str	r0, [r7, #48]	@ 0x30
 8012396:	e007      	b.n	80123a8 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012398:	68fa      	ldr	r2, [r7, #12]
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	69db      	ldr	r3, [r3, #28]
 801239e:	4619      	mov	r1, r3
 80123a0:	4610      	mov	r0, r2
 80123a2:	f7fe fabc 	bl	801091e <get_fat>
 80123a6:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80123a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123aa:	2b01      	cmp	r3, #1
 80123ac:	d809      	bhi.n	80123c2 <f_read+0x104>
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	2202      	movs	r2, #2
 80123b2:	755a      	strb	r2, [r3, #21]
 80123b4:	697b      	ldr	r3, [r7, #20]
 80123b6:	2102      	movs	r1, #2
 80123b8:	4618      	mov	r0, r3
 80123ba:	f7fe f829 	bl	8010410 <unlock_fs>
 80123be:	2302      	movs	r3, #2
 80123c0:	e0e7      	b.n	8012592 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80123c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80123c8:	d109      	bne.n	80123de <f_read+0x120>
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	2201      	movs	r2, #1
 80123ce:	755a      	strb	r2, [r3, #21]
 80123d0:	697b      	ldr	r3, [r7, #20]
 80123d2:	2101      	movs	r1, #1
 80123d4:	4618      	mov	r0, r3
 80123d6:	f7fe f81b 	bl	8010410 <unlock_fs>
 80123da:	2301      	movs	r3, #1
 80123dc:	e0d9      	b.n	8012592 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80123e2:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80123e4:	697a      	ldr	r2, [r7, #20]
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	69db      	ldr	r3, [r3, #28]
 80123ea:	4619      	mov	r1, r3
 80123ec:	4610      	mov	r0, r2
 80123ee:	f7fe fa77 	bl	80108e0 <clust2sect>
 80123f2:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80123f4:	69bb      	ldr	r3, [r7, #24]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d109      	bne.n	801240e <f_read+0x150>
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	2202      	movs	r2, #2
 80123fe:	755a      	strb	r2, [r3, #21]
 8012400:	697b      	ldr	r3, [r7, #20]
 8012402:	2102      	movs	r1, #2
 8012404:	4618      	mov	r0, r3
 8012406:	f7fe f803 	bl	8010410 <unlock_fs>
 801240a:	2302      	movs	r3, #2
 801240c:	e0c1      	b.n	8012592 <f_read+0x2d4>
			sect += csect;
 801240e:	69ba      	ldr	r2, [r7, #24]
 8012410:	69fb      	ldr	r3, [r7, #28]
 8012412:	4413      	add	r3, r2
 8012414:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	0a5b      	lsrs	r3, r3, #9
 801241a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801241c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801241e:	2b00      	cmp	r3, #0
 8012420:	d03e      	beq.n	80124a0 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012422:	69fa      	ldr	r2, [r7, #28]
 8012424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012426:	4413      	add	r3, r2
 8012428:	697a      	ldr	r2, [r7, #20]
 801242a:	8952      	ldrh	r2, [r2, #10]
 801242c:	4293      	cmp	r3, r2
 801242e:	d905      	bls.n	801243c <f_read+0x17e>
					cc = fs->csize - csect;
 8012430:	697b      	ldr	r3, [r7, #20]
 8012432:	895b      	ldrh	r3, [r3, #10]
 8012434:	461a      	mov	r2, r3
 8012436:	69fb      	ldr	r3, [r7, #28]
 8012438:	1ad3      	subs	r3, r2, r3
 801243a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801243c:	697b      	ldr	r3, [r7, #20]
 801243e:	7858      	ldrb	r0, [r3, #1]
 8012440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012442:	69ba      	ldr	r2, [r7, #24]
 8012444:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012446:	f7fd fe6f 	bl	8010128 <disk_read>
 801244a:	4603      	mov	r3, r0
 801244c:	2b00      	cmp	r3, #0
 801244e:	d009      	beq.n	8012464 <f_read+0x1a6>
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	2201      	movs	r2, #1
 8012454:	755a      	strb	r2, [r3, #21]
 8012456:	697b      	ldr	r3, [r7, #20]
 8012458:	2101      	movs	r1, #1
 801245a:	4618      	mov	r0, r3
 801245c:	f7fd ffd8 	bl	8010410 <unlock_fs>
 8012460:	2301      	movs	r3, #1
 8012462:	e096      	b.n	8012592 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	7d1b      	ldrb	r3, [r3, #20]
 8012468:	b25b      	sxtb	r3, r3
 801246a:	2b00      	cmp	r3, #0
 801246c:	da14      	bge.n	8012498 <f_read+0x1da>
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	6a1a      	ldr	r2, [r3, #32]
 8012472:	69bb      	ldr	r3, [r7, #24]
 8012474:	1ad3      	subs	r3, r2, r3
 8012476:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012478:	429a      	cmp	r2, r3
 801247a:	d90d      	bls.n	8012498 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	6a1a      	ldr	r2, [r3, #32]
 8012480:	69bb      	ldr	r3, [r7, #24]
 8012482:	1ad3      	subs	r3, r2, r3
 8012484:	025b      	lsls	r3, r3, #9
 8012486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012488:	18d0      	adds	r0, r2, r3
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	3330      	adds	r3, #48	@ 0x30
 801248e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012492:	4619      	mov	r1, r3
 8012494:	f7fd ff28 	bl	80102e8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8012498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801249a:	025b      	lsls	r3, r3, #9
 801249c:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 801249e:	e05a      	b.n	8012556 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	6a1b      	ldr	r3, [r3, #32]
 80124a4:	69ba      	ldr	r2, [r7, #24]
 80124a6:	429a      	cmp	r2, r3
 80124a8:	d038      	beq.n	801251c <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	7d1b      	ldrb	r3, [r3, #20]
 80124ae:	b25b      	sxtb	r3, r3
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	da1d      	bge.n	80124f0 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80124b4:	697b      	ldr	r3, [r7, #20]
 80124b6:	7858      	ldrb	r0, [r3, #1]
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	6a1a      	ldr	r2, [r3, #32]
 80124c2:	2301      	movs	r3, #1
 80124c4:	f7fd fe50 	bl	8010168 <disk_write>
 80124c8:	4603      	mov	r3, r0
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d009      	beq.n	80124e2 <f_read+0x224>
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	2201      	movs	r2, #1
 80124d2:	755a      	strb	r2, [r3, #21]
 80124d4:	697b      	ldr	r3, [r7, #20]
 80124d6:	2101      	movs	r1, #1
 80124d8:	4618      	mov	r0, r3
 80124da:	f7fd ff99 	bl	8010410 <unlock_fs>
 80124de:	2301      	movs	r3, #1
 80124e0:	e057      	b.n	8012592 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	7d1b      	ldrb	r3, [r3, #20]
 80124e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80124ea:	b2da      	uxtb	r2, r3
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80124f0:	697b      	ldr	r3, [r7, #20]
 80124f2:	7858      	ldrb	r0, [r3, #1]
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80124fa:	2301      	movs	r3, #1
 80124fc:	69ba      	ldr	r2, [r7, #24]
 80124fe:	f7fd fe13 	bl	8010128 <disk_read>
 8012502:	4603      	mov	r3, r0
 8012504:	2b00      	cmp	r3, #0
 8012506:	d009      	beq.n	801251c <f_read+0x25e>
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	2201      	movs	r2, #1
 801250c:	755a      	strb	r2, [r3, #21]
 801250e:	697b      	ldr	r3, [r7, #20]
 8012510:	2101      	movs	r1, #1
 8012512:	4618      	mov	r0, r3
 8012514:	f7fd ff7c 	bl	8010410 <unlock_fs>
 8012518:	2301      	movs	r3, #1
 801251a:	e03a      	b.n	8012592 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	69ba      	ldr	r2, [r7, #24]
 8012520:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	699b      	ldr	r3, [r3, #24]
 8012526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801252a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801252e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8012530:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	429a      	cmp	r2, r3
 8012536:	d901      	bls.n	801253c <f_read+0x27e>
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	699b      	ldr	r3, [r3, #24]
 8012546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801254a:	4413      	add	r3, r2
 801254c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801254e:	4619      	mov	r1, r3
 8012550:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012552:	f7fd fec9 	bl	80102e8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8012556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801255a:	4413      	add	r3, r2
 801255c:	627b      	str	r3, [r7, #36]	@ 0x24
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	699a      	ldr	r2, [r3, #24]
 8012562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012564:	441a      	add	r2, r3
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	619a      	str	r2, [r3, #24]
 801256a:	683b      	ldr	r3, [r7, #0]
 801256c:	681a      	ldr	r2, [r3, #0]
 801256e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012570:	441a      	add	r2, r3
 8012572:	683b      	ldr	r3, [r7, #0]
 8012574:	601a      	str	r2, [r3, #0]
 8012576:	687a      	ldr	r2, [r7, #4]
 8012578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801257a:	1ad3      	subs	r3, r2, r3
 801257c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	2b00      	cmp	r3, #0
 8012582:	f47f aee3 	bne.w	801234c <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8012586:	697b      	ldr	r3, [r7, #20]
 8012588:	2100      	movs	r1, #0
 801258a:	4618      	mov	r0, r3
 801258c:	f7fd ff40 	bl	8010410 <unlock_fs>
 8012590:	2300      	movs	r3, #0
}
 8012592:	4618      	mov	r0, r3
 8012594:	3738      	adds	r7, #56	@ 0x38
 8012596:	46bd      	mov	sp, r7
 8012598:	bd80      	pop	{r7, pc}

0801259a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801259a:	b580      	push	{r7, lr}
 801259c:	b086      	sub	sp, #24
 801259e:	af00      	add	r7, sp, #0
 80125a0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	f107 0208 	add.w	r2, r7, #8
 80125a8:	4611      	mov	r1, r2
 80125aa:	4618      	mov	r0, r3
 80125ac:	f7ff fc1a 	bl	8011de4 <validate>
 80125b0:	4603      	mov	r3, r0
 80125b2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80125b4:	7dfb      	ldrb	r3, [r7, #23]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d16d      	bne.n	8012696 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	7d1b      	ldrb	r3, [r3, #20]
 80125be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d067      	beq.n	8012696 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	7d1b      	ldrb	r3, [r3, #20]
 80125ca:	b25b      	sxtb	r3, r3
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	da1a      	bge.n	8012606 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	7858      	ldrb	r0, [r3, #1]
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	6a1a      	ldr	r2, [r3, #32]
 80125de:	2301      	movs	r3, #1
 80125e0:	f7fd fdc2 	bl	8010168 <disk_write>
 80125e4:	4603      	mov	r3, r0
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d006      	beq.n	80125f8 <f_sync+0x5e>
 80125ea:	68bb      	ldr	r3, [r7, #8]
 80125ec:	2101      	movs	r1, #1
 80125ee:	4618      	mov	r0, r3
 80125f0:	f7fd ff0e 	bl	8010410 <unlock_fs>
 80125f4:	2301      	movs	r3, #1
 80125f6:	e055      	b.n	80126a4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	7d1b      	ldrb	r3, [r3, #20]
 80125fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012600:	b2da      	uxtb	r2, r3
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012606:	f7fd faed 	bl	800fbe4 <get_fattime>
 801260a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801260c:	68ba      	ldr	r2, [r7, #8]
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012612:	4619      	mov	r1, r3
 8012614:	4610      	mov	r0, r2
 8012616:	f7fe f8c7 	bl	80107a8 <move_window>
 801261a:	4603      	mov	r3, r0
 801261c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801261e:	7dfb      	ldrb	r3, [r7, #23]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d138      	bne.n	8012696 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012628:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	330b      	adds	r3, #11
 801262e:	781a      	ldrb	r2, [r3, #0]
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	330b      	adds	r3, #11
 8012634:	f042 0220 	orr.w	r2, r2, #32
 8012638:	b2d2      	uxtb	r2, r2
 801263a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	6818      	ldr	r0, [r3, #0]
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	689b      	ldr	r3, [r3, #8]
 8012644:	461a      	mov	r2, r3
 8012646:	68f9      	ldr	r1, [r7, #12]
 8012648:	f7fe fdd1 	bl	80111ee <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	f103 021c 	add.w	r2, r3, #28
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	68db      	ldr	r3, [r3, #12]
 8012656:	4619      	mov	r1, r3
 8012658:	4610      	mov	r0, r2
 801265a:	f7fd fe19 	bl	8010290 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	3316      	adds	r3, #22
 8012662:	6939      	ldr	r1, [r7, #16]
 8012664:	4618      	mov	r0, r3
 8012666:	f7fd fe13 	bl	8010290 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	3312      	adds	r3, #18
 801266e:	2100      	movs	r1, #0
 8012670:	4618      	mov	r0, r3
 8012672:	f7fd fdf2 	bl	801025a <st_word>
					fs->wflag = 1;
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	2201      	movs	r2, #1
 801267a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	4618      	mov	r0, r3
 8012680:	f7fe f8c0 	bl	8010804 <sync_fs>
 8012684:	4603      	mov	r3, r0
 8012686:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	7d1b      	ldrb	r3, [r3, #20]
 801268c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012690:	b2da      	uxtb	r2, r3
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	7dfa      	ldrb	r2, [r7, #23]
 801269a:	4611      	mov	r1, r2
 801269c:	4618      	mov	r0, r3
 801269e:	f7fd feb7 	bl	8010410 <unlock_fs>
 80126a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80126a4:	4618      	mov	r0, r3
 80126a6:	3718      	adds	r7, #24
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}

080126ac <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b084      	sub	sp, #16
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80126b4:	6878      	ldr	r0, [r7, #4]
 80126b6:	f7ff ff70 	bl	801259a <f_sync>
 80126ba:	4603      	mov	r3, r0
 80126bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80126be:	7bfb      	ldrb	r3, [r7, #15]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d11d      	bne.n	8012700 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	f107 0208 	add.w	r2, r7, #8
 80126ca:	4611      	mov	r1, r2
 80126cc:	4618      	mov	r0, r3
 80126ce:	f7ff fb89 	bl	8011de4 <validate>
 80126d2:	4603      	mov	r3, r0
 80126d4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80126d6:	7bfb      	ldrb	r3, [r7, #15]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d111      	bne.n	8012700 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	691b      	ldr	r3, [r3, #16]
 80126e0:	4618      	mov	r0, r3
 80126e2:	f7fd ffbd 	bl	8010660 <dec_lock>
 80126e6:	4603      	mov	r3, r0
 80126e8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80126ea:	7bfb      	ldrb	r3, [r7, #15]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d102      	bne.n	80126f6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	2200      	movs	r2, #0
 80126f4:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80126f6:	68bb      	ldr	r3, [r7, #8]
 80126f8:	2100      	movs	r1, #0
 80126fa:	4618      	mov	r0, r3
 80126fc:	f7fd fe88 	bl	8010410 <unlock_fs>
#endif
		}
	}
	return res;
 8012700:	7bfb      	ldrb	r3, [r7, #15]
}
 8012702:	4618      	mov	r0, r3
 8012704:	3710      	adds	r7, #16
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}

0801270a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801270a:	b580      	push	{r7, lr}
 801270c:	b090      	sub	sp, #64	@ 0x40
 801270e:	af00      	add	r7, sp, #0
 8012710:	6078      	str	r0, [r7, #4]
 8012712:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	f107 0208 	add.w	r2, r7, #8
 801271a:	4611      	mov	r1, r2
 801271c:	4618      	mov	r0, r3
 801271e:	f7ff fb61 	bl	8011de4 <validate>
 8012722:	4603      	mov	r3, r0
 8012724:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8012728:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801272c:	2b00      	cmp	r3, #0
 801272e:	d103      	bne.n	8012738 <f_lseek+0x2e>
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	7d5b      	ldrb	r3, [r3, #21]
 8012734:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8012738:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801273c:	2b00      	cmp	r3, #0
 801273e:	d009      	beq.n	8012754 <f_lseek+0x4a>
 8012740:	68bb      	ldr	r3, [r7, #8]
 8012742:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8012746:	4611      	mov	r1, r2
 8012748:	4618      	mov	r0, r3
 801274a:	f7fd fe61 	bl	8010410 <unlock_fs>
 801274e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012752:	e229      	b.n	8012ba8 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012758:	2b00      	cmp	r3, #0
 801275a:	f000 80ea 	beq.w	8012932 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801275e:	683b      	ldr	r3, [r7, #0]
 8012760:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012764:	d164      	bne.n	8012830 <f_lseek+0x126>
			tbl = fp->cltbl;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801276a:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801276c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801276e:	1d1a      	adds	r2, r3, #4
 8012770:	627a      	str	r2, [r7, #36]	@ 0x24
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	617b      	str	r3, [r7, #20]
 8012776:	2302      	movs	r3, #2
 8012778:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	689b      	ldr	r3, [r3, #8]
 801277e:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8012780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012782:	2b00      	cmp	r3, #0
 8012784:	d044      	beq.n	8012810 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8012786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012788:	613b      	str	r3, [r7, #16]
 801278a:	2300      	movs	r3, #0
 801278c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801278e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012790:	3302      	adds	r3, #2
 8012792:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8012794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012796:	60fb      	str	r3, [r7, #12]
 8012798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801279a:	3301      	adds	r3, #1
 801279c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80127a2:	4618      	mov	r0, r3
 80127a4:	f7fe f8bb 	bl	801091e <get_fat>
 80127a8:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80127aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127ac:	2b01      	cmp	r3, #1
 80127ae:	d809      	bhi.n	80127c4 <f_lseek+0xba>
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	2202      	movs	r2, #2
 80127b4:	755a      	strb	r2, [r3, #21]
 80127b6:	68bb      	ldr	r3, [r7, #8]
 80127b8:	2102      	movs	r1, #2
 80127ba:	4618      	mov	r0, r3
 80127bc:	f7fd fe28 	bl	8010410 <unlock_fs>
 80127c0:	2302      	movs	r3, #2
 80127c2:	e1f1      	b.n	8012ba8 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80127c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80127ca:	d109      	bne.n	80127e0 <f_lseek+0xd6>
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2201      	movs	r2, #1
 80127d0:	755a      	strb	r2, [r3, #21]
 80127d2:	68bb      	ldr	r3, [r7, #8]
 80127d4:	2101      	movs	r1, #1
 80127d6:	4618      	mov	r0, r3
 80127d8:	f7fd fe1a 	bl	8010410 <unlock_fs>
 80127dc:	2301      	movs	r3, #1
 80127de:	e1e3      	b.n	8012ba8 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	3301      	adds	r3, #1
 80127e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80127e6:	429a      	cmp	r2, r3
 80127e8:	d0d4      	beq.n	8012794 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80127ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80127ec:	697b      	ldr	r3, [r7, #20]
 80127ee:	429a      	cmp	r2, r3
 80127f0:	d809      	bhi.n	8012806 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80127f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127f4:	1d1a      	adds	r2, r3, #4
 80127f6:	627a      	str	r2, [r7, #36]	@ 0x24
 80127f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80127fa:	601a      	str	r2, [r3, #0]
 80127fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127fe:	1d1a      	adds	r2, r3, #4
 8012800:	627a      	str	r2, [r7, #36]	@ 0x24
 8012802:	693a      	ldr	r2, [r7, #16]
 8012804:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8012806:	68bb      	ldr	r3, [r7, #8]
 8012808:	699b      	ldr	r3, [r3, #24]
 801280a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801280c:	429a      	cmp	r2, r3
 801280e:	d3ba      	bcc.n	8012786 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012814:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012816:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8012818:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801281a:	697b      	ldr	r3, [r7, #20]
 801281c:	429a      	cmp	r2, r3
 801281e:	d803      	bhi.n	8012828 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8012820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012822:	2200      	movs	r2, #0
 8012824:	601a      	str	r2, [r3, #0]
 8012826:	e1b6      	b.n	8012b96 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8012828:	2311      	movs	r3, #17
 801282a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801282e:	e1b2      	b.n	8012b96 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	68db      	ldr	r3, [r3, #12]
 8012834:	683a      	ldr	r2, [r7, #0]
 8012836:	429a      	cmp	r2, r3
 8012838:	d902      	bls.n	8012840 <f_lseek+0x136>
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	68db      	ldr	r3, [r3, #12]
 801283e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	683a      	ldr	r2, [r7, #0]
 8012844:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8012846:	683b      	ldr	r3, [r7, #0]
 8012848:	2b00      	cmp	r3, #0
 801284a:	f000 81a4 	beq.w	8012b96 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801284e:	683b      	ldr	r3, [r7, #0]
 8012850:	3b01      	subs	r3, #1
 8012852:	4619      	mov	r1, r3
 8012854:	6878      	ldr	r0, [r7, #4]
 8012856:	f7fe faf0 	bl	8010e3a <clmt_clust>
 801285a:	4602      	mov	r2, r0
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8012860:	68ba      	ldr	r2, [r7, #8]
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	69db      	ldr	r3, [r3, #28]
 8012866:	4619      	mov	r1, r3
 8012868:	4610      	mov	r0, r2
 801286a:	f7fe f839 	bl	80108e0 <clust2sect>
 801286e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8012870:	69bb      	ldr	r3, [r7, #24]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d109      	bne.n	801288a <f_lseek+0x180>
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	2202      	movs	r2, #2
 801287a:	755a      	strb	r2, [r3, #21]
 801287c:	68bb      	ldr	r3, [r7, #8]
 801287e:	2102      	movs	r1, #2
 8012880:	4618      	mov	r0, r3
 8012882:	f7fd fdc5 	bl	8010410 <unlock_fs>
 8012886:	2302      	movs	r3, #2
 8012888:	e18e      	b.n	8012ba8 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801288a:	683b      	ldr	r3, [r7, #0]
 801288c:	3b01      	subs	r3, #1
 801288e:	0a5b      	lsrs	r3, r3, #9
 8012890:	68ba      	ldr	r2, [r7, #8]
 8012892:	8952      	ldrh	r2, [r2, #10]
 8012894:	3a01      	subs	r2, #1
 8012896:	4013      	ands	r3, r2
 8012898:	69ba      	ldr	r2, [r7, #24]
 801289a:	4413      	add	r3, r2
 801289c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	699b      	ldr	r3, [r3, #24]
 80128a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	f000 8175 	beq.w	8012b96 <f_lseek+0x48c>
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	6a1b      	ldr	r3, [r3, #32]
 80128b0:	69ba      	ldr	r2, [r7, #24]
 80128b2:	429a      	cmp	r2, r3
 80128b4:	f000 816f 	beq.w	8012b96 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	7d1b      	ldrb	r3, [r3, #20]
 80128bc:	b25b      	sxtb	r3, r3
 80128be:	2b00      	cmp	r3, #0
 80128c0:	da1d      	bge.n	80128fe <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	7858      	ldrb	r0, [r3, #1]
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	6a1a      	ldr	r2, [r3, #32]
 80128d0:	2301      	movs	r3, #1
 80128d2:	f7fd fc49 	bl	8010168 <disk_write>
 80128d6:	4603      	mov	r3, r0
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d009      	beq.n	80128f0 <f_lseek+0x1e6>
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	2201      	movs	r2, #1
 80128e0:	755a      	strb	r2, [r3, #21]
 80128e2:	68bb      	ldr	r3, [r7, #8]
 80128e4:	2101      	movs	r1, #1
 80128e6:	4618      	mov	r0, r3
 80128e8:	f7fd fd92 	bl	8010410 <unlock_fs>
 80128ec:	2301      	movs	r3, #1
 80128ee:	e15b      	b.n	8012ba8 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	7d1b      	ldrb	r3, [r3, #20]
 80128f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80128f8:	b2da      	uxtb	r2, r3
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	7858      	ldrb	r0, [r3, #1]
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012908:	2301      	movs	r3, #1
 801290a:	69ba      	ldr	r2, [r7, #24]
 801290c:	f7fd fc0c 	bl	8010128 <disk_read>
 8012910:	4603      	mov	r3, r0
 8012912:	2b00      	cmp	r3, #0
 8012914:	d009      	beq.n	801292a <f_lseek+0x220>
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	2201      	movs	r2, #1
 801291a:	755a      	strb	r2, [r3, #21]
 801291c:	68bb      	ldr	r3, [r7, #8]
 801291e:	2101      	movs	r1, #1
 8012920:	4618      	mov	r0, r3
 8012922:	f7fd fd75 	bl	8010410 <unlock_fs>
 8012926:	2301      	movs	r3, #1
 8012928:	e13e      	b.n	8012ba8 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	69ba      	ldr	r2, [r7, #24]
 801292e:	621a      	str	r2, [r3, #32]
 8012930:	e131      	b.n	8012b96 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	68db      	ldr	r3, [r3, #12]
 8012936:	683a      	ldr	r2, [r7, #0]
 8012938:	429a      	cmp	r2, r3
 801293a:	d908      	bls.n	801294e <f_lseek+0x244>
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	7d1b      	ldrb	r3, [r3, #20]
 8012940:	f003 0302 	and.w	r3, r3, #2
 8012944:	2b00      	cmp	r3, #0
 8012946:	d102      	bne.n	801294e <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	68db      	ldr	r3, [r3, #12]
 801294c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	699b      	ldr	r3, [r3, #24]
 8012952:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8012954:	2300      	movs	r3, #0
 8012956:	637b      	str	r3, [r7, #52]	@ 0x34
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801295c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	2b00      	cmp	r3, #0
 8012962:	f000 80c0 	beq.w	8012ae6 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8012966:	68bb      	ldr	r3, [r7, #8]
 8012968:	895b      	ldrh	r3, [r3, #10]
 801296a:	025b      	lsls	r3, r3, #9
 801296c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801296e:	6a3b      	ldr	r3, [r7, #32]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d01b      	beq.n	80129ac <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	1e5a      	subs	r2, r3, #1
 8012978:	69fb      	ldr	r3, [r7, #28]
 801297a:	fbb2 f2f3 	udiv	r2, r2, r3
 801297e:	6a3b      	ldr	r3, [r7, #32]
 8012980:	1e59      	subs	r1, r3, #1
 8012982:	69fb      	ldr	r3, [r7, #28]
 8012984:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8012988:	429a      	cmp	r2, r3
 801298a:	d30f      	bcc.n	80129ac <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801298c:	6a3b      	ldr	r3, [r7, #32]
 801298e:	1e5a      	subs	r2, r3, #1
 8012990:	69fb      	ldr	r3, [r7, #28]
 8012992:	425b      	negs	r3, r3
 8012994:	401a      	ands	r2, r3
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	699b      	ldr	r3, [r3, #24]
 801299e:	683a      	ldr	r2, [r7, #0]
 80129a0:	1ad3      	subs	r3, r2, r3
 80129a2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	69db      	ldr	r3, [r3, #28]
 80129a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80129aa:	e02c      	b.n	8012a06 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	689b      	ldr	r3, [r3, #8]
 80129b0:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80129b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d123      	bne.n	8012a00 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	2100      	movs	r1, #0
 80129bc:	4618      	mov	r0, r3
 80129be:	f7fe f9a4 	bl	8010d0a <create_chain>
 80129c2:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80129c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129c6:	2b01      	cmp	r3, #1
 80129c8:	d109      	bne.n	80129de <f_lseek+0x2d4>
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	2202      	movs	r2, #2
 80129ce:	755a      	strb	r2, [r3, #21]
 80129d0:	68bb      	ldr	r3, [r7, #8]
 80129d2:	2102      	movs	r1, #2
 80129d4:	4618      	mov	r0, r3
 80129d6:	f7fd fd1b 	bl	8010410 <unlock_fs>
 80129da:	2302      	movs	r3, #2
 80129dc:	e0e4      	b.n	8012ba8 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80129de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80129e4:	d109      	bne.n	80129fa <f_lseek+0x2f0>
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	2201      	movs	r2, #1
 80129ea:	755a      	strb	r2, [r3, #21]
 80129ec:	68bb      	ldr	r3, [r7, #8]
 80129ee:	2101      	movs	r1, #1
 80129f0:	4618      	mov	r0, r3
 80129f2:	f7fd fd0d 	bl	8010410 <unlock_fs>
 80129f6:	2301      	movs	r3, #1
 80129f8:	e0d6      	b.n	8012ba8 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80129fe:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012a04:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8012a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d06c      	beq.n	8012ae6 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8012a0c:	e044      	b.n	8012a98 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8012a0e:	683a      	ldr	r2, [r7, #0]
 8012a10:	69fb      	ldr	r3, [r7, #28]
 8012a12:	1ad3      	subs	r3, r2, r3
 8012a14:	603b      	str	r3, [r7, #0]
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	699a      	ldr	r2, [r3, #24]
 8012a1a:	69fb      	ldr	r3, [r7, #28]
 8012a1c:	441a      	add	r2, r3
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	7d1b      	ldrb	r3, [r3, #20]
 8012a26:	f003 0302 	and.w	r3, r3, #2
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d00b      	beq.n	8012a46 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012a32:	4618      	mov	r0, r3
 8012a34:	f7fe f969 	bl	8010d0a <create_chain>
 8012a38:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8012a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d108      	bne.n	8012a52 <f_lseek+0x348>
							ofs = 0; break;
 8012a40:	2300      	movs	r3, #0
 8012a42:	603b      	str	r3, [r7, #0]
 8012a44:	e02c      	b.n	8012aa0 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f7fd ff67 	bl	801091e <get_fat>
 8012a50:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012a58:	d109      	bne.n	8012a6e <f_lseek+0x364>
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2201      	movs	r2, #1
 8012a5e:	755a      	strb	r2, [r3, #21]
 8012a60:	68bb      	ldr	r3, [r7, #8]
 8012a62:	2101      	movs	r1, #1
 8012a64:	4618      	mov	r0, r3
 8012a66:	f7fd fcd3 	bl	8010410 <unlock_fs>
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	e09c      	b.n	8012ba8 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8012a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a70:	2b01      	cmp	r3, #1
 8012a72:	d904      	bls.n	8012a7e <f_lseek+0x374>
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	699b      	ldr	r3, [r3, #24]
 8012a78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012a7a:	429a      	cmp	r2, r3
 8012a7c:	d309      	bcc.n	8012a92 <f_lseek+0x388>
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	2202      	movs	r2, #2
 8012a82:	755a      	strb	r2, [r3, #21]
 8012a84:	68bb      	ldr	r3, [r7, #8]
 8012a86:	2102      	movs	r1, #2
 8012a88:	4618      	mov	r0, r3
 8012a8a:	f7fd fcc1 	bl	8010410 <unlock_fs>
 8012a8e:	2302      	movs	r3, #2
 8012a90:	e08a      	b.n	8012ba8 <f_lseek+0x49e>
					fp->clust = clst;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012a96:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8012a98:	683a      	ldr	r2, [r7, #0]
 8012a9a:	69fb      	ldr	r3, [r7, #28]
 8012a9c:	429a      	cmp	r2, r3
 8012a9e:	d8b6      	bhi.n	8012a0e <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	699a      	ldr	r2, [r3, #24]
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	441a      	add	r2, r3
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d017      	beq.n	8012ae6 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012aba:	4618      	mov	r0, r3
 8012abc:	f7fd ff10 	bl	80108e0 <clust2sect>
 8012ac0:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8012ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d109      	bne.n	8012adc <f_lseek+0x3d2>
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	2202      	movs	r2, #2
 8012acc:	755a      	strb	r2, [r3, #21]
 8012ace:	68bb      	ldr	r3, [r7, #8]
 8012ad0:	2102      	movs	r1, #2
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f7fd fc9c 	bl	8010410 <unlock_fs>
 8012ad8:	2302      	movs	r3, #2
 8012ada:	e065      	b.n	8012ba8 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8012adc:	683b      	ldr	r3, [r7, #0]
 8012ade:	0a5b      	lsrs	r3, r3, #9
 8012ae0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012ae2:	4413      	add	r3, r2
 8012ae4:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	699a      	ldr	r2, [r3, #24]
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	68db      	ldr	r3, [r3, #12]
 8012aee:	429a      	cmp	r2, r3
 8012af0:	d90a      	bls.n	8012b08 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	699a      	ldr	r2, [r3, #24]
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	7d1b      	ldrb	r3, [r3, #20]
 8012afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012b02:	b2da      	uxtb	r2, r3
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	699b      	ldr	r3, [r3, #24]
 8012b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d040      	beq.n	8012b96 <f_lseek+0x48c>
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	6a1b      	ldr	r3, [r3, #32]
 8012b18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012b1a:	429a      	cmp	r2, r3
 8012b1c:	d03b      	beq.n	8012b96 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	7d1b      	ldrb	r3, [r3, #20]
 8012b22:	b25b      	sxtb	r3, r3
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	da1d      	bge.n	8012b64 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012b28:	68bb      	ldr	r3, [r7, #8]
 8012b2a:	7858      	ldrb	r0, [r3, #1]
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	6a1a      	ldr	r2, [r3, #32]
 8012b36:	2301      	movs	r3, #1
 8012b38:	f7fd fb16 	bl	8010168 <disk_write>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d009      	beq.n	8012b56 <f_lseek+0x44c>
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	2201      	movs	r2, #1
 8012b46:	755a      	strb	r2, [r3, #21]
 8012b48:	68bb      	ldr	r3, [r7, #8]
 8012b4a:	2101      	movs	r1, #1
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f7fd fc5f 	bl	8010410 <unlock_fs>
 8012b52:	2301      	movs	r3, #1
 8012b54:	e028      	b.n	8012ba8 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	7d1b      	ldrb	r3, [r3, #20]
 8012b5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012b5e:	b2da      	uxtb	r2, r3
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012b64:	68bb      	ldr	r3, [r7, #8]
 8012b66:	7858      	ldrb	r0, [r3, #1]
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012b6e:	2301      	movs	r3, #1
 8012b70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012b72:	f7fd fad9 	bl	8010128 <disk_read>
 8012b76:	4603      	mov	r3, r0
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d009      	beq.n	8012b90 <f_lseek+0x486>
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	2201      	movs	r2, #1
 8012b80:	755a      	strb	r2, [r3, #21]
 8012b82:	68bb      	ldr	r3, [r7, #8]
 8012b84:	2101      	movs	r1, #1
 8012b86:	4618      	mov	r0, r3
 8012b88:	f7fd fc42 	bl	8010410 <unlock_fs>
 8012b8c:	2301      	movs	r3, #1
 8012b8e:	e00b      	b.n	8012ba8 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012b94:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8012b96:	68bb      	ldr	r3, [r7, #8]
 8012b98:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8012b9c:	4611      	mov	r1, r2
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f7fd fc36 	bl	8010410 <unlock_fs>
 8012ba4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3740      	adds	r7, #64	@ 0x40
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}

08012bb0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b086      	sub	sp, #24
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
 8012bb8:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d101      	bne.n	8012bc4 <f_opendir+0x14>
 8012bc0:	2309      	movs	r3, #9
 8012bc2:	e06a      	b.n	8012c9a <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8012bc8:	f107 010c 	add.w	r1, r7, #12
 8012bcc:	463b      	mov	r3, r7
 8012bce:	2200      	movs	r2, #0
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	f7fe feb3 	bl	801193c <find_volume>
 8012bd6:	4603      	mov	r3, r0
 8012bd8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012bda:	7dfb      	ldrb	r3, [r7, #23]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d14f      	bne.n	8012c80 <f_opendir+0xd0>
		obj->fs = fs;
 8012be0:	68fa      	ldr	r2, [r7, #12]
 8012be2:	693b      	ldr	r3, [r7, #16]
 8012be4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8012be6:	683b      	ldr	r3, [r7, #0]
 8012be8:	4619      	mov	r1, r3
 8012bea:	6878      	ldr	r0, [r7, #4]
 8012bec:	f7fe fd9a 	bl	8011724 <follow_path>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8012bf4:	7dfb      	ldrb	r3, [r7, #23]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d13d      	bne.n	8012c76 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012c00:	b25b      	sxtb	r3, r3
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	db12      	blt.n	8012c2c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8012c06:	693b      	ldr	r3, [r7, #16]
 8012c08:	799b      	ldrb	r3, [r3, #6]
 8012c0a:	f003 0310 	and.w	r3, r3, #16
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d00a      	beq.n	8012c28 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8012c12:	68fa      	ldr	r2, [r7, #12]
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	6a1b      	ldr	r3, [r3, #32]
 8012c18:	4619      	mov	r1, r3
 8012c1a:	4610      	mov	r0, r2
 8012c1c:	f7fe fac8 	bl	80111b0 <ld_clust>
 8012c20:	4602      	mov	r2, r0
 8012c22:	693b      	ldr	r3, [r7, #16]
 8012c24:	609a      	str	r2, [r3, #8]
 8012c26:	e001      	b.n	8012c2c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8012c28:	2305      	movs	r3, #5
 8012c2a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8012c2c:	7dfb      	ldrb	r3, [r7, #23]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d121      	bne.n	8012c76 <f_opendir+0xc6>
				obj->id = fs->id;
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	88da      	ldrh	r2, [r3, #6]
 8012c36:	693b      	ldr	r3, [r7, #16]
 8012c38:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8012c3a:	2100      	movs	r1, #0
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f7fe f930 	bl	8010ea2 <dir_sdi>
 8012c42:	4603      	mov	r3, r0
 8012c44:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8012c46:	7dfb      	ldrb	r3, [r7, #23]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d114      	bne.n	8012c76 <f_opendir+0xc6>
					if (obj->sclust) {
 8012c4c:	693b      	ldr	r3, [r7, #16]
 8012c4e:	689b      	ldr	r3, [r3, #8]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d00d      	beq.n	8012c70 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8012c54:	2100      	movs	r1, #0
 8012c56:	6878      	ldr	r0, [r7, #4]
 8012c58:	f7fd fc74 	bl	8010544 <inc_lock>
 8012c5c:	4602      	mov	r2, r0
 8012c5e:	693b      	ldr	r3, [r7, #16]
 8012c60:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8012c62:	693b      	ldr	r3, [r7, #16]
 8012c64:	691b      	ldr	r3, [r3, #16]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d105      	bne.n	8012c76 <f_opendir+0xc6>
 8012c6a:	2312      	movs	r3, #18
 8012c6c:	75fb      	strb	r3, [r7, #23]
 8012c6e:	e002      	b.n	8012c76 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8012c70:	693b      	ldr	r3, [r7, #16]
 8012c72:	2200      	movs	r2, #0
 8012c74:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012c76:	7dfb      	ldrb	r3, [r7, #23]
 8012c78:	2b04      	cmp	r3, #4
 8012c7a:	d101      	bne.n	8012c80 <f_opendir+0xd0>
 8012c7c:	2305      	movs	r3, #5
 8012c7e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8012c80:	7dfb      	ldrb	r3, [r7, #23]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d002      	beq.n	8012c8c <f_opendir+0xdc>
 8012c86:	693b      	ldr	r3, [r7, #16]
 8012c88:	2200      	movs	r2, #0
 8012c8a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	7dfa      	ldrb	r2, [r7, #23]
 8012c90:	4611      	mov	r1, r2
 8012c92:	4618      	mov	r0, r3
 8012c94:	f7fd fbbc 	bl	8010410 <unlock_fs>
 8012c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	3718      	adds	r7, #24
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	bd80      	pop	{r7, pc}

08012ca2 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8012ca2:	b580      	push	{r7, lr}
 8012ca4:	b084      	sub	sp, #16
 8012ca6:	af00      	add	r7, sp, #0
 8012ca8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	f107 0208 	add.w	r2, r7, #8
 8012cb0:	4611      	mov	r1, r2
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f7ff f896 	bl	8011de4 <validate>
 8012cb8:	4603      	mov	r3, r0
 8012cba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012cbc:	7bfb      	ldrb	r3, [r7, #15]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d115      	bne.n	8012cee <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	691b      	ldr	r3, [r3, #16]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d006      	beq.n	8012cd8 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	691b      	ldr	r3, [r3, #16]
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f7fd fcc6 	bl	8010660 <dec_lock>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8012cd8:	7bfb      	ldrb	r3, [r7, #15]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d102      	bne.n	8012ce4 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8012ce4:	68bb      	ldr	r3, [r7, #8]
 8012ce6:	2100      	movs	r1, #0
 8012ce8:	4618      	mov	r0, r3
 8012cea:	f7fd fb91 	bl	8010410 <unlock_fs>
#endif
	}
	return res;
 8012cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	3710      	adds	r7, #16
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	bd80      	pop	{r7, pc}

08012cf8 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012cf8:	b580      	push	{r7, lr}
 8012cfa:	b084      	sub	sp, #16
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
 8012d00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	f107 0208 	add.w	r2, r7, #8
 8012d08:	4611      	mov	r1, r2
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f7ff f86a 	bl	8011de4 <validate>
 8012d10:	4603      	mov	r3, r0
 8012d12:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012d14:	7bfb      	ldrb	r3, [r7, #15]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d126      	bne.n	8012d68 <f_readdir+0x70>
		if (!fno) {
 8012d1a:	683b      	ldr	r3, [r7, #0]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d106      	bne.n	8012d2e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8012d20:	2100      	movs	r1, #0
 8012d22:	6878      	ldr	r0, [r7, #4]
 8012d24:	f7fe f8bd 	bl	8010ea2 <dir_sdi>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	73fb      	strb	r3, [r7, #15]
 8012d2c:	e01c      	b.n	8012d68 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8012d2e:	2100      	movs	r1, #0
 8012d30:	6878      	ldr	r0, [r7, #4]
 8012d32:	f7fe fa7c 	bl	801122e <dir_read>
 8012d36:	4603      	mov	r3, r0
 8012d38:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8012d3a:	7bfb      	ldrb	r3, [r7, #15]
 8012d3c:	2b04      	cmp	r3, #4
 8012d3e:	d101      	bne.n	8012d44 <f_readdir+0x4c>
 8012d40:	2300      	movs	r3, #0
 8012d42:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8012d44:	7bfb      	ldrb	r3, [r7, #15]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d10e      	bne.n	8012d68 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8012d4a:	6839      	ldr	r1, [r7, #0]
 8012d4c:	6878      	ldr	r0, [r7, #4]
 8012d4e:	f7fe fb52 	bl	80113f6 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8012d52:	2100      	movs	r1, #0
 8012d54:	6878      	ldr	r0, [r7, #4]
 8012d56:	f7fe f91f 	bl	8010f98 <dir_next>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8012d5e:	7bfb      	ldrb	r3, [r7, #15]
 8012d60:	2b04      	cmp	r3, #4
 8012d62:	d101      	bne.n	8012d68 <f_readdir+0x70>
 8012d64:	2300      	movs	r3, #0
 8012d66:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8012d68:	68bb      	ldr	r3, [r7, #8]
 8012d6a:	7bfa      	ldrb	r2, [r7, #15]
 8012d6c:	4611      	mov	r1, r2
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f7fd fb4e 	bl	8010410 <unlock_fs>
 8012d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	3710      	adds	r7, #16
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}

08012d7e <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8012d7e:	b580      	push	{r7, lr}
 8012d80:	b084      	sub	sp, #16
 8012d82:	af00      	add	r7, sp, #0
 8012d84:	6078      	str	r0, [r7, #4]
 8012d86:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8012d88:	6839      	ldr	r1, [r7, #0]
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f7ff ffb4 	bl	8012cf8 <f_readdir>
 8012d90:	4603      	mov	r3, r0
 8012d92:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8012d94:	7bfb      	ldrb	r3, [r7, #15]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d114      	bne.n	8012dc4 <f_findnext+0x46>
 8012d9a:	683b      	ldr	r3, [r7, #0]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d011      	beq.n	8012dc4 <f_findnext+0x46>
 8012da0:	683b      	ldr	r3, [r7, #0]
 8012da2:	7a5b      	ldrb	r3, [r3, #9]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d00d      	beq.n	8012dc4 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8012dac:	683b      	ldr	r3, [r7, #0]
 8012dae:	f103 0109 	add.w	r1, r3, #9
 8012db2:	2300      	movs	r3, #0
 8012db4:	2200      	movs	r2, #0
 8012db6:	f7fe fba5 	bl	8011504 <pattern_matching>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d100      	bne.n	8012dc2 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8012dc0:	e7e2      	b.n	8012d88 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8012dc2:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8012dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	3710      	adds	r7, #16
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}

08012dce <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8012dce:	b580      	push	{r7, lr}
 8012dd0:	b086      	sub	sp, #24
 8012dd2:	af00      	add	r7, sp, #0
 8012dd4:	60f8      	str	r0, [r7, #12]
 8012dd6:	60b9      	str	r1, [r7, #8]
 8012dd8:	607a      	str	r2, [r7, #4]
 8012dda:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	683a      	ldr	r2, [r7, #0]
 8012de0:	631a      	str	r2, [r3, #48]	@ 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 8012de2:	6879      	ldr	r1, [r7, #4]
 8012de4:	68f8      	ldr	r0, [r7, #12]
 8012de6:	f7ff fee3 	bl	8012bb0 <f_opendir>
 8012dea:	4603      	mov	r3, r0
 8012dec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012dee:	7dfb      	ldrb	r3, [r7, #23]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d105      	bne.n	8012e00 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8012df4:	68b9      	ldr	r1, [r7, #8]
 8012df6:	68f8      	ldr	r0, [r7, #12]
 8012df8:	f7ff ffc1 	bl	8012d7e <f_findnext>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8012e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e02:	4618      	mov	r0, r3
 8012e04:	3718      	adds	r7, #24
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}
	...

08012e0c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012e0c:	b480      	push	{r7}
 8012e0e:	b087      	sub	sp, #28
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	60f8      	str	r0, [r7, #12]
 8012e14:	60b9      	str	r1, [r7, #8]
 8012e16:	4613      	mov	r3, r2
 8012e18:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012e1a:	2301      	movs	r3, #1
 8012e1c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012e1e:	2300      	movs	r3, #0
 8012e20:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012e22:	4b1f      	ldr	r3, [pc, #124]	@ (8012ea0 <FATFS_LinkDriverEx+0x94>)
 8012e24:	7a5b      	ldrb	r3, [r3, #9]
 8012e26:	b2db      	uxtb	r3, r3
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d131      	bne.n	8012e90 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8012ea0 <FATFS_LinkDriverEx+0x94>)
 8012e2e:	7a5b      	ldrb	r3, [r3, #9]
 8012e30:	b2db      	uxtb	r3, r3
 8012e32:	461a      	mov	r2, r3
 8012e34:	4b1a      	ldr	r3, [pc, #104]	@ (8012ea0 <FATFS_LinkDriverEx+0x94>)
 8012e36:	2100      	movs	r1, #0
 8012e38:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012e3a:	4b19      	ldr	r3, [pc, #100]	@ (8012ea0 <FATFS_LinkDriverEx+0x94>)
 8012e3c:	7a5b      	ldrb	r3, [r3, #9]
 8012e3e:	b2db      	uxtb	r3, r3
 8012e40:	4a17      	ldr	r2, [pc, #92]	@ (8012ea0 <FATFS_LinkDriverEx+0x94>)
 8012e42:	009b      	lsls	r3, r3, #2
 8012e44:	4413      	add	r3, r2
 8012e46:	68fa      	ldr	r2, [r7, #12]
 8012e48:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012e4a:	4b15      	ldr	r3, [pc, #84]	@ (8012ea0 <FATFS_LinkDriverEx+0x94>)
 8012e4c:	7a5b      	ldrb	r3, [r3, #9]
 8012e4e:	b2db      	uxtb	r3, r3
 8012e50:	461a      	mov	r2, r3
 8012e52:	4b13      	ldr	r3, [pc, #76]	@ (8012ea0 <FATFS_LinkDriverEx+0x94>)
 8012e54:	4413      	add	r3, r2
 8012e56:	79fa      	ldrb	r2, [r7, #7]
 8012e58:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012e5a:	4b11      	ldr	r3, [pc, #68]	@ (8012ea0 <FATFS_LinkDriverEx+0x94>)
 8012e5c:	7a5b      	ldrb	r3, [r3, #9]
 8012e5e:	b2db      	uxtb	r3, r3
 8012e60:	1c5a      	adds	r2, r3, #1
 8012e62:	b2d1      	uxtb	r1, r2
 8012e64:	4a0e      	ldr	r2, [pc, #56]	@ (8012ea0 <FATFS_LinkDriverEx+0x94>)
 8012e66:	7251      	strb	r1, [r2, #9]
 8012e68:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012e6a:	7dbb      	ldrb	r3, [r7, #22]
 8012e6c:	3330      	adds	r3, #48	@ 0x30
 8012e6e:	b2da      	uxtb	r2, r3
 8012e70:	68bb      	ldr	r3, [r7, #8]
 8012e72:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012e74:	68bb      	ldr	r3, [r7, #8]
 8012e76:	3301      	adds	r3, #1
 8012e78:	223a      	movs	r2, #58	@ 0x3a
 8012e7a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012e7c:	68bb      	ldr	r3, [r7, #8]
 8012e7e:	3302      	adds	r3, #2
 8012e80:	222f      	movs	r2, #47	@ 0x2f
 8012e82:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	3303      	adds	r3, #3
 8012e88:	2200      	movs	r2, #0
 8012e8a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e92:	4618      	mov	r0, r3
 8012e94:	371c      	adds	r7, #28
 8012e96:	46bd      	mov	sp, r7
 8012e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9c:	4770      	bx	lr
 8012e9e:	bf00      	nop
 8012ea0:	20001890 	.word	0x20001890

08012ea4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b082      	sub	sp, #8
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
 8012eac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012eae:	2200      	movs	r2, #0
 8012eb0:	6839      	ldr	r1, [r7, #0]
 8012eb2:	6878      	ldr	r0, [r7, #4]
 8012eb4:	f7ff ffaa 	bl	8012e0c <FATFS_LinkDriverEx>
 8012eb8:	4603      	mov	r3, r0
}
 8012eba:	4618      	mov	r0, r3
 8012ebc:	3708      	adds	r7, #8
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}

08012ec2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8012ec2:	b580      	push	{r7, lr}
 8012ec4:	b086      	sub	sp, #24
 8012ec6:	af00      	add	r7, sp, #0
 8012ec8:	4603      	mov	r3, r0
 8012eca:	6039      	str	r1, [r7, #0]
 8012ecc:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8012ece:	2300      	movs	r3, #0
 8012ed0:	60fb      	str	r3, [r7, #12]
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8012ed6:	f107 030c 	add.w	r3, r7, #12
 8012eda:	2101      	movs	r1, #1
 8012edc:	4618      	mov	r0, r3
 8012ede:	f000 f901 	bl	80130e4 <osSemaphoreCreate>
 8012ee2:	4602      	mov	r2, r0
 8012ee4:	683b      	ldr	r3, [r7, #0]
 8012ee6:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8012ee8:	683b      	ldr	r3, [r7, #0]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	bf14      	ite	ne
 8012ef0:	2301      	movne	r3, #1
 8012ef2:	2300      	moveq	r3, #0
 8012ef4:	b2db      	uxtb	r3, r3
 8012ef6:	617b      	str	r3, [r7, #20]

    return ret;
 8012ef8:	697b      	ldr	r3, [r7, #20]
}
 8012efa:	4618      	mov	r0, r3
 8012efc:	3718      	adds	r7, #24
 8012efe:	46bd      	mov	sp, r7
 8012f00:	bd80      	pop	{r7, pc}

08012f02 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8012f02:	b580      	push	{r7, lr}
 8012f04:	b082      	sub	sp, #8
 8012f06:	af00      	add	r7, sp, #0
 8012f08:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8012f0a:	6878      	ldr	r0, [r7, #4]
 8012f0c:	f000 f9a0 	bl	8013250 <osSemaphoreDelete>
#endif
    return 1;
 8012f10:	2301      	movs	r3, #1
}
 8012f12:	4618      	mov	r0, r3
 8012f14:	3708      	adds	r7, #8
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}

08012f1a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8012f1a:	b580      	push	{r7, lr}
 8012f1c:	b084      	sub	sp, #16
 8012f1e:	af00      	add	r7, sp, #0
 8012f20:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8012f22:	2300      	movs	r3, #0
 8012f24:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8012f26:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012f2a:	6878      	ldr	r0, [r7, #4]
 8012f2c:	f000 f90c 	bl	8013148 <osSemaphoreWait>
 8012f30:	4603      	mov	r3, r0
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d101      	bne.n	8012f3a <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8012f36:	2301      	movs	r3, #1
 8012f38:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8012f3a:	68fb      	ldr	r3, [r7, #12]
}
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	3710      	adds	r7, #16
 8012f40:	46bd      	mov	sp, r7
 8012f42:	bd80      	pop	{r7, pc}

08012f44 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b082      	sub	sp, #8
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8012f4c:	6878      	ldr	r0, [r7, #4]
 8012f4e:	f000 f949 	bl	80131e4 <osSemaphoreRelease>
#endif
}
 8012f52:	bf00      	nop
 8012f54:	3708      	adds	r7, #8
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}

08012f5a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8012f5a:	b480      	push	{r7}
 8012f5c:	b085      	sub	sp, #20
 8012f5e:	af00      	add	r7, sp, #0
 8012f60:	4603      	mov	r3, r0
 8012f62:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012f64:	2300      	movs	r3, #0
 8012f66:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8012f68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f6c:	2b84      	cmp	r3, #132	@ 0x84
 8012f6e:	d005      	beq.n	8012f7c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8012f70:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	4413      	add	r3, r2
 8012f78:	3303      	adds	r3, #3
 8012f7a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012f7c:	68fb      	ldr	r3, [r7, #12]
}
 8012f7e:	4618      	mov	r0, r3
 8012f80:	3714      	adds	r7, #20
 8012f82:	46bd      	mov	sp, r7
 8012f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f88:	4770      	bx	lr

08012f8a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8012f8a:	b480      	push	{r7}
 8012f8c:	b083      	sub	sp, #12
 8012f8e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f90:	f3ef 8305 	mrs	r3, IPSR
 8012f94:	607b      	str	r3, [r7, #4]
  return(result);
 8012f96:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	bf14      	ite	ne
 8012f9c:	2301      	movne	r3, #1
 8012f9e:	2300      	moveq	r3, #0
 8012fa0:	b2db      	uxtb	r3, r3
}
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	370c      	adds	r7, #12
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fac:	4770      	bx	lr

08012fae <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012fae:	b580      	push	{r7, lr}
 8012fb0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012fb2:	f001 fdfb 	bl	8014bac <vTaskStartScheduler>
  
  return osOK;
 8012fb6:	2300      	movs	r3, #0
}
 8012fb8:	4618      	mov	r0, r3
 8012fba:	bd80      	pop	{r7, pc}

08012fbc <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8012fc0:	f002 fa70 	bl	80154a4 <xTaskGetSchedulerState>
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	2b01      	cmp	r3, #1
 8012fc8:	d101      	bne.n	8012fce <osKernelRunning+0x12>
    return 0;
 8012fca:	2300      	movs	r3, #0
 8012fcc:	e000      	b.n	8012fd0 <osKernelRunning+0x14>
  else
    return 1;
 8012fce:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	bd80      	pop	{r7, pc}

08012fd4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8012fd8:	f7ff ffd7 	bl	8012f8a <inHandlerMode>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d003      	beq.n	8012fea <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8012fe2:	f001 ff0f 	bl	8014e04 <xTaskGetTickCountFromISR>
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	e002      	b.n	8012ff0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8012fea:	f001 fefb 	bl	8014de4 <xTaskGetTickCount>
 8012fee:	4603      	mov	r3, r0
  }
}
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	bd80      	pop	{r7, pc}

08012ff4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ff6:	b089      	sub	sp, #36	@ 0x24
 8012ff8:	af04      	add	r7, sp, #16
 8012ffa:	6078      	str	r0, [r7, #4]
 8012ffc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	695b      	ldr	r3, [r3, #20]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d020      	beq.n	8013048 <osThreadCreate+0x54>
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	699b      	ldr	r3, [r3, #24]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d01c      	beq.n	8013048 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	685c      	ldr	r4, [r3, #4]
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	691e      	ldr	r6, [r3, #16]
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013020:	4618      	mov	r0, r3
 8013022:	f7ff ff9a 	bl	8012f5a <makeFreeRtosPriority>
 8013026:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	695b      	ldr	r3, [r3, #20]
 801302c:	687a      	ldr	r2, [r7, #4]
 801302e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013030:	9202      	str	r2, [sp, #8]
 8013032:	9301      	str	r3, [sp, #4]
 8013034:	9100      	str	r1, [sp, #0]
 8013036:	683b      	ldr	r3, [r7, #0]
 8013038:	4632      	mov	r2, r6
 801303a:	4629      	mov	r1, r5
 801303c:	4620      	mov	r0, r4
 801303e:	f001 fa93 	bl	8014568 <xTaskCreateStatic>
 8013042:	4603      	mov	r3, r0
 8013044:	60fb      	str	r3, [r7, #12]
 8013046:	e01c      	b.n	8013082 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	685c      	ldr	r4, [r3, #4]
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013054:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801305c:	4618      	mov	r0, r3
 801305e:	f7ff ff7c 	bl	8012f5a <makeFreeRtosPriority>
 8013062:	4602      	mov	r2, r0
 8013064:	f107 030c 	add.w	r3, r7, #12
 8013068:	9301      	str	r3, [sp, #4]
 801306a:	9200      	str	r2, [sp, #0]
 801306c:	683b      	ldr	r3, [r7, #0]
 801306e:	4632      	mov	r2, r6
 8013070:	4629      	mov	r1, r5
 8013072:	4620      	mov	r0, r4
 8013074:	f001 fade 	bl	8014634 <xTaskCreate>
 8013078:	4603      	mov	r3, r0
 801307a:	2b01      	cmp	r3, #1
 801307c:	d001      	beq.n	8013082 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801307e:	2300      	movs	r3, #0
 8013080:	e000      	b.n	8013084 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8013082:	68fb      	ldr	r3, [r7, #12]
}
 8013084:	4618      	mov	r0, r3
 8013086:	3714      	adds	r7, #20
 8013088:	46bd      	mov	sp, r7
 801308a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801308c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b084      	sub	sp, #16
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d001      	beq.n	80130a2 <osDelay+0x16>
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	e000      	b.n	80130a4 <osDelay+0x18>
 80130a2:	2301      	movs	r3, #1
 80130a4:	4618      	mov	r0, r3
 80130a6:	f001 fc1f 	bl	80148e8 <vTaskDelay>
  
  return osOK;
 80130aa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80130ac:	4618      	mov	r0, r3
 80130ae:	3710      	adds	r7, #16
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}

080130b4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b082      	sub	sp, #8
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	685b      	ldr	r3, [r3, #4]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d007      	beq.n	80130d4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	685b      	ldr	r3, [r3, #4]
 80130c8:	4619      	mov	r1, r3
 80130ca:	2001      	movs	r0, #1
 80130cc:	f000 fbeb 	bl	80138a6 <xQueueCreateMutexStatic>
 80130d0:	4603      	mov	r3, r0
 80130d2:	e003      	b.n	80130dc <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80130d4:	2001      	movs	r0, #1
 80130d6:	f000 fbce 	bl	8013876 <xQueueCreateMutex>
 80130da:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80130dc:	4618      	mov	r0, r3
 80130de:	3708      	adds	r7, #8
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}

080130e4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b086      	sub	sp, #24
 80130e8:	af02      	add	r7, sp, #8
 80130ea:	6078      	str	r0, [r7, #4]
 80130ec:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	685b      	ldr	r3, [r3, #4]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d00f      	beq.n	8013116 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	2b01      	cmp	r3, #1
 80130fa:	d10a      	bne.n	8013112 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	685b      	ldr	r3, [r3, #4]
 8013100:	2203      	movs	r2, #3
 8013102:	9200      	str	r2, [sp, #0]
 8013104:	2200      	movs	r2, #0
 8013106:	2100      	movs	r1, #0
 8013108:	2001      	movs	r0, #1
 801310a:	f000 fab1 	bl	8013670 <xQueueGenericCreateStatic>
 801310e:	4603      	mov	r3, r0
 8013110:	e016      	b.n	8013140 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8013112:	2300      	movs	r3, #0
 8013114:	e014      	b.n	8013140 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	2b01      	cmp	r3, #1
 801311a:	d110      	bne.n	801313e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 801311c:	2203      	movs	r2, #3
 801311e:	2100      	movs	r1, #0
 8013120:	2001      	movs	r0, #1
 8013122:	f000 fb2c 	bl	801377e <xQueueGenericCreate>
 8013126:	60f8      	str	r0, [r7, #12]
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d005      	beq.n	801313a <osSemaphoreCreate+0x56>
 801312e:	2300      	movs	r3, #0
 8013130:	2200      	movs	r2, #0
 8013132:	2100      	movs	r1, #0
 8013134:	68f8      	ldr	r0, [r7, #12]
 8013136:	f000 fbd1 	bl	80138dc <xQueueGenericSend>
      return sema;
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	e000      	b.n	8013140 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 801313e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8013140:	4618      	mov	r0, r3
 8013142:	3710      	adds	r7, #16
 8013144:	46bd      	mov	sp, r7
 8013146:	bd80      	pop	{r7, pc}

08013148 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8013148:	b580      	push	{r7, lr}
 801314a:	b084      	sub	sp, #16
 801314c:	af00      	add	r7, sp, #0
 801314e:	6078      	str	r0, [r7, #4]
 8013150:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8013152:	2300      	movs	r3, #0
 8013154:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d101      	bne.n	8013160 <osSemaphoreWait+0x18>
    return osErrorParameter;
 801315c:	2380      	movs	r3, #128	@ 0x80
 801315e:	e03a      	b.n	80131d6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8013160:	2300      	movs	r3, #0
 8013162:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8013164:	683b      	ldr	r3, [r7, #0]
 8013166:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801316a:	d103      	bne.n	8013174 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 801316c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013170:	60fb      	str	r3, [r7, #12]
 8013172:	e009      	b.n	8013188 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8013174:	683b      	ldr	r3, [r7, #0]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d006      	beq.n	8013188 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801317a:	683b      	ldr	r3, [r7, #0]
 801317c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d101      	bne.n	8013188 <osSemaphoreWait+0x40>
      ticks = 1;
 8013184:	2301      	movs	r3, #1
 8013186:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8013188:	f7ff feff 	bl	8012f8a <inHandlerMode>
 801318c:	4603      	mov	r3, r0
 801318e:	2b00      	cmp	r3, #0
 8013190:	d017      	beq.n	80131c2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8013192:	f107 0308 	add.w	r3, r7, #8
 8013196:	461a      	mov	r2, r3
 8013198:	2100      	movs	r1, #0
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f000 ffe4 	bl	8014168 <xQueueReceiveFromISR>
 80131a0:	4603      	mov	r3, r0
 80131a2:	2b01      	cmp	r3, #1
 80131a4:	d001      	beq.n	80131aa <osSemaphoreWait+0x62>
      return osErrorOS;
 80131a6:	23ff      	movs	r3, #255	@ 0xff
 80131a8:	e015      	b.n	80131d6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d011      	beq.n	80131d4 <osSemaphoreWait+0x8c>
 80131b0:	4b0b      	ldr	r3, [pc, #44]	@ (80131e0 <osSemaphoreWait+0x98>)
 80131b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80131b6:	601a      	str	r2, [r3, #0]
 80131b8:	f3bf 8f4f 	dsb	sy
 80131bc:	f3bf 8f6f 	isb	sy
 80131c0:	e008      	b.n	80131d4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80131c2:	68f9      	ldr	r1, [r7, #12]
 80131c4:	6878      	ldr	r0, [r7, #4]
 80131c6:	f000 feb7 	bl	8013f38 <xQueueSemaphoreTake>
 80131ca:	4603      	mov	r3, r0
 80131cc:	2b01      	cmp	r3, #1
 80131ce:	d001      	beq.n	80131d4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80131d0:	23ff      	movs	r3, #255	@ 0xff
 80131d2:	e000      	b.n	80131d6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80131d4:	2300      	movs	r3, #0
}
 80131d6:	4618      	mov	r0, r3
 80131d8:	3710      	adds	r7, #16
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}
 80131de:	bf00      	nop
 80131e0:	e000ed04 	.word	0xe000ed04

080131e4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80131e4:	b580      	push	{r7, lr}
 80131e6:	b084      	sub	sp, #16
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80131ec:	2300      	movs	r3, #0
 80131ee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80131f0:	2300      	movs	r3, #0
 80131f2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80131f4:	f7ff fec9 	bl	8012f8a <inHandlerMode>
 80131f8:	4603      	mov	r3, r0
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d016      	beq.n	801322c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80131fe:	f107 0308 	add.w	r3, r7, #8
 8013202:	4619      	mov	r1, r3
 8013204:	6878      	ldr	r0, [r7, #4]
 8013206:	f000 fd16 	bl	8013c36 <xQueueGiveFromISR>
 801320a:	4603      	mov	r3, r0
 801320c:	2b01      	cmp	r3, #1
 801320e:	d001      	beq.n	8013214 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8013210:	23ff      	movs	r3, #255	@ 0xff
 8013212:	e017      	b.n	8013244 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d013      	beq.n	8013242 <osSemaphoreRelease+0x5e>
 801321a:	4b0c      	ldr	r3, [pc, #48]	@ (801324c <osSemaphoreRelease+0x68>)
 801321c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013220:	601a      	str	r2, [r3, #0]
 8013222:	f3bf 8f4f 	dsb	sy
 8013226:	f3bf 8f6f 	isb	sy
 801322a:	e00a      	b.n	8013242 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 801322c:	2300      	movs	r3, #0
 801322e:	2200      	movs	r2, #0
 8013230:	2100      	movs	r1, #0
 8013232:	6878      	ldr	r0, [r7, #4]
 8013234:	f000 fb52 	bl	80138dc <xQueueGenericSend>
 8013238:	4603      	mov	r3, r0
 801323a:	2b01      	cmp	r3, #1
 801323c:	d001      	beq.n	8013242 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801323e:	23ff      	movs	r3, #255	@ 0xff
 8013240:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8013242:	68fb      	ldr	r3, [r7, #12]
}
 8013244:	4618      	mov	r0, r3
 8013246:	3710      	adds	r7, #16
 8013248:	46bd      	mov	sp, r7
 801324a:	bd80      	pop	{r7, pc}
 801324c:	e000ed04 	.word	0xe000ed04

08013250 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b082      	sub	sp, #8
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8013258:	f7ff fe97 	bl	8012f8a <inHandlerMode>
 801325c:	4603      	mov	r3, r0
 801325e:	2b00      	cmp	r3, #0
 8013260:	d001      	beq.n	8013266 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8013262:	2382      	movs	r3, #130	@ 0x82
 8013264:	e003      	b.n	801326e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8013266:	6878      	ldr	r0, [r7, #4]
 8013268:	f001 f806 	bl	8014278 <vQueueDelete>

  return osOK; 
 801326c:	2300      	movs	r3, #0
}
 801326e:	4618      	mov	r0, r3
 8013270:	3708      	adds	r7, #8
 8013272:	46bd      	mov	sp, r7
 8013274:	bd80      	pop	{r7, pc}

08013276 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8013276:	b590      	push	{r4, r7, lr}
 8013278:	b085      	sub	sp, #20
 801327a:	af02      	add	r7, sp, #8
 801327c:	6078      	str	r0, [r7, #4]
 801327e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	689b      	ldr	r3, [r3, #8]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d011      	beq.n	80132ac <osMessageCreate+0x36>
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	68db      	ldr	r3, [r3, #12]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d00d      	beq.n	80132ac <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	6818      	ldr	r0, [r3, #0]
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	6859      	ldr	r1, [r3, #4]
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	689a      	ldr	r2, [r3, #8]
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	68db      	ldr	r3, [r3, #12]
 80132a0:	2400      	movs	r4, #0
 80132a2:	9400      	str	r4, [sp, #0]
 80132a4:	f000 f9e4 	bl	8013670 <xQueueGenericCreateStatic>
 80132a8:	4603      	mov	r3, r0
 80132aa:	e008      	b.n	80132be <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	6818      	ldr	r0, [r3, #0]
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	685b      	ldr	r3, [r3, #4]
 80132b4:	2200      	movs	r2, #0
 80132b6:	4619      	mov	r1, r3
 80132b8:	f000 fa61 	bl	801377e <xQueueGenericCreate>
 80132bc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80132be:	4618      	mov	r0, r3
 80132c0:	370c      	adds	r7, #12
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd90      	pop	{r4, r7, pc}
	...

080132c8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b086      	sub	sp, #24
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	60f8      	str	r0, [r7, #12]
 80132d0:	60b9      	str	r1, [r7, #8]
 80132d2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80132d4:	2300      	movs	r3, #0
 80132d6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80132dc:	697b      	ldr	r3, [r7, #20]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d101      	bne.n	80132e6 <osMessagePut+0x1e>
    ticks = 1;
 80132e2:	2301      	movs	r3, #1
 80132e4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80132e6:	f7ff fe50 	bl	8012f8a <inHandlerMode>
 80132ea:	4603      	mov	r3, r0
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d018      	beq.n	8013322 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80132f0:	f107 0210 	add.w	r2, r7, #16
 80132f4:	f107 0108 	add.w	r1, r7, #8
 80132f8:	2300      	movs	r3, #0
 80132fa:	68f8      	ldr	r0, [r7, #12]
 80132fc:	f000 fbf8 	bl	8013af0 <xQueueGenericSendFromISR>
 8013300:	4603      	mov	r3, r0
 8013302:	2b01      	cmp	r3, #1
 8013304:	d001      	beq.n	801330a <osMessagePut+0x42>
      return osErrorOS;
 8013306:	23ff      	movs	r3, #255	@ 0xff
 8013308:	e018      	b.n	801333c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801330a:	693b      	ldr	r3, [r7, #16]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d014      	beq.n	801333a <osMessagePut+0x72>
 8013310:	4b0c      	ldr	r3, [pc, #48]	@ (8013344 <osMessagePut+0x7c>)
 8013312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013316:	601a      	str	r2, [r3, #0]
 8013318:	f3bf 8f4f 	dsb	sy
 801331c:	f3bf 8f6f 	isb	sy
 8013320:	e00b      	b.n	801333a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8013322:	f107 0108 	add.w	r1, r7, #8
 8013326:	2300      	movs	r3, #0
 8013328:	697a      	ldr	r2, [r7, #20]
 801332a:	68f8      	ldr	r0, [r7, #12]
 801332c:	f000 fad6 	bl	80138dc <xQueueGenericSend>
 8013330:	4603      	mov	r3, r0
 8013332:	2b01      	cmp	r3, #1
 8013334:	d001      	beq.n	801333a <osMessagePut+0x72>
      return osErrorOS;
 8013336:	23ff      	movs	r3, #255	@ 0xff
 8013338:	e000      	b.n	801333c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801333a:	2300      	movs	r3, #0
}
 801333c:	4618      	mov	r0, r3
 801333e:	3718      	adds	r7, #24
 8013340:	46bd      	mov	sp, r7
 8013342:	bd80      	pop	{r7, pc}
 8013344:	e000ed04 	.word	0xe000ed04

08013348 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8013348:	b590      	push	{r4, r7, lr}
 801334a:	b08b      	sub	sp, #44	@ 0x2c
 801334c:	af00      	add	r7, sp, #0
 801334e:	60f8      	str	r0, [r7, #12]
 8013350:	60b9      	str	r1, [r7, #8]
 8013352:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8013354:	68bb      	ldr	r3, [r7, #8]
 8013356:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8013358:	2300      	movs	r3, #0
 801335a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 801335c:	68bb      	ldr	r3, [r7, #8]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d10a      	bne.n	8013378 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8013362:	2380      	movs	r3, #128	@ 0x80
 8013364:	617b      	str	r3, [r7, #20]
    return event;
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	461c      	mov	r4, r3
 801336a:	f107 0314 	add.w	r3, r7, #20
 801336e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013372:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013376:	e054      	b.n	8013422 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8013378:	2300      	movs	r3, #0
 801337a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 801337c:	2300      	movs	r3, #0
 801337e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013386:	d103      	bne.n	8013390 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8013388:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801338c:	627b      	str	r3, [r7, #36]	@ 0x24
 801338e:	e009      	b.n	80133a4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d006      	beq.n	80133a4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 801339a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801339c:	2b00      	cmp	r3, #0
 801339e:	d101      	bne.n	80133a4 <osMessageGet+0x5c>
      ticks = 1;
 80133a0:	2301      	movs	r3, #1
 80133a2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80133a4:	f7ff fdf1 	bl	8012f8a <inHandlerMode>
 80133a8:	4603      	mov	r3, r0
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d01c      	beq.n	80133e8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80133ae:	f107 0220 	add.w	r2, r7, #32
 80133b2:	f107 0314 	add.w	r3, r7, #20
 80133b6:	3304      	adds	r3, #4
 80133b8:	4619      	mov	r1, r3
 80133ba:	68b8      	ldr	r0, [r7, #8]
 80133bc:	f000 fed4 	bl	8014168 <xQueueReceiveFromISR>
 80133c0:	4603      	mov	r3, r0
 80133c2:	2b01      	cmp	r3, #1
 80133c4:	d102      	bne.n	80133cc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80133c6:	2310      	movs	r3, #16
 80133c8:	617b      	str	r3, [r7, #20]
 80133ca:	e001      	b.n	80133d0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80133cc:	2300      	movs	r3, #0
 80133ce:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80133d0:	6a3b      	ldr	r3, [r7, #32]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d01d      	beq.n	8013412 <osMessageGet+0xca>
 80133d6:	4b15      	ldr	r3, [pc, #84]	@ (801342c <osMessageGet+0xe4>)
 80133d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80133dc:	601a      	str	r2, [r3, #0]
 80133de:	f3bf 8f4f 	dsb	sy
 80133e2:	f3bf 8f6f 	isb	sy
 80133e6:	e014      	b.n	8013412 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80133e8:	f107 0314 	add.w	r3, r7, #20
 80133ec:	3304      	adds	r3, #4
 80133ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80133f0:	4619      	mov	r1, r3
 80133f2:	68b8      	ldr	r0, [r7, #8]
 80133f4:	f000 fcb8 	bl	8013d68 <xQueueReceive>
 80133f8:	4603      	mov	r3, r0
 80133fa:	2b01      	cmp	r3, #1
 80133fc:	d102      	bne.n	8013404 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80133fe:	2310      	movs	r3, #16
 8013400:	617b      	str	r3, [r7, #20]
 8013402:	e006      	b.n	8013412 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8013404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013406:	2b00      	cmp	r3, #0
 8013408:	d101      	bne.n	801340e <osMessageGet+0xc6>
 801340a:	2300      	movs	r3, #0
 801340c:	e000      	b.n	8013410 <osMessageGet+0xc8>
 801340e:	2340      	movs	r3, #64	@ 0x40
 8013410:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	461c      	mov	r4, r3
 8013416:	f107 0314 	add.w	r3, r7, #20
 801341a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801341e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8013422:	68f8      	ldr	r0, [r7, #12]
 8013424:	372c      	adds	r7, #44	@ 0x2c
 8013426:	46bd      	mov	sp, r7
 8013428:	bd90      	pop	{r4, r7, pc}
 801342a:	bf00      	nop
 801342c:	e000ed04 	.word	0xe000ed04

08013430 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013430:	b480      	push	{r7}
 8013432:	b083      	sub	sp, #12
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	f103 0208 	add.w	r2, r3, #8
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013448:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	f103 0208 	add.w	r2, r3, #8
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f103 0208 	add.w	r2, r3, #8
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	2200      	movs	r2, #0
 8013462:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013464:	bf00      	nop
 8013466:	370c      	adds	r7, #12
 8013468:	46bd      	mov	sp, r7
 801346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346e:	4770      	bx	lr

08013470 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013470:	b480      	push	{r7}
 8013472:	b083      	sub	sp, #12
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	2200      	movs	r2, #0
 801347c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801347e:	bf00      	nop
 8013480:	370c      	adds	r7, #12
 8013482:	46bd      	mov	sp, r7
 8013484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013488:	4770      	bx	lr

0801348a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801348a:	b480      	push	{r7}
 801348c:	b085      	sub	sp, #20
 801348e:	af00      	add	r7, sp, #0
 8013490:	6078      	str	r0, [r7, #4]
 8013492:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	685b      	ldr	r3, [r3, #4]
 8013498:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801349a:	683b      	ldr	r3, [r7, #0]
 801349c:	68fa      	ldr	r2, [r7, #12]
 801349e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	689a      	ldr	r2, [r3, #8]
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	689b      	ldr	r3, [r3, #8]
 80134ac:	683a      	ldr	r2, [r7, #0]
 80134ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	683a      	ldr	r2, [r7, #0]
 80134b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	687a      	ldr	r2, [r7, #4]
 80134ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	1c5a      	adds	r2, r3, #1
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	601a      	str	r2, [r3, #0]
}
 80134c6:	bf00      	nop
 80134c8:	3714      	adds	r7, #20
 80134ca:	46bd      	mov	sp, r7
 80134cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d0:	4770      	bx	lr

080134d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80134d2:	b480      	push	{r7}
 80134d4:	b085      	sub	sp, #20
 80134d6:	af00      	add	r7, sp, #0
 80134d8:	6078      	str	r0, [r7, #4]
 80134da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80134dc:	683b      	ldr	r3, [r7, #0]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80134e2:	68bb      	ldr	r3, [r7, #8]
 80134e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80134e8:	d103      	bne.n	80134f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	691b      	ldr	r3, [r3, #16]
 80134ee:	60fb      	str	r3, [r7, #12]
 80134f0:	e00c      	b.n	801350c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	3308      	adds	r3, #8
 80134f6:	60fb      	str	r3, [r7, #12]
 80134f8:	e002      	b.n	8013500 <vListInsert+0x2e>
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	685b      	ldr	r3, [r3, #4]
 80134fe:	60fb      	str	r3, [r7, #12]
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	685b      	ldr	r3, [r3, #4]
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	68ba      	ldr	r2, [r7, #8]
 8013508:	429a      	cmp	r2, r3
 801350a:	d2f6      	bcs.n	80134fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	685a      	ldr	r2, [r3, #4]
 8013510:	683b      	ldr	r3, [r7, #0]
 8013512:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013514:	683b      	ldr	r3, [r7, #0]
 8013516:	685b      	ldr	r3, [r3, #4]
 8013518:	683a      	ldr	r2, [r7, #0]
 801351a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801351c:	683b      	ldr	r3, [r7, #0]
 801351e:	68fa      	ldr	r2, [r7, #12]
 8013520:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	683a      	ldr	r2, [r7, #0]
 8013526:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	687a      	ldr	r2, [r7, #4]
 801352c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	1c5a      	adds	r2, r3, #1
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	601a      	str	r2, [r3, #0]
}
 8013538:	bf00      	nop
 801353a:	3714      	adds	r7, #20
 801353c:	46bd      	mov	sp, r7
 801353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013542:	4770      	bx	lr

08013544 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013544:	b480      	push	{r7}
 8013546:	b085      	sub	sp, #20
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	691b      	ldr	r3, [r3, #16]
 8013550:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	685b      	ldr	r3, [r3, #4]
 8013556:	687a      	ldr	r2, [r7, #4]
 8013558:	6892      	ldr	r2, [r2, #8]
 801355a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	689b      	ldr	r3, [r3, #8]
 8013560:	687a      	ldr	r2, [r7, #4]
 8013562:	6852      	ldr	r2, [r2, #4]
 8013564:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	685b      	ldr	r3, [r3, #4]
 801356a:	687a      	ldr	r2, [r7, #4]
 801356c:	429a      	cmp	r2, r3
 801356e:	d103      	bne.n	8013578 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	689a      	ldr	r2, [r3, #8]
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	2200      	movs	r2, #0
 801357c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	1e5a      	subs	r2, r3, #1
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	681b      	ldr	r3, [r3, #0]
}
 801358c:	4618      	mov	r0, r3
 801358e:	3714      	adds	r7, #20
 8013590:	46bd      	mov	sp, r7
 8013592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013596:	4770      	bx	lr

08013598 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b084      	sub	sp, #16
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
 80135a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d10d      	bne.n	80135c8 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80135ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135b0:	b672      	cpsid	i
 80135b2:	f383 8811 	msr	BASEPRI, r3
 80135b6:	f3bf 8f6f 	isb	sy
 80135ba:	f3bf 8f4f 	dsb	sy
 80135be:	b662      	cpsie	i
 80135c0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80135c2:	bf00      	nop
 80135c4:	bf00      	nop
 80135c6:	e7fd      	b.n	80135c4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80135c8:	f002 fac0 	bl	8015b4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	681a      	ldr	r2, [r3, #0]
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80135d4:	68f9      	ldr	r1, [r7, #12]
 80135d6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80135d8:	fb01 f303 	mul.w	r3, r1, r3
 80135dc:	441a      	add	r2, r3
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	2200      	movs	r2, #0
 80135e6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	681a      	ldr	r2, [r3, #0]
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	681a      	ldr	r2, [r3, #0]
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80135f8:	3b01      	subs	r3, #1
 80135fa:	68f9      	ldr	r1, [r7, #12]
 80135fc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80135fe:	fb01 f303 	mul.w	r3, r1, r3
 8013602:	441a      	add	r2, r3
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	22ff      	movs	r2, #255	@ 0xff
 801360c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	22ff      	movs	r2, #255	@ 0xff
 8013614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8013618:	683b      	ldr	r3, [r7, #0]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d114      	bne.n	8013648 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	691b      	ldr	r3, [r3, #16]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d01a      	beq.n	801365c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	3310      	adds	r3, #16
 801362a:	4618      	mov	r0, r3
 801362c:	f001 fd6a 	bl	8015104 <xTaskRemoveFromEventList>
 8013630:	4603      	mov	r3, r0
 8013632:	2b00      	cmp	r3, #0
 8013634:	d012      	beq.n	801365c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013636:	4b0d      	ldr	r3, [pc, #52]	@ (801366c <xQueueGenericReset+0xd4>)
 8013638:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801363c:	601a      	str	r2, [r3, #0]
 801363e:	f3bf 8f4f 	dsb	sy
 8013642:	f3bf 8f6f 	isb	sy
 8013646:	e009      	b.n	801365c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	3310      	adds	r3, #16
 801364c:	4618      	mov	r0, r3
 801364e:	f7ff feef 	bl	8013430 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	3324      	adds	r3, #36	@ 0x24
 8013656:	4618      	mov	r0, r3
 8013658:	f7ff feea 	bl	8013430 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801365c:	f002 faac 	bl	8015bb8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013660:	2301      	movs	r3, #1
}
 8013662:	4618      	mov	r0, r3
 8013664:	3710      	adds	r7, #16
 8013666:	46bd      	mov	sp, r7
 8013668:	bd80      	pop	{r7, pc}
 801366a:	bf00      	nop
 801366c:	e000ed04 	.word	0xe000ed04

08013670 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013670:	b580      	push	{r7, lr}
 8013672:	b08e      	sub	sp, #56	@ 0x38
 8013674:	af02      	add	r7, sp, #8
 8013676:	60f8      	str	r0, [r7, #12]
 8013678:	60b9      	str	r1, [r7, #8]
 801367a:	607a      	str	r2, [r7, #4]
 801367c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d10d      	bne.n	80136a0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8013684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013688:	b672      	cpsid	i
 801368a:	f383 8811 	msr	BASEPRI, r3
 801368e:	f3bf 8f6f 	isb	sy
 8013692:	f3bf 8f4f 	dsb	sy
 8013696:	b662      	cpsie	i
 8013698:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801369a:	bf00      	nop
 801369c:	bf00      	nop
 801369e:	e7fd      	b.n	801369c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80136a0:	683b      	ldr	r3, [r7, #0]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d10d      	bne.n	80136c2 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80136a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136aa:	b672      	cpsid	i
 80136ac:	f383 8811 	msr	BASEPRI, r3
 80136b0:	f3bf 8f6f 	isb	sy
 80136b4:	f3bf 8f4f 	dsb	sy
 80136b8:	b662      	cpsie	i
 80136ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80136bc:	bf00      	nop
 80136be:	bf00      	nop
 80136c0:	e7fd      	b.n	80136be <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d002      	beq.n	80136ce <xQueueGenericCreateStatic+0x5e>
 80136c8:	68bb      	ldr	r3, [r7, #8]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d001      	beq.n	80136d2 <xQueueGenericCreateStatic+0x62>
 80136ce:	2301      	movs	r3, #1
 80136d0:	e000      	b.n	80136d4 <xQueueGenericCreateStatic+0x64>
 80136d2:	2300      	movs	r3, #0
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d10d      	bne.n	80136f4 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80136d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136dc:	b672      	cpsid	i
 80136de:	f383 8811 	msr	BASEPRI, r3
 80136e2:	f3bf 8f6f 	isb	sy
 80136e6:	f3bf 8f4f 	dsb	sy
 80136ea:	b662      	cpsie	i
 80136ec:	623b      	str	r3, [r7, #32]
}
 80136ee:	bf00      	nop
 80136f0:	bf00      	nop
 80136f2:	e7fd      	b.n	80136f0 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d102      	bne.n	8013700 <xQueueGenericCreateStatic+0x90>
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d101      	bne.n	8013704 <xQueueGenericCreateStatic+0x94>
 8013700:	2301      	movs	r3, #1
 8013702:	e000      	b.n	8013706 <xQueueGenericCreateStatic+0x96>
 8013704:	2300      	movs	r3, #0
 8013706:	2b00      	cmp	r3, #0
 8013708:	d10d      	bne.n	8013726 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 801370a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801370e:	b672      	cpsid	i
 8013710:	f383 8811 	msr	BASEPRI, r3
 8013714:	f3bf 8f6f 	isb	sy
 8013718:	f3bf 8f4f 	dsb	sy
 801371c:	b662      	cpsie	i
 801371e:	61fb      	str	r3, [r7, #28]
}
 8013720:	bf00      	nop
 8013722:	bf00      	nop
 8013724:	e7fd      	b.n	8013722 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013726:	2348      	movs	r3, #72	@ 0x48
 8013728:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801372a:	697b      	ldr	r3, [r7, #20]
 801372c:	2b48      	cmp	r3, #72	@ 0x48
 801372e:	d00d      	beq.n	801374c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8013730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013734:	b672      	cpsid	i
 8013736:	f383 8811 	msr	BASEPRI, r3
 801373a:	f3bf 8f6f 	isb	sy
 801373e:	f3bf 8f4f 	dsb	sy
 8013742:	b662      	cpsie	i
 8013744:	61bb      	str	r3, [r7, #24]
}
 8013746:	bf00      	nop
 8013748:	bf00      	nop
 801374a:	e7fd      	b.n	8013748 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801374c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801374e:	683b      	ldr	r3, [r7, #0]
 8013750:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8013752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013754:	2b00      	cmp	r3, #0
 8013756:	d00d      	beq.n	8013774 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801375a:	2201      	movs	r2, #1
 801375c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013760:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8013764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013766:	9300      	str	r3, [sp, #0]
 8013768:	4613      	mov	r3, r2
 801376a:	687a      	ldr	r2, [r7, #4]
 801376c:	68b9      	ldr	r1, [r7, #8]
 801376e:	68f8      	ldr	r0, [r7, #12]
 8013770:	f000 f848 	bl	8013804 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8013776:	4618      	mov	r0, r3
 8013778:	3730      	adds	r7, #48	@ 0x30
 801377a:	46bd      	mov	sp, r7
 801377c:	bd80      	pop	{r7, pc}

0801377e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801377e:	b580      	push	{r7, lr}
 8013780:	b08a      	sub	sp, #40	@ 0x28
 8013782:	af02      	add	r7, sp, #8
 8013784:	60f8      	str	r0, [r7, #12]
 8013786:	60b9      	str	r1, [r7, #8]
 8013788:	4613      	mov	r3, r2
 801378a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d10d      	bne.n	80137ae <xQueueGenericCreate+0x30>
	__asm volatile
 8013792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013796:	b672      	cpsid	i
 8013798:	f383 8811 	msr	BASEPRI, r3
 801379c:	f3bf 8f6f 	isb	sy
 80137a0:	f3bf 8f4f 	dsb	sy
 80137a4:	b662      	cpsie	i
 80137a6:	613b      	str	r3, [r7, #16]
}
 80137a8:	bf00      	nop
 80137aa:	bf00      	nop
 80137ac:	e7fd      	b.n	80137aa <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80137ae:	68bb      	ldr	r3, [r7, #8]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d102      	bne.n	80137ba <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80137b4:	2300      	movs	r3, #0
 80137b6:	61fb      	str	r3, [r7, #28]
 80137b8:	e004      	b.n	80137c4 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	68ba      	ldr	r2, [r7, #8]
 80137be:	fb02 f303 	mul.w	r3, r2, r3
 80137c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80137c4:	69fb      	ldr	r3, [r7, #28]
 80137c6:	3348      	adds	r3, #72	@ 0x48
 80137c8:	4618      	mov	r0, r3
 80137ca:	f002 faed 	bl	8015da8 <pvPortMalloc>
 80137ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80137d0:	69bb      	ldr	r3, [r7, #24]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d011      	beq.n	80137fa <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80137d6:	69bb      	ldr	r3, [r7, #24]
 80137d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80137da:	697b      	ldr	r3, [r7, #20]
 80137dc:	3348      	adds	r3, #72	@ 0x48
 80137de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80137e0:	69bb      	ldr	r3, [r7, #24]
 80137e2:	2200      	movs	r2, #0
 80137e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80137e8:	79fa      	ldrb	r2, [r7, #7]
 80137ea:	69bb      	ldr	r3, [r7, #24]
 80137ec:	9300      	str	r3, [sp, #0]
 80137ee:	4613      	mov	r3, r2
 80137f0:	697a      	ldr	r2, [r7, #20]
 80137f2:	68b9      	ldr	r1, [r7, #8]
 80137f4:	68f8      	ldr	r0, [r7, #12]
 80137f6:	f000 f805 	bl	8013804 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80137fa:	69bb      	ldr	r3, [r7, #24]
	}
 80137fc:	4618      	mov	r0, r3
 80137fe:	3720      	adds	r7, #32
 8013800:	46bd      	mov	sp, r7
 8013802:	bd80      	pop	{r7, pc}

08013804 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b084      	sub	sp, #16
 8013808:	af00      	add	r7, sp, #0
 801380a:	60f8      	str	r0, [r7, #12]
 801380c:	60b9      	str	r1, [r7, #8]
 801380e:	607a      	str	r2, [r7, #4]
 8013810:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013812:	68bb      	ldr	r3, [r7, #8]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d103      	bne.n	8013820 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013818:	69bb      	ldr	r3, [r7, #24]
 801381a:	69ba      	ldr	r2, [r7, #24]
 801381c:	601a      	str	r2, [r3, #0]
 801381e:	e002      	b.n	8013826 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013820:	69bb      	ldr	r3, [r7, #24]
 8013822:	687a      	ldr	r2, [r7, #4]
 8013824:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013826:	69bb      	ldr	r3, [r7, #24]
 8013828:	68fa      	ldr	r2, [r7, #12]
 801382a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801382c:	69bb      	ldr	r3, [r7, #24]
 801382e:	68ba      	ldr	r2, [r7, #8]
 8013830:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013832:	2101      	movs	r1, #1
 8013834:	69b8      	ldr	r0, [r7, #24]
 8013836:	f7ff feaf 	bl	8013598 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801383a:	bf00      	nop
 801383c:	3710      	adds	r7, #16
 801383e:	46bd      	mov	sp, r7
 8013840:	bd80      	pop	{r7, pc}

08013842 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8013842:	b580      	push	{r7, lr}
 8013844:	b082      	sub	sp, #8
 8013846:	af00      	add	r7, sp, #0
 8013848:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d00e      	beq.n	801386e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	2200      	movs	r2, #0
 8013854:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	2200      	movs	r2, #0
 801385a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	2200      	movs	r2, #0
 8013860:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013862:	2300      	movs	r3, #0
 8013864:	2200      	movs	r2, #0
 8013866:	2100      	movs	r1, #0
 8013868:	6878      	ldr	r0, [r7, #4]
 801386a:	f000 f837 	bl	80138dc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801386e:	bf00      	nop
 8013870:	3708      	adds	r7, #8
 8013872:	46bd      	mov	sp, r7
 8013874:	bd80      	pop	{r7, pc}

08013876 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8013876:	b580      	push	{r7, lr}
 8013878:	b086      	sub	sp, #24
 801387a:	af00      	add	r7, sp, #0
 801387c:	4603      	mov	r3, r0
 801387e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013880:	2301      	movs	r3, #1
 8013882:	617b      	str	r3, [r7, #20]
 8013884:	2300      	movs	r3, #0
 8013886:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8013888:	79fb      	ldrb	r3, [r7, #7]
 801388a:	461a      	mov	r2, r3
 801388c:	6939      	ldr	r1, [r7, #16]
 801388e:	6978      	ldr	r0, [r7, #20]
 8013890:	f7ff ff75 	bl	801377e <xQueueGenericCreate>
 8013894:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013896:	68f8      	ldr	r0, [r7, #12]
 8013898:	f7ff ffd3 	bl	8013842 <prvInitialiseMutex>

		return xNewQueue;
 801389c:	68fb      	ldr	r3, [r7, #12]
	}
 801389e:	4618      	mov	r0, r3
 80138a0:	3718      	adds	r7, #24
 80138a2:	46bd      	mov	sp, r7
 80138a4:	bd80      	pop	{r7, pc}

080138a6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80138a6:	b580      	push	{r7, lr}
 80138a8:	b088      	sub	sp, #32
 80138aa:	af02      	add	r7, sp, #8
 80138ac:	4603      	mov	r3, r0
 80138ae:	6039      	str	r1, [r7, #0]
 80138b0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80138b2:	2301      	movs	r3, #1
 80138b4:	617b      	str	r3, [r7, #20]
 80138b6:	2300      	movs	r3, #0
 80138b8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80138ba:	79fb      	ldrb	r3, [r7, #7]
 80138bc:	9300      	str	r3, [sp, #0]
 80138be:	683b      	ldr	r3, [r7, #0]
 80138c0:	2200      	movs	r2, #0
 80138c2:	6939      	ldr	r1, [r7, #16]
 80138c4:	6978      	ldr	r0, [r7, #20]
 80138c6:	f7ff fed3 	bl	8013670 <xQueueGenericCreateStatic>
 80138ca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80138cc:	68f8      	ldr	r0, [r7, #12]
 80138ce:	f7ff ffb8 	bl	8013842 <prvInitialiseMutex>

		return xNewQueue;
 80138d2:	68fb      	ldr	r3, [r7, #12]
	}
 80138d4:	4618      	mov	r0, r3
 80138d6:	3718      	adds	r7, #24
 80138d8:	46bd      	mov	sp, r7
 80138da:	bd80      	pop	{r7, pc}

080138dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b08e      	sub	sp, #56	@ 0x38
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	60f8      	str	r0, [r7, #12]
 80138e4:	60b9      	str	r1, [r7, #8]
 80138e6:	607a      	str	r2, [r7, #4]
 80138e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80138ea:	2300      	movs	r3, #0
 80138ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80138f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d10d      	bne.n	8013914 <xQueueGenericSend+0x38>
	__asm volatile
 80138f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138fc:	b672      	cpsid	i
 80138fe:	f383 8811 	msr	BASEPRI, r3
 8013902:	f3bf 8f6f 	isb	sy
 8013906:	f3bf 8f4f 	dsb	sy
 801390a:	b662      	cpsie	i
 801390c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801390e:	bf00      	nop
 8013910:	bf00      	nop
 8013912:	e7fd      	b.n	8013910 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013914:	68bb      	ldr	r3, [r7, #8]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d103      	bne.n	8013922 <xQueueGenericSend+0x46>
 801391a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801391e:	2b00      	cmp	r3, #0
 8013920:	d101      	bne.n	8013926 <xQueueGenericSend+0x4a>
 8013922:	2301      	movs	r3, #1
 8013924:	e000      	b.n	8013928 <xQueueGenericSend+0x4c>
 8013926:	2300      	movs	r3, #0
 8013928:	2b00      	cmp	r3, #0
 801392a:	d10d      	bne.n	8013948 <xQueueGenericSend+0x6c>
	__asm volatile
 801392c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013930:	b672      	cpsid	i
 8013932:	f383 8811 	msr	BASEPRI, r3
 8013936:	f3bf 8f6f 	isb	sy
 801393a:	f3bf 8f4f 	dsb	sy
 801393e:	b662      	cpsie	i
 8013940:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013942:	bf00      	nop
 8013944:	bf00      	nop
 8013946:	e7fd      	b.n	8013944 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013948:	683b      	ldr	r3, [r7, #0]
 801394a:	2b02      	cmp	r3, #2
 801394c:	d103      	bne.n	8013956 <xQueueGenericSend+0x7a>
 801394e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013952:	2b01      	cmp	r3, #1
 8013954:	d101      	bne.n	801395a <xQueueGenericSend+0x7e>
 8013956:	2301      	movs	r3, #1
 8013958:	e000      	b.n	801395c <xQueueGenericSend+0x80>
 801395a:	2300      	movs	r3, #0
 801395c:	2b00      	cmp	r3, #0
 801395e:	d10d      	bne.n	801397c <xQueueGenericSend+0xa0>
	__asm volatile
 8013960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013964:	b672      	cpsid	i
 8013966:	f383 8811 	msr	BASEPRI, r3
 801396a:	f3bf 8f6f 	isb	sy
 801396e:	f3bf 8f4f 	dsb	sy
 8013972:	b662      	cpsie	i
 8013974:	623b      	str	r3, [r7, #32]
}
 8013976:	bf00      	nop
 8013978:	bf00      	nop
 801397a:	e7fd      	b.n	8013978 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801397c:	f001 fd92 	bl	80154a4 <xTaskGetSchedulerState>
 8013980:	4603      	mov	r3, r0
 8013982:	2b00      	cmp	r3, #0
 8013984:	d102      	bne.n	801398c <xQueueGenericSend+0xb0>
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d101      	bne.n	8013990 <xQueueGenericSend+0xb4>
 801398c:	2301      	movs	r3, #1
 801398e:	e000      	b.n	8013992 <xQueueGenericSend+0xb6>
 8013990:	2300      	movs	r3, #0
 8013992:	2b00      	cmp	r3, #0
 8013994:	d10d      	bne.n	80139b2 <xQueueGenericSend+0xd6>
	__asm volatile
 8013996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801399a:	b672      	cpsid	i
 801399c:	f383 8811 	msr	BASEPRI, r3
 80139a0:	f3bf 8f6f 	isb	sy
 80139a4:	f3bf 8f4f 	dsb	sy
 80139a8:	b662      	cpsie	i
 80139aa:	61fb      	str	r3, [r7, #28]
}
 80139ac:	bf00      	nop
 80139ae:	bf00      	nop
 80139b0:	e7fd      	b.n	80139ae <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80139b2:	f002 f8cb 	bl	8015b4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80139b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80139ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80139be:	429a      	cmp	r2, r3
 80139c0:	d302      	bcc.n	80139c8 <xQueueGenericSend+0xec>
 80139c2:	683b      	ldr	r3, [r7, #0]
 80139c4:	2b02      	cmp	r3, #2
 80139c6:	d129      	bne.n	8013a1c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80139c8:	683a      	ldr	r2, [r7, #0]
 80139ca:	68b9      	ldr	r1, [r7, #8]
 80139cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80139ce:	f000 fc91 	bl	80142f4 <prvCopyDataToQueue>
 80139d2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80139d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d010      	beq.n	80139fe <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80139dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139de:	3324      	adds	r3, #36	@ 0x24
 80139e0:	4618      	mov	r0, r3
 80139e2:	f001 fb8f 	bl	8015104 <xTaskRemoveFromEventList>
 80139e6:	4603      	mov	r3, r0
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d013      	beq.n	8013a14 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80139ec:	4b3f      	ldr	r3, [pc, #252]	@ (8013aec <xQueueGenericSend+0x210>)
 80139ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80139f2:	601a      	str	r2, [r3, #0]
 80139f4:	f3bf 8f4f 	dsb	sy
 80139f8:	f3bf 8f6f 	isb	sy
 80139fc:	e00a      	b.n	8013a14 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80139fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d007      	beq.n	8013a14 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013a04:	4b39      	ldr	r3, [pc, #228]	@ (8013aec <xQueueGenericSend+0x210>)
 8013a06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013a0a:	601a      	str	r2, [r3, #0]
 8013a0c:	f3bf 8f4f 	dsb	sy
 8013a10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013a14:	f002 f8d0 	bl	8015bb8 <vPortExitCritical>
				return pdPASS;
 8013a18:	2301      	movs	r3, #1
 8013a1a:	e063      	b.n	8013ae4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d103      	bne.n	8013a2a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013a22:	f002 f8c9 	bl	8015bb8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013a26:	2300      	movs	r3, #0
 8013a28:	e05c      	b.n	8013ae4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d106      	bne.n	8013a3e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013a30:	f107 0314 	add.w	r3, r7, #20
 8013a34:	4618      	mov	r0, r3
 8013a36:	f001 fbcb 	bl	80151d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013a3a:	2301      	movs	r3, #1
 8013a3c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013a3e:	f002 f8bb 	bl	8015bb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013a42:	f001 f921 	bl	8014c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013a46:	f002 f881 	bl	8015b4c <vPortEnterCritical>
 8013a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013a50:	b25b      	sxtb	r3, r3
 8013a52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013a56:	d103      	bne.n	8013a60 <xQueueGenericSend+0x184>
 8013a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013a66:	b25b      	sxtb	r3, r3
 8013a68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013a6c:	d103      	bne.n	8013a76 <xQueueGenericSend+0x19a>
 8013a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a70:	2200      	movs	r2, #0
 8013a72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013a76:	f002 f89f 	bl	8015bb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013a7a:	1d3a      	adds	r2, r7, #4
 8013a7c:	f107 0314 	add.w	r3, r7, #20
 8013a80:	4611      	mov	r1, r2
 8013a82:	4618      	mov	r0, r3
 8013a84:	f001 fbba 	bl	80151fc <xTaskCheckForTimeOut>
 8013a88:	4603      	mov	r3, r0
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d124      	bne.n	8013ad8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013a8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013a90:	f000 fd28 	bl	80144e4 <prvIsQueueFull>
 8013a94:	4603      	mov	r3, r0
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d018      	beq.n	8013acc <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a9c:	3310      	adds	r3, #16
 8013a9e:	687a      	ldr	r2, [r7, #4]
 8013aa0:	4611      	mov	r1, r2
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f001 fb06 	bl	80150b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013aa8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013aaa:	f000 fcb3 	bl	8014414 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013aae:	f001 f8f9 	bl	8014ca4 <xTaskResumeAll>
 8013ab2:	4603      	mov	r3, r0
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	f47f af7c 	bne.w	80139b2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8013aba:	4b0c      	ldr	r3, [pc, #48]	@ (8013aec <xQueueGenericSend+0x210>)
 8013abc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013ac0:	601a      	str	r2, [r3, #0]
 8013ac2:	f3bf 8f4f 	dsb	sy
 8013ac6:	f3bf 8f6f 	isb	sy
 8013aca:	e772      	b.n	80139b2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013acc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013ace:	f000 fca1 	bl	8014414 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013ad2:	f001 f8e7 	bl	8014ca4 <xTaskResumeAll>
 8013ad6:	e76c      	b.n	80139b2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013ad8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013ada:	f000 fc9b 	bl	8014414 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013ade:	f001 f8e1 	bl	8014ca4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013ae2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	3738      	adds	r7, #56	@ 0x38
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	bd80      	pop	{r7, pc}
 8013aec:	e000ed04 	.word	0xe000ed04

08013af0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b08e      	sub	sp, #56	@ 0x38
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	60f8      	str	r0, [r7, #12]
 8013af8:	60b9      	str	r1, [r7, #8]
 8013afa:	607a      	str	r2, [r7, #4]
 8013afc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d10d      	bne.n	8013b24 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8013b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b0c:	b672      	cpsid	i
 8013b0e:	f383 8811 	msr	BASEPRI, r3
 8013b12:	f3bf 8f6f 	isb	sy
 8013b16:	f3bf 8f4f 	dsb	sy
 8013b1a:	b662      	cpsie	i
 8013b1c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013b1e:	bf00      	nop
 8013b20:	bf00      	nop
 8013b22:	e7fd      	b.n	8013b20 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013b24:	68bb      	ldr	r3, [r7, #8]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d103      	bne.n	8013b32 <xQueueGenericSendFromISR+0x42>
 8013b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d101      	bne.n	8013b36 <xQueueGenericSendFromISR+0x46>
 8013b32:	2301      	movs	r3, #1
 8013b34:	e000      	b.n	8013b38 <xQueueGenericSendFromISR+0x48>
 8013b36:	2300      	movs	r3, #0
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d10d      	bne.n	8013b58 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8013b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b40:	b672      	cpsid	i
 8013b42:	f383 8811 	msr	BASEPRI, r3
 8013b46:	f3bf 8f6f 	isb	sy
 8013b4a:	f3bf 8f4f 	dsb	sy
 8013b4e:	b662      	cpsie	i
 8013b50:	623b      	str	r3, [r7, #32]
}
 8013b52:	bf00      	nop
 8013b54:	bf00      	nop
 8013b56:	e7fd      	b.n	8013b54 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013b58:	683b      	ldr	r3, [r7, #0]
 8013b5a:	2b02      	cmp	r3, #2
 8013b5c:	d103      	bne.n	8013b66 <xQueueGenericSendFromISR+0x76>
 8013b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013b62:	2b01      	cmp	r3, #1
 8013b64:	d101      	bne.n	8013b6a <xQueueGenericSendFromISR+0x7a>
 8013b66:	2301      	movs	r3, #1
 8013b68:	e000      	b.n	8013b6c <xQueueGenericSendFromISR+0x7c>
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d10d      	bne.n	8013b8c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8013b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b74:	b672      	cpsid	i
 8013b76:	f383 8811 	msr	BASEPRI, r3
 8013b7a:	f3bf 8f6f 	isb	sy
 8013b7e:	f3bf 8f4f 	dsb	sy
 8013b82:	b662      	cpsie	i
 8013b84:	61fb      	str	r3, [r7, #28]
}
 8013b86:	bf00      	nop
 8013b88:	bf00      	nop
 8013b8a:	e7fd      	b.n	8013b88 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013b8c:	f002 f8c6 	bl	8015d1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013b90:	f3ef 8211 	mrs	r2, BASEPRI
 8013b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b98:	b672      	cpsid	i
 8013b9a:	f383 8811 	msr	BASEPRI, r3
 8013b9e:	f3bf 8f6f 	isb	sy
 8013ba2:	f3bf 8f4f 	dsb	sy
 8013ba6:	b662      	cpsie	i
 8013ba8:	61ba      	str	r2, [r7, #24]
 8013baa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013bac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013bb8:	429a      	cmp	r2, r3
 8013bba:	d302      	bcc.n	8013bc2 <xQueueGenericSendFromISR+0xd2>
 8013bbc:	683b      	ldr	r3, [r7, #0]
 8013bbe:	2b02      	cmp	r3, #2
 8013bc0:	d12c      	bne.n	8013c1c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013bc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013bcc:	683a      	ldr	r2, [r7, #0]
 8013bce:	68b9      	ldr	r1, [r7, #8]
 8013bd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013bd2:	f000 fb8f 	bl	80142f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013bd6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8013bda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013bde:	d112      	bne.n	8013c06 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d016      	beq.n	8013c16 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bea:	3324      	adds	r3, #36	@ 0x24
 8013bec:	4618      	mov	r0, r3
 8013bee:	f001 fa89 	bl	8015104 <xTaskRemoveFromEventList>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d00e      	beq.n	8013c16 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d00b      	beq.n	8013c16 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	2201      	movs	r2, #1
 8013c02:	601a      	str	r2, [r3, #0]
 8013c04:	e007      	b.n	8013c16 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013c06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013c0a:	3301      	adds	r3, #1
 8013c0c:	b2db      	uxtb	r3, r3
 8013c0e:	b25a      	sxtb	r2, r3
 8013c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013c16:	2301      	movs	r3, #1
 8013c18:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8013c1a:	e001      	b.n	8013c20 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c22:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013c24:	693b      	ldr	r3, [r7, #16]
 8013c26:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013c2a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013c2e:	4618      	mov	r0, r3
 8013c30:	3738      	adds	r7, #56	@ 0x38
 8013c32:	46bd      	mov	sp, r7
 8013c34:	bd80      	pop	{r7, pc}

08013c36 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013c36:	b580      	push	{r7, lr}
 8013c38:	b08e      	sub	sp, #56	@ 0x38
 8013c3a:	af00      	add	r7, sp, #0
 8013c3c:	6078      	str	r0, [r7, #4]
 8013c3e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d10d      	bne.n	8013c66 <xQueueGiveFromISR+0x30>
	__asm volatile
 8013c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c4e:	b672      	cpsid	i
 8013c50:	f383 8811 	msr	BASEPRI, r3
 8013c54:	f3bf 8f6f 	isb	sy
 8013c58:	f3bf 8f4f 	dsb	sy
 8013c5c:	b662      	cpsie	i
 8013c5e:	623b      	str	r3, [r7, #32]
}
 8013c60:	bf00      	nop
 8013c62:	bf00      	nop
 8013c64:	e7fd      	b.n	8013c62 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d00d      	beq.n	8013c8a <xQueueGiveFromISR+0x54>
	__asm volatile
 8013c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c72:	b672      	cpsid	i
 8013c74:	f383 8811 	msr	BASEPRI, r3
 8013c78:	f3bf 8f6f 	isb	sy
 8013c7c:	f3bf 8f4f 	dsb	sy
 8013c80:	b662      	cpsie	i
 8013c82:	61fb      	str	r3, [r7, #28]
}
 8013c84:	bf00      	nop
 8013c86:	bf00      	nop
 8013c88:	e7fd      	b.n	8013c86 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d103      	bne.n	8013c9a <xQueueGiveFromISR+0x64>
 8013c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c94:	689b      	ldr	r3, [r3, #8]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d101      	bne.n	8013c9e <xQueueGiveFromISR+0x68>
 8013c9a:	2301      	movs	r3, #1
 8013c9c:	e000      	b.n	8013ca0 <xQueueGiveFromISR+0x6a>
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d10d      	bne.n	8013cc0 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8013ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ca8:	b672      	cpsid	i
 8013caa:	f383 8811 	msr	BASEPRI, r3
 8013cae:	f3bf 8f6f 	isb	sy
 8013cb2:	f3bf 8f4f 	dsb	sy
 8013cb6:	b662      	cpsie	i
 8013cb8:	61bb      	str	r3, [r7, #24]
}
 8013cba:	bf00      	nop
 8013cbc:	bf00      	nop
 8013cbe:	e7fd      	b.n	8013cbc <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013cc0:	f002 f82c 	bl	8015d1c <vPortValidateInterruptPriority>
	__asm volatile
 8013cc4:	f3ef 8211 	mrs	r2, BASEPRI
 8013cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ccc:	b672      	cpsid	i
 8013cce:	f383 8811 	msr	BASEPRI, r3
 8013cd2:	f3bf 8f6f 	isb	sy
 8013cd6:	f3bf 8f4f 	dsb	sy
 8013cda:	b662      	cpsie	i
 8013cdc:	617a      	str	r2, [r7, #20]
 8013cde:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013ce0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ce8:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013cee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013cf0:	429a      	cmp	r2, r3
 8013cf2:	d22b      	bcs.n	8013d4c <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cf6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013cfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d00:	1c5a      	adds	r2, r3, #1
 8013d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d04:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013d06:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013d0e:	d112      	bne.n	8013d36 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d016      	beq.n	8013d46 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d1a:	3324      	adds	r3, #36	@ 0x24
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f001 f9f1 	bl	8015104 <xTaskRemoveFromEventList>
 8013d22:	4603      	mov	r3, r0
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d00e      	beq.n	8013d46 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013d28:	683b      	ldr	r3, [r7, #0]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d00b      	beq.n	8013d46 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013d2e:	683b      	ldr	r3, [r7, #0]
 8013d30:	2201      	movs	r2, #1
 8013d32:	601a      	str	r2, [r3, #0]
 8013d34:	e007      	b.n	8013d46 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013d36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013d3a:	3301      	adds	r3, #1
 8013d3c:	b2db      	uxtb	r3, r3
 8013d3e:	b25a      	sxtb	r2, r3
 8013d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013d46:	2301      	movs	r3, #1
 8013d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8013d4a:	e001      	b.n	8013d50 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d52:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	f383 8811 	msr	BASEPRI, r3
}
 8013d5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013d5e:	4618      	mov	r0, r3
 8013d60:	3738      	adds	r7, #56	@ 0x38
 8013d62:	46bd      	mov	sp, r7
 8013d64:	bd80      	pop	{r7, pc}
	...

08013d68 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b08c      	sub	sp, #48	@ 0x30
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	60f8      	str	r0, [r7, #12]
 8013d70:	60b9      	str	r1, [r7, #8]
 8013d72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013d74:	2300      	movs	r3, #0
 8013d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d10d      	bne.n	8013d9e <xQueueReceive+0x36>
	__asm volatile
 8013d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d86:	b672      	cpsid	i
 8013d88:	f383 8811 	msr	BASEPRI, r3
 8013d8c:	f3bf 8f6f 	isb	sy
 8013d90:	f3bf 8f4f 	dsb	sy
 8013d94:	b662      	cpsie	i
 8013d96:	623b      	str	r3, [r7, #32]
}
 8013d98:	bf00      	nop
 8013d9a:	bf00      	nop
 8013d9c:	e7fd      	b.n	8013d9a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013d9e:	68bb      	ldr	r3, [r7, #8]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d103      	bne.n	8013dac <xQueueReceive+0x44>
 8013da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d101      	bne.n	8013db0 <xQueueReceive+0x48>
 8013dac:	2301      	movs	r3, #1
 8013dae:	e000      	b.n	8013db2 <xQueueReceive+0x4a>
 8013db0:	2300      	movs	r3, #0
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d10d      	bne.n	8013dd2 <xQueueReceive+0x6a>
	__asm volatile
 8013db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013dba:	b672      	cpsid	i
 8013dbc:	f383 8811 	msr	BASEPRI, r3
 8013dc0:	f3bf 8f6f 	isb	sy
 8013dc4:	f3bf 8f4f 	dsb	sy
 8013dc8:	b662      	cpsie	i
 8013dca:	61fb      	str	r3, [r7, #28]
}
 8013dcc:	bf00      	nop
 8013dce:	bf00      	nop
 8013dd0:	e7fd      	b.n	8013dce <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013dd2:	f001 fb67 	bl	80154a4 <xTaskGetSchedulerState>
 8013dd6:	4603      	mov	r3, r0
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d102      	bne.n	8013de2 <xQueueReceive+0x7a>
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d101      	bne.n	8013de6 <xQueueReceive+0x7e>
 8013de2:	2301      	movs	r3, #1
 8013de4:	e000      	b.n	8013de8 <xQueueReceive+0x80>
 8013de6:	2300      	movs	r3, #0
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d10d      	bne.n	8013e08 <xQueueReceive+0xa0>
	__asm volatile
 8013dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013df0:	b672      	cpsid	i
 8013df2:	f383 8811 	msr	BASEPRI, r3
 8013df6:	f3bf 8f6f 	isb	sy
 8013dfa:	f3bf 8f4f 	dsb	sy
 8013dfe:	b662      	cpsie	i
 8013e00:	61bb      	str	r3, [r7, #24]
}
 8013e02:	bf00      	nop
 8013e04:	bf00      	nop
 8013e06:	e7fd      	b.n	8013e04 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013e08:	f001 fea0 	bl	8015b4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e10:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d01f      	beq.n	8013e58 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013e18:	68b9      	ldr	r1, [r7, #8]
 8013e1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013e1c:	f000 fad4 	bl	80143c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e22:	1e5a      	subs	r2, r3, #1
 8013e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e26:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e2a:	691b      	ldr	r3, [r3, #16]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d00f      	beq.n	8013e50 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e32:	3310      	adds	r3, #16
 8013e34:	4618      	mov	r0, r3
 8013e36:	f001 f965 	bl	8015104 <xTaskRemoveFromEventList>
 8013e3a:	4603      	mov	r3, r0
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d007      	beq.n	8013e50 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013e40:	4b3c      	ldr	r3, [pc, #240]	@ (8013f34 <xQueueReceive+0x1cc>)
 8013e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013e46:	601a      	str	r2, [r3, #0]
 8013e48:	f3bf 8f4f 	dsb	sy
 8013e4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013e50:	f001 feb2 	bl	8015bb8 <vPortExitCritical>
				return pdPASS;
 8013e54:	2301      	movs	r3, #1
 8013e56:	e069      	b.n	8013f2c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d103      	bne.n	8013e66 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013e5e:	f001 feab 	bl	8015bb8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013e62:	2300      	movs	r3, #0
 8013e64:	e062      	b.n	8013f2c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d106      	bne.n	8013e7a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013e6c:	f107 0310 	add.w	r3, r7, #16
 8013e70:	4618      	mov	r0, r3
 8013e72:	f001 f9ad 	bl	80151d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013e76:	2301      	movs	r3, #1
 8013e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013e7a:	f001 fe9d 	bl	8015bb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013e7e:	f000 ff03 	bl	8014c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013e82:	f001 fe63 	bl	8015b4c <vPortEnterCritical>
 8013e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013e8c:	b25b      	sxtb	r3, r3
 8013e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013e92:	d103      	bne.n	8013e9c <xQueueReceive+0x134>
 8013e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e96:	2200      	movs	r2, #0
 8013e98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013ea2:	b25b      	sxtb	r3, r3
 8013ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013ea8:	d103      	bne.n	8013eb2 <xQueueReceive+0x14a>
 8013eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013eac:	2200      	movs	r2, #0
 8013eae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013eb2:	f001 fe81 	bl	8015bb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013eb6:	1d3a      	adds	r2, r7, #4
 8013eb8:	f107 0310 	add.w	r3, r7, #16
 8013ebc:	4611      	mov	r1, r2
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f001 f99c 	bl	80151fc <xTaskCheckForTimeOut>
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d123      	bne.n	8013f12 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013eca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013ecc:	f000 faf4 	bl	80144b8 <prvIsQueueEmpty>
 8013ed0:	4603      	mov	r3, r0
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d017      	beq.n	8013f06 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ed8:	3324      	adds	r3, #36	@ 0x24
 8013eda:	687a      	ldr	r2, [r7, #4]
 8013edc:	4611      	mov	r1, r2
 8013ede:	4618      	mov	r0, r3
 8013ee0:	f001 f8e8 	bl	80150b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013ee4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013ee6:	f000 fa95 	bl	8014414 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013eea:	f000 fedb 	bl	8014ca4 <xTaskResumeAll>
 8013eee:	4603      	mov	r3, r0
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d189      	bne.n	8013e08 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8013ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8013f34 <xQueueReceive+0x1cc>)
 8013ef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013efa:	601a      	str	r2, [r3, #0]
 8013efc:	f3bf 8f4f 	dsb	sy
 8013f00:	f3bf 8f6f 	isb	sy
 8013f04:	e780      	b.n	8013e08 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013f06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013f08:	f000 fa84 	bl	8014414 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013f0c:	f000 feca 	bl	8014ca4 <xTaskResumeAll>
 8013f10:	e77a      	b.n	8013e08 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013f12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013f14:	f000 fa7e 	bl	8014414 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013f18:	f000 fec4 	bl	8014ca4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013f1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013f1e:	f000 facb 	bl	80144b8 <prvIsQueueEmpty>
 8013f22:	4603      	mov	r3, r0
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	f43f af6f 	beq.w	8013e08 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013f2a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	3730      	adds	r7, #48	@ 0x30
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bd80      	pop	{r7, pc}
 8013f34:	e000ed04 	.word	0xe000ed04

08013f38 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b08e      	sub	sp, #56	@ 0x38
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
 8013f40:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013f42:	2300      	movs	r3, #0
 8013f44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d10d      	bne.n	8013f70 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8013f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f58:	b672      	cpsid	i
 8013f5a:	f383 8811 	msr	BASEPRI, r3
 8013f5e:	f3bf 8f6f 	isb	sy
 8013f62:	f3bf 8f4f 	dsb	sy
 8013f66:	b662      	cpsie	i
 8013f68:	623b      	str	r3, [r7, #32]
}
 8013f6a:	bf00      	nop
 8013f6c:	bf00      	nop
 8013f6e:	e7fd      	b.n	8013f6c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d00d      	beq.n	8013f94 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8013f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f7c:	b672      	cpsid	i
 8013f7e:	f383 8811 	msr	BASEPRI, r3
 8013f82:	f3bf 8f6f 	isb	sy
 8013f86:	f3bf 8f4f 	dsb	sy
 8013f8a:	b662      	cpsie	i
 8013f8c:	61fb      	str	r3, [r7, #28]
}
 8013f8e:	bf00      	nop
 8013f90:	bf00      	nop
 8013f92:	e7fd      	b.n	8013f90 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013f94:	f001 fa86 	bl	80154a4 <xTaskGetSchedulerState>
 8013f98:	4603      	mov	r3, r0
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d102      	bne.n	8013fa4 <xQueueSemaphoreTake+0x6c>
 8013f9e:	683b      	ldr	r3, [r7, #0]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d101      	bne.n	8013fa8 <xQueueSemaphoreTake+0x70>
 8013fa4:	2301      	movs	r3, #1
 8013fa6:	e000      	b.n	8013faa <xQueueSemaphoreTake+0x72>
 8013fa8:	2300      	movs	r3, #0
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d10d      	bne.n	8013fca <xQueueSemaphoreTake+0x92>
	__asm volatile
 8013fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fb2:	b672      	cpsid	i
 8013fb4:	f383 8811 	msr	BASEPRI, r3
 8013fb8:	f3bf 8f6f 	isb	sy
 8013fbc:	f3bf 8f4f 	dsb	sy
 8013fc0:	b662      	cpsie	i
 8013fc2:	61bb      	str	r3, [r7, #24]
}
 8013fc4:	bf00      	nop
 8013fc6:	bf00      	nop
 8013fc8:	e7fd      	b.n	8013fc6 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013fca:	f001 fdbf 	bl	8015b4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013fd2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d024      	beq.n	8014024 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fdc:	1e5a      	subs	r2, r3, #1
 8013fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fe0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d104      	bne.n	8013ff4 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013fea:	f001 fc25 	bl	8015838 <pvTaskIncrementMutexHeldCount>
 8013fee:	4602      	mov	r2, r0
 8013ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ff2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ff6:	691b      	ldr	r3, [r3, #16]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d00f      	beq.n	801401c <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ffe:	3310      	adds	r3, #16
 8014000:	4618      	mov	r0, r3
 8014002:	f001 f87f 	bl	8015104 <xTaskRemoveFromEventList>
 8014006:	4603      	mov	r3, r0
 8014008:	2b00      	cmp	r3, #0
 801400a:	d007      	beq.n	801401c <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801400c:	4b55      	ldr	r3, [pc, #340]	@ (8014164 <xQueueSemaphoreTake+0x22c>)
 801400e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014012:	601a      	str	r2, [r3, #0]
 8014014:	f3bf 8f4f 	dsb	sy
 8014018:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801401c:	f001 fdcc 	bl	8015bb8 <vPortExitCritical>
				return pdPASS;
 8014020:	2301      	movs	r3, #1
 8014022:	e09a      	b.n	801415a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014024:	683b      	ldr	r3, [r7, #0]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d114      	bne.n	8014054 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801402a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801402c:	2b00      	cmp	r3, #0
 801402e:	d00d      	beq.n	801404c <xQueueSemaphoreTake+0x114>
	__asm volatile
 8014030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014034:	b672      	cpsid	i
 8014036:	f383 8811 	msr	BASEPRI, r3
 801403a:	f3bf 8f6f 	isb	sy
 801403e:	f3bf 8f4f 	dsb	sy
 8014042:	b662      	cpsie	i
 8014044:	617b      	str	r3, [r7, #20]
}
 8014046:	bf00      	nop
 8014048:	bf00      	nop
 801404a:	e7fd      	b.n	8014048 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801404c:	f001 fdb4 	bl	8015bb8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014050:	2300      	movs	r3, #0
 8014052:	e082      	b.n	801415a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014056:	2b00      	cmp	r3, #0
 8014058:	d106      	bne.n	8014068 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801405a:	f107 030c 	add.w	r3, r7, #12
 801405e:	4618      	mov	r0, r3
 8014060:	f001 f8b6 	bl	80151d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014064:	2301      	movs	r3, #1
 8014066:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014068:	f001 fda6 	bl	8015bb8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801406c:	f000 fe0c 	bl	8014c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014070:	f001 fd6c 	bl	8015b4c <vPortEnterCritical>
 8014074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014076:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801407a:	b25b      	sxtb	r3, r3
 801407c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014080:	d103      	bne.n	801408a <xQueueSemaphoreTake+0x152>
 8014082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014084:	2200      	movs	r2, #0
 8014086:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801408a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801408c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014090:	b25b      	sxtb	r3, r3
 8014092:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014096:	d103      	bne.n	80140a0 <xQueueSemaphoreTake+0x168>
 8014098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801409a:	2200      	movs	r2, #0
 801409c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80140a0:	f001 fd8a 	bl	8015bb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80140a4:	463a      	mov	r2, r7
 80140a6:	f107 030c 	add.w	r3, r7, #12
 80140aa:	4611      	mov	r1, r2
 80140ac:	4618      	mov	r0, r3
 80140ae:	f001 f8a5 	bl	80151fc <xTaskCheckForTimeOut>
 80140b2:	4603      	mov	r3, r0
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d132      	bne.n	801411e <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80140b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80140ba:	f000 f9fd 	bl	80144b8 <prvIsQueueEmpty>
 80140be:	4603      	mov	r3, r0
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d026      	beq.n	8014112 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80140c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d109      	bne.n	80140e0 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80140cc:	f001 fd3e 	bl	8015b4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80140d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140d2:	689b      	ldr	r3, [r3, #8]
 80140d4:	4618      	mov	r0, r3
 80140d6:	f001 fa03 	bl	80154e0 <xTaskPriorityInherit>
 80140da:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80140dc:	f001 fd6c 	bl	8015bb8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80140e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140e2:	3324      	adds	r3, #36	@ 0x24
 80140e4:	683a      	ldr	r2, [r7, #0]
 80140e6:	4611      	mov	r1, r2
 80140e8:	4618      	mov	r0, r3
 80140ea:	f000 ffe3 	bl	80150b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80140ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80140f0:	f000 f990 	bl	8014414 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80140f4:	f000 fdd6 	bl	8014ca4 <xTaskResumeAll>
 80140f8:	4603      	mov	r3, r0
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	f47f af65 	bne.w	8013fca <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8014100:	4b18      	ldr	r3, [pc, #96]	@ (8014164 <xQueueSemaphoreTake+0x22c>)
 8014102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014106:	601a      	str	r2, [r3, #0]
 8014108:	f3bf 8f4f 	dsb	sy
 801410c:	f3bf 8f6f 	isb	sy
 8014110:	e75b      	b.n	8013fca <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8014112:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014114:	f000 f97e 	bl	8014414 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014118:	f000 fdc4 	bl	8014ca4 <xTaskResumeAll>
 801411c:	e755      	b.n	8013fca <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801411e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014120:	f000 f978 	bl	8014414 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014124:	f000 fdbe 	bl	8014ca4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014128:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801412a:	f000 f9c5 	bl	80144b8 <prvIsQueueEmpty>
 801412e:	4603      	mov	r3, r0
 8014130:	2b00      	cmp	r3, #0
 8014132:	f43f af4a 	beq.w	8013fca <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8014136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014138:	2b00      	cmp	r3, #0
 801413a:	d00d      	beq.n	8014158 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 801413c:	f001 fd06 	bl	8015b4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014140:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014142:	f000 f8bf 	bl	80142c4 <prvGetDisinheritPriorityAfterTimeout>
 8014146:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801414a:	689b      	ldr	r3, [r3, #8]
 801414c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801414e:	4618      	mov	r0, r3
 8014150:	f001 fad2 	bl	80156f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8014154:	f001 fd30 	bl	8015bb8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014158:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801415a:	4618      	mov	r0, r3
 801415c:	3738      	adds	r7, #56	@ 0x38
 801415e:	46bd      	mov	sp, r7
 8014160:	bd80      	pop	{r7, pc}
 8014162:	bf00      	nop
 8014164:	e000ed04 	.word	0xe000ed04

08014168 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014168:	b580      	push	{r7, lr}
 801416a:	b08e      	sub	sp, #56	@ 0x38
 801416c:	af00      	add	r7, sp, #0
 801416e:	60f8      	str	r0, [r7, #12]
 8014170:	60b9      	str	r1, [r7, #8]
 8014172:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8014178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801417a:	2b00      	cmp	r3, #0
 801417c:	d10d      	bne.n	801419a <xQueueReceiveFromISR+0x32>
	__asm volatile
 801417e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014182:	b672      	cpsid	i
 8014184:	f383 8811 	msr	BASEPRI, r3
 8014188:	f3bf 8f6f 	isb	sy
 801418c:	f3bf 8f4f 	dsb	sy
 8014190:	b662      	cpsie	i
 8014192:	623b      	str	r3, [r7, #32]
}
 8014194:	bf00      	nop
 8014196:	bf00      	nop
 8014198:	e7fd      	b.n	8014196 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801419a:	68bb      	ldr	r3, [r7, #8]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d103      	bne.n	80141a8 <xQueueReceiveFromISR+0x40>
 80141a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d101      	bne.n	80141ac <xQueueReceiveFromISR+0x44>
 80141a8:	2301      	movs	r3, #1
 80141aa:	e000      	b.n	80141ae <xQueueReceiveFromISR+0x46>
 80141ac:	2300      	movs	r3, #0
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d10d      	bne.n	80141ce <xQueueReceiveFromISR+0x66>
	__asm volatile
 80141b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141b6:	b672      	cpsid	i
 80141b8:	f383 8811 	msr	BASEPRI, r3
 80141bc:	f3bf 8f6f 	isb	sy
 80141c0:	f3bf 8f4f 	dsb	sy
 80141c4:	b662      	cpsie	i
 80141c6:	61fb      	str	r3, [r7, #28]
}
 80141c8:	bf00      	nop
 80141ca:	bf00      	nop
 80141cc:	e7fd      	b.n	80141ca <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80141ce:	f001 fda5 	bl	8015d1c <vPortValidateInterruptPriority>
	__asm volatile
 80141d2:	f3ef 8211 	mrs	r2, BASEPRI
 80141d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141da:	b672      	cpsid	i
 80141dc:	f383 8811 	msr	BASEPRI, r3
 80141e0:	f3bf 8f6f 	isb	sy
 80141e4:	f3bf 8f4f 	dsb	sy
 80141e8:	b662      	cpsie	i
 80141ea:	61ba      	str	r2, [r7, #24]
 80141ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80141ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80141f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80141f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80141f6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80141f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d02f      	beq.n	801425e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80141fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014200:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014204:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014208:	68b9      	ldr	r1, [r7, #8]
 801420a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801420c:	f000 f8dc 	bl	80143c8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014212:	1e5a      	subs	r2, r3, #1
 8014214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014216:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014218:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801421c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014220:	d112      	bne.n	8014248 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014224:	691b      	ldr	r3, [r3, #16]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d016      	beq.n	8014258 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801422a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801422c:	3310      	adds	r3, #16
 801422e:	4618      	mov	r0, r3
 8014230:	f000 ff68 	bl	8015104 <xTaskRemoveFromEventList>
 8014234:	4603      	mov	r3, r0
 8014236:	2b00      	cmp	r3, #0
 8014238:	d00e      	beq.n	8014258 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d00b      	beq.n	8014258 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	2201      	movs	r2, #1
 8014244:	601a      	str	r2, [r3, #0]
 8014246:	e007      	b.n	8014258 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014248:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801424c:	3301      	adds	r3, #1
 801424e:	b2db      	uxtb	r3, r3
 8014250:	b25a      	sxtb	r2, r3
 8014252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8014258:	2301      	movs	r3, #1
 801425a:	637b      	str	r3, [r7, #52]	@ 0x34
 801425c:	e001      	b.n	8014262 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 801425e:	2300      	movs	r3, #0
 8014260:	637b      	str	r3, [r7, #52]	@ 0x34
 8014262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014264:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014266:	693b      	ldr	r3, [r7, #16]
 8014268:	f383 8811 	msr	BASEPRI, r3
}
 801426c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801426e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8014270:	4618      	mov	r0, r3
 8014272:	3738      	adds	r7, #56	@ 0x38
 8014274:	46bd      	mov	sp, r7
 8014276:	bd80      	pop	{r7, pc}

08014278 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b084      	sub	sp, #16
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d10d      	bne.n	80142a6 <vQueueDelete+0x2e>
	__asm volatile
 801428a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801428e:	b672      	cpsid	i
 8014290:	f383 8811 	msr	BASEPRI, r3
 8014294:	f3bf 8f6f 	isb	sy
 8014298:	f3bf 8f4f 	dsb	sy
 801429c:	b662      	cpsie	i
 801429e:	60bb      	str	r3, [r7, #8]
}
 80142a0:	bf00      	nop
 80142a2:	bf00      	nop
 80142a4:	e7fd      	b.n	80142a2 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80142a6:	68f8      	ldr	r0, [r7, #12]
 80142a8:	f000 f934 	bl	8014514 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d102      	bne.n	80142bc <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 80142b6:	68f8      	ldr	r0, [r7, #12]
 80142b8:	f001 fe48 	bl	8015f4c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80142bc:	bf00      	nop
 80142be:	3710      	adds	r7, #16
 80142c0:	46bd      	mov	sp, r7
 80142c2:	bd80      	pop	{r7, pc}

080142c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80142c4:	b480      	push	{r7}
 80142c6:	b085      	sub	sp, #20
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d006      	beq.n	80142e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	f1c3 0307 	rsb	r3, r3, #7
 80142de:	60fb      	str	r3, [r7, #12]
 80142e0:	e001      	b.n	80142e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80142e2:	2300      	movs	r3, #0
 80142e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80142e6:	68fb      	ldr	r3, [r7, #12]
	}
 80142e8:	4618      	mov	r0, r3
 80142ea:	3714      	adds	r7, #20
 80142ec:	46bd      	mov	sp, r7
 80142ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f2:	4770      	bx	lr

080142f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b086      	sub	sp, #24
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	60f8      	str	r0, [r7, #12]
 80142fc:	60b9      	str	r1, [r7, #8]
 80142fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014300:	2300      	movs	r3, #0
 8014302:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014308:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801430e:	2b00      	cmp	r3, #0
 8014310:	d10d      	bne.n	801432e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d14d      	bne.n	80143b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	689b      	ldr	r3, [r3, #8]
 801431e:	4618      	mov	r0, r3
 8014320:	f001 f95e 	bl	80155e0 <xTaskPriorityDisinherit>
 8014324:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	2200      	movs	r2, #0
 801432a:	609a      	str	r2, [r3, #8]
 801432c:	e043      	b.n	80143b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d119      	bne.n	8014368 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	6858      	ldr	r0, [r3, #4]
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801433c:	461a      	mov	r2, r3
 801433e:	68b9      	ldr	r1, [r7, #8]
 8014340:	f002 f898 	bl	8016474 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	685a      	ldr	r2, [r3, #4]
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801434c:	441a      	add	r2, r3
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	685a      	ldr	r2, [r3, #4]
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	689b      	ldr	r3, [r3, #8]
 801435a:	429a      	cmp	r2, r3
 801435c:	d32b      	bcc.n	80143b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	681a      	ldr	r2, [r3, #0]
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	605a      	str	r2, [r3, #4]
 8014366:	e026      	b.n	80143b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	68d8      	ldr	r0, [r3, #12]
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014370:	461a      	mov	r2, r3
 8014372:	68b9      	ldr	r1, [r7, #8]
 8014374:	f002 f87e 	bl	8016474 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	68da      	ldr	r2, [r3, #12]
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014380:	425b      	negs	r3, r3
 8014382:	441a      	add	r2, r3
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	68da      	ldr	r2, [r3, #12]
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	429a      	cmp	r2, r3
 8014392:	d207      	bcs.n	80143a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	689a      	ldr	r2, [r3, #8]
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801439c:	425b      	negs	r3, r3
 801439e:	441a      	add	r2, r3
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	2b02      	cmp	r3, #2
 80143a8:	d105      	bne.n	80143b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80143aa:	693b      	ldr	r3, [r7, #16]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d002      	beq.n	80143b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80143b0:	693b      	ldr	r3, [r7, #16]
 80143b2:	3b01      	subs	r3, #1
 80143b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80143b6:	693b      	ldr	r3, [r7, #16]
 80143b8:	1c5a      	adds	r2, r3, #1
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80143be:	697b      	ldr	r3, [r7, #20]
}
 80143c0:	4618      	mov	r0, r3
 80143c2:	3718      	adds	r7, #24
 80143c4:	46bd      	mov	sp, r7
 80143c6:	bd80      	pop	{r7, pc}

080143c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b082      	sub	sp, #8
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	6078      	str	r0, [r7, #4]
 80143d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d018      	beq.n	801440c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	68da      	ldr	r2, [r3, #12]
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80143e2:	441a      	add	r2, r3
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	68da      	ldr	r2, [r3, #12]
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	689b      	ldr	r3, [r3, #8]
 80143f0:	429a      	cmp	r2, r3
 80143f2:	d303      	bcc.n	80143fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	681a      	ldr	r2, [r3, #0]
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	68d9      	ldr	r1, [r3, #12]
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014404:	461a      	mov	r2, r3
 8014406:	6838      	ldr	r0, [r7, #0]
 8014408:	f002 f834 	bl	8016474 <memcpy>
	}
}
 801440c:	bf00      	nop
 801440e:	3708      	adds	r7, #8
 8014410:	46bd      	mov	sp, r7
 8014412:	bd80      	pop	{r7, pc}

08014414 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b084      	sub	sp, #16
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801441c:	f001 fb96 	bl	8015b4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014426:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014428:	e011      	b.n	801444e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801442e:	2b00      	cmp	r3, #0
 8014430:	d012      	beq.n	8014458 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	3324      	adds	r3, #36	@ 0x24
 8014436:	4618      	mov	r0, r3
 8014438:	f000 fe64 	bl	8015104 <xTaskRemoveFromEventList>
 801443c:	4603      	mov	r3, r0
 801443e:	2b00      	cmp	r3, #0
 8014440:	d001      	beq.n	8014446 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014442:	f000 ff43 	bl	80152cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014446:	7bfb      	ldrb	r3, [r7, #15]
 8014448:	3b01      	subs	r3, #1
 801444a:	b2db      	uxtb	r3, r3
 801444c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801444e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014452:	2b00      	cmp	r3, #0
 8014454:	dce9      	bgt.n	801442a <prvUnlockQueue+0x16>
 8014456:	e000      	b.n	801445a <prvUnlockQueue+0x46>
					break;
 8014458:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	22ff      	movs	r2, #255	@ 0xff
 801445e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8014462:	f001 fba9 	bl	8015bb8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014466:	f001 fb71 	bl	8015b4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014470:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014472:	e011      	b.n	8014498 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	691b      	ldr	r3, [r3, #16]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d012      	beq.n	80144a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	3310      	adds	r3, #16
 8014480:	4618      	mov	r0, r3
 8014482:	f000 fe3f 	bl	8015104 <xTaskRemoveFromEventList>
 8014486:	4603      	mov	r3, r0
 8014488:	2b00      	cmp	r3, #0
 801448a:	d001      	beq.n	8014490 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801448c:	f000 ff1e 	bl	80152cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014490:	7bbb      	ldrb	r3, [r7, #14]
 8014492:	3b01      	subs	r3, #1
 8014494:	b2db      	uxtb	r3, r3
 8014496:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014498:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801449c:	2b00      	cmp	r3, #0
 801449e:	dce9      	bgt.n	8014474 <prvUnlockQueue+0x60>
 80144a0:	e000      	b.n	80144a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80144a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	22ff      	movs	r2, #255	@ 0xff
 80144a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80144ac:	f001 fb84 	bl	8015bb8 <vPortExitCritical>
}
 80144b0:	bf00      	nop
 80144b2:	3710      	adds	r7, #16
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd80      	pop	{r7, pc}

080144b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b084      	sub	sp, #16
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80144c0:	f001 fb44 	bl	8015b4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d102      	bne.n	80144d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80144cc:	2301      	movs	r3, #1
 80144ce:	60fb      	str	r3, [r7, #12]
 80144d0:	e001      	b.n	80144d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80144d2:	2300      	movs	r3, #0
 80144d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80144d6:	f001 fb6f 	bl	8015bb8 <vPortExitCritical>

	return xReturn;
 80144da:	68fb      	ldr	r3, [r7, #12]
}
 80144dc:	4618      	mov	r0, r3
 80144de:	3710      	adds	r7, #16
 80144e0:	46bd      	mov	sp, r7
 80144e2:	bd80      	pop	{r7, pc}

080144e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80144e4:	b580      	push	{r7, lr}
 80144e6:	b084      	sub	sp, #16
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80144ec:	f001 fb2e 	bl	8015b4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80144f8:	429a      	cmp	r2, r3
 80144fa:	d102      	bne.n	8014502 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80144fc:	2301      	movs	r3, #1
 80144fe:	60fb      	str	r3, [r7, #12]
 8014500:	e001      	b.n	8014506 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014502:	2300      	movs	r3, #0
 8014504:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014506:	f001 fb57 	bl	8015bb8 <vPortExitCritical>

	return xReturn;
 801450a:	68fb      	ldr	r3, [r7, #12]
}
 801450c:	4618      	mov	r0, r3
 801450e:	3710      	adds	r7, #16
 8014510:	46bd      	mov	sp, r7
 8014512:	bd80      	pop	{r7, pc}

08014514 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8014514:	b480      	push	{r7}
 8014516:	b085      	sub	sp, #20
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801451c:	2300      	movs	r3, #0
 801451e:	60fb      	str	r3, [r7, #12]
 8014520:	e016      	b.n	8014550 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8014522:	4a10      	ldr	r2, [pc, #64]	@ (8014564 <vQueueUnregisterQueue+0x50>)
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	00db      	lsls	r3, r3, #3
 8014528:	4413      	add	r3, r2
 801452a:	685b      	ldr	r3, [r3, #4]
 801452c:	687a      	ldr	r2, [r7, #4]
 801452e:	429a      	cmp	r2, r3
 8014530:	d10b      	bne.n	801454a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8014532:	4a0c      	ldr	r2, [pc, #48]	@ (8014564 <vQueueUnregisterQueue+0x50>)
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	2100      	movs	r1, #0
 8014538:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801453c:	4a09      	ldr	r2, [pc, #36]	@ (8014564 <vQueueUnregisterQueue+0x50>)
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	00db      	lsls	r3, r3, #3
 8014542:	4413      	add	r3, r2
 8014544:	2200      	movs	r2, #0
 8014546:	605a      	str	r2, [r3, #4]
				break;
 8014548:	e006      	b.n	8014558 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	3301      	adds	r3, #1
 801454e:	60fb      	str	r3, [r7, #12]
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	2b07      	cmp	r3, #7
 8014554:	d9e5      	bls.n	8014522 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8014556:	bf00      	nop
 8014558:	bf00      	nop
 801455a:	3714      	adds	r7, #20
 801455c:	46bd      	mov	sp, r7
 801455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014562:	4770      	bx	lr
 8014564:	2000189c 	.word	0x2000189c

08014568 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014568:	b580      	push	{r7, lr}
 801456a:	b08e      	sub	sp, #56	@ 0x38
 801456c:	af04      	add	r7, sp, #16
 801456e:	60f8      	str	r0, [r7, #12]
 8014570:	60b9      	str	r1, [r7, #8]
 8014572:	607a      	str	r2, [r7, #4]
 8014574:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014578:	2b00      	cmp	r3, #0
 801457a:	d10d      	bne.n	8014598 <xTaskCreateStatic+0x30>
	__asm volatile
 801457c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014580:	b672      	cpsid	i
 8014582:	f383 8811 	msr	BASEPRI, r3
 8014586:	f3bf 8f6f 	isb	sy
 801458a:	f3bf 8f4f 	dsb	sy
 801458e:	b662      	cpsie	i
 8014590:	623b      	str	r3, [r7, #32]
}
 8014592:	bf00      	nop
 8014594:	bf00      	nop
 8014596:	e7fd      	b.n	8014594 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8014598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801459a:	2b00      	cmp	r3, #0
 801459c:	d10d      	bne.n	80145ba <xTaskCreateStatic+0x52>
	__asm volatile
 801459e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145a2:	b672      	cpsid	i
 80145a4:	f383 8811 	msr	BASEPRI, r3
 80145a8:	f3bf 8f6f 	isb	sy
 80145ac:	f3bf 8f4f 	dsb	sy
 80145b0:	b662      	cpsie	i
 80145b2:	61fb      	str	r3, [r7, #28]
}
 80145b4:	bf00      	nop
 80145b6:	bf00      	nop
 80145b8:	e7fd      	b.n	80145b6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80145ba:	23a0      	movs	r3, #160	@ 0xa0
 80145bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80145be:	693b      	ldr	r3, [r7, #16]
 80145c0:	2ba0      	cmp	r3, #160	@ 0xa0
 80145c2:	d00d      	beq.n	80145e0 <xTaskCreateStatic+0x78>
	__asm volatile
 80145c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145c8:	b672      	cpsid	i
 80145ca:	f383 8811 	msr	BASEPRI, r3
 80145ce:	f3bf 8f6f 	isb	sy
 80145d2:	f3bf 8f4f 	dsb	sy
 80145d6:	b662      	cpsie	i
 80145d8:	61bb      	str	r3, [r7, #24]
}
 80145da:	bf00      	nop
 80145dc:	bf00      	nop
 80145de:	e7fd      	b.n	80145dc <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80145e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80145e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d01e      	beq.n	8014626 <xTaskCreateStatic+0xbe>
 80145e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d01b      	beq.n	8014626 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80145ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145f0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80145f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80145f6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80145f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145fa:	2202      	movs	r2, #2
 80145fc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014600:	2300      	movs	r3, #0
 8014602:	9303      	str	r3, [sp, #12]
 8014604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014606:	9302      	str	r3, [sp, #8]
 8014608:	f107 0314 	add.w	r3, r7, #20
 801460c:	9301      	str	r3, [sp, #4]
 801460e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014610:	9300      	str	r3, [sp, #0]
 8014612:	683b      	ldr	r3, [r7, #0]
 8014614:	687a      	ldr	r2, [r7, #4]
 8014616:	68b9      	ldr	r1, [r7, #8]
 8014618:	68f8      	ldr	r0, [r7, #12]
 801461a:	f000 f851 	bl	80146c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801461e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014620:	f000 f8f8 	bl	8014814 <prvAddNewTaskToReadyList>
 8014624:	e001      	b.n	801462a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8014626:	2300      	movs	r3, #0
 8014628:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801462a:	697b      	ldr	r3, [r7, #20]
	}
 801462c:	4618      	mov	r0, r3
 801462e:	3728      	adds	r7, #40	@ 0x28
 8014630:	46bd      	mov	sp, r7
 8014632:	bd80      	pop	{r7, pc}

08014634 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014634:	b580      	push	{r7, lr}
 8014636:	b08c      	sub	sp, #48	@ 0x30
 8014638:	af04      	add	r7, sp, #16
 801463a:	60f8      	str	r0, [r7, #12]
 801463c:	60b9      	str	r1, [r7, #8]
 801463e:	603b      	str	r3, [r7, #0]
 8014640:	4613      	mov	r3, r2
 8014642:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014644:	88fb      	ldrh	r3, [r7, #6]
 8014646:	009b      	lsls	r3, r3, #2
 8014648:	4618      	mov	r0, r3
 801464a:	f001 fbad 	bl	8015da8 <pvPortMalloc>
 801464e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014650:	697b      	ldr	r3, [r7, #20]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d00e      	beq.n	8014674 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014656:	20a0      	movs	r0, #160	@ 0xa0
 8014658:	f001 fba6 	bl	8015da8 <pvPortMalloc>
 801465c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801465e:	69fb      	ldr	r3, [r7, #28]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d003      	beq.n	801466c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014664:	69fb      	ldr	r3, [r7, #28]
 8014666:	697a      	ldr	r2, [r7, #20]
 8014668:	631a      	str	r2, [r3, #48]	@ 0x30
 801466a:	e005      	b.n	8014678 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801466c:	6978      	ldr	r0, [r7, #20]
 801466e:	f001 fc6d 	bl	8015f4c <vPortFree>
 8014672:	e001      	b.n	8014678 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014674:	2300      	movs	r3, #0
 8014676:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014678:	69fb      	ldr	r3, [r7, #28]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d017      	beq.n	80146ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801467e:	69fb      	ldr	r3, [r7, #28]
 8014680:	2200      	movs	r2, #0
 8014682:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014686:	88fa      	ldrh	r2, [r7, #6]
 8014688:	2300      	movs	r3, #0
 801468a:	9303      	str	r3, [sp, #12]
 801468c:	69fb      	ldr	r3, [r7, #28]
 801468e:	9302      	str	r3, [sp, #8]
 8014690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014692:	9301      	str	r3, [sp, #4]
 8014694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014696:	9300      	str	r3, [sp, #0]
 8014698:	683b      	ldr	r3, [r7, #0]
 801469a:	68b9      	ldr	r1, [r7, #8]
 801469c:	68f8      	ldr	r0, [r7, #12]
 801469e:	f000 f80f 	bl	80146c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80146a2:	69f8      	ldr	r0, [r7, #28]
 80146a4:	f000 f8b6 	bl	8014814 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80146a8:	2301      	movs	r3, #1
 80146aa:	61bb      	str	r3, [r7, #24]
 80146ac:	e002      	b.n	80146b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80146ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80146b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80146b4:	69bb      	ldr	r3, [r7, #24]
	}
 80146b6:	4618      	mov	r0, r3
 80146b8:	3720      	adds	r7, #32
 80146ba:	46bd      	mov	sp, r7
 80146bc:	bd80      	pop	{r7, pc}
	...

080146c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b088      	sub	sp, #32
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	60f8      	str	r0, [r7, #12]
 80146c8:	60b9      	str	r1, [r7, #8]
 80146ca:	607a      	str	r2, [r7, #4]
 80146cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80146ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146d0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	009b      	lsls	r3, r3, #2
 80146d6:	461a      	mov	r2, r3
 80146d8:	21a5      	movs	r1, #165	@ 0xa5
 80146da:	f001 fe31 	bl	8016340 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80146de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80146e2:	6879      	ldr	r1, [r7, #4]
 80146e4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80146e8:	440b      	add	r3, r1
 80146ea:	009b      	lsls	r3, r3, #2
 80146ec:	4413      	add	r3, r2
 80146ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80146f0:	69bb      	ldr	r3, [r7, #24]
 80146f2:	f023 0307 	bic.w	r3, r3, #7
 80146f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80146f8:	69bb      	ldr	r3, [r7, #24]
 80146fa:	f003 0307 	and.w	r3, r3, #7
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d00d      	beq.n	801471e <prvInitialiseNewTask+0x5e>
	__asm volatile
 8014702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014706:	b672      	cpsid	i
 8014708:	f383 8811 	msr	BASEPRI, r3
 801470c:	f3bf 8f6f 	isb	sy
 8014710:	f3bf 8f4f 	dsb	sy
 8014714:	b662      	cpsie	i
 8014716:	617b      	str	r3, [r7, #20]
}
 8014718:	bf00      	nop
 801471a:	bf00      	nop
 801471c:	e7fd      	b.n	801471a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801471e:	68bb      	ldr	r3, [r7, #8]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d01f      	beq.n	8014764 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014724:	2300      	movs	r3, #0
 8014726:	61fb      	str	r3, [r7, #28]
 8014728:	e012      	b.n	8014750 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801472a:	68ba      	ldr	r2, [r7, #8]
 801472c:	69fb      	ldr	r3, [r7, #28]
 801472e:	4413      	add	r3, r2
 8014730:	7819      	ldrb	r1, [r3, #0]
 8014732:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014734:	69fb      	ldr	r3, [r7, #28]
 8014736:	4413      	add	r3, r2
 8014738:	3334      	adds	r3, #52	@ 0x34
 801473a:	460a      	mov	r2, r1
 801473c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801473e:	68ba      	ldr	r2, [r7, #8]
 8014740:	69fb      	ldr	r3, [r7, #28]
 8014742:	4413      	add	r3, r2
 8014744:	781b      	ldrb	r3, [r3, #0]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d006      	beq.n	8014758 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801474a:	69fb      	ldr	r3, [r7, #28]
 801474c:	3301      	adds	r3, #1
 801474e:	61fb      	str	r3, [r7, #28]
 8014750:	69fb      	ldr	r3, [r7, #28]
 8014752:	2b0f      	cmp	r3, #15
 8014754:	d9e9      	bls.n	801472a <prvInitialiseNewTask+0x6a>
 8014756:	e000      	b.n	801475a <prvInitialiseNewTask+0x9a>
			{
				break;
 8014758:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801475a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801475c:	2200      	movs	r2, #0
 801475e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8014762:	e003      	b.n	801476c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014766:	2200      	movs	r2, #0
 8014768:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801476c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801476e:	2b06      	cmp	r3, #6
 8014770:	d901      	bls.n	8014776 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014772:	2306      	movs	r3, #6
 8014774:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014778:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801477a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801477c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801477e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014780:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8014782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014784:	2200      	movs	r2, #0
 8014786:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801478a:	3304      	adds	r3, #4
 801478c:	4618      	mov	r0, r3
 801478e:	f7fe fe6f 	bl	8013470 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014794:	3318      	adds	r3, #24
 8014796:	4618      	mov	r0, r3
 8014798:	f7fe fe6a 	bl	8013470 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801479c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801479e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80147a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80147a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147a4:	f1c3 0207 	rsb	r2, r3, #7
 80147a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80147ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80147b0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80147b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147b4:	2200      	movs	r2, #0
 80147b6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80147ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147bc:	2200      	movs	r2, #0
 80147be:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80147c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147c4:	334c      	adds	r3, #76	@ 0x4c
 80147c6:	224c      	movs	r2, #76	@ 0x4c
 80147c8:	2100      	movs	r1, #0
 80147ca:	4618      	mov	r0, r3
 80147cc:	f001 fdb8 	bl	8016340 <memset>
 80147d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147d2:	4a0d      	ldr	r2, [pc, #52]	@ (8014808 <prvInitialiseNewTask+0x148>)
 80147d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80147d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147d8:	4a0c      	ldr	r2, [pc, #48]	@ (801480c <prvInitialiseNewTask+0x14c>)
 80147da:	655a      	str	r2, [r3, #84]	@ 0x54
 80147dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147de:	4a0c      	ldr	r2, [pc, #48]	@ (8014810 <prvInitialiseNewTask+0x150>)
 80147e0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80147e2:	683a      	ldr	r2, [r7, #0]
 80147e4:	68f9      	ldr	r1, [r7, #12]
 80147e6:	69b8      	ldr	r0, [r7, #24]
 80147e8:	f001 f8a0 	bl	801592c <pxPortInitialiseStack>
 80147ec:	4602      	mov	r2, r0
 80147ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80147f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d002      	beq.n	80147fe <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80147f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80147fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80147fe:	bf00      	nop
 8014800:	3720      	adds	r7, #32
 8014802:	46bd      	mov	sp, r7
 8014804:	bd80      	pop	{r7, pc}
 8014806:	bf00      	nop
 8014808:	20009a30 	.word	0x20009a30
 801480c:	20009a98 	.word	0x20009a98
 8014810:	20009b00 	.word	0x20009b00

08014814 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014814:	b580      	push	{r7, lr}
 8014816:	b082      	sub	sp, #8
 8014818:	af00      	add	r7, sp, #0
 801481a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801481c:	f001 f996 	bl	8015b4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014820:	4b2a      	ldr	r3, [pc, #168]	@ (80148cc <prvAddNewTaskToReadyList+0xb8>)
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	3301      	adds	r3, #1
 8014826:	4a29      	ldr	r2, [pc, #164]	@ (80148cc <prvAddNewTaskToReadyList+0xb8>)
 8014828:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801482a:	4b29      	ldr	r3, [pc, #164]	@ (80148d0 <prvAddNewTaskToReadyList+0xbc>)
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d109      	bne.n	8014846 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014832:	4a27      	ldr	r2, [pc, #156]	@ (80148d0 <prvAddNewTaskToReadyList+0xbc>)
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014838:	4b24      	ldr	r3, [pc, #144]	@ (80148cc <prvAddNewTaskToReadyList+0xb8>)
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	2b01      	cmp	r3, #1
 801483e:	d110      	bne.n	8014862 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014840:	f000 fd6a 	bl	8015318 <prvInitialiseTaskLists>
 8014844:	e00d      	b.n	8014862 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014846:	4b23      	ldr	r3, [pc, #140]	@ (80148d4 <prvAddNewTaskToReadyList+0xc0>)
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d109      	bne.n	8014862 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801484e:	4b20      	ldr	r3, [pc, #128]	@ (80148d0 <prvAddNewTaskToReadyList+0xbc>)
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014858:	429a      	cmp	r2, r3
 801485a:	d802      	bhi.n	8014862 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801485c:	4a1c      	ldr	r2, [pc, #112]	@ (80148d0 <prvAddNewTaskToReadyList+0xbc>)
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014862:	4b1d      	ldr	r3, [pc, #116]	@ (80148d8 <prvAddNewTaskToReadyList+0xc4>)
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	3301      	adds	r3, #1
 8014868:	4a1b      	ldr	r2, [pc, #108]	@ (80148d8 <prvAddNewTaskToReadyList+0xc4>)
 801486a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014870:	2201      	movs	r2, #1
 8014872:	409a      	lsls	r2, r3
 8014874:	4b19      	ldr	r3, [pc, #100]	@ (80148dc <prvAddNewTaskToReadyList+0xc8>)
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	4313      	orrs	r3, r2
 801487a:	4a18      	ldr	r2, [pc, #96]	@ (80148dc <prvAddNewTaskToReadyList+0xc8>)
 801487c:	6013      	str	r3, [r2, #0]
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014882:	4613      	mov	r3, r2
 8014884:	009b      	lsls	r3, r3, #2
 8014886:	4413      	add	r3, r2
 8014888:	009b      	lsls	r3, r3, #2
 801488a:	4a15      	ldr	r2, [pc, #84]	@ (80148e0 <prvAddNewTaskToReadyList+0xcc>)
 801488c:	441a      	add	r2, r3
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	3304      	adds	r3, #4
 8014892:	4619      	mov	r1, r3
 8014894:	4610      	mov	r0, r2
 8014896:	f7fe fdf8 	bl	801348a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801489a:	f001 f98d 	bl	8015bb8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801489e:	4b0d      	ldr	r3, [pc, #52]	@ (80148d4 <prvAddNewTaskToReadyList+0xc0>)
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d00e      	beq.n	80148c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80148a6:	4b0a      	ldr	r3, [pc, #40]	@ (80148d0 <prvAddNewTaskToReadyList+0xbc>)
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148b0:	429a      	cmp	r2, r3
 80148b2:	d207      	bcs.n	80148c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80148b4:	4b0b      	ldr	r3, [pc, #44]	@ (80148e4 <prvAddNewTaskToReadyList+0xd0>)
 80148b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80148ba:	601a      	str	r2, [r3, #0]
 80148bc:	f3bf 8f4f 	dsb	sy
 80148c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80148c4:	bf00      	nop
 80148c6:	3708      	adds	r7, #8
 80148c8:	46bd      	mov	sp, r7
 80148ca:	bd80      	pop	{r7, pc}
 80148cc:	200019dc 	.word	0x200019dc
 80148d0:	200018dc 	.word	0x200018dc
 80148d4:	200019e8 	.word	0x200019e8
 80148d8:	200019f8 	.word	0x200019f8
 80148dc:	200019e4 	.word	0x200019e4
 80148e0:	200018e0 	.word	0x200018e0
 80148e4:	e000ed04 	.word	0xe000ed04

080148e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b084      	sub	sp, #16
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80148f0:	2300      	movs	r3, #0
 80148f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d01a      	beq.n	8014930 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80148fa:	4b15      	ldr	r3, [pc, #84]	@ (8014950 <vTaskDelay+0x68>)
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d00d      	beq.n	801491e <vTaskDelay+0x36>
	__asm volatile
 8014902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014906:	b672      	cpsid	i
 8014908:	f383 8811 	msr	BASEPRI, r3
 801490c:	f3bf 8f6f 	isb	sy
 8014910:	f3bf 8f4f 	dsb	sy
 8014914:	b662      	cpsie	i
 8014916:	60bb      	str	r3, [r7, #8]
}
 8014918:	bf00      	nop
 801491a:	bf00      	nop
 801491c:	e7fd      	b.n	801491a <vTaskDelay+0x32>
			vTaskSuspendAll();
 801491e:	f000 f9b3 	bl	8014c88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014922:	2100      	movs	r1, #0
 8014924:	6878      	ldr	r0, [r7, #4]
 8014926:	f000 ff9b 	bl	8015860 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801492a:	f000 f9bb 	bl	8014ca4 <xTaskResumeAll>
 801492e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d107      	bne.n	8014946 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8014936:	4b07      	ldr	r3, [pc, #28]	@ (8014954 <vTaskDelay+0x6c>)
 8014938:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801493c:	601a      	str	r2, [r3, #0]
 801493e:	f3bf 8f4f 	dsb	sy
 8014942:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014946:	bf00      	nop
 8014948:	3710      	adds	r7, #16
 801494a:	46bd      	mov	sp, r7
 801494c:	bd80      	pop	{r7, pc}
 801494e:	bf00      	nop
 8014950:	20001a04 	.word	0x20001a04
 8014954:	e000ed04 	.word	0xe000ed04

08014958 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014958:	b580      	push	{r7, lr}
 801495a:	b084      	sub	sp, #16
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014960:	f001 f8f4 	bl	8015b4c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d102      	bne.n	8014970 <vTaskSuspend+0x18>
 801496a:	4b3e      	ldr	r3, [pc, #248]	@ (8014a64 <vTaskSuspend+0x10c>)
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	e000      	b.n	8014972 <vTaskSuspend+0x1a>
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	3304      	adds	r3, #4
 8014978:	4618      	mov	r0, r3
 801497a:	f7fe fde3 	bl	8013544 <uxListRemove>
 801497e:	4603      	mov	r3, r0
 8014980:	2b00      	cmp	r3, #0
 8014982:	d115      	bne.n	80149b0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014988:	4937      	ldr	r1, [pc, #220]	@ (8014a68 <vTaskSuspend+0x110>)
 801498a:	4613      	mov	r3, r2
 801498c:	009b      	lsls	r3, r3, #2
 801498e:	4413      	add	r3, r2
 8014990:	009b      	lsls	r3, r3, #2
 8014992:	440b      	add	r3, r1
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d10a      	bne.n	80149b0 <vTaskSuspend+0x58>
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801499e:	2201      	movs	r2, #1
 80149a0:	fa02 f303 	lsl.w	r3, r2, r3
 80149a4:	43da      	mvns	r2, r3
 80149a6:	4b31      	ldr	r3, [pc, #196]	@ (8014a6c <vTaskSuspend+0x114>)
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	4013      	ands	r3, r2
 80149ac:	4a2f      	ldr	r2, [pc, #188]	@ (8014a6c <vTaskSuspend+0x114>)
 80149ae:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d004      	beq.n	80149c2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	3318      	adds	r3, #24
 80149bc:	4618      	mov	r0, r3
 80149be:	f7fe fdc1 	bl	8013544 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	3304      	adds	r3, #4
 80149c6:	4619      	mov	r1, r3
 80149c8:	4829      	ldr	r0, [pc, #164]	@ (8014a70 <vTaskSuspend+0x118>)
 80149ca:	f7fe fd5e 	bl	801348a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80149d4:	b2db      	uxtb	r3, r3
 80149d6:	2b01      	cmp	r3, #1
 80149d8:	d103      	bne.n	80149e2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	2200      	movs	r2, #0
 80149de:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80149e2:	f001 f8e9 	bl	8015bb8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80149e6:	4b23      	ldr	r3, [pc, #140]	@ (8014a74 <vTaskSuspend+0x11c>)
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d005      	beq.n	80149fa <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80149ee:	f001 f8ad 	bl	8015b4c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80149f2:	f000 fd37 	bl	8015464 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80149f6:	f001 f8df 	bl	8015bb8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80149fa:	4b1a      	ldr	r3, [pc, #104]	@ (8014a64 <vTaskSuspend+0x10c>)
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	68fa      	ldr	r2, [r7, #12]
 8014a00:	429a      	cmp	r2, r3
 8014a02:	d12a      	bne.n	8014a5a <vTaskSuspend+0x102>
		{
			if( xSchedulerRunning != pdFALSE )
 8014a04:	4b1b      	ldr	r3, [pc, #108]	@ (8014a74 <vTaskSuspend+0x11c>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d01a      	beq.n	8014a42 <vTaskSuspend+0xea>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8014a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8014a78 <vTaskSuspend+0x120>)
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d00d      	beq.n	8014a30 <vTaskSuspend+0xd8>
	__asm volatile
 8014a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a18:	b672      	cpsid	i
 8014a1a:	f383 8811 	msr	BASEPRI, r3
 8014a1e:	f3bf 8f6f 	isb	sy
 8014a22:	f3bf 8f4f 	dsb	sy
 8014a26:	b662      	cpsie	i
 8014a28:	60bb      	str	r3, [r7, #8]
}
 8014a2a:	bf00      	nop
 8014a2c:	bf00      	nop
 8014a2e:	e7fd      	b.n	8014a2c <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 8014a30:	4b12      	ldr	r3, [pc, #72]	@ (8014a7c <vTaskSuspend+0x124>)
 8014a32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014a36:	601a      	str	r2, [r3, #0]
 8014a38:	f3bf 8f4f 	dsb	sy
 8014a3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014a40:	e00b      	b.n	8014a5a <vTaskSuspend+0x102>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8014a42:	4b0b      	ldr	r3, [pc, #44]	@ (8014a70 <vTaskSuspend+0x118>)
 8014a44:	681a      	ldr	r2, [r3, #0]
 8014a46:	4b0e      	ldr	r3, [pc, #56]	@ (8014a80 <vTaskSuspend+0x128>)
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	429a      	cmp	r2, r3
 8014a4c:	d103      	bne.n	8014a56 <vTaskSuspend+0xfe>
					pxCurrentTCB = NULL;
 8014a4e:	4b05      	ldr	r3, [pc, #20]	@ (8014a64 <vTaskSuspend+0x10c>)
 8014a50:	2200      	movs	r2, #0
 8014a52:	601a      	str	r2, [r3, #0]
	}
 8014a54:	e001      	b.n	8014a5a <vTaskSuspend+0x102>
					vTaskSwitchContext();
 8014a56:	f000 faa3 	bl	8014fa0 <vTaskSwitchContext>
	}
 8014a5a:	bf00      	nop
 8014a5c:	3710      	adds	r7, #16
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	bd80      	pop	{r7, pc}
 8014a62:	bf00      	nop
 8014a64:	200018dc 	.word	0x200018dc
 8014a68:	200018e0 	.word	0x200018e0
 8014a6c:	200019e4 	.word	0x200019e4
 8014a70:	200019c8 	.word	0x200019c8
 8014a74:	200019e8 	.word	0x200019e8
 8014a78:	20001a04 	.word	0x20001a04
 8014a7c:	e000ed04 	.word	0xe000ed04
 8014a80:	200019dc 	.word	0x200019dc

08014a84 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8014a84:	b480      	push	{r7}
 8014a86:	b087      	sub	sp, #28
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d10d      	bne.n	8014ab6 <prvTaskIsTaskSuspended+0x32>
	__asm volatile
 8014a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a9e:	b672      	cpsid	i
 8014aa0:	f383 8811 	msr	BASEPRI, r3
 8014aa4:	f3bf 8f6f 	isb	sy
 8014aa8:	f3bf 8f4f 	dsb	sy
 8014aac:	b662      	cpsie	i
 8014aae:	60fb      	str	r3, [r7, #12]
}
 8014ab0:	bf00      	nop
 8014ab2:	bf00      	nop
 8014ab4:	e7fd      	b.n	8014ab2 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014ab6:	693b      	ldr	r3, [r7, #16]
 8014ab8:	695b      	ldr	r3, [r3, #20]
 8014aba:	4a0a      	ldr	r2, [pc, #40]	@ (8014ae4 <prvTaskIsTaskSuspended+0x60>)
 8014abc:	4293      	cmp	r3, r2
 8014abe:	d10a      	bne.n	8014ad6 <prvTaskIsTaskSuspended+0x52>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8014ac0:	693b      	ldr	r3, [r7, #16]
 8014ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ac4:	4a08      	ldr	r2, [pc, #32]	@ (8014ae8 <prvTaskIsTaskSuspended+0x64>)
 8014ac6:	4293      	cmp	r3, r2
 8014ac8:	d005      	beq.n	8014ad6 <prvTaskIsTaskSuspended+0x52>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8014aca:	693b      	ldr	r3, [r7, #16]
 8014acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d101      	bne.n	8014ad6 <prvTaskIsTaskSuspended+0x52>
				{
					xReturn = pdTRUE;
 8014ad2:	2301      	movs	r3, #1
 8014ad4:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014ad6:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014ad8:	4618      	mov	r0, r3
 8014ada:	371c      	adds	r7, #28
 8014adc:	46bd      	mov	sp, r7
 8014ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae2:	4770      	bx	lr
 8014ae4:	200019c8 	.word	0x200019c8
 8014ae8:	2000199c 	.word	0x2000199c

08014aec <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b084      	sub	sp, #16
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d10d      	bne.n	8014b1a <vTaskResume+0x2e>
	__asm volatile
 8014afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b02:	b672      	cpsid	i
 8014b04:	f383 8811 	msr	BASEPRI, r3
 8014b08:	f3bf 8f6f 	isb	sy
 8014b0c:	f3bf 8f4f 	dsb	sy
 8014b10:	b662      	cpsie	i
 8014b12:	60bb      	str	r3, [r7, #8]
}
 8014b14:	bf00      	nop
 8014b16:	bf00      	nop
 8014b18:	e7fd      	b.n	8014b16 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8014b1a:	4b20      	ldr	r3, [pc, #128]	@ (8014b9c <vTaskResume+0xb0>)
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	68fa      	ldr	r2, [r7, #12]
 8014b20:	429a      	cmp	r2, r3
 8014b22:	d037      	beq.n	8014b94 <vTaskResume+0xa8>
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d034      	beq.n	8014b94 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8014b2a:	f001 f80f 	bl	8015b4c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014b2e:	68f8      	ldr	r0, [r7, #12]
 8014b30:	f7ff ffa8 	bl	8014a84 <prvTaskIsTaskSuspended>
 8014b34:	4603      	mov	r3, r0
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d02a      	beq.n	8014b90 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	3304      	adds	r3, #4
 8014b3e:	4618      	mov	r0, r3
 8014b40:	f7fe fd00 	bl	8013544 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b48:	2201      	movs	r2, #1
 8014b4a:	409a      	lsls	r2, r3
 8014b4c:	4b14      	ldr	r3, [pc, #80]	@ (8014ba0 <vTaskResume+0xb4>)
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	4313      	orrs	r3, r2
 8014b52:	4a13      	ldr	r2, [pc, #76]	@ (8014ba0 <vTaskResume+0xb4>)
 8014b54:	6013      	str	r3, [r2, #0]
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b5a:	4613      	mov	r3, r2
 8014b5c:	009b      	lsls	r3, r3, #2
 8014b5e:	4413      	add	r3, r2
 8014b60:	009b      	lsls	r3, r3, #2
 8014b62:	4a10      	ldr	r2, [pc, #64]	@ (8014ba4 <vTaskResume+0xb8>)
 8014b64:	441a      	add	r2, r3
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	3304      	adds	r3, #4
 8014b6a:	4619      	mov	r1, r3
 8014b6c:	4610      	mov	r0, r2
 8014b6e:	f7fe fc8c 	bl	801348a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b76:	4b09      	ldr	r3, [pc, #36]	@ (8014b9c <vTaskResume+0xb0>)
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b7c:	429a      	cmp	r2, r3
 8014b7e:	d307      	bcc.n	8014b90 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8014b80:	4b09      	ldr	r3, [pc, #36]	@ (8014ba8 <vTaskResume+0xbc>)
 8014b82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014b86:	601a      	str	r2, [r3, #0]
 8014b88:	f3bf 8f4f 	dsb	sy
 8014b8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8014b90:	f001 f812 	bl	8015bb8 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014b94:	bf00      	nop
 8014b96:	3710      	adds	r7, #16
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	bd80      	pop	{r7, pc}
 8014b9c:	200018dc 	.word	0x200018dc
 8014ba0:	200019e4 	.word	0x200019e4
 8014ba4:	200018e0 	.word	0x200018e0
 8014ba8:	e000ed04 	.word	0xe000ed04

08014bac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b08a      	sub	sp, #40	@ 0x28
 8014bb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014bba:	463a      	mov	r2, r7
 8014bbc:	1d39      	adds	r1, r7, #4
 8014bbe:	f107 0308 	add.w	r3, r7, #8
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	f7ec f924 	bl	8000e10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014bc8:	6839      	ldr	r1, [r7, #0]
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	68ba      	ldr	r2, [r7, #8]
 8014bce:	9202      	str	r2, [sp, #8]
 8014bd0:	9301      	str	r3, [sp, #4]
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	9300      	str	r3, [sp, #0]
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	460a      	mov	r2, r1
 8014bda:	4923      	ldr	r1, [pc, #140]	@ (8014c68 <vTaskStartScheduler+0xbc>)
 8014bdc:	4823      	ldr	r0, [pc, #140]	@ (8014c6c <vTaskStartScheduler+0xc0>)
 8014bde:	f7ff fcc3 	bl	8014568 <xTaskCreateStatic>
 8014be2:	4603      	mov	r3, r0
 8014be4:	4a22      	ldr	r2, [pc, #136]	@ (8014c70 <vTaskStartScheduler+0xc4>)
 8014be6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014be8:	4b21      	ldr	r3, [pc, #132]	@ (8014c70 <vTaskStartScheduler+0xc4>)
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d002      	beq.n	8014bf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014bf0:	2301      	movs	r3, #1
 8014bf2:	617b      	str	r3, [r7, #20]
 8014bf4:	e001      	b.n	8014bfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014bfa:	697b      	ldr	r3, [r7, #20]
 8014bfc:	2b01      	cmp	r3, #1
 8014bfe:	d11d      	bne.n	8014c3c <vTaskStartScheduler+0x90>
	__asm volatile
 8014c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c04:	b672      	cpsid	i
 8014c06:	f383 8811 	msr	BASEPRI, r3
 8014c0a:	f3bf 8f6f 	isb	sy
 8014c0e:	f3bf 8f4f 	dsb	sy
 8014c12:	b662      	cpsie	i
 8014c14:	613b      	str	r3, [r7, #16]
}
 8014c16:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014c18:	4b16      	ldr	r3, [pc, #88]	@ (8014c74 <vTaskStartScheduler+0xc8>)
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	334c      	adds	r3, #76	@ 0x4c
 8014c1e:	4a16      	ldr	r2, [pc, #88]	@ (8014c78 <vTaskStartScheduler+0xcc>)
 8014c20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014c22:	4b16      	ldr	r3, [pc, #88]	@ (8014c7c <vTaskStartScheduler+0xd0>)
 8014c24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014c28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014c2a:	4b15      	ldr	r3, [pc, #84]	@ (8014c80 <vTaskStartScheduler+0xd4>)
 8014c2c:	2201      	movs	r2, #1
 8014c2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014c30:	4b14      	ldr	r3, [pc, #80]	@ (8014c84 <vTaskStartScheduler+0xd8>)
 8014c32:	2200      	movs	r2, #0
 8014c34:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014c36:	f000 ff0b 	bl	8015a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014c3a:	e011      	b.n	8014c60 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014c3c:	697b      	ldr	r3, [r7, #20]
 8014c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014c42:	d10d      	bne.n	8014c60 <vTaskStartScheduler+0xb4>
	__asm volatile
 8014c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c48:	b672      	cpsid	i
 8014c4a:	f383 8811 	msr	BASEPRI, r3
 8014c4e:	f3bf 8f6f 	isb	sy
 8014c52:	f3bf 8f4f 	dsb	sy
 8014c56:	b662      	cpsie	i
 8014c58:	60fb      	str	r3, [r7, #12]
}
 8014c5a:	bf00      	nop
 8014c5c:	bf00      	nop
 8014c5e:	e7fd      	b.n	8014c5c <vTaskStartScheduler+0xb0>
}
 8014c60:	bf00      	nop
 8014c62:	3718      	adds	r7, #24
 8014c64:	46bd      	mov	sp, r7
 8014c66:	bd80      	pop	{r7, pc}
 8014c68:	08016d98 	.word	0x08016d98
 8014c6c:	080152e5 	.word	0x080152e5
 8014c70:	20001a00 	.word	0x20001a00
 8014c74:	200018dc 	.word	0x200018dc
 8014c78:	200000b4 	.word	0x200000b4
 8014c7c:	200019fc 	.word	0x200019fc
 8014c80:	200019e8 	.word	0x200019e8
 8014c84:	200019e0 	.word	0x200019e0

08014c88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014c88:	b480      	push	{r7}
 8014c8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8014c8c:	4b04      	ldr	r3, [pc, #16]	@ (8014ca0 <vTaskSuspendAll+0x18>)
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	3301      	adds	r3, #1
 8014c92:	4a03      	ldr	r2, [pc, #12]	@ (8014ca0 <vTaskSuspendAll+0x18>)
 8014c94:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8014c96:	bf00      	nop
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c9e:	4770      	bx	lr
 8014ca0:	20001a04 	.word	0x20001a04

08014ca4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b084      	sub	sp, #16
 8014ca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014caa:	2300      	movs	r3, #0
 8014cac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014cae:	2300      	movs	r3, #0
 8014cb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014cb2:	4b43      	ldr	r3, [pc, #268]	@ (8014dc0 <xTaskResumeAll+0x11c>)
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d10d      	bne.n	8014cd6 <xTaskResumeAll+0x32>
	__asm volatile
 8014cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014cbe:	b672      	cpsid	i
 8014cc0:	f383 8811 	msr	BASEPRI, r3
 8014cc4:	f3bf 8f6f 	isb	sy
 8014cc8:	f3bf 8f4f 	dsb	sy
 8014ccc:	b662      	cpsie	i
 8014cce:	603b      	str	r3, [r7, #0]
}
 8014cd0:	bf00      	nop
 8014cd2:	bf00      	nop
 8014cd4:	e7fd      	b.n	8014cd2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014cd6:	f000 ff39 	bl	8015b4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014cda:	4b39      	ldr	r3, [pc, #228]	@ (8014dc0 <xTaskResumeAll+0x11c>)
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	3b01      	subs	r3, #1
 8014ce0:	4a37      	ldr	r2, [pc, #220]	@ (8014dc0 <xTaskResumeAll+0x11c>)
 8014ce2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014ce4:	4b36      	ldr	r3, [pc, #216]	@ (8014dc0 <xTaskResumeAll+0x11c>)
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d161      	bne.n	8014db0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014cec:	4b35      	ldr	r3, [pc, #212]	@ (8014dc4 <xTaskResumeAll+0x120>)
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d05d      	beq.n	8014db0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014cf4:	e02e      	b.n	8014d54 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014cf6:	4b34      	ldr	r3, [pc, #208]	@ (8014dc8 <xTaskResumeAll+0x124>)
 8014cf8:	68db      	ldr	r3, [r3, #12]
 8014cfa:	68db      	ldr	r3, [r3, #12]
 8014cfc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	3318      	adds	r3, #24
 8014d02:	4618      	mov	r0, r3
 8014d04:	f7fe fc1e 	bl	8013544 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	3304      	adds	r3, #4
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	f7fe fc19 	bl	8013544 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d16:	2201      	movs	r2, #1
 8014d18:	409a      	lsls	r2, r3
 8014d1a:	4b2c      	ldr	r3, [pc, #176]	@ (8014dcc <xTaskResumeAll+0x128>)
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	4313      	orrs	r3, r2
 8014d20:	4a2a      	ldr	r2, [pc, #168]	@ (8014dcc <xTaskResumeAll+0x128>)
 8014d22:	6013      	str	r3, [r2, #0]
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d28:	4613      	mov	r3, r2
 8014d2a:	009b      	lsls	r3, r3, #2
 8014d2c:	4413      	add	r3, r2
 8014d2e:	009b      	lsls	r3, r3, #2
 8014d30:	4a27      	ldr	r2, [pc, #156]	@ (8014dd0 <xTaskResumeAll+0x12c>)
 8014d32:	441a      	add	r2, r3
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	3304      	adds	r3, #4
 8014d38:	4619      	mov	r1, r3
 8014d3a:	4610      	mov	r0, r2
 8014d3c:	f7fe fba5 	bl	801348a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d44:	4b23      	ldr	r3, [pc, #140]	@ (8014dd4 <xTaskResumeAll+0x130>)
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d4a:	429a      	cmp	r2, r3
 8014d4c:	d302      	bcc.n	8014d54 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8014d4e:	4b22      	ldr	r3, [pc, #136]	@ (8014dd8 <xTaskResumeAll+0x134>)
 8014d50:	2201      	movs	r2, #1
 8014d52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014d54:	4b1c      	ldr	r3, [pc, #112]	@ (8014dc8 <xTaskResumeAll+0x124>)
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d1cc      	bne.n	8014cf6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d001      	beq.n	8014d66 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014d62:	f000 fb7f 	bl	8015464 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8014d66:	4b1d      	ldr	r3, [pc, #116]	@ (8014ddc <xTaskResumeAll+0x138>)
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d010      	beq.n	8014d94 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014d72:	f000 f859 	bl	8014e28 <xTaskIncrementTick>
 8014d76:	4603      	mov	r3, r0
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d002      	beq.n	8014d82 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8014d7c:	4b16      	ldr	r3, [pc, #88]	@ (8014dd8 <xTaskResumeAll+0x134>)
 8014d7e:	2201      	movs	r2, #1
 8014d80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	3b01      	subs	r3, #1
 8014d86:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d1f1      	bne.n	8014d72 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8014d8e:	4b13      	ldr	r3, [pc, #76]	@ (8014ddc <xTaskResumeAll+0x138>)
 8014d90:	2200      	movs	r2, #0
 8014d92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014d94:	4b10      	ldr	r3, [pc, #64]	@ (8014dd8 <xTaskResumeAll+0x134>)
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d009      	beq.n	8014db0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014d9c:	2301      	movs	r3, #1
 8014d9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014da0:	4b0f      	ldr	r3, [pc, #60]	@ (8014de0 <xTaskResumeAll+0x13c>)
 8014da2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014da6:	601a      	str	r2, [r3, #0]
 8014da8:	f3bf 8f4f 	dsb	sy
 8014dac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014db0:	f000 ff02 	bl	8015bb8 <vPortExitCritical>

	return xAlreadyYielded;
 8014db4:	68bb      	ldr	r3, [r7, #8]
}
 8014db6:	4618      	mov	r0, r3
 8014db8:	3710      	adds	r7, #16
 8014dba:	46bd      	mov	sp, r7
 8014dbc:	bd80      	pop	{r7, pc}
 8014dbe:	bf00      	nop
 8014dc0:	20001a04 	.word	0x20001a04
 8014dc4:	200019dc 	.word	0x200019dc
 8014dc8:	2000199c 	.word	0x2000199c
 8014dcc:	200019e4 	.word	0x200019e4
 8014dd0:	200018e0 	.word	0x200018e0
 8014dd4:	200018dc 	.word	0x200018dc
 8014dd8:	200019f0 	.word	0x200019f0
 8014ddc:	200019ec 	.word	0x200019ec
 8014de0:	e000ed04 	.word	0xe000ed04

08014de4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014de4:	b480      	push	{r7}
 8014de6:	b083      	sub	sp, #12
 8014de8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014dea:	4b05      	ldr	r3, [pc, #20]	@ (8014e00 <xTaskGetTickCount+0x1c>)
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014df0:	687b      	ldr	r3, [r7, #4]
}
 8014df2:	4618      	mov	r0, r3
 8014df4:	370c      	adds	r7, #12
 8014df6:	46bd      	mov	sp, r7
 8014df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfc:	4770      	bx	lr
 8014dfe:	bf00      	nop
 8014e00:	200019e0 	.word	0x200019e0

08014e04 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b082      	sub	sp, #8
 8014e08:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014e0a:	f000 ff87 	bl	8015d1c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8014e0e:	2300      	movs	r3, #0
 8014e10:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8014e12:	4b04      	ldr	r3, [pc, #16]	@ (8014e24 <xTaskGetTickCountFromISR+0x20>)
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014e18:	683b      	ldr	r3, [r7, #0]
}
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	3708      	adds	r7, #8
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	bd80      	pop	{r7, pc}
 8014e22:	bf00      	nop
 8014e24:	200019e0 	.word	0x200019e0

08014e28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b086      	sub	sp, #24
 8014e2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014e2e:	2300      	movs	r3, #0
 8014e30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014e32:	4b50      	ldr	r3, [pc, #320]	@ (8014f74 <xTaskIncrementTick+0x14c>)
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	f040 808b 	bne.w	8014f52 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014e3c:	4b4e      	ldr	r3, [pc, #312]	@ (8014f78 <xTaskIncrementTick+0x150>)
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	3301      	adds	r3, #1
 8014e42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014e44:	4a4c      	ldr	r2, [pc, #304]	@ (8014f78 <xTaskIncrementTick+0x150>)
 8014e46:	693b      	ldr	r3, [r7, #16]
 8014e48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014e4a:	693b      	ldr	r3, [r7, #16]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d123      	bne.n	8014e98 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8014e50:	4b4a      	ldr	r3, [pc, #296]	@ (8014f7c <xTaskIncrementTick+0x154>)
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d00d      	beq.n	8014e76 <xTaskIncrementTick+0x4e>
	__asm volatile
 8014e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e5e:	b672      	cpsid	i
 8014e60:	f383 8811 	msr	BASEPRI, r3
 8014e64:	f3bf 8f6f 	isb	sy
 8014e68:	f3bf 8f4f 	dsb	sy
 8014e6c:	b662      	cpsie	i
 8014e6e:	603b      	str	r3, [r7, #0]
}
 8014e70:	bf00      	nop
 8014e72:	bf00      	nop
 8014e74:	e7fd      	b.n	8014e72 <xTaskIncrementTick+0x4a>
 8014e76:	4b41      	ldr	r3, [pc, #260]	@ (8014f7c <xTaskIncrementTick+0x154>)
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	60fb      	str	r3, [r7, #12]
 8014e7c:	4b40      	ldr	r3, [pc, #256]	@ (8014f80 <xTaskIncrementTick+0x158>)
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	4a3e      	ldr	r2, [pc, #248]	@ (8014f7c <xTaskIncrementTick+0x154>)
 8014e82:	6013      	str	r3, [r2, #0]
 8014e84:	4a3e      	ldr	r2, [pc, #248]	@ (8014f80 <xTaskIncrementTick+0x158>)
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	6013      	str	r3, [r2, #0]
 8014e8a:	4b3e      	ldr	r3, [pc, #248]	@ (8014f84 <xTaskIncrementTick+0x15c>)
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	3301      	adds	r3, #1
 8014e90:	4a3c      	ldr	r2, [pc, #240]	@ (8014f84 <xTaskIncrementTick+0x15c>)
 8014e92:	6013      	str	r3, [r2, #0]
 8014e94:	f000 fae6 	bl	8015464 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014e98:	4b3b      	ldr	r3, [pc, #236]	@ (8014f88 <xTaskIncrementTick+0x160>)
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	693a      	ldr	r2, [r7, #16]
 8014e9e:	429a      	cmp	r2, r3
 8014ea0:	d348      	bcc.n	8014f34 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014ea2:	4b36      	ldr	r3, [pc, #216]	@ (8014f7c <xTaskIncrementTick+0x154>)
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d104      	bne.n	8014eb6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014eac:	4b36      	ldr	r3, [pc, #216]	@ (8014f88 <xTaskIncrementTick+0x160>)
 8014eae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014eb2:	601a      	str	r2, [r3, #0]
					break;
 8014eb4:	e03e      	b.n	8014f34 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014eb6:	4b31      	ldr	r3, [pc, #196]	@ (8014f7c <xTaskIncrementTick+0x154>)
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	68db      	ldr	r3, [r3, #12]
 8014ebc:	68db      	ldr	r3, [r3, #12]
 8014ebe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014ec0:	68bb      	ldr	r3, [r7, #8]
 8014ec2:	685b      	ldr	r3, [r3, #4]
 8014ec4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014ec6:	693a      	ldr	r2, [r7, #16]
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	429a      	cmp	r2, r3
 8014ecc:	d203      	bcs.n	8014ed6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014ece:	4a2e      	ldr	r2, [pc, #184]	@ (8014f88 <xTaskIncrementTick+0x160>)
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014ed4:	e02e      	b.n	8014f34 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014ed6:	68bb      	ldr	r3, [r7, #8]
 8014ed8:	3304      	adds	r3, #4
 8014eda:	4618      	mov	r0, r3
 8014edc:	f7fe fb32 	bl	8013544 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014ee0:	68bb      	ldr	r3, [r7, #8]
 8014ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d004      	beq.n	8014ef2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014ee8:	68bb      	ldr	r3, [r7, #8]
 8014eea:	3318      	adds	r3, #24
 8014eec:	4618      	mov	r0, r3
 8014eee:	f7fe fb29 	bl	8013544 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014ef2:	68bb      	ldr	r3, [r7, #8]
 8014ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ef6:	2201      	movs	r2, #1
 8014ef8:	409a      	lsls	r2, r3
 8014efa:	4b24      	ldr	r3, [pc, #144]	@ (8014f8c <xTaskIncrementTick+0x164>)
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	4313      	orrs	r3, r2
 8014f00:	4a22      	ldr	r2, [pc, #136]	@ (8014f8c <xTaskIncrementTick+0x164>)
 8014f02:	6013      	str	r3, [r2, #0]
 8014f04:	68bb      	ldr	r3, [r7, #8]
 8014f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f08:	4613      	mov	r3, r2
 8014f0a:	009b      	lsls	r3, r3, #2
 8014f0c:	4413      	add	r3, r2
 8014f0e:	009b      	lsls	r3, r3, #2
 8014f10:	4a1f      	ldr	r2, [pc, #124]	@ (8014f90 <xTaskIncrementTick+0x168>)
 8014f12:	441a      	add	r2, r3
 8014f14:	68bb      	ldr	r3, [r7, #8]
 8014f16:	3304      	adds	r3, #4
 8014f18:	4619      	mov	r1, r3
 8014f1a:	4610      	mov	r0, r2
 8014f1c:	f7fe fab5 	bl	801348a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014f20:	68bb      	ldr	r3, [r7, #8]
 8014f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f24:	4b1b      	ldr	r3, [pc, #108]	@ (8014f94 <xTaskIncrementTick+0x16c>)
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f2a:	429a      	cmp	r2, r3
 8014f2c:	d3b9      	bcc.n	8014ea2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8014f2e:	2301      	movs	r3, #1
 8014f30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014f32:	e7b6      	b.n	8014ea2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014f34:	4b17      	ldr	r3, [pc, #92]	@ (8014f94 <xTaskIncrementTick+0x16c>)
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f3a:	4915      	ldr	r1, [pc, #84]	@ (8014f90 <xTaskIncrementTick+0x168>)
 8014f3c:	4613      	mov	r3, r2
 8014f3e:	009b      	lsls	r3, r3, #2
 8014f40:	4413      	add	r3, r2
 8014f42:	009b      	lsls	r3, r3, #2
 8014f44:	440b      	add	r3, r1
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	2b01      	cmp	r3, #1
 8014f4a:	d907      	bls.n	8014f5c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8014f4c:	2301      	movs	r3, #1
 8014f4e:	617b      	str	r3, [r7, #20]
 8014f50:	e004      	b.n	8014f5c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014f52:	4b11      	ldr	r3, [pc, #68]	@ (8014f98 <xTaskIncrementTick+0x170>)
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	3301      	adds	r3, #1
 8014f58:	4a0f      	ldr	r2, [pc, #60]	@ (8014f98 <xTaskIncrementTick+0x170>)
 8014f5a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8014f9c <xTaskIncrementTick+0x174>)
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d001      	beq.n	8014f68 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8014f64:	2301      	movs	r3, #1
 8014f66:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014f68:	697b      	ldr	r3, [r7, #20]
}
 8014f6a:	4618      	mov	r0, r3
 8014f6c:	3718      	adds	r7, #24
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	bd80      	pop	{r7, pc}
 8014f72:	bf00      	nop
 8014f74:	20001a04 	.word	0x20001a04
 8014f78:	200019e0 	.word	0x200019e0
 8014f7c:	20001994 	.word	0x20001994
 8014f80:	20001998 	.word	0x20001998
 8014f84:	200019f4 	.word	0x200019f4
 8014f88:	200019fc 	.word	0x200019fc
 8014f8c:	200019e4 	.word	0x200019e4
 8014f90:	200018e0 	.word	0x200018e0
 8014f94:	200018dc 	.word	0x200018dc
 8014f98:	200019ec 	.word	0x200019ec
 8014f9c:	200019f0 	.word	0x200019f0

08014fa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b088      	sub	sp, #32
 8014fa4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014fa6:	4b3d      	ldr	r3, [pc, #244]	@ (801509c <vTaskSwitchContext+0xfc>)
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d003      	beq.n	8014fb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014fae:	4b3c      	ldr	r3, [pc, #240]	@ (80150a0 <vTaskSwitchContext+0x100>)
 8014fb0:	2201      	movs	r2, #1
 8014fb2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014fb4:	e06e      	b.n	8015094 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8014fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80150a0 <vTaskSwitchContext+0x100>)
 8014fb8:	2200      	movs	r2, #0
 8014fba:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8014fbc:	4b39      	ldr	r3, [pc, #228]	@ (80150a4 <vTaskSwitchContext+0x104>)
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014fc2:	61fb      	str	r3, [r7, #28]
 8014fc4:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8014fc8:	61bb      	str	r3, [r7, #24]
 8014fca:	69fb      	ldr	r3, [r7, #28]
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	69ba      	ldr	r2, [r7, #24]
 8014fd0:	429a      	cmp	r2, r3
 8014fd2:	d111      	bne.n	8014ff8 <vTaskSwitchContext+0x58>
 8014fd4:	69fb      	ldr	r3, [r7, #28]
 8014fd6:	3304      	adds	r3, #4
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	69ba      	ldr	r2, [r7, #24]
 8014fdc:	429a      	cmp	r2, r3
 8014fde:	d10b      	bne.n	8014ff8 <vTaskSwitchContext+0x58>
 8014fe0:	69fb      	ldr	r3, [r7, #28]
 8014fe2:	3308      	adds	r3, #8
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	69ba      	ldr	r2, [r7, #24]
 8014fe8:	429a      	cmp	r2, r3
 8014fea:	d105      	bne.n	8014ff8 <vTaskSwitchContext+0x58>
 8014fec:	69fb      	ldr	r3, [r7, #28]
 8014fee:	330c      	adds	r3, #12
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	69ba      	ldr	r2, [r7, #24]
 8014ff4:	429a      	cmp	r2, r3
 8014ff6:	d008      	beq.n	801500a <vTaskSwitchContext+0x6a>
 8014ff8:	4b2a      	ldr	r3, [pc, #168]	@ (80150a4 <vTaskSwitchContext+0x104>)
 8014ffa:	681a      	ldr	r2, [r3, #0]
 8014ffc:	4b29      	ldr	r3, [pc, #164]	@ (80150a4 <vTaskSwitchContext+0x104>)
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	3334      	adds	r3, #52	@ 0x34
 8015002:	4619      	mov	r1, r3
 8015004:	4610      	mov	r0, r2
 8015006:	f7eb fef0 	bl	8000dea <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801500a:	4b27      	ldr	r3, [pc, #156]	@ (80150a8 <vTaskSwitchContext+0x108>)
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	fab3 f383 	clz	r3, r3
 8015016:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015018:	7afb      	ldrb	r3, [r7, #11]
 801501a:	f1c3 031f 	rsb	r3, r3, #31
 801501e:	617b      	str	r3, [r7, #20]
 8015020:	4922      	ldr	r1, [pc, #136]	@ (80150ac <vTaskSwitchContext+0x10c>)
 8015022:	697a      	ldr	r2, [r7, #20]
 8015024:	4613      	mov	r3, r2
 8015026:	009b      	lsls	r3, r3, #2
 8015028:	4413      	add	r3, r2
 801502a:	009b      	lsls	r3, r3, #2
 801502c:	440b      	add	r3, r1
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d10d      	bne.n	8015050 <vTaskSwitchContext+0xb0>
	__asm volatile
 8015034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015038:	b672      	cpsid	i
 801503a:	f383 8811 	msr	BASEPRI, r3
 801503e:	f3bf 8f6f 	isb	sy
 8015042:	f3bf 8f4f 	dsb	sy
 8015046:	b662      	cpsie	i
 8015048:	607b      	str	r3, [r7, #4]
}
 801504a:	bf00      	nop
 801504c:	bf00      	nop
 801504e:	e7fd      	b.n	801504c <vTaskSwitchContext+0xac>
 8015050:	697a      	ldr	r2, [r7, #20]
 8015052:	4613      	mov	r3, r2
 8015054:	009b      	lsls	r3, r3, #2
 8015056:	4413      	add	r3, r2
 8015058:	009b      	lsls	r3, r3, #2
 801505a:	4a14      	ldr	r2, [pc, #80]	@ (80150ac <vTaskSwitchContext+0x10c>)
 801505c:	4413      	add	r3, r2
 801505e:	613b      	str	r3, [r7, #16]
 8015060:	693b      	ldr	r3, [r7, #16]
 8015062:	685b      	ldr	r3, [r3, #4]
 8015064:	685a      	ldr	r2, [r3, #4]
 8015066:	693b      	ldr	r3, [r7, #16]
 8015068:	605a      	str	r2, [r3, #4]
 801506a:	693b      	ldr	r3, [r7, #16]
 801506c:	685a      	ldr	r2, [r3, #4]
 801506e:	693b      	ldr	r3, [r7, #16]
 8015070:	3308      	adds	r3, #8
 8015072:	429a      	cmp	r2, r3
 8015074:	d104      	bne.n	8015080 <vTaskSwitchContext+0xe0>
 8015076:	693b      	ldr	r3, [r7, #16]
 8015078:	685b      	ldr	r3, [r3, #4]
 801507a:	685a      	ldr	r2, [r3, #4]
 801507c:	693b      	ldr	r3, [r7, #16]
 801507e:	605a      	str	r2, [r3, #4]
 8015080:	693b      	ldr	r3, [r7, #16]
 8015082:	685b      	ldr	r3, [r3, #4]
 8015084:	68db      	ldr	r3, [r3, #12]
 8015086:	4a07      	ldr	r2, [pc, #28]	@ (80150a4 <vTaskSwitchContext+0x104>)
 8015088:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801508a:	4b06      	ldr	r3, [pc, #24]	@ (80150a4 <vTaskSwitchContext+0x104>)
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	334c      	adds	r3, #76	@ 0x4c
 8015090:	4a07      	ldr	r2, [pc, #28]	@ (80150b0 <vTaskSwitchContext+0x110>)
 8015092:	6013      	str	r3, [r2, #0]
}
 8015094:	bf00      	nop
 8015096:	3720      	adds	r7, #32
 8015098:	46bd      	mov	sp, r7
 801509a:	bd80      	pop	{r7, pc}
 801509c:	20001a04 	.word	0x20001a04
 80150a0:	200019f0 	.word	0x200019f0
 80150a4:	200018dc 	.word	0x200018dc
 80150a8:	200019e4 	.word	0x200019e4
 80150ac:	200018e0 	.word	0x200018e0
 80150b0:	200000b4 	.word	0x200000b4

080150b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b084      	sub	sp, #16
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
 80150bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d10d      	bne.n	80150e0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80150c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150c8:	b672      	cpsid	i
 80150ca:	f383 8811 	msr	BASEPRI, r3
 80150ce:	f3bf 8f6f 	isb	sy
 80150d2:	f3bf 8f4f 	dsb	sy
 80150d6:	b662      	cpsie	i
 80150d8:	60fb      	str	r3, [r7, #12]
}
 80150da:	bf00      	nop
 80150dc:	bf00      	nop
 80150de:	e7fd      	b.n	80150dc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80150e0:	4b07      	ldr	r3, [pc, #28]	@ (8015100 <vTaskPlaceOnEventList+0x4c>)
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	3318      	adds	r3, #24
 80150e6:	4619      	mov	r1, r3
 80150e8:	6878      	ldr	r0, [r7, #4]
 80150ea:	f7fe f9f2 	bl	80134d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80150ee:	2101      	movs	r1, #1
 80150f0:	6838      	ldr	r0, [r7, #0]
 80150f2:	f000 fbb5 	bl	8015860 <prvAddCurrentTaskToDelayedList>
}
 80150f6:	bf00      	nop
 80150f8:	3710      	adds	r7, #16
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}
 80150fe:	bf00      	nop
 8015100:	200018dc 	.word	0x200018dc

08015104 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b086      	sub	sp, #24
 8015108:	af00      	add	r7, sp, #0
 801510a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	68db      	ldr	r3, [r3, #12]
 8015110:	68db      	ldr	r3, [r3, #12]
 8015112:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015114:	693b      	ldr	r3, [r7, #16]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d10d      	bne.n	8015136 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 801511a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801511e:	b672      	cpsid	i
 8015120:	f383 8811 	msr	BASEPRI, r3
 8015124:	f3bf 8f6f 	isb	sy
 8015128:	f3bf 8f4f 	dsb	sy
 801512c:	b662      	cpsie	i
 801512e:	60fb      	str	r3, [r7, #12]
}
 8015130:	bf00      	nop
 8015132:	bf00      	nop
 8015134:	e7fd      	b.n	8015132 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015136:	693b      	ldr	r3, [r7, #16]
 8015138:	3318      	adds	r3, #24
 801513a:	4618      	mov	r0, r3
 801513c:	f7fe fa02 	bl	8013544 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015140:	4b1d      	ldr	r3, [pc, #116]	@ (80151b8 <xTaskRemoveFromEventList+0xb4>)
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d11c      	bne.n	8015182 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015148:	693b      	ldr	r3, [r7, #16]
 801514a:	3304      	adds	r3, #4
 801514c:	4618      	mov	r0, r3
 801514e:	f7fe f9f9 	bl	8013544 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015152:	693b      	ldr	r3, [r7, #16]
 8015154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015156:	2201      	movs	r2, #1
 8015158:	409a      	lsls	r2, r3
 801515a:	4b18      	ldr	r3, [pc, #96]	@ (80151bc <xTaskRemoveFromEventList+0xb8>)
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	4313      	orrs	r3, r2
 8015160:	4a16      	ldr	r2, [pc, #88]	@ (80151bc <xTaskRemoveFromEventList+0xb8>)
 8015162:	6013      	str	r3, [r2, #0]
 8015164:	693b      	ldr	r3, [r7, #16]
 8015166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015168:	4613      	mov	r3, r2
 801516a:	009b      	lsls	r3, r3, #2
 801516c:	4413      	add	r3, r2
 801516e:	009b      	lsls	r3, r3, #2
 8015170:	4a13      	ldr	r2, [pc, #76]	@ (80151c0 <xTaskRemoveFromEventList+0xbc>)
 8015172:	441a      	add	r2, r3
 8015174:	693b      	ldr	r3, [r7, #16]
 8015176:	3304      	adds	r3, #4
 8015178:	4619      	mov	r1, r3
 801517a:	4610      	mov	r0, r2
 801517c:	f7fe f985 	bl	801348a <vListInsertEnd>
 8015180:	e005      	b.n	801518e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015182:	693b      	ldr	r3, [r7, #16]
 8015184:	3318      	adds	r3, #24
 8015186:	4619      	mov	r1, r3
 8015188:	480e      	ldr	r0, [pc, #56]	@ (80151c4 <xTaskRemoveFromEventList+0xc0>)
 801518a:	f7fe f97e 	bl	801348a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801518e:	693b      	ldr	r3, [r7, #16]
 8015190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015192:	4b0d      	ldr	r3, [pc, #52]	@ (80151c8 <xTaskRemoveFromEventList+0xc4>)
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015198:	429a      	cmp	r2, r3
 801519a:	d905      	bls.n	80151a8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801519c:	2301      	movs	r3, #1
 801519e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80151a0:	4b0a      	ldr	r3, [pc, #40]	@ (80151cc <xTaskRemoveFromEventList+0xc8>)
 80151a2:	2201      	movs	r2, #1
 80151a4:	601a      	str	r2, [r3, #0]
 80151a6:	e001      	b.n	80151ac <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80151a8:	2300      	movs	r3, #0
 80151aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80151ac:	697b      	ldr	r3, [r7, #20]
}
 80151ae:	4618      	mov	r0, r3
 80151b0:	3718      	adds	r7, #24
 80151b2:	46bd      	mov	sp, r7
 80151b4:	bd80      	pop	{r7, pc}
 80151b6:	bf00      	nop
 80151b8:	20001a04 	.word	0x20001a04
 80151bc:	200019e4 	.word	0x200019e4
 80151c0:	200018e0 	.word	0x200018e0
 80151c4:	2000199c 	.word	0x2000199c
 80151c8:	200018dc 	.word	0x200018dc
 80151cc:	200019f0 	.word	0x200019f0

080151d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80151d0:	b480      	push	{r7}
 80151d2:	b083      	sub	sp, #12
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80151d8:	4b06      	ldr	r3, [pc, #24]	@ (80151f4 <vTaskInternalSetTimeOutState+0x24>)
 80151da:	681a      	ldr	r2, [r3, #0]
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80151e0:	4b05      	ldr	r3, [pc, #20]	@ (80151f8 <vTaskInternalSetTimeOutState+0x28>)
 80151e2:	681a      	ldr	r2, [r3, #0]
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	605a      	str	r2, [r3, #4]
}
 80151e8:	bf00      	nop
 80151ea:	370c      	adds	r7, #12
 80151ec:	46bd      	mov	sp, r7
 80151ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f2:	4770      	bx	lr
 80151f4:	200019f4 	.word	0x200019f4
 80151f8:	200019e0 	.word	0x200019e0

080151fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80151fc:	b580      	push	{r7, lr}
 80151fe:	b088      	sub	sp, #32
 8015200:	af00      	add	r7, sp, #0
 8015202:	6078      	str	r0, [r7, #4]
 8015204:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d10d      	bne.n	8015228 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 801520c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015210:	b672      	cpsid	i
 8015212:	f383 8811 	msr	BASEPRI, r3
 8015216:	f3bf 8f6f 	isb	sy
 801521a:	f3bf 8f4f 	dsb	sy
 801521e:	b662      	cpsie	i
 8015220:	613b      	str	r3, [r7, #16]
}
 8015222:	bf00      	nop
 8015224:	bf00      	nop
 8015226:	e7fd      	b.n	8015224 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8015228:	683b      	ldr	r3, [r7, #0]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d10d      	bne.n	801524a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 801522e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015232:	b672      	cpsid	i
 8015234:	f383 8811 	msr	BASEPRI, r3
 8015238:	f3bf 8f6f 	isb	sy
 801523c:	f3bf 8f4f 	dsb	sy
 8015240:	b662      	cpsie	i
 8015242:	60fb      	str	r3, [r7, #12]
}
 8015244:	bf00      	nop
 8015246:	bf00      	nop
 8015248:	e7fd      	b.n	8015246 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 801524a:	f000 fc7f 	bl	8015b4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801524e:	4b1d      	ldr	r3, [pc, #116]	@ (80152c4 <xTaskCheckForTimeOut+0xc8>)
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	685b      	ldr	r3, [r3, #4]
 8015258:	69ba      	ldr	r2, [r7, #24]
 801525a:	1ad3      	subs	r3, r2, r3
 801525c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801525e:	683b      	ldr	r3, [r7, #0]
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015266:	d102      	bne.n	801526e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015268:	2300      	movs	r3, #0
 801526a:	61fb      	str	r3, [r7, #28]
 801526c:	e023      	b.n	80152b6 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	681a      	ldr	r2, [r3, #0]
 8015272:	4b15      	ldr	r3, [pc, #84]	@ (80152c8 <xTaskCheckForTimeOut+0xcc>)
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	429a      	cmp	r2, r3
 8015278:	d007      	beq.n	801528a <xTaskCheckForTimeOut+0x8e>
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	685b      	ldr	r3, [r3, #4]
 801527e:	69ba      	ldr	r2, [r7, #24]
 8015280:	429a      	cmp	r2, r3
 8015282:	d302      	bcc.n	801528a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015284:	2301      	movs	r3, #1
 8015286:	61fb      	str	r3, [r7, #28]
 8015288:	e015      	b.n	80152b6 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801528a:	683b      	ldr	r3, [r7, #0]
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	697a      	ldr	r2, [r7, #20]
 8015290:	429a      	cmp	r2, r3
 8015292:	d20b      	bcs.n	80152ac <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015294:	683b      	ldr	r3, [r7, #0]
 8015296:	681a      	ldr	r2, [r3, #0]
 8015298:	697b      	ldr	r3, [r7, #20]
 801529a:	1ad2      	subs	r2, r2, r3
 801529c:	683b      	ldr	r3, [r7, #0]
 801529e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80152a0:	6878      	ldr	r0, [r7, #4]
 80152a2:	f7ff ff95 	bl	80151d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80152a6:	2300      	movs	r3, #0
 80152a8:	61fb      	str	r3, [r7, #28]
 80152aa:	e004      	b.n	80152b6 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80152ac:	683b      	ldr	r3, [r7, #0]
 80152ae:	2200      	movs	r2, #0
 80152b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80152b2:	2301      	movs	r3, #1
 80152b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80152b6:	f000 fc7f 	bl	8015bb8 <vPortExitCritical>

	return xReturn;
 80152ba:	69fb      	ldr	r3, [r7, #28]
}
 80152bc:	4618      	mov	r0, r3
 80152be:	3720      	adds	r7, #32
 80152c0:	46bd      	mov	sp, r7
 80152c2:	bd80      	pop	{r7, pc}
 80152c4:	200019e0 	.word	0x200019e0
 80152c8:	200019f4 	.word	0x200019f4

080152cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80152cc:	b480      	push	{r7}
 80152ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80152d0:	4b03      	ldr	r3, [pc, #12]	@ (80152e0 <vTaskMissedYield+0x14>)
 80152d2:	2201      	movs	r2, #1
 80152d4:	601a      	str	r2, [r3, #0]
}
 80152d6:	bf00      	nop
 80152d8:	46bd      	mov	sp, r7
 80152da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152de:	4770      	bx	lr
 80152e0:	200019f0 	.word	0x200019f0

080152e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b082      	sub	sp, #8
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80152ec:	f000 f854 	bl	8015398 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80152f0:	4b07      	ldr	r3, [pc, #28]	@ (8015310 <prvIdleTask+0x2c>)
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	2b01      	cmp	r3, #1
 80152f6:	d907      	bls.n	8015308 <prvIdleTask+0x24>
			{
				taskYIELD();
 80152f8:	4b06      	ldr	r3, [pc, #24]	@ (8015314 <prvIdleTask+0x30>)
 80152fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80152fe:	601a      	str	r2, [r3, #0]
 8015300:	f3bf 8f4f 	dsb	sy
 8015304:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8015308:	f7eb fd68 	bl	8000ddc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801530c:	e7ee      	b.n	80152ec <prvIdleTask+0x8>
 801530e:	bf00      	nop
 8015310:	200018e0 	.word	0x200018e0
 8015314:	e000ed04 	.word	0xe000ed04

08015318 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015318:	b580      	push	{r7, lr}
 801531a:	b082      	sub	sp, #8
 801531c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801531e:	2300      	movs	r3, #0
 8015320:	607b      	str	r3, [r7, #4]
 8015322:	e00c      	b.n	801533e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015324:	687a      	ldr	r2, [r7, #4]
 8015326:	4613      	mov	r3, r2
 8015328:	009b      	lsls	r3, r3, #2
 801532a:	4413      	add	r3, r2
 801532c:	009b      	lsls	r3, r3, #2
 801532e:	4a12      	ldr	r2, [pc, #72]	@ (8015378 <prvInitialiseTaskLists+0x60>)
 8015330:	4413      	add	r3, r2
 8015332:	4618      	mov	r0, r3
 8015334:	f7fe f87c 	bl	8013430 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	3301      	adds	r3, #1
 801533c:	607b      	str	r3, [r7, #4]
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	2b06      	cmp	r3, #6
 8015342:	d9ef      	bls.n	8015324 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015344:	480d      	ldr	r0, [pc, #52]	@ (801537c <prvInitialiseTaskLists+0x64>)
 8015346:	f7fe f873 	bl	8013430 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801534a:	480d      	ldr	r0, [pc, #52]	@ (8015380 <prvInitialiseTaskLists+0x68>)
 801534c:	f7fe f870 	bl	8013430 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015350:	480c      	ldr	r0, [pc, #48]	@ (8015384 <prvInitialiseTaskLists+0x6c>)
 8015352:	f7fe f86d 	bl	8013430 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015356:	480c      	ldr	r0, [pc, #48]	@ (8015388 <prvInitialiseTaskLists+0x70>)
 8015358:	f7fe f86a 	bl	8013430 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801535c:	480b      	ldr	r0, [pc, #44]	@ (801538c <prvInitialiseTaskLists+0x74>)
 801535e:	f7fe f867 	bl	8013430 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015362:	4b0b      	ldr	r3, [pc, #44]	@ (8015390 <prvInitialiseTaskLists+0x78>)
 8015364:	4a05      	ldr	r2, [pc, #20]	@ (801537c <prvInitialiseTaskLists+0x64>)
 8015366:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015368:	4b0a      	ldr	r3, [pc, #40]	@ (8015394 <prvInitialiseTaskLists+0x7c>)
 801536a:	4a05      	ldr	r2, [pc, #20]	@ (8015380 <prvInitialiseTaskLists+0x68>)
 801536c:	601a      	str	r2, [r3, #0]
}
 801536e:	bf00      	nop
 8015370:	3708      	adds	r7, #8
 8015372:	46bd      	mov	sp, r7
 8015374:	bd80      	pop	{r7, pc}
 8015376:	bf00      	nop
 8015378:	200018e0 	.word	0x200018e0
 801537c:	2000196c 	.word	0x2000196c
 8015380:	20001980 	.word	0x20001980
 8015384:	2000199c 	.word	0x2000199c
 8015388:	200019b0 	.word	0x200019b0
 801538c:	200019c8 	.word	0x200019c8
 8015390:	20001994 	.word	0x20001994
 8015394:	20001998 	.word	0x20001998

08015398 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b082      	sub	sp, #8
 801539c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801539e:	e019      	b.n	80153d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80153a0:	f000 fbd4 	bl	8015b4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80153a4:	4b10      	ldr	r3, [pc, #64]	@ (80153e8 <prvCheckTasksWaitingTermination+0x50>)
 80153a6:	68db      	ldr	r3, [r3, #12]
 80153a8:	68db      	ldr	r3, [r3, #12]
 80153aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	3304      	adds	r3, #4
 80153b0:	4618      	mov	r0, r3
 80153b2:	f7fe f8c7 	bl	8013544 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80153b6:	4b0d      	ldr	r3, [pc, #52]	@ (80153ec <prvCheckTasksWaitingTermination+0x54>)
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	3b01      	subs	r3, #1
 80153bc:	4a0b      	ldr	r2, [pc, #44]	@ (80153ec <prvCheckTasksWaitingTermination+0x54>)
 80153be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80153c0:	4b0b      	ldr	r3, [pc, #44]	@ (80153f0 <prvCheckTasksWaitingTermination+0x58>)
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	3b01      	subs	r3, #1
 80153c6:	4a0a      	ldr	r2, [pc, #40]	@ (80153f0 <prvCheckTasksWaitingTermination+0x58>)
 80153c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80153ca:	f000 fbf5 	bl	8015bb8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80153ce:	6878      	ldr	r0, [r7, #4]
 80153d0:	f000 f810 	bl	80153f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80153d4:	4b06      	ldr	r3, [pc, #24]	@ (80153f0 <prvCheckTasksWaitingTermination+0x58>)
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d1e1      	bne.n	80153a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80153dc:	bf00      	nop
 80153de:	bf00      	nop
 80153e0:	3708      	adds	r7, #8
 80153e2:	46bd      	mov	sp, r7
 80153e4:	bd80      	pop	{r7, pc}
 80153e6:	bf00      	nop
 80153e8:	200019b0 	.word	0x200019b0
 80153ec:	200019dc 	.word	0x200019dc
 80153f0:	200019c4 	.word	0x200019c4

080153f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b084      	sub	sp, #16
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	334c      	adds	r3, #76	@ 0x4c
 8015400:	4618      	mov	r0, r3
 8015402:	f000 ffa5 	bl	8016350 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 801540c:	2b00      	cmp	r3, #0
 801540e:	d108      	bne.n	8015422 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015414:	4618      	mov	r0, r3
 8015416:	f000 fd99 	bl	8015f4c <vPortFree>
				vPortFree( pxTCB );
 801541a:	6878      	ldr	r0, [r7, #4]
 801541c:	f000 fd96 	bl	8015f4c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015420:	e01b      	b.n	801545a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8015428:	2b01      	cmp	r3, #1
 801542a:	d103      	bne.n	8015434 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801542c:	6878      	ldr	r0, [r7, #4]
 801542e:	f000 fd8d 	bl	8015f4c <vPortFree>
	}
 8015432:	e012      	b.n	801545a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 801543a:	2b02      	cmp	r3, #2
 801543c:	d00d      	beq.n	801545a <prvDeleteTCB+0x66>
	__asm volatile
 801543e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015442:	b672      	cpsid	i
 8015444:	f383 8811 	msr	BASEPRI, r3
 8015448:	f3bf 8f6f 	isb	sy
 801544c:	f3bf 8f4f 	dsb	sy
 8015450:	b662      	cpsie	i
 8015452:	60fb      	str	r3, [r7, #12]
}
 8015454:	bf00      	nop
 8015456:	bf00      	nop
 8015458:	e7fd      	b.n	8015456 <prvDeleteTCB+0x62>
	}
 801545a:	bf00      	nop
 801545c:	3710      	adds	r7, #16
 801545e:	46bd      	mov	sp, r7
 8015460:	bd80      	pop	{r7, pc}
	...

08015464 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015464:	b480      	push	{r7}
 8015466:	b083      	sub	sp, #12
 8015468:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801546a:	4b0c      	ldr	r3, [pc, #48]	@ (801549c <prvResetNextTaskUnblockTime+0x38>)
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d104      	bne.n	801547e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015474:	4b0a      	ldr	r3, [pc, #40]	@ (80154a0 <prvResetNextTaskUnblockTime+0x3c>)
 8015476:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801547a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801547c:	e008      	b.n	8015490 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801547e:	4b07      	ldr	r3, [pc, #28]	@ (801549c <prvResetNextTaskUnblockTime+0x38>)
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	68db      	ldr	r3, [r3, #12]
 8015484:	68db      	ldr	r3, [r3, #12]
 8015486:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	685b      	ldr	r3, [r3, #4]
 801548c:	4a04      	ldr	r2, [pc, #16]	@ (80154a0 <prvResetNextTaskUnblockTime+0x3c>)
 801548e:	6013      	str	r3, [r2, #0]
}
 8015490:	bf00      	nop
 8015492:	370c      	adds	r7, #12
 8015494:	46bd      	mov	sp, r7
 8015496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801549a:	4770      	bx	lr
 801549c:	20001994 	.word	0x20001994
 80154a0:	200019fc 	.word	0x200019fc

080154a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80154a4:	b480      	push	{r7}
 80154a6:	b083      	sub	sp, #12
 80154a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80154aa:	4b0b      	ldr	r3, [pc, #44]	@ (80154d8 <xTaskGetSchedulerState+0x34>)
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d102      	bne.n	80154b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80154b2:	2301      	movs	r3, #1
 80154b4:	607b      	str	r3, [r7, #4]
 80154b6:	e008      	b.n	80154ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80154b8:	4b08      	ldr	r3, [pc, #32]	@ (80154dc <xTaskGetSchedulerState+0x38>)
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d102      	bne.n	80154c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80154c0:	2302      	movs	r3, #2
 80154c2:	607b      	str	r3, [r7, #4]
 80154c4:	e001      	b.n	80154ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80154c6:	2300      	movs	r3, #0
 80154c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80154ca:	687b      	ldr	r3, [r7, #4]
	}
 80154cc:	4618      	mov	r0, r3
 80154ce:	370c      	adds	r7, #12
 80154d0:	46bd      	mov	sp, r7
 80154d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d6:	4770      	bx	lr
 80154d8:	200019e8 	.word	0x200019e8
 80154dc:	20001a04 	.word	0x20001a04

080154e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b084      	sub	sp, #16
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80154ec:	2300      	movs	r3, #0
 80154ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d069      	beq.n	80155ca <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80154f6:	68bb      	ldr	r3, [r7, #8]
 80154f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80154fa:	4b36      	ldr	r3, [pc, #216]	@ (80155d4 <xTaskPriorityInherit+0xf4>)
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015500:	429a      	cmp	r2, r3
 8015502:	d259      	bcs.n	80155b8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015504:	68bb      	ldr	r3, [r7, #8]
 8015506:	699b      	ldr	r3, [r3, #24]
 8015508:	2b00      	cmp	r3, #0
 801550a:	db06      	blt.n	801551a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801550c:	4b31      	ldr	r3, [pc, #196]	@ (80155d4 <xTaskPriorityInherit+0xf4>)
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015512:	f1c3 0207 	rsb	r2, r3, #7
 8015516:	68bb      	ldr	r3, [r7, #8]
 8015518:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801551a:	68bb      	ldr	r3, [r7, #8]
 801551c:	6959      	ldr	r1, [r3, #20]
 801551e:	68bb      	ldr	r3, [r7, #8]
 8015520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015522:	4613      	mov	r3, r2
 8015524:	009b      	lsls	r3, r3, #2
 8015526:	4413      	add	r3, r2
 8015528:	009b      	lsls	r3, r3, #2
 801552a:	4a2b      	ldr	r2, [pc, #172]	@ (80155d8 <xTaskPriorityInherit+0xf8>)
 801552c:	4413      	add	r3, r2
 801552e:	4299      	cmp	r1, r3
 8015530:	d13a      	bne.n	80155a8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015532:	68bb      	ldr	r3, [r7, #8]
 8015534:	3304      	adds	r3, #4
 8015536:	4618      	mov	r0, r3
 8015538:	f7fe f804 	bl	8013544 <uxListRemove>
 801553c:	4603      	mov	r3, r0
 801553e:	2b00      	cmp	r3, #0
 8015540:	d115      	bne.n	801556e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8015542:	68bb      	ldr	r3, [r7, #8]
 8015544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015546:	4924      	ldr	r1, [pc, #144]	@ (80155d8 <xTaskPriorityInherit+0xf8>)
 8015548:	4613      	mov	r3, r2
 801554a:	009b      	lsls	r3, r3, #2
 801554c:	4413      	add	r3, r2
 801554e:	009b      	lsls	r3, r3, #2
 8015550:	440b      	add	r3, r1
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	2b00      	cmp	r3, #0
 8015556:	d10a      	bne.n	801556e <xTaskPriorityInherit+0x8e>
 8015558:	68bb      	ldr	r3, [r7, #8]
 801555a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801555c:	2201      	movs	r2, #1
 801555e:	fa02 f303 	lsl.w	r3, r2, r3
 8015562:	43da      	mvns	r2, r3
 8015564:	4b1d      	ldr	r3, [pc, #116]	@ (80155dc <xTaskPriorityInherit+0xfc>)
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	4013      	ands	r3, r2
 801556a:	4a1c      	ldr	r2, [pc, #112]	@ (80155dc <xTaskPriorityInherit+0xfc>)
 801556c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801556e:	4b19      	ldr	r3, [pc, #100]	@ (80155d4 <xTaskPriorityInherit+0xf4>)
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015574:	68bb      	ldr	r3, [r7, #8]
 8015576:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015578:	68bb      	ldr	r3, [r7, #8]
 801557a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801557c:	2201      	movs	r2, #1
 801557e:	409a      	lsls	r2, r3
 8015580:	4b16      	ldr	r3, [pc, #88]	@ (80155dc <xTaskPriorityInherit+0xfc>)
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	4313      	orrs	r3, r2
 8015586:	4a15      	ldr	r2, [pc, #84]	@ (80155dc <xTaskPriorityInherit+0xfc>)
 8015588:	6013      	str	r3, [r2, #0]
 801558a:	68bb      	ldr	r3, [r7, #8]
 801558c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801558e:	4613      	mov	r3, r2
 8015590:	009b      	lsls	r3, r3, #2
 8015592:	4413      	add	r3, r2
 8015594:	009b      	lsls	r3, r3, #2
 8015596:	4a10      	ldr	r2, [pc, #64]	@ (80155d8 <xTaskPriorityInherit+0xf8>)
 8015598:	441a      	add	r2, r3
 801559a:	68bb      	ldr	r3, [r7, #8]
 801559c:	3304      	adds	r3, #4
 801559e:	4619      	mov	r1, r3
 80155a0:	4610      	mov	r0, r2
 80155a2:	f7fd ff72 	bl	801348a <vListInsertEnd>
 80155a6:	e004      	b.n	80155b2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80155a8:	4b0a      	ldr	r3, [pc, #40]	@ (80155d4 <xTaskPriorityInherit+0xf4>)
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80155ae:	68bb      	ldr	r3, [r7, #8]
 80155b0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80155b2:	2301      	movs	r3, #1
 80155b4:	60fb      	str	r3, [r7, #12]
 80155b6:	e008      	b.n	80155ca <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80155b8:	68bb      	ldr	r3, [r7, #8]
 80155ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80155bc:	4b05      	ldr	r3, [pc, #20]	@ (80155d4 <xTaskPriorityInherit+0xf4>)
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155c2:	429a      	cmp	r2, r3
 80155c4:	d201      	bcs.n	80155ca <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80155c6:	2301      	movs	r3, #1
 80155c8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80155ca:	68fb      	ldr	r3, [r7, #12]
	}
 80155cc:	4618      	mov	r0, r3
 80155ce:	3710      	adds	r7, #16
 80155d0:	46bd      	mov	sp, r7
 80155d2:	bd80      	pop	{r7, pc}
 80155d4:	200018dc 	.word	0x200018dc
 80155d8:	200018e0 	.word	0x200018e0
 80155dc:	200019e4 	.word	0x200019e4

080155e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b086      	sub	sp, #24
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80155ec:	2300      	movs	r3, #0
 80155ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d074      	beq.n	80156e0 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80155f6:	4b3d      	ldr	r3, [pc, #244]	@ (80156ec <xTaskPriorityDisinherit+0x10c>)
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	693a      	ldr	r2, [r7, #16]
 80155fc:	429a      	cmp	r2, r3
 80155fe:	d00d      	beq.n	801561c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8015600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015604:	b672      	cpsid	i
 8015606:	f383 8811 	msr	BASEPRI, r3
 801560a:	f3bf 8f6f 	isb	sy
 801560e:	f3bf 8f4f 	dsb	sy
 8015612:	b662      	cpsie	i
 8015614:	60fb      	str	r3, [r7, #12]
}
 8015616:	bf00      	nop
 8015618:	bf00      	nop
 801561a:	e7fd      	b.n	8015618 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801561c:	693b      	ldr	r3, [r7, #16]
 801561e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015620:	2b00      	cmp	r3, #0
 8015622:	d10d      	bne.n	8015640 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8015624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015628:	b672      	cpsid	i
 801562a:	f383 8811 	msr	BASEPRI, r3
 801562e:	f3bf 8f6f 	isb	sy
 8015632:	f3bf 8f4f 	dsb	sy
 8015636:	b662      	cpsie	i
 8015638:	60bb      	str	r3, [r7, #8]
}
 801563a:	bf00      	nop
 801563c:	bf00      	nop
 801563e:	e7fd      	b.n	801563c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8015640:	693b      	ldr	r3, [r7, #16]
 8015642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015644:	1e5a      	subs	r2, r3, #1
 8015646:	693b      	ldr	r3, [r7, #16]
 8015648:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801564a:	693b      	ldr	r3, [r7, #16]
 801564c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801564e:	693b      	ldr	r3, [r7, #16]
 8015650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015652:	429a      	cmp	r2, r3
 8015654:	d044      	beq.n	80156e0 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015656:	693b      	ldr	r3, [r7, #16]
 8015658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801565a:	2b00      	cmp	r3, #0
 801565c:	d140      	bne.n	80156e0 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801565e:	693b      	ldr	r3, [r7, #16]
 8015660:	3304      	adds	r3, #4
 8015662:	4618      	mov	r0, r3
 8015664:	f7fd ff6e 	bl	8013544 <uxListRemove>
 8015668:	4603      	mov	r3, r0
 801566a:	2b00      	cmp	r3, #0
 801566c:	d115      	bne.n	801569a <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801566e:	693b      	ldr	r3, [r7, #16]
 8015670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015672:	491f      	ldr	r1, [pc, #124]	@ (80156f0 <xTaskPriorityDisinherit+0x110>)
 8015674:	4613      	mov	r3, r2
 8015676:	009b      	lsls	r3, r3, #2
 8015678:	4413      	add	r3, r2
 801567a:	009b      	lsls	r3, r3, #2
 801567c:	440b      	add	r3, r1
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d10a      	bne.n	801569a <xTaskPriorityDisinherit+0xba>
 8015684:	693b      	ldr	r3, [r7, #16]
 8015686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015688:	2201      	movs	r2, #1
 801568a:	fa02 f303 	lsl.w	r3, r2, r3
 801568e:	43da      	mvns	r2, r3
 8015690:	4b18      	ldr	r3, [pc, #96]	@ (80156f4 <xTaskPriorityDisinherit+0x114>)
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	4013      	ands	r3, r2
 8015696:	4a17      	ldr	r2, [pc, #92]	@ (80156f4 <xTaskPriorityDisinherit+0x114>)
 8015698:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801569a:	693b      	ldr	r3, [r7, #16]
 801569c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801569e:	693b      	ldr	r3, [r7, #16]
 80156a0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80156a2:	693b      	ldr	r3, [r7, #16]
 80156a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156a6:	f1c3 0207 	rsb	r2, r3, #7
 80156aa:	693b      	ldr	r3, [r7, #16]
 80156ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80156ae:	693b      	ldr	r3, [r7, #16]
 80156b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156b2:	2201      	movs	r2, #1
 80156b4:	409a      	lsls	r2, r3
 80156b6:	4b0f      	ldr	r3, [pc, #60]	@ (80156f4 <xTaskPriorityDisinherit+0x114>)
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	4313      	orrs	r3, r2
 80156bc:	4a0d      	ldr	r2, [pc, #52]	@ (80156f4 <xTaskPriorityDisinherit+0x114>)
 80156be:	6013      	str	r3, [r2, #0]
 80156c0:	693b      	ldr	r3, [r7, #16]
 80156c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80156c4:	4613      	mov	r3, r2
 80156c6:	009b      	lsls	r3, r3, #2
 80156c8:	4413      	add	r3, r2
 80156ca:	009b      	lsls	r3, r3, #2
 80156cc:	4a08      	ldr	r2, [pc, #32]	@ (80156f0 <xTaskPriorityDisinherit+0x110>)
 80156ce:	441a      	add	r2, r3
 80156d0:	693b      	ldr	r3, [r7, #16]
 80156d2:	3304      	adds	r3, #4
 80156d4:	4619      	mov	r1, r3
 80156d6:	4610      	mov	r0, r2
 80156d8:	f7fd fed7 	bl	801348a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80156dc:	2301      	movs	r3, #1
 80156de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80156e0:	697b      	ldr	r3, [r7, #20]
	}
 80156e2:	4618      	mov	r0, r3
 80156e4:	3718      	adds	r7, #24
 80156e6:	46bd      	mov	sp, r7
 80156e8:	bd80      	pop	{r7, pc}
 80156ea:	bf00      	nop
 80156ec:	200018dc 	.word	0x200018dc
 80156f0:	200018e0 	.word	0x200018e0
 80156f4:	200019e4 	.word	0x200019e4

080156f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b088      	sub	sp, #32
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
 8015700:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015706:	2301      	movs	r3, #1
 8015708:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	2b00      	cmp	r3, #0
 801570e:	f000 8089 	beq.w	8015824 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015712:	69bb      	ldr	r3, [r7, #24]
 8015714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015716:	2b00      	cmp	r3, #0
 8015718:	d10d      	bne.n	8015736 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 801571a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801571e:	b672      	cpsid	i
 8015720:	f383 8811 	msr	BASEPRI, r3
 8015724:	f3bf 8f6f 	isb	sy
 8015728:	f3bf 8f4f 	dsb	sy
 801572c:	b662      	cpsie	i
 801572e:	60fb      	str	r3, [r7, #12]
}
 8015730:	bf00      	nop
 8015732:	bf00      	nop
 8015734:	e7fd      	b.n	8015732 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015736:	69bb      	ldr	r3, [r7, #24]
 8015738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801573a:	683a      	ldr	r2, [r7, #0]
 801573c:	429a      	cmp	r2, r3
 801573e:	d902      	bls.n	8015746 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015740:	683b      	ldr	r3, [r7, #0]
 8015742:	61fb      	str	r3, [r7, #28]
 8015744:	e002      	b.n	801574c <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015746:	69bb      	ldr	r3, [r7, #24]
 8015748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801574a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801574c:	69bb      	ldr	r3, [r7, #24]
 801574e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015750:	69fa      	ldr	r2, [r7, #28]
 8015752:	429a      	cmp	r2, r3
 8015754:	d066      	beq.n	8015824 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015756:	69bb      	ldr	r3, [r7, #24]
 8015758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801575a:	697a      	ldr	r2, [r7, #20]
 801575c:	429a      	cmp	r2, r3
 801575e:	d161      	bne.n	8015824 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015760:	4b32      	ldr	r3, [pc, #200]	@ (801582c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	69ba      	ldr	r2, [r7, #24]
 8015766:	429a      	cmp	r2, r3
 8015768:	d10d      	bne.n	8015786 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 801576a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801576e:	b672      	cpsid	i
 8015770:	f383 8811 	msr	BASEPRI, r3
 8015774:	f3bf 8f6f 	isb	sy
 8015778:	f3bf 8f4f 	dsb	sy
 801577c:	b662      	cpsie	i
 801577e:	60bb      	str	r3, [r7, #8]
}
 8015780:	bf00      	nop
 8015782:	bf00      	nop
 8015784:	e7fd      	b.n	8015782 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015786:	69bb      	ldr	r3, [r7, #24]
 8015788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801578a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801578c:	69bb      	ldr	r3, [r7, #24]
 801578e:	69fa      	ldr	r2, [r7, #28]
 8015790:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015792:	69bb      	ldr	r3, [r7, #24]
 8015794:	699b      	ldr	r3, [r3, #24]
 8015796:	2b00      	cmp	r3, #0
 8015798:	db04      	blt.n	80157a4 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801579a:	69fb      	ldr	r3, [r7, #28]
 801579c:	f1c3 0207 	rsb	r2, r3, #7
 80157a0:	69bb      	ldr	r3, [r7, #24]
 80157a2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80157a4:	69bb      	ldr	r3, [r7, #24]
 80157a6:	6959      	ldr	r1, [r3, #20]
 80157a8:	693a      	ldr	r2, [r7, #16]
 80157aa:	4613      	mov	r3, r2
 80157ac:	009b      	lsls	r3, r3, #2
 80157ae:	4413      	add	r3, r2
 80157b0:	009b      	lsls	r3, r3, #2
 80157b2:	4a1f      	ldr	r2, [pc, #124]	@ (8015830 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80157b4:	4413      	add	r3, r2
 80157b6:	4299      	cmp	r1, r3
 80157b8:	d134      	bne.n	8015824 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80157ba:	69bb      	ldr	r3, [r7, #24]
 80157bc:	3304      	adds	r3, #4
 80157be:	4618      	mov	r0, r3
 80157c0:	f7fd fec0 	bl	8013544 <uxListRemove>
 80157c4:	4603      	mov	r3, r0
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d115      	bne.n	80157f6 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80157ca:	69bb      	ldr	r3, [r7, #24]
 80157cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80157ce:	4918      	ldr	r1, [pc, #96]	@ (8015830 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80157d0:	4613      	mov	r3, r2
 80157d2:	009b      	lsls	r3, r3, #2
 80157d4:	4413      	add	r3, r2
 80157d6:	009b      	lsls	r3, r3, #2
 80157d8:	440b      	add	r3, r1
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d10a      	bne.n	80157f6 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 80157e0:	69bb      	ldr	r3, [r7, #24]
 80157e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157e4:	2201      	movs	r2, #1
 80157e6:	fa02 f303 	lsl.w	r3, r2, r3
 80157ea:	43da      	mvns	r2, r3
 80157ec:	4b11      	ldr	r3, [pc, #68]	@ (8015834 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	4013      	ands	r3, r2
 80157f2:	4a10      	ldr	r2, [pc, #64]	@ (8015834 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80157f4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80157f6:	69bb      	ldr	r3, [r7, #24]
 80157f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157fa:	2201      	movs	r2, #1
 80157fc:	409a      	lsls	r2, r3
 80157fe:	4b0d      	ldr	r3, [pc, #52]	@ (8015834 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	4313      	orrs	r3, r2
 8015804:	4a0b      	ldr	r2, [pc, #44]	@ (8015834 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8015806:	6013      	str	r3, [r2, #0]
 8015808:	69bb      	ldr	r3, [r7, #24]
 801580a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801580c:	4613      	mov	r3, r2
 801580e:	009b      	lsls	r3, r3, #2
 8015810:	4413      	add	r3, r2
 8015812:	009b      	lsls	r3, r3, #2
 8015814:	4a06      	ldr	r2, [pc, #24]	@ (8015830 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8015816:	441a      	add	r2, r3
 8015818:	69bb      	ldr	r3, [r7, #24]
 801581a:	3304      	adds	r3, #4
 801581c:	4619      	mov	r1, r3
 801581e:	4610      	mov	r0, r2
 8015820:	f7fd fe33 	bl	801348a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015824:	bf00      	nop
 8015826:	3720      	adds	r7, #32
 8015828:	46bd      	mov	sp, r7
 801582a:	bd80      	pop	{r7, pc}
 801582c:	200018dc 	.word	0x200018dc
 8015830:	200018e0 	.word	0x200018e0
 8015834:	200019e4 	.word	0x200019e4

08015838 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015838:	b480      	push	{r7}
 801583a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801583c:	4b07      	ldr	r3, [pc, #28]	@ (801585c <pvTaskIncrementMutexHeldCount+0x24>)
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d004      	beq.n	801584e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015844:	4b05      	ldr	r3, [pc, #20]	@ (801585c <pvTaskIncrementMutexHeldCount+0x24>)
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801584a:	3201      	adds	r2, #1
 801584c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 801584e:	4b03      	ldr	r3, [pc, #12]	@ (801585c <pvTaskIncrementMutexHeldCount+0x24>)
 8015850:	681b      	ldr	r3, [r3, #0]
	}
 8015852:	4618      	mov	r0, r3
 8015854:	46bd      	mov	sp, r7
 8015856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585a:	4770      	bx	lr
 801585c:	200018dc 	.word	0x200018dc

08015860 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b084      	sub	sp, #16
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
 8015868:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801586a:	4b29      	ldr	r3, [pc, #164]	@ (8015910 <prvAddCurrentTaskToDelayedList+0xb0>)
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015870:	4b28      	ldr	r3, [pc, #160]	@ (8015914 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	3304      	adds	r3, #4
 8015876:	4618      	mov	r0, r3
 8015878:	f7fd fe64 	bl	8013544 <uxListRemove>
 801587c:	4603      	mov	r3, r0
 801587e:	2b00      	cmp	r3, #0
 8015880:	d10b      	bne.n	801589a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8015882:	4b24      	ldr	r3, [pc, #144]	@ (8015914 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015888:	2201      	movs	r2, #1
 801588a:	fa02 f303 	lsl.w	r3, r2, r3
 801588e:	43da      	mvns	r2, r3
 8015890:	4b21      	ldr	r3, [pc, #132]	@ (8015918 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	4013      	ands	r3, r2
 8015896:	4a20      	ldr	r2, [pc, #128]	@ (8015918 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015898:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80158a0:	d10a      	bne.n	80158b8 <prvAddCurrentTaskToDelayedList+0x58>
 80158a2:	683b      	ldr	r3, [r7, #0]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d007      	beq.n	80158b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80158a8:	4b1a      	ldr	r3, [pc, #104]	@ (8015914 <prvAddCurrentTaskToDelayedList+0xb4>)
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	3304      	adds	r3, #4
 80158ae:	4619      	mov	r1, r3
 80158b0:	481a      	ldr	r0, [pc, #104]	@ (801591c <prvAddCurrentTaskToDelayedList+0xbc>)
 80158b2:	f7fd fdea 	bl	801348a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80158b6:	e026      	b.n	8015906 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80158b8:	68fa      	ldr	r2, [r7, #12]
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	4413      	add	r3, r2
 80158be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80158c0:	4b14      	ldr	r3, [pc, #80]	@ (8015914 <prvAddCurrentTaskToDelayedList+0xb4>)
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	68ba      	ldr	r2, [r7, #8]
 80158c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80158c8:	68ba      	ldr	r2, [r7, #8]
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	429a      	cmp	r2, r3
 80158ce:	d209      	bcs.n	80158e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80158d0:	4b13      	ldr	r3, [pc, #76]	@ (8015920 <prvAddCurrentTaskToDelayedList+0xc0>)
 80158d2:	681a      	ldr	r2, [r3, #0]
 80158d4:	4b0f      	ldr	r3, [pc, #60]	@ (8015914 <prvAddCurrentTaskToDelayedList+0xb4>)
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	3304      	adds	r3, #4
 80158da:	4619      	mov	r1, r3
 80158dc:	4610      	mov	r0, r2
 80158de:	f7fd fdf8 	bl	80134d2 <vListInsert>
}
 80158e2:	e010      	b.n	8015906 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80158e4:	4b0f      	ldr	r3, [pc, #60]	@ (8015924 <prvAddCurrentTaskToDelayedList+0xc4>)
 80158e6:	681a      	ldr	r2, [r3, #0]
 80158e8:	4b0a      	ldr	r3, [pc, #40]	@ (8015914 <prvAddCurrentTaskToDelayedList+0xb4>)
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	3304      	adds	r3, #4
 80158ee:	4619      	mov	r1, r3
 80158f0:	4610      	mov	r0, r2
 80158f2:	f7fd fdee 	bl	80134d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80158f6:	4b0c      	ldr	r3, [pc, #48]	@ (8015928 <prvAddCurrentTaskToDelayedList+0xc8>)
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	68ba      	ldr	r2, [r7, #8]
 80158fc:	429a      	cmp	r2, r3
 80158fe:	d202      	bcs.n	8015906 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8015900:	4a09      	ldr	r2, [pc, #36]	@ (8015928 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015902:	68bb      	ldr	r3, [r7, #8]
 8015904:	6013      	str	r3, [r2, #0]
}
 8015906:	bf00      	nop
 8015908:	3710      	adds	r7, #16
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}
 801590e:	bf00      	nop
 8015910:	200019e0 	.word	0x200019e0
 8015914:	200018dc 	.word	0x200018dc
 8015918:	200019e4 	.word	0x200019e4
 801591c:	200019c8 	.word	0x200019c8
 8015920:	20001998 	.word	0x20001998
 8015924:	20001994 	.word	0x20001994
 8015928:	200019fc 	.word	0x200019fc

0801592c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801592c:	b480      	push	{r7}
 801592e:	b085      	sub	sp, #20
 8015930:	af00      	add	r7, sp, #0
 8015932:	60f8      	str	r0, [r7, #12]
 8015934:	60b9      	str	r1, [r7, #8]
 8015936:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	3b04      	subs	r3, #4
 801593c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8015944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	3b04      	subs	r3, #4
 801594a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801594c:	68bb      	ldr	r3, [r7, #8]
 801594e:	f023 0201 	bic.w	r2, r3, #1
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	3b04      	subs	r3, #4
 801595a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801595c:	4a0c      	ldr	r2, [pc, #48]	@ (8015990 <pxPortInitialiseStack+0x64>)
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	3b14      	subs	r3, #20
 8015966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015968:	687a      	ldr	r2, [r7, #4]
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	3b04      	subs	r3, #4
 8015972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	f06f 0202 	mvn.w	r2, #2
 801597a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	3b20      	subs	r3, #32
 8015980:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015982:	68fb      	ldr	r3, [r7, #12]
}
 8015984:	4618      	mov	r0, r3
 8015986:	3714      	adds	r7, #20
 8015988:	46bd      	mov	sp, r7
 801598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801598e:	4770      	bx	lr
 8015990:	08015995 	.word	0x08015995

08015994 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015994:	b480      	push	{r7}
 8015996:	b085      	sub	sp, #20
 8015998:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801599a:	2300      	movs	r3, #0
 801599c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801599e:	4b15      	ldr	r3, [pc, #84]	@ (80159f4 <prvTaskExitError+0x60>)
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80159a6:	d00d      	beq.n	80159c4 <prvTaskExitError+0x30>
	__asm volatile
 80159a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159ac:	b672      	cpsid	i
 80159ae:	f383 8811 	msr	BASEPRI, r3
 80159b2:	f3bf 8f6f 	isb	sy
 80159b6:	f3bf 8f4f 	dsb	sy
 80159ba:	b662      	cpsie	i
 80159bc:	60fb      	str	r3, [r7, #12]
}
 80159be:	bf00      	nop
 80159c0:	bf00      	nop
 80159c2:	e7fd      	b.n	80159c0 <prvTaskExitError+0x2c>
	__asm volatile
 80159c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159c8:	b672      	cpsid	i
 80159ca:	f383 8811 	msr	BASEPRI, r3
 80159ce:	f3bf 8f6f 	isb	sy
 80159d2:	f3bf 8f4f 	dsb	sy
 80159d6:	b662      	cpsie	i
 80159d8:	60bb      	str	r3, [r7, #8]
}
 80159da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80159dc:	bf00      	nop
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d0fc      	beq.n	80159de <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80159e4:	bf00      	nop
 80159e6:	bf00      	nop
 80159e8:	3714      	adds	r7, #20
 80159ea:	46bd      	mov	sp, r7
 80159ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f0:	4770      	bx	lr
 80159f2:	bf00      	nop
 80159f4:	200000b0 	.word	0x200000b0
	...

08015a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015a00:	4b07      	ldr	r3, [pc, #28]	@ (8015a20 <pxCurrentTCBConst2>)
 8015a02:	6819      	ldr	r1, [r3, #0]
 8015a04:	6808      	ldr	r0, [r1, #0]
 8015a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a0a:	f380 8809 	msr	PSP, r0
 8015a0e:	f3bf 8f6f 	isb	sy
 8015a12:	f04f 0000 	mov.w	r0, #0
 8015a16:	f380 8811 	msr	BASEPRI, r0
 8015a1a:	4770      	bx	lr
 8015a1c:	f3af 8000 	nop.w

08015a20 <pxCurrentTCBConst2>:
 8015a20:	200018dc 	.word	0x200018dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015a24:	bf00      	nop
 8015a26:	bf00      	nop

08015a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015a28:	4808      	ldr	r0, [pc, #32]	@ (8015a4c <prvPortStartFirstTask+0x24>)
 8015a2a:	6800      	ldr	r0, [r0, #0]
 8015a2c:	6800      	ldr	r0, [r0, #0]
 8015a2e:	f380 8808 	msr	MSP, r0
 8015a32:	f04f 0000 	mov.w	r0, #0
 8015a36:	f380 8814 	msr	CONTROL, r0
 8015a3a:	b662      	cpsie	i
 8015a3c:	b661      	cpsie	f
 8015a3e:	f3bf 8f4f 	dsb	sy
 8015a42:	f3bf 8f6f 	isb	sy
 8015a46:	df00      	svc	0
 8015a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015a4a:	bf00      	nop
 8015a4c:	e000ed08 	.word	0xe000ed08

08015a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b084      	sub	sp, #16
 8015a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015a56:	4b37      	ldr	r3, [pc, #220]	@ (8015b34 <xPortStartScheduler+0xe4>)
 8015a58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	781b      	ldrb	r3, [r3, #0]
 8015a5e:	b2db      	uxtb	r3, r3
 8015a60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	22ff      	movs	r2, #255	@ 0xff
 8015a66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	781b      	ldrb	r3, [r3, #0]
 8015a6c:	b2db      	uxtb	r3, r3
 8015a6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015a70:	78fb      	ldrb	r3, [r7, #3]
 8015a72:	b2db      	uxtb	r3, r3
 8015a74:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8015a78:	b2da      	uxtb	r2, r3
 8015a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8015b38 <xPortStartScheduler+0xe8>)
 8015a7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8015b3c <xPortStartScheduler+0xec>)
 8015a80:	2207      	movs	r2, #7
 8015a82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015a84:	e009      	b.n	8015a9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8015a86:	4b2d      	ldr	r3, [pc, #180]	@ (8015b3c <xPortStartScheduler+0xec>)
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	3b01      	subs	r3, #1
 8015a8c:	4a2b      	ldr	r2, [pc, #172]	@ (8015b3c <xPortStartScheduler+0xec>)
 8015a8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015a90:	78fb      	ldrb	r3, [r7, #3]
 8015a92:	b2db      	uxtb	r3, r3
 8015a94:	005b      	lsls	r3, r3, #1
 8015a96:	b2db      	uxtb	r3, r3
 8015a98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015a9a:	78fb      	ldrb	r3, [r7, #3]
 8015a9c:	b2db      	uxtb	r3, r3
 8015a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015aa2:	2b80      	cmp	r3, #128	@ 0x80
 8015aa4:	d0ef      	beq.n	8015a86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015aa6:	4b25      	ldr	r3, [pc, #148]	@ (8015b3c <xPortStartScheduler+0xec>)
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	f1c3 0307 	rsb	r3, r3, #7
 8015aae:	2b04      	cmp	r3, #4
 8015ab0:	d00d      	beq.n	8015ace <xPortStartScheduler+0x7e>
	__asm volatile
 8015ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ab6:	b672      	cpsid	i
 8015ab8:	f383 8811 	msr	BASEPRI, r3
 8015abc:	f3bf 8f6f 	isb	sy
 8015ac0:	f3bf 8f4f 	dsb	sy
 8015ac4:	b662      	cpsie	i
 8015ac6:	60bb      	str	r3, [r7, #8]
}
 8015ac8:	bf00      	nop
 8015aca:	bf00      	nop
 8015acc:	e7fd      	b.n	8015aca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015ace:	4b1b      	ldr	r3, [pc, #108]	@ (8015b3c <xPortStartScheduler+0xec>)
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	021b      	lsls	r3, r3, #8
 8015ad4:	4a19      	ldr	r2, [pc, #100]	@ (8015b3c <xPortStartScheduler+0xec>)
 8015ad6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015ad8:	4b18      	ldr	r3, [pc, #96]	@ (8015b3c <xPortStartScheduler+0xec>)
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8015ae0:	4a16      	ldr	r2, [pc, #88]	@ (8015b3c <xPortStartScheduler+0xec>)
 8015ae2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	b2da      	uxtb	r2, r3
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015aec:	4b14      	ldr	r3, [pc, #80]	@ (8015b40 <xPortStartScheduler+0xf0>)
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	4a13      	ldr	r2, [pc, #76]	@ (8015b40 <xPortStartScheduler+0xf0>)
 8015af2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8015af6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015af8:	4b11      	ldr	r3, [pc, #68]	@ (8015b40 <xPortStartScheduler+0xf0>)
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	4a10      	ldr	r2, [pc, #64]	@ (8015b40 <xPortStartScheduler+0xf0>)
 8015afe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8015b02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015b04:	f000 f8dc 	bl	8015cc0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015b08:	4b0e      	ldr	r3, [pc, #56]	@ (8015b44 <xPortStartScheduler+0xf4>)
 8015b0a:	2200      	movs	r2, #0
 8015b0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015b0e:	f000 f8fb 	bl	8015d08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015b12:	4b0d      	ldr	r3, [pc, #52]	@ (8015b48 <xPortStartScheduler+0xf8>)
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	4a0c      	ldr	r2, [pc, #48]	@ (8015b48 <xPortStartScheduler+0xf8>)
 8015b18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8015b1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015b1e:	f7ff ff83 	bl	8015a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015b22:	f7ff fa3d 	bl	8014fa0 <vTaskSwitchContext>
	prvTaskExitError();
 8015b26:	f7ff ff35 	bl	8015994 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015b2a:	2300      	movs	r3, #0
}
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	3710      	adds	r7, #16
 8015b30:	46bd      	mov	sp, r7
 8015b32:	bd80      	pop	{r7, pc}
 8015b34:	e000e400 	.word	0xe000e400
 8015b38:	20001a08 	.word	0x20001a08
 8015b3c:	20001a0c 	.word	0x20001a0c
 8015b40:	e000ed20 	.word	0xe000ed20
 8015b44:	200000b0 	.word	0x200000b0
 8015b48:	e000ef34 	.word	0xe000ef34

08015b4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015b4c:	b480      	push	{r7}
 8015b4e:	b083      	sub	sp, #12
 8015b50:	af00      	add	r7, sp, #0
	__asm volatile
 8015b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b56:	b672      	cpsid	i
 8015b58:	f383 8811 	msr	BASEPRI, r3
 8015b5c:	f3bf 8f6f 	isb	sy
 8015b60:	f3bf 8f4f 	dsb	sy
 8015b64:	b662      	cpsie	i
 8015b66:	607b      	str	r3, [r7, #4]
}
 8015b68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015b6a:	4b11      	ldr	r3, [pc, #68]	@ (8015bb0 <vPortEnterCritical+0x64>)
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	3301      	adds	r3, #1
 8015b70:	4a0f      	ldr	r2, [pc, #60]	@ (8015bb0 <vPortEnterCritical+0x64>)
 8015b72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015b74:	4b0e      	ldr	r3, [pc, #56]	@ (8015bb0 <vPortEnterCritical+0x64>)
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	2b01      	cmp	r3, #1
 8015b7a:	d112      	bne.n	8015ba2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8015bb4 <vPortEnterCritical+0x68>)
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	b2db      	uxtb	r3, r3
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d00d      	beq.n	8015ba2 <vPortEnterCritical+0x56>
	__asm volatile
 8015b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b8a:	b672      	cpsid	i
 8015b8c:	f383 8811 	msr	BASEPRI, r3
 8015b90:	f3bf 8f6f 	isb	sy
 8015b94:	f3bf 8f4f 	dsb	sy
 8015b98:	b662      	cpsie	i
 8015b9a:	603b      	str	r3, [r7, #0]
}
 8015b9c:	bf00      	nop
 8015b9e:	bf00      	nop
 8015ba0:	e7fd      	b.n	8015b9e <vPortEnterCritical+0x52>
	}
}
 8015ba2:	bf00      	nop
 8015ba4:	370c      	adds	r7, #12
 8015ba6:	46bd      	mov	sp, r7
 8015ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bac:	4770      	bx	lr
 8015bae:	bf00      	nop
 8015bb0:	200000b0 	.word	0x200000b0
 8015bb4:	e000ed04 	.word	0xe000ed04

08015bb8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015bb8:	b480      	push	{r7}
 8015bba:	b083      	sub	sp, #12
 8015bbc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015bbe:	4b13      	ldr	r3, [pc, #76]	@ (8015c0c <vPortExitCritical+0x54>)
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d10d      	bne.n	8015be2 <vPortExitCritical+0x2a>
	__asm volatile
 8015bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bca:	b672      	cpsid	i
 8015bcc:	f383 8811 	msr	BASEPRI, r3
 8015bd0:	f3bf 8f6f 	isb	sy
 8015bd4:	f3bf 8f4f 	dsb	sy
 8015bd8:	b662      	cpsie	i
 8015bda:	607b      	str	r3, [r7, #4]
}
 8015bdc:	bf00      	nop
 8015bde:	bf00      	nop
 8015be0:	e7fd      	b.n	8015bde <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8015be2:	4b0a      	ldr	r3, [pc, #40]	@ (8015c0c <vPortExitCritical+0x54>)
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	3b01      	subs	r3, #1
 8015be8:	4a08      	ldr	r2, [pc, #32]	@ (8015c0c <vPortExitCritical+0x54>)
 8015bea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015bec:	4b07      	ldr	r3, [pc, #28]	@ (8015c0c <vPortExitCritical+0x54>)
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d105      	bne.n	8015c00 <vPortExitCritical+0x48>
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015bf8:	683b      	ldr	r3, [r7, #0]
 8015bfa:	f383 8811 	msr	BASEPRI, r3
}
 8015bfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015c00:	bf00      	nop
 8015c02:	370c      	adds	r7, #12
 8015c04:	46bd      	mov	sp, r7
 8015c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c0a:	4770      	bx	lr
 8015c0c:	200000b0 	.word	0x200000b0

08015c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015c10:	f3ef 8009 	mrs	r0, PSP
 8015c14:	f3bf 8f6f 	isb	sy
 8015c18:	4b15      	ldr	r3, [pc, #84]	@ (8015c70 <pxCurrentTCBConst>)
 8015c1a:	681a      	ldr	r2, [r3, #0]
 8015c1c:	f01e 0f10 	tst.w	lr, #16
 8015c20:	bf08      	it	eq
 8015c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c2a:	6010      	str	r0, [r2, #0]
 8015c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015c30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8015c34:	b672      	cpsid	i
 8015c36:	f380 8811 	msr	BASEPRI, r0
 8015c3a:	f3bf 8f4f 	dsb	sy
 8015c3e:	f3bf 8f6f 	isb	sy
 8015c42:	b662      	cpsie	i
 8015c44:	f7ff f9ac 	bl	8014fa0 <vTaskSwitchContext>
 8015c48:	f04f 0000 	mov.w	r0, #0
 8015c4c:	f380 8811 	msr	BASEPRI, r0
 8015c50:	bc09      	pop	{r0, r3}
 8015c52:	6819      	ldr	r1, [r3, #0]
 8015c54:	6808      	ldr	r0, [r1, #0]
 8015c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c5a:	f01e 0f10 	tst.w	lr, #16
 8015c5e:	bf08      	it	eq
 8015c60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015c64:	f380 8809 	msr	PSP, r0
 8015c68:	f3bf 8f6f 	isb	sy
 8015c6c:	4770      	bx	lr
 8015c6e:	bf00      	nop

08015c70 <pxCurrentTCBConst>:
 8015c70:	200018dc 	.word	0x200018dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015c74:	bf00      	nop
 8015c76:	bf00      	nop

08015c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	b082      	sub	sp, #8
 8015c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8015c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c82:	b672      	cpsid	i
 8015c84:	f383 8811 	msr	BASEPRI, r3
 8015c88:	f3bf 8f6f 	isb	sy
 8015c8c:	f3bf 8f4f 	dsb	sy
 8015c90:	b662      	cpsie	i
 8015c92:	607b      	str	r3, [r7, #4]
}
 8015c94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015c96:	f7ff f8c7 	bl	8014e28 <xTaskIncrementTick>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d003      	beq.n	8015ca8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015ca0:	4b06      	ldr	r3, [pc, #24]	@ (8015cbc <SysTick_Handler+0x44>)
 8015ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015ca6:	601a      	str	r2, [r3, #0]
 8015ca8:	2300      	movs	r3, #0
 8015caa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015cac:	683b      	ldr	r3, [r7, #0]
 8015cae:	f383 8811 	msr	BASEPRI, r3
}
 8015cb2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015cb4:	bf00      	nop
 8015cb6:	3708      	adds	r7, #8
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	bd80      	pop	{r7, pc}
 8015cbc:	e000ed04 	.word	0xe000ed04

08015cc0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015cc0:	b480      	push	{r7}
 8015cc2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8015cf4 <vPortSetupTimerInterrupt+0x34>)
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015cca:	4b0b      	ldr	r3, [pc, #44]	@ (8015cf8 <vPortSetupTimerInterrupt+0x38>)
 8015ccc:	2200      	movs	r2, #0
 8015cce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8015cfc <vPortSetupTimerInterrupt+0x3c>)
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8015d00 <vPortSetupTimerInterrupt+0x40>)
 8015cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8015cda:	099b      	lsrs	r3, r3, #6
 8015cdc:	4a09      	ldr	r2, [pc, #36]	@ (8015d04 <vPortSetupTimerInterrupt+0x44>)
 8015cde:	3b01      	subs	r3, #1
 8015ce0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015ce2:	4b04      	ldr	r3, [pc, #16]	@ (8015cf4 <vPortSetupTimerInterrupt+0x34>)
 8015ce4:	2207      	movs	r2, #7
 8015ce6:	601a      	str	r2, [r3, #0]
}
 8015ce8:	bf00      	nop
 8015cea:	46bd      	mov	sp, r7
 8015cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf0:	4770      	bx	lr
 8015cf2:	bf00      	nop
 8015cf4:	e000e010 	.word	0xe000e010
 8015cf8:	e000e018 	.word	0xe000e018
 8015cfc:	20000068 	.word	0x20000068
 8015d00:	10624dd3 	.word	0x10624dd3
 8015d04:	e000e014 	.word	0xe000e014

08015d08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015d08:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8015d18 <vPortEnableVFP+0x10>
 8015d0c:	6801      	ldr	r1, [r0, #0]
 8015d0e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8015d12:	6001      	str	r1, [r0, #0]
 8015d14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015d16:	bf00      	nop
 8015d18:	e000ed88 	.word	0xe000ed88

08015d1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015d1c:	b480      	push	{r7}
 8015d1e:	b085      	sub	sp, #20
 8015d20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015d22:	f3ef 8305 	mrs	r3, IPSR
 8015d26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	2b0f      	cmp	r3, #15
 8015d2c:	d917      	bls.n	8015d5e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8015d98 <vPortValidateInterruptPriority+0x7c>)
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	4413      	add	r3, r2
 8015d34:	781b      	ldrb	r3, [r3, #0]
 8015d36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015d38:	4b18      	ldr	r3, [pc, #96]	@ (8015d9c <vPortValidateInterruptPriority+0x80>)
 8015d3a:	781b      	ldrb	r3, [r3, #0]
 8015d3c:	7afa      	ldrb	r2, [r7, #11]
 8015d3e:	429a      	cmp	r2, r3
 8015d40:	d20d      	bcs.n	8015d5e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8015d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d46:	b672      	cpsid	i
 8015d48:	f383 8811 	msr	BASEPRI, r3
 8015d4c:	f3bf 8f6f 	isb	sy
 8015d50:	f3bf 8f4f 	dsb	sy
 8015d54:	b662      	cpsie	i
 8015d56:	607b      	str	r3, [r7, #4]
}
 8015d58:	bf00      	nop
 8015d5a:	bf00      	nop
 8015d5c:	e7fd      	b.n	8015d5a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015d5e:	4b10      	ldr	r3, [pc, #64]	@ (8015da0 <vPortValidateInterruptPriority+0x84>)
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8015d66:	4b0f      	ldr	r3, [pc, #60]	@ (8015da4 <vPortValidateInterruptPriority+0x88>)
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	429a      	cmp	r2, r3
 8015d6c:	d90d      	bls.n	8015d8a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8015d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d72:	b672      	cpsid	i
 8015d74:	f383 8811 	msr	BASEPRI, r3
 8015d78:	f3bf 8f6f 	isb	sy
 8015d7c:	f3bf 8f4f 	dsb	sy
 8015d80:	b662      	cpsie	i
 8015d82:	603b      	str	r3, [r7, #0]
}
 8015d84:	bf00      	nop
 8015d86:	bf00      	nop
 8015d88:	e7fd      	b.n	8015d86 <vPortValidateInterruptPriority+0x6a>
	}
 8015d8a:	bf00      	nop
 8015d8c:	3714      	adds	r7, #20
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d94:	4770      	bx	lr
 8015d96:	bf00      	nop
 8015d98:	e000e3f0 	.word	0xe000e3f0
 8015d9c:	20001a08 	.word	0x20001a08
 8015da0:	e000ed0c 	.word	0xe000ed0c
 8015da4:	20001a0c 	.word	0x20001a0c

08015da8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015da8:	b580      	push	{r7, lr}
 8015daa:	b08a      	sub	sp, #40	@ 0x28
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015db0:	2300      	movs	r3, #0
 8015db2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015db4:	f7fe ff68 	bl	8014c88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015db8:	4b5f      	ldr	r3, [pc, #380]	@ (8015f38 <pvPortMalloc+0x190>)
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d101      	bne.n	8015dc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015dc0:	f000 f924 	bl	801600c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015dc4:	4b5d      	ldr	r3, [pc, #372]	@ (8015f3c <pvPortMalloc+0x194>)
 8015dc6:	681a      	ldr	r2, [r3, #0]
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	4013      	ands	r3, r2
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	f040 8094 	bne.w	8015efa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d020      	beq.n	8015e1a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8015dd8:	2208      	movs	r2, #8
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	4413      	add	r3, r2
 8015dde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	f003 0307 	and.w	r3, r3, #7
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d017      	beq.n	8015e1a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	f023 0307 	bic.w	r3, r3, #7
 8015df0:	3308      	adds	r3, #8
 8015df2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	f003 0307 	and.w	r3, r3, #7
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d00d      	beq.n	8015e1a <pvPortMalloc+0x72>
	__asm volatile
 8015dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e02:	b672      	cpsid	i
 8015e04:	f383 8811 	msr	BASEPRI, r3
 8015e08:	f3bf 8f6f 	isb	sy
 8015e0c:	f3bf 8f4f 	dsb	sy
 8015e10:	b662      	cpsie	i
 8015e12:	617b      	str	r3, [r7, #20]
}
 8015e14:	bf00      	nop
 8015e16:	bf00      	nop
 8015e18:	e7fd      	b.n	8015e16 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d06c      	beq.n	8015efa <pvPortMalloc+0x152>
 8015e20:	4b47      	ldr	r3, [pc, #284]	@ (8015f40 <pvPortMalloc+0x198>)
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	687a      	ldr	r2, [r7, #4]
 8015e26:	429a      	cmp	r2, r3
 8015e28:	d867      	bhi.n	8015efa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015e2a:	4b46      	ldr	r3, [pc, #280]	@ (8015f44 <pvPortMalloc+0x19c>)
 8015e2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015e2e:	4b45      	ldr	r3, [pc, #276]	@ (8015f44 <pvPortMalloc+0x19c>)
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015e34:	e004      	b.n	8015e40 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8015e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e42:	685b      	ldr	r3, [r3, #4]
 8015e44:	687a      	ldr	r2, [r7, #4]
 8015e46:	429a      	cmp	r2, r3
 8015e48:	d903      	bls.n	8015e52 <pvPortMalloc+0xaa>
 8015e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d1f1      	bne.n	8015e36 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015e52:	4b39      	ldr	r3, [pc, #228]	@ (8015f38 <pvPortMalloc+0x190>)
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015e58:	429a      	cmp	r2, r3
 8015e5a:	d04e      	beq.n	8015efa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015e5c:	6a3b      	ldr	r3, [r7, #32]
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	2208      	movs	r2, #8
 8015e62:	4413      	add	r3, r2
 8015e64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e68:	681a      	ldr	r2, [r3, #0]
 8015e6a:	6a3b      	ldr	r3, [r7, #32]
 8015e6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e70:	685a      	ldr	r2, [r3, #4]
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	1ad2      	subs	r2, r2, r3
 8015e76:	2308      	movs	r3, #8
 8015e78:	005b      	lsls	r3, r3, #1
 8015e7a:	429a      	cmp	r2, r3
 8015e7c:	d922      	bls.n	8015ec4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	4413      	add	r3, r2
 8015e84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015e86:	69bb      	ldr	r3, [r7, #24]
 8015e88:	f003 0307 	and.w	r3, r3, #7
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d00d      	beq.n	8015eac <pvPortMalloc+0x104>
	__asm volatile
 8015e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e94:	b672      	cpsid	i
 8015e96:	f383 8811 	msr	BASEPRI, r3
 8015e9a:	f3bf 8f6f 	isb	sy
 8015e9e:	f3bf 8f4f 	dsb	sy
 8015ea2:	b662      	cpsie	i
 8015ea4:	613b      	str	r3, [r7, #16]
}
 8015ea6:	bf00      	nop
 8015ea8:	bf00      	nop
 8015eaa:	e7fd      	b.n	8015ea8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015eae:	685a      	ldr	r2, [r3, #4]
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	1ad2      	subs	r2, r2, r3
 8015eb4:	69bb      	ldr	r3, [r7, #24]
 8015eb6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015eba:	687a      	ldr	r2, [r7, #4]
 8015ebc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015ebe:	69b8      	ldr	r0, [r7, #24]
 8015ec0:	f000 f906 	bl	80160d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8015f40 <pvPortMalloc+0x198>)
 8015ec6:	681a      	ldr	r2, [r3, #0]
 8015ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015eca:	685b      	ldr	r3, [r3, #4]
 8015ecc:	1ad3      	subs	r3, r2, r3
 8015ece:	4a1c      	ldr	r2, [pc, #112]	@ (8015f40 <pvPortMalloc+0x198>)
 8015ed0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8015f40 <pvPortMalloc+0x198>)
 8015ed4:	681a      	ldr	r2, [r3, #0]
 8015ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8015f48 <pvPortMalloc+0x1a0>)
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	429a      	cmp	r2, r3
 8015edc:	d203      	bcs.n	8015ee6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015ede:	4b18      	ldr	r3, [pc, #96]	@ (8015f40 <pvPortMalloc+0x198>)
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	4a19      	ldr	r2, [pc, #100]	@ (8015f48 <pvPortMalloc+0x1a0>)
 8015ee4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ee8:	685a      	ldr	r2, [r3, #4]
 8015eea:	4b14      	ldr	r3, [pc, #80]	@ (8015f3c <pvPortMalloc+0x194>)
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	431a      	orrs	r2, r3
 8015ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ef2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ef6:	2200      	movs	r2, #0
 8015ef8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015efa:	f7fe fed3 	bl	8014ca4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8015efe:	69fb      	ldr	r3, [r7, #28]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d101      	bne.n	8015f08 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8015f04:	f7ea ff7c 	bl	8000e00 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f08:	69fb      	ldr	r3, [r7, #28]
 8015f0a:	f003 0307 	and.w	r3, r3, #7
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d00d      	beq.n	8015f2e <pvPortMalloc+0x186>
	__asm volatile
 8015f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f16:	b672      	cpsid	i
 8015f18:	f383 8811 	msr	BASEPRI, r3
 8015f1c:	f3bf 8f6f 	isb	sy
 8015f20:	f3bf 8f4f 	dsb	sy
 8015f24:	b662      	cpsie	i
 8015f26:	60fb      	str	r3, [r7, #12]
}
 8015f28:	bf00      	nop
 8015f2a:	bf00      	nop
 8015f2c:	e7fd      	b.n	8015f2a <pvPortMalloc+0x182>
	return pvReturn;
 8015f2e:	69fb      	ldr	r3, [r7, #28]
}
 8015f30:	4618      	mov	r0, r3
 8015f32:	3728      	adds	r7, #40	@ 0x28
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bd80      	pop	{r7, pc}
 8015f38:	20009a18 	.word	0x20009a18
 8015f3c:	20009a24 	.word	0x20009a24
 8015f40:	20009a1c 	.word	0x20009a1c
 8015f44:	20009a10 	.word	0x20009a10
 8015f48:	20009a20 	.word	0x20009a20

08015f4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015f4c:	b580      	push	{r7, lr}
 8015f4e:	b086      	sub	sp, #24
 8015f50:	af00      	add	r7, sp, #0
 8015f52:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d04e      	beq.n	8015ffc <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015f5e:	2308      	movs	r3, #8
 8015f60:	425b      	negs	r3, r3
 8015f62:	697a      	ldr	r2, [r7, #20]
 8015f64:	4413      	add	r3, r2
 8015f66:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015f68:	697b      	ldr	r3, [r7, #20]
 8015f6a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015f6c:	693b      	ldr	r3, [r7, #16]
 8015f6e:	685a      	ldr	r2, [r3, #4]
 8015f70:	4b24      	ldr	r3, [pc, #144]	@ (8016004 <vPortFree+0xb8>)
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	4013      	ands	r3, r2
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d10d      	bne.n	8015f96 <vPortFree+0x4a>
	__asm volatile
 8015f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f7e:	b672      	cpsid	i
 8015f80:	f383 8811 	msr	BASEPRI, r3
 8015f84:	f3bf 8f6f 	isb	sy
 8015f88:	f3bf 8f4f 	dsb	sy
 8015f8c:	b662      	cpsie	i
 8015f8e:	60fb      	str	r3, [r7, #12]
}
 8015f90:	bf00      	nop
 8015f92:	bf00      	nop
 8015f94:	e7fd      	b.n	8015f92 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015f96:	693b      	ldr	r3, [r7, #16]
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d00d      	beq.n	8015fba <vPortFree+0x6e>
	__asm volatile
 8015f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fa2:	b672      	cpsid	i
 8015fa4:	f383 8811 	msr	BASEPRI, r3
 8015fa8:	f3bf 8f6f 	isb	sy
 8015fac:	f3bf 8f4f 	dsb	sy
 8015fb0:	b662      	cpsie	i
 8015fb2:	60bb      	str	r3, [r7, #8]
}
 8015fb4:	bf00      	nop
 8015fb6:	bf00      	nop
 8015fb8:	e7fd      	b.n	8015fb6 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015fba:	693b      	ldr	r3, [r7, #16]
 8015fbc:	685a      	ldr	r2, [r3, #4]
 8015fbe:	4b11      	ldr	r3, [pc, #68]	@ (8016004 <vPortFree+0xb8>)
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	4013      	ands	r3, r2
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d019      	beq.n	8015ffc <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015fc8:	693b      	ldr	r3, [r7, #16]
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d115      	bne.n	8015ffc <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015fd0:	693b      	ldr	r3, [r7, #16]
 8015fd2:	685a      	ldr	r2, [r3, #4]
 8015fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8016004 <vPortFree+0xb8>)
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	43db      	mvns	r3, r3
 8015fda:	401a      	ands	r2, r3
 8015fdc:	693b      	ldr	r3, [r7, #16]
 8015fde:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015fe0:	f7fe fe52 	bl	8014c88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015fe4:	693b      	ldr	r3, [r7, #16]
 8015fe6:	685a      	ldr	r2, [r3, #4]
 8015fe8:	4b07      	ldr	r3, [pc, #28]	@ (8016008 <vPortFree+0xbc>)
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	4413      	add	r3, r2
 8015fee:	4a06      	ldr	r2, [pc, #24]	@ (8016008 <vPortFree+0xbc>)
 8015ff0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015ff2:	6938      	ldr	r0, [r7, #16]
 8015ff4:	f000 f86c 	bl	80160d0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015ff8:	f7fe fe54 	bl	8014ca4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015ffc:	bf00      	nop
 8015ffe:	3718      	adds	r7, #24
 8016000:	46bd      	mov	sp, r7
 8016002:	bd80      	pop	{r7, pc}
 8016004:	20009a24 	.word	0x20009a24
 8016008:	20009a1c 	.word	0x20009a1c

0801600c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801600c:	b480      	push	{r7}
 801600e:	b085      	sub	sp, #20
 8016010:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016012:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016016:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016018:	4b27      	ldr	r3, [pc, #156]	@ (80160b8 <prvHeapInit+0xac>)
 801601a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	f003 0307 	and.w	r3, r3, #7
 8016022:	2b00      	cmp	r3, #0
 8016024:	d00c      	beq.n	8016040 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	3307      	adds	r3, #7
 801602a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	f023 0307 	bic.w	r3, r3, #7
 8016032:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016034:	68ba      	ldr	r2, [r7, #8]
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	1ad3      	subs	r3, r2, r3
 801603a:	4a1f      	ldr	r2, [pc, #124]	@ (80160b8 <prvHeapInit+0xac>)
 801603c:	4413      	add	r3, r2
 801603e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016044:	4a1d      	ldr	r2, [pc, #116]	@ (80160bc <prvHeapInit+0xb0>)
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801604a:	4b1c      	ldr	r3, [pc, #112]	@ (80160bc <prvHeapInit+0xb0>)
 801604c:	2200      	movs	r2, #0
 801604e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	68ba      	ldr	r2, [r7, #8]
 8016054:	4413      	add	r3, r2
 8016056:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016058:	2208      	movs	r2, #8
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	1a9b      	subs	r3, r3, r2
 801605e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	f023 0307 	bic.w	r3, r3, #7
 8016066:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	4a15      	ldr	r2, [pc, #84]	@ (80160c0 <prvHeapInit+0xb4>)
 801606c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801606e:	4b14      	ldr	r3, [pc, #80]	@ (80160c0 <prvHeapInit+0xb4>)
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	2200      	movs	r2, #0
 8016074:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016076:	4b12      	ldr	r3, [pc, #72]	@ (80160c0 <prvHeapInit+0xb4>)
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	2200      	movs	r2, #0
 801607c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016082:	683b      	ldr	r3, [r7, #0]
 8016084:	68fa      	ldr	r2, [r7, #12]
 8016086:	1ad2      	subs	r2, r2, r3
 8016088:	683b      	ldr	r3, [r7, #0]
 801608a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801608c:	4b0c      	ldr	r3, [pc, #48]	@ (80160c0 <prvHeapInit+0xb4>)
 801608e:	681a      	ldr	r2, [r3, #0]
 8016090:	683b      	ldr	r3, [r7, #0]
 8016092:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016094:	683b      	ldr	r3, [r7, #0]
 8016096:	685b      	ldr	r3, [r3, #4]
 8016098:	4a0a      	ldr	r2, [pc, #40]	@ (80160c4 <prvHeapInit+0xb8>)
 801609a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801609c:	683b      	ldr	r3, [r7, #0]
 801609e:	685b      	ldr	r3, [r3, #4]
 80160a0:	4a09      	ldr	r2, [pc, #36]	@ (80160c8 <prvHeapInit+0xbc>)
 80160a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80160a4:	4b09      	ldr	r3, [pc, #36]	@ (80160cc <prvHeapInit+0xc0>)
 80160a6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80160aa:	601a      	str	r2, [r3, #0]
}
 80160ac:	bf00      	nop
 80160ae:	3714      	adds	r7, #20
 80160b0:	46bd      	mov	sp, r7
 80160b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b6:	4770      	bx	lr
 80160b8:	20001a10 	.word	0x20001a10
 80160bc:	20009a10 	.word	0x20009a10
 80160c0:	20009a18 	.word	0x20009a18
 80160c4:	20009a20 	.word	0x20009a20
 80160c8:	20009a1c 	.word	0x20009a1c
 80160cc:	20009a24 	.word	0x20009a24

080160d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80160d0:	b480      	push	{r7}
 80160d2:	b085      	sub	sp, #20
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80160d8:	4b28      	ldr	r3, [pc, #160]	@ (801617c <prvInsertBlockIntoFreeList+0xac>)
 80160da:	60fb      	str	r3, [r7, #12]
 80160dc:	e002      	b.n	80160e4 <prvInsertBlockIntoFreeList+0x14>
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	60fb      	str	r3, [r7, #12]
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	687a      	ldr	r2, [r7, #4]
 80160ea:	429a      	cmp	r2, r3
 80160ec:	d8f7      	bhi.n	80160de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	685b      	ldr	r3, [r3, #4]
 80160f6:	68ba      	ldr	r2, [r7, #8]
 80160f8:	4413      	add	r3, r2
 80160fa:	687a      	ldr	r2, [r7, #4]
 80160fc:	429a      	cmp	r2, r3
 80160fe:	d108      	bne.n	8016112 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	685a      	ldr	r2, [r3, #4]
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	685b      	ldr	r3, [r3, #4]
 8016108:	441a      	add	r2, r3
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	685b      	ldr	r3, [r3, #4]
 801611a:	68ba      	ldr	r2, [r7, #8]
 801611c:	441a      	add	r2, r3
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	429a      	cmp	r2, r3
 8016124:	d118      	bne.n	8016158 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	681a      	ldr	r2, [r3, #0]
 801612a:	4b15      	ldr	r3, [pc, #84]	@ (8016180 <prvInsertBlockIntoFreeList+0xb0>)
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	429a      	cmp	r2, r3
 8016130:	d00d      	beq.n	801614e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	685a      	ldr	r2, [r3, #4]
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	685b      	ldr	r3, [r3, #4]
 801613c:	441a      	add	r2, r3
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	681a      	ldr	r2, [r3, #0]
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	601a      	str	r2, [r3, #0]
 801614c:	e008      	b.n	8016160 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801614e:	4b0c      	ldr	r3, [pc, #48]	@ (8016180 <prvInsertBlockIntoFreeList+0xb0>)
 8016150:	681a      	ldr	r2, [r3, #0]
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	601a      	str	r2, [r3, #0]
 8016156:	e003      	b.n	8016160 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	681a      	ldr	r2, [r3, #0]
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016160:	68fa      	ldr	r2, [r7, #12]
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	429a      	cmp	r2, r3
 8016166:	d002      	beq.n	801616e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	687a      	ldr	r2, [r7, #4]
 801616c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801616e:	bf00      	nop
 8016170:	3714      	adds	r7, #20
 8016172:	46bd      	mov	sp, r7
 8016174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016178:	4770      	bx	lr
 801617a:	bf00      	nop
 801617c:	20009a10 	.word	0x20009a10
 8016180:	20009a18 	.word	0x20009a18

08016184 <malloc>:
 8016184:	4b02      	ldr	r3, [pc, #8]	@ (8016190 <malloc+0xc>)
 8016186:	4601      	mov	r1, r0
 8016188:	6818      	ldr	r0, [r3, #0]
 801618a:	f000 b82d 	b.w	80161e8 <_malloc_r>
 801618e:	bf00      	nop
 8016190:	200000b4 	.word	0x200000b4

08016194 <free>:
 8016194:	4b02      	ldr	r3, [pc, #8]	@ (80161a0 <free+0xc>)
 8016196:	4601      	mov	r1, r0
 8016198:	6818      	ldr	r0, [r3, #0]
 801619a:	f000 b979 	b.w	8016490 <_free_r>
 801619e:	bf00      	nop
 80161a0:	200000b4 	.word	0x200000b4

080161a4 <sbrk_aligned>:
 80161a4:	b570      	push	{r4, r5, r6, lr}
 80161a6:	4e0f      	ldr	r6, [pc, #60]	@ (80161e4 <sbrk_aligned+0x40>)
 80161a8:	460c      	mov	r4, r1
 80161aa:	6831      	ldr	r1, [r6, #0]
 80161ac:	4605      	mov	r5, r0
 80161ae:	b911      	cbnz	r1, 80161b6 <sbrk_aligned+0x12>
 80161b0:	f000 f924 	bl	80163fc <_sbrk_r>
 80161b4:	6030      	str	r0, [r6, #0]
 80161b6:	4621      	mov	r1, r4
 80161b8:	4628      	mov	r0, r5
 80161ba:	f000 f91f 	bl	80163fc <_sbrk_r>
 80161be:	1c43      	adds	r3, r0, #1
 80161c0:	d103      	bne.n	80161ca <sbrk_aligned+0x26>
 80161c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80161c6:	4620      	mov	r0, r4
 80161c8:	bd70      	pop	{r4, r5, r6, pc}
 80161ca:	1cc4      	adds	r4, r0, #3
 80161cc:	f024 0403 	bic.w	r4, r4, #3
 80161d0:	42a0      	cmp	r0, r4
 80161d2:	d0f8      	beq.n	80161c6 <sbrk_aligned+0x22>
 80161d4:	1a21      	subs	r1, r4, r0
 80161d6:	4628      	mov	r0, r5
 80161d8:	f000 f910 	bl	80163fc <_sbrk_r>
 80161dc:	3001      	adds	r0, #1
 80161de:	d1f2      	bne.n	80161c6 <sbrk_aligned+0x22>
 80161e0:	e7ef      	b.n	80161c2 <sbrk_aligned+0x1e>
 80161e2:	bf00      	nop
 80161e4:	20009a28 	.word	0x20009a28

080161e8 <_malloc_r>:
 80161e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80161ec:	1ccd      	adds	r5, r1, #3
 80161ee:	f025 0503 	bic.w	r5, r5, #3
 80161f2:	3508      	adds	r5, #8
 80161f4:	2d0c      	cmp	r5, #12
 80161f6:	bf38      	it	cc
 80161f8:	250c      	movcc	r5, #12
 80161fa:	2d00      	cmp	r5, #0
 80161fc:	4606      	mov	r6, r0
 80161fe:	db01      	blt.n	8016204 <_malloc_r+0x1c>
 8016200:	42a9      	cmp	r1, r5
 8016202:	d904      	bls.n	801620e <_malloc_r+0x26>
 8016204:	230c      	movs	r3, #12
 8016206:	6033      	str	r3, [r6, #0]
 8016208:	2000      	movs	r0, #0
 801620a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801620e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80162e4 <_malloc_r+0xfc>
 8016212:	f000 f869 	bl	80162e8 <__malloc_lock>
 8016216:	f8d8 3000 	ldr.w	r3, [r8]
 801621a:	461c      	mov	r4, r3
 801621c:	bb44      	cbnz	r4, 8016270 <_malloc_r+0x88>
 801621e:	4629      	mov	r1, r5
 8016220:	4630      	mov	r0, r6
 8016222:	f7ff ffbf 	bl	80161a4 <sbrk_aligned>
 8016226:	1c43      	adds	r3, r0, #1
 8016228:	4604      	mov	r4, r0
 801622a:	d158      	bne.n	80162de <_malloc_r+0xf6>
 801622c:	f8d8 4000 	ldr.w	r4, [r8]
 8016230:	4627      	mov	r7, r4
 8016232:	2f00      	cmp	r7, #0
 8016234:	d143      	bne.n	80162be <_malloc_r+0xd6>
 8016236:	2c00      	cmp	r4, #0
 8016238:	d04b      	beq.n	80162d2 <_malloc_r+0xea>
 801623a:	6823      	ldr	r3, [r4, #0]
 801623c:	4639      	mov	r1, r7
 801623e:	4630      	mov	r0, r6
 8016240:	eb04 0903 	add.w	r9, r4, r3
 8016244:	f000 f8da 	bl	80163fc <_sbrk_r>
 8016248:	4581      	cmp	r9, r0
 801624a:	d142      	bne.n	80162d2 <_malloc_r+0xea>
 801624c:	6821      	ldr	r1, [r4, #0]
 801624e:	1a6d      	subs	r5, r5, r1
 8016250:	4629      	mov	r1, r5
 8016252:	4630      	mov	r0, r6
 8016254:	f7ff ffa6 	bl	80161a4 <sbrk_aligned>
 8016258:	3001      	adds	r0, #1
 801625a:	d03a      	beq.n	80162d2 <_malloc_r+0xea>
 801625c:	6823      	ldr	r3, [r4, #0]
 801625e:	442b      	add	r3, r5
 8016260:	6023      	str	r3, [r4, #0]
 8016262:	f8d8 3000 	ldr.w	r3, [r8]
 8016266:	685a      	ldr	r2, [r3, #4]
 8016268:	bb62      	cbnz	r2, 80162c4 <_malloc_r+0xdc>
 801626a:	f8c8 7000 	str.w	r7, [r8]
 801626e:	e00f      	b.n	8016290 <_malloc_r+0xa8>
 8016270:	6822      	ldr	r2, [r4, #0]
 8016272:	1b52      	subs	r2, r2, r5
 8016274:	d420      	bmi.n	80162b8 <_malloc_r+0xd0>
 8016276:	2a0b      	cmp	r2, #11
 8016278:	d917      	bls.n	80162aa <_malloc_r+0xc2>
 801627a:	1961      	adds	r1, r4, r5
 801627c:	42a3      	cmp	r3, r4
 801627e:	6025      	str	r5, [r4, #0]
 8016280:	bf18      	it	ne
 8016282:	6059      	strne	r1, [r3, #4]
 8016284:	6863      	ldr	r3, [r4, #4]
 8016286:	bf08      	it	eq
 8016288:	f8c8 1000 	streq.w	r1, [r8]
 801628c:	5162      	str	r2, [r4, r5]
 801628e:	604b      	str	r3, [r1, #4]
 8016290:	4630      	mov	r0, r6
 8016292:	f000 f82f 	bl	80162f4 <__malloc_unlock>
 8016296:	f104 000b 	add.w	r0, r4, #11
 801629a:	1d23      	adds	r3, r4, #4
 801629c:	f020 0007 	bic.w	r0, r0, #7
 80162a0:	1ac2      	subs	r2, r0, r3
 80162a2:	bf1c      	itt	ne
 80162a4:	1a1b      	subne	r3, r3, r0
 80162a6:	50a3      	strne	r3, [r4, r2]
 80162a8:	e7af      	b.n	801620a <_malloc_r+0x22>
 80162aa:	6862      	ldr	r2, [r4, #4]
 80162ac:	42a3      	cmp	r3, r4
 80162ae:	bf0c      	ite	eq
 80162b0:	f8c8 2000 	streq.w	r2, [r8]
 80162b4:	605a      	strne	r2, [r3, #4]
 80162b6:	e7eb      	b.n	8016290 <_malloc_r+0xa8>
 80162b8:	4623      	mov	r3, r4
 80162ba:	6864      	ldr	r4, [r4, #4]
 80162bc:	e7ae      	b.n	801621c <_malloc_r+0x34>
 80162be:	463c      	mov	r4, r7
 80162c0:	687f      	ldr	r7, [r7, #4]
 80162c2:	e7b6      	b.n	8016232 <_malloc_r+0x4a>
 80162c4:	461a      	mov	r2, r3
 80162c6:	685b      	ldr	r3, [r3, #4]
 80162c8:	42a3      	cmp	r3, r4
 80162ca:	d1fb      	bne.n	80162c4 <_malloc_r+0xdc>
 80162cc:	2300      	movs	r3, #0
 80162ce:	6053      	str	r3, [r2, #4]
 80162d0:	e7de      	b.n	8016290 <_malloc_r+0xa8>
 80162d2:	230c      	movs	r3, #12
 80162d4:	6033      	str	r3, [r6, #0]
 80162d6:	4630      	mov	r0, r6
 80162d8:	f000 f80c 	bl	80162f4 <__malloc_unlock>
 80162dc:	e794      	b.n	8016208 <_malloc_r+0x20>
 80162de:	6005      	str	r5, [r0, #0]
 80162e0:	e7d6      	b.n	8016290 <_malloc_r+0xa8>
 80162e2:	bf00      	nop
 80162e4:	20009a2c 	.word	0x20009a2c

080162e8 <__malloc_lock>:
 80162e8:	4801      	ldr	r0, [pc, #4]	@ (80162f0 <__malloc_lock+0x8>)
 80162ea:	f000 b8c1 	b.w	8016470 <__retarget_lock_acquire_recursive>
 80162ee:	bf00      	nop
 80162f0:	20009b6c 	.word	0x20009b6c

080162f4 <__malloc_unlock>:
 80162f4:	4801      	ldr	r0, [pc, #4]	@ (80162fc <__malloc_unlock+0x8>)
 80162f6:	f000 b8bc 	b.w	8016472 <__retarget_lock_release_recursive>
 80162fa:	bf00      	nop
 80162fc:	20009b6c 	.word	0x20009b6c

08016300 <siprintf>:
 8016300:	b40e      	push	{r1, r2, r3}
 8016302:	b500      	push	{lr}
 8016304:	b09c      	sub	sp, #112	@ 0x70
 8016306:	ab1d      	add	r3, sp, #116	@ 0x74
 8016308:	9002      	str	r0, [sp, #8]
 801630a:	9006      	str	r0, [sp, #24]
 801630c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016310:	4809      	ldr	r0, [pc, #36]	@ (8016338 <siprintf+0x38>)
 8016312:	9107      	str	r1, [sp, #28]
 8016314:	9104      	str	r1, [sp, #16]
 8016316:	4909      	ldr	r1, [pc, #36]	@ (801633c <siprintf+0x3c>)
 8016318:	f853 2b04 	ldr.w	r2, [r3], #4
 801631c:	9105      	str	r1, [sp, #20]
 801631e:	6800      	ldr	r0, [r0, #0]
 8016320:	9301      	str	r3, [sp, #4]
 8016322:	a902      	add	r1, sp, #8
 8016324:	f000 f95a 	bl	80165dc <_svfiprintf_r>
 8016328:	9b02      	ldr	r3, [sp, #8]
 801632a:	2200      	movs	r2, #0
 801632c:	701a      	strb	r2, [r3, #0]
 801632e:	b01c      	add	sp, #112	@ 0x70
 8016330:	f85d eb04 	ldr.w	lr, [sp], #4
 8016334:	b003      	add	sp, #12
 8016336:	4770      	bx	lr
 8016338:	200000b4 	.word	0x200000b4
 801633c:	ffff0208 	.word	0xffff0208

08016340 <memset>:
 8016340:	4402      	add	r2, r0
 8016342:	4603      	mov	r3, r0
 8016344:	4293      	cmp	r3, r2
 8016346:	d100      	bne.n	801634a <memset+0xa>
 8016348:	4770      	bx	lr
 801634a:	f803 1b01 	strb.w	r1, [r3], #1
 801634e:	e7f9      	b.n	8016344 <memset+0x4>

08016350 <_reclaim_reent>:
 8016350:	4b29      	ldr	r3, [pc, #164]	@ (80163f8 <_reclaim_reent+0xa8>)
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	4283      	cmp	r3, r0
 8016356:	b570      	push	{r4, r5, r6, lr}
 8016358:	4604      	mov	r4, r0
 801635a:	d04b      	beq.n	80163f4 <_reclaim_reent+0xa4>
 801635c:	69c3      	ldr	r3, [r0, #28]
 801635e:	b1ab      	cbz	r3, 801638c <_reclaim_reent+0x3c>
 8016360:	68db      	ldr	r3, [r3, #12]
 8016362:	b16b      	cbz	r3, 8016380 <_reclaim_reent+0x30>
 8016364:	2500      	movs	r5, #0
 8016366:	69e3      	ldr	r3, [r4, #28]
 8016368:	68db      	ldr	r3, [r3, #12]
 801636a:	5959      	ldr	r1, [r3, r5]
 801636c:	2900      	cmp	r1, #0
 801636e:	d13b      	bne.n	80163e8 <_reclaim_reent+0x98>
 8016370:	3504      	adds	r5, #4
 8016372:	2d80      	cmp	r5, #128	@ 0x80
 8016374:	d1f7      	bne.n	8016366 <_reclaim_reent+0x16>
 8016376:	69e3      	ldr	r3, [r4, #28]
 8016378:	4620      	mov	r0, r4
 801637a:	68d9      	ldr	r1, [r3, #12]
 801637c:	f000 f888 	bl	8016490 <_free_r>
 8016380:	69e3      	ldr	r3, [r4, #28]
 8016382:	6819      	ldr	r1, [r3, #0]
 8016384:	b111      	cbz	r1, 801638c <_reclaim_reent+0x3c>
 8016386:	4620      	mov	r0, r4
 8016388:	f000 f882 	bl	8016490 <_free_r>
 801638c:	6961      	ldr	r1, [r4, #20]
 801638e:	b111      	cbz	r1, 8016396 <_reclaim_reent+0x46>
 8016390:	4620      	mov	r0, r4
 8016392:	f000 f87d 	bl	8016490 <_free_r>
 8016396:	69e1      	ldr	r1, [r4, #28]
 8016398:	b111      	cbz	r1, 80163a0 <_reclaim_reent+0x50>
 801639a:	4620      	mov	r0, r4
 801639c:	f000 f878 	bl	8016490 <_free_r>
 80163a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80163a2:	b111      	cbz	r1, 80163aa <_reclaim_reent+0x5a>
 80163a4:	4620      	mov	r0, r4
 80163a6:	f000 f873 	bl	8016490 <_free_r>
 80163aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80163ac:	b111      	cbz	r1, 80163b4 <_reclaim_reent+0x64>
 80163ae:	4620      	mov	r0, r4
 80163b0:	f000 f86e 	bl	8016490 <_free_r>
 80163b4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80163b6:	b111      	cbz	r1, 80163be <_reclaim_reent+0x6e>
 80163b8:	4620      	mov	r0, r4
 80163ba:	f000 f869 	bl	8016490 <_free_r>
 80163be:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80163c0:	b111      	cbz	r1, 80163c8 <_reclaim_reent+0x78>
 80163c2:	4620      	mov	r0, r4
 80163c4:	f000 f864 	bl	8016490 <_free_r>
 80163c8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80163ca:	b111      	cbz	r1, 80163d2 <_reclaim_reent+0x82>
 80163cc:	4620      	mov	r0, r4
 80163ce:	f000 f85f 	bl	8016490 <_free_r>
 80163d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80163d4:	b111      	cbz	r1, 80163dc <_reclaim_reent+0x8c>
 80163d6:	4620      	mov	r0, r4
 80163d8:	f000 f85a 	bl	8016490 <_free_r>
 80163dc:	6a23      	ldr	r3, [r4, #32]
 80163de:	b14b      	cbz	r3, 80163f4 <_reclaim_reent+0xa4>
 80163e0:	4620      	mov	r0, r4
 80163e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80163e6:	4718      	bx	r3
 80163e8:	680e      	ldr	r6, [r1, #0]
 80163ea:	4620      	mov	r0, r4
 80163ec:	f000 f850 	bl	8016490 <_free_r>
 80163f0:	4631      	mov	r1, r6
 80163f2:	e7bb      	b.n	801636c <_reclaim_reent+0x1c>
 80163f4:	bd70      	pop	{r4, r5, r6, pc}
 80163f6:	bf00      	nop
 80163f8:	200000b4 	.word	0x200000b4

080163fc <_sbrk_r>:
 80163fc:	b538      	push	{r3, r4, r5, lr}
 80163fe:	4d06      	ldr	r5, [pc, #24]	@ (8016418 <_sbrk_r+0x1c>)
 8016400:	2300      	movs	r3, #0
 8016402:	4604      	mov	r4, r0
 8016404:	4608      	mov	r0, r1
 8016406:	602b      	str	r3, [r5, #0]
 8016408:	f7ef fc26 	bl	8005c58 <_sbrk>
 801640c:	1c43      	adds	r3, r0, #1
 801640e:	d102      	bne.n	8016416 <_sbrk_r+0x1a>
 8016410:	682b      	ldr	r3, [r5, #0]
 8016412:	b103      	cbz	r3, 8016416 <_sbrk_r+0x1a>
 8016414:	6023      	str	r3, [r4, #0]
 8016416:	bd38      	pop	{r3, r4, r5, pc}
 8016418:	20009b68 	.word	0x20009b68

0801641c <__errno>:
 801641c:	4b01      	ldr	r3, [pc, #4]	@ (8016424 <__errno+0x8>)
 801641e:	6818      	ldr	r0, [r3, #0]
 8016420:	4770      	bx	lr
 8016422:	bf00      	nop
 8016424:	200000b4 	.word	0x200000b4

08016428 <__libc_init_array>:
 8016428:	b570      	push	{r4, r5, r6, lr}
 801642a:	4d0d      	ldr	r5, [pc, #52]	@ (8016460 <__libc_init_array+0x38>)
 801642c:	4c0d      	ldr	r4, [pc, #52]	@ (8016464 <__libc_init_array+0x3c>)
 801642e:	1b64      	subs	r4, r4, r5
 8016430:	10a4      	asrs	r4, r4, #2
 8016432:	2600      	movs	r6, #0
 8016434:	42a6      	cmp	r6, r4
 8016436:	d109      	bne.n	801644c <__libc_init_array+0x24>
 8016438:	4d0b      	ldr	r5, [pc, #44]	@ (8016468 <__libc_init_array+0x40>)
 801643a:	4c0c      	ldr	r4, [pc, #48]	@ (801646c <__libc_init_array+0x44>)
 801643c:	f000 fba8 	bl	8016b90 <_init>
 8016440:	1b64      	subs	r4, r4, r5
 8016442:	10a4      	asrs	r4, r4, #2
 8016444:	2600      	movs	r6, #0
 8016446:	42a6      	cmp	r6, r4
 8016448:	d105      	bne.n	8016456 <__libc_init_array+0x2e>
 801644a:	bd70      	pop	{r4, r5, r6, pc}
 801644c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016450:	4798      	blx	r3
 8016452:	3601      	adds	r6, #1
 8016454:	e7ee      	b.n	8016434 <__libc_init_array+0xc>
 8016456:	f855 3b04 	ldr.w	r3, [r5], #4
 801645a:	4798      	blx	r3
 801645c:	3601      	adds	r6, #1
 801645e:	e7f2      	b.n	8016446 <__libc_init_array+0x1e>
 8016460:	080e6fc0 	.word	0x080e6fc0
 8016464:	080e6fc0 	.word	0x080e6fc0
 8016468:	080e6fc0 	.word	0x080e6fc0
 801646c:	080e6fc4 	.word	0x080e6fc4

08016470 <__retarget_lock_acquire_recursive>:
 8016470:	4770      	bx	lr

08016472 <__retarget_lock_release_recursive>:
 8016472:	4770      	bx	lr

08016474 <memcpy>:
 8016474:	440a      	add	r2, r1
 8016476:	4291      	cmp	r1, r2
 8016478:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801647c:	d100      	bne.n	8016480 <memcpy+0xc>
 801647e:	4770      	bx	lr
 8016480:	b510      	push	{r4, lr}
 8016482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016486:	f803 4f01 	strb.w	r4, [r3, #1]!
 801648a:	4291      	cmp	r1, r2
 801648c:	d1f9      	bne.n	8016482 <memcpy+0xe>
 801648e:	bd10      	pop	{r4, pc}

08016490 <_free_r>:
 8016490:	b538      	push	{r3, r4, r5, lr}
 8016492:	4605      	mov	r5, r0
 8016494:	2900      	cmp	r1, #0
 8016496:	d041      	beq.n	801651c <_free_r+0x8c>
 8016498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801649c:	1f0c      	subs	r4, r1, #4
 801649e:	2b00      	cmp	r3, #0
 80164a0:	bfb8      	it	lt
 80164a2:	18e4      	addlt	r4, r4, r3
 80164a4:	f7ff ff20 	bl	80162e8 <__malloc_lock>
 80164a8:	4a1d      	ldr	r2, [pc, #116]	@ (8016520 <_free_r+0x90>)
 80164aa:	6813      	ldr	r3, [r2, #0]
 80164ac:	b933      	cbnz	r3, 80164bc <_free_r+0x2c>
 80164ae:	6063      	str	r3, [r4, #4]
 80164b0:	6014      	str	r4, [r2, #0]
 80164b2:	4628      	mov	r0, r5
 80164b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80164b8:	f7ff bf1c 	b.w	80162f4 <__malloc_unlock>
 80164bc:	42a3      	cmp	r3, r4
 80164be:	d908      	bls.n	80164d2 <_free_r+0x42>
 80164c0:	6820      	ldr	r0, [r4, #0]
 80164c2:	1821      	adds	r1, r4, r0
 80164c4:	428b      	cmp	r3, r1
 80164c6:	bf01      	itttt	eq
 80164c8:	6819      	ldreq	r1, [r3, #0]
 80164ca:	685b      	ldreq	r3, [r3, #4]
 80164cc:	1809      	addeq	r1, r1, r0
 80164ce:	6021      	streq	r1, [r4, #0]
 80164d0:	e7ed      	b.n	80164ae <_free_r+0x1e>
 80164d2:	461a      	mov	r2, r3
 80164d4:	685b      	ldr	r3, [r3, #4]
 80164d6:	b10b      	cbz	r3, 80164dc <_free_r+0x4c>
 80164d8:	42a3      	cmp	r3, r4
 80164da:	d9fa      	bls.n	80164d2 <_free_r+0x42>
 80164dc:	6811      	ldr	r1, [r2, #0]
 80164de:	1850      	adds	r0, r2, r1
 80164e0:	42a0      	cmp	r0, r4
 80164e2:	d10b      	bne.n	80164fc <_free_r+0x6c>
 80164e4:	6820      	ldr	r0, [r4, #0]
 80164e6:	4401      	add	r1, r0
 80164e8:	1850      	adds	r0, r2, r1
 80164ea:	4283      	cmp	r3, r0
 80164ec:	6011      	str	r1, [r2, #0]
 80164ee:	d1e0      	bne.n	80164b2 <_free_r+0x22>
 80164f0:	6818      	ldr	r0, [r3, #0]
 80164f2:	685b      	ldr	r3, [r3, #4]
 80164f4:	6053      	str	r3, [r2, #4]
 80164f6:	4408      	add	r0, r1
 80164f8:	6010      	str	r0, [r2, #0]
 80164fa:	e7da      	b.n	80164b2 <_free_r+0x22>
 80164fc:	d902      	bls.n	8016504 <_free_r+0x74>
 80164fe:	230c      	movs	r3, #12
 8016500:	602b      	str	r3, [r5, #0]
 8016502:	e7d6      	b.n	80164b2 <_free_r+0x22>
 8016504:	6820      	ldr	r0, [r4, #0]
 8016506:	1821      	adds	r1, r4, r0
 8016508:	428b      	cmp	r3, r1
 801650a:	bf04      	itt	eq
 801650c:	6819      	ldreq	r1, [r3, #0]
 801650e:	685b      	ldreq	r3, [r3, #4]
 8016510:	6063      	str	r3, [r4, #4]
 8016512:	bf04      	itt	eq
 8016514:	1809      	addeq	r1, r1, r0
 8016516:	6021      	streq	r1, [r4, #0]
 8016518:	6054      	str	r4, [r2, #4]
 801651a:	e7ca      	b.n	80164b2 <_free_r+0x22>
 801651c:	bd38      	pop	{r3, r4, r5, pc}
 801651e:	bf00      	nop
 8016520:	20009a2c 	.word	0x20009a2c

08016524 <__ssputs_r>:
 8016524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016528:	688e      	ldr	r6, [r1, #8]
 801652a:	461f      	mov	r7, r3
 801652c:	42be      	cmp	r6, r7
 801652e:	680b      	ldr	r3, [r1, #0]
 8016530:	4682      	mov	sl, r0
 8016532:	460c      	mov	r4, r1
 8016534:	4690      	mov	r8, r2
 8016536:	d82d      	bhi.n	8016594 <__ssputs_r+0x70>
 8016538:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801653c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016540:	d026      	beq.n	8016590 <__ssputs_r+0x6c>
 8016542:	6965      	ldr	r5, [r4, #20]
 8016544:	6909      	ldr	r1, [r1, #16]
 8016546:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801654a:	eba3 0901 	sub.w	r9, r3, r1
 801654e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016552:	1c7b      	adds	r3, r7, #1
 8016554:	444b      	add	r3, r9
 8016556:	106d      	asrs	r5, r5, #1
 8016558:	429d      	cmp	r5, r3
 801655a:	bf38      	it	cc
 801655c:	461d      	movcc	r5, r3
 801655e:	0553      	lsls	r3, r2, #21
 8016560:	d527      	bpl.n	80165b2 <__ssputs_r+0x8e>
 8016562:	4629      	mov	r1, r5
 8016564:	f7ff fe40 	bl	80161e8 <_malloc_r>
 8016568:	4606      	mov	r6, r0
 801656a:	b360      	cbz	r0, 80165c6 <__ssputs_r+0xa2>
 801656c:	6921      	ldr	r1, [r4, #16]
 801656e:	464a      	mov	r2, r9
 8016570:	f7ff ff80 	bl	8016474 <memcpy>
 8016574:	89a3      	ldrh	r3, [r4, #12]
 8016576:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801657a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801657e:	81a3      	strh	r3, [r4, #12]
 8016580:	6126      	str	r6, [r4, #16]
 8016582:	6165      	str	r5, [r4, #20]
 8016584:	444e      	add	r6, r9
 8016586:	eba5 0509 	sub.w	r5, r5, r9
 801658a:	6026      	str	r6, [r4, #0]
 801658c:	60a5      	str	r5, [r4, #8]
 801658e:	463e      	mov	r6, r7
 8016590:	42be      	cmp	r6, r7
 8016592:	d900      	bls.n	8016596 <__ssputs_r+0x72>
 8016594:	463e      	mov	r6, r7
 8016596:	6820      	ldr	r0, [r4, #0]
 8016598:	4632      	mov	r2, r6
 801659a:	4641      	mov	r1, r8
 801659c:	f000 fad6 	bl	8016b4c <memmove>
 80165a0:	68a3      	ldr	r3, [r4, #8]
 80165a2:	1b9b      	subs	r3, r3, r6
 80165a4:	60a3      	str	r3, [r4, #8]
 80165a6:	6823      	ldr	r3, [r4, #0]
 80165a8:	4433      	add	r3, r6
 80165aa:	6023      	str	r3, [r4, #0]
 80165ac:	2000      	movs	r0, #0
 80165ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165b2:	462a      	mov	r2, r5
 80165b4:	f000 fa9c 	bl	8016af0 <_realloc_r>
 80165b8:	4606      	mov	r6, r0
 80165ba:	2800      	cmp	r0, #0
 80165bc:	d1e0      	bne.n	8016580 <__ssputs_r+0x5c>
 80165be:	6921      	ldr	r1, [r4, #16]
 80165c0:	4650      	mov	r0, sl
 80165c2:	f7ff ff65 	bl	8016490 <_free_r>
 80165c6:	230c      	movs	r3, #12
 80165c8:	f8ca 3000 	str.w	r3, [sl]
 80165cc:	89a3      	ldrh	r3, [r4, #12]
 80165ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80165d2:	81a3      	strh	r3, [r4, #12]
 80165d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80165d8:	e7e9      	b.n	80165ae <__ssputs_r+0x8a>
	...

080165dc <_svfiprintf_r>:
 80165dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165e0:	4698      	mov	r8, r3
 80165e2:	898b      	ldrh	r3, [r1, #12]
 80165e4:	061b      	lsls	r3, r3, #24
 80165e6:	b09d      	sub	sp, #116	@ 0x74
 80165e8:	4607      	mov	r7, r0
 80165ea:	460d      	mov	r5, r1
 80165ec:	4614      	mov	r4, r2
 80165ee:	d510      	bpl.n	8016612 <_svfiprintf_r+0x36>
 80165f0:	690b      	ldr	r3, [r1, #16]
 80165f2:	b973      	cbnz	r3, 8016612 <_svfiprintf_r+0x36>
 80165f4:	2140      	movs	r1, #64	@ 0x40
 80165f6:	f7ff fdf7 	bl	80161e8 <_malloc_r>
 80165fa:	6028      	str	r0, [r5, #0]
 80165fc:	6128      	str	r0, [r5, #16]
 80165fe:	b930      	cbnz	r0, 801660e <_svfiprintf_r+0x32>
 8016600:	230c      	movs	r3, #12
 8016602:	603b      	str	r3, [r7, #0]
 8016604:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016608:	b01d      	add	sp, #116	@ 0x74
 801660a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801660e:	2340      	movs	r3, #64	@ 0x40
 8016610:	616b      	str	r3, [r5, #20]
 8016612:	2300      	movs	r3, #0
 8016614:	9309      	str	r3, [sp, #36]	@ 0x24
 8016616:	2320      	movs	r3, #32
 8016618:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801661c:	f8cd 800c 	str.w	r8, [sp, #12]
 8016620:	2330      	movs	r3, #48	@ 0x30
 8016622:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80167c0 <_svfiprintf_r+0x1e4>
 8016626:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801662a:	f04f 0901 	mov.w	r9, #1
 801662e:	4623      	mov	r3, r4
 8016630:	469a      	mov	sl, r3
 8016632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016636:	b10a      	cbz	r2, 801663c <_svfiprintf_r+0x60>
 8016638:	2a25      	cmp	r2, #37	@ 0x25
 801663a:	d1f9      	bne.n	8016630 <_svfiprintf_r+0x54>
 801663c:	ebba 0b04 	subs.w	fp, sl, r4
 8016640:	d00b      	beq.n	801665a <_svfiprintf_r+0x7e>
 8016642:	465b      	mov	r3, fp
 8016644:	4622      	mov	r2, r4
 8016646:	4629      	mov	r1, r5
 8016648:	4638      	mov	r0, r7
 801664a:	f7ff ff6b 	bl	8016524 <__ssputs_r>
 801664e:	3001      	adds	r0, #1
 8016650:	f000 80a7 	beq.w	80167a2 <_svfiprintf_r+0x1c6>
 8016654:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016656:	445a      	add	r2, fp
 8016658:	9209      	str	r2, [sp, #36]	@ 0x24
 801665a:	f89a 3000 	ldrb.w	r3, [sl]
 801665e:	2b00      	cmp	r3, #0
 8016660:	f000 809f 	beq.w	80167a2 <_svfiprintf_r+0x1c6>
 8016664:	2300      	movs	r3, #0
 8016666:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801666a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801666e:	f10a 0a01 	add.w	sl, sl, #1
 8016672:	9304      	str	r3, [sp, #16]
 8016674:	9307      	str	r3, [sp, #28]
 8016676:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801667a:	931a      	str	r3, [sp, #104]	@ 0x68
 801667c:	4654      	mov	r4, sl
 801667e:	2205      	movs	r2, #5
 8016680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016684:	484e      	ldr	r0, [pc, #312]	@ (80167c0 <_svfiprintf_r+0x1e4>)
 8016686:	f7e9 fdc3 	bl	8000210 <memchr>
 801668a:	9a04      	ldr	r2, [sp, #16]
 801668c:	b9d8      	cbnz	r0, 80166c6 <_svfiprintf_r+0xea>
 801668e:	06d0      	lsls	r0, r2, #27
 8016690:	bf44      	itt	mi
 8016692:	2320      	movmi	r3, #32
 8016694:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016698:	0711      	lsls	r1, r2, #28
 801669a:	bf44      	itt	mi
 801669c:	232b      	movmi	r3, #43	@ 0x2b
 801669e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80166a2:	f89a 3000 	ldrb.w	r3, [sl]
 80166a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80166a8:	d015      	beq.n	80166d6 <_svfiprintf_r+0xfa>
 80166aa:	9a07      	ldr	r2, [sp, #28]
 80166ac:	4654      	mov	r4, sl
 80166ae:	2000      	movs	r0, #0
 80166b0:	f04f 0c0a 	mov.w	ip, #10
 80166b4:	4621      	mov	r1, r4
 80166b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80166ba:	3b30      	subs	r3, #48	@ 0x30
 80166bc:	2b09      	cmp	r3, #9
 80166be:	d94b      	bls.n	8016758 <_svfiprintf_r+0x17c>
 80166c0:	b1b0      	cbz	r0, 80166f0 <_svfiprintf_r+0x114>
 80166c2:	9207      	str	r2, [sp, #28]
 80166c4:	e014      	b.n	80166f0 <_svfiprintf_r+0x114>
 80166c6:	eba0 0308 	sub.w	r3, r0, r8
 80166ca:	fa09 f303 	lsl.w	r3, r9, r3
 80166ce:	4313      	orrs	r3, r2
 80166d0:	9304      	str	r3, [sp, #16]
 80166d2:	46a2      	mov	sl, r4
 80166d4:	e7d2      	b.n	801667c <_svfiprintf_r+0xa0>
 80166d6:	9b03      	ldr	r3, [sp, #12]
 80166d8:	1d19      	adds	r1, r3, #4
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	9103      	str	r1, [sp, #12]
 80166de:	2b00      	cmp	r3, #0
 80166e0:	bfbb      	ittet	lt
 80166e2:	425b      	neglt	r3, r3
 80166e4:	f042 0202 	orrlt.w	r2, r2, #2
 80166e8:	9307      	strge	r3, [sp, #28]
 80166ea:	9307      	strlt	r3, [sp, #28]
 80166ec:	bfb8      	it	lt
 80166ee:	9204      	strlt	r2, [sp, #16]
 80166f0:	7823      	ldrb	r3, [r4, #0]
 80166f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80166f4:	d10a      	bne.n	801670c <_svfiprintf_r+0x130>
 80166f6:	7863      	ldrb	r3, [r4, #1]
 80166f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80166fa:	d132      	bne.n	8016762 <_svfiprintf_r+0x186>
 80166fc:	9b03      	ldr	r3, [sp, #12]
 80166fe:	1d1a      	adds	r2, r3, #4
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	9203      	str	r2, [sp, #12]
 8016704:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016708:	3402      	adds	r4, #2
 801670a:	9305      	str	r3, [sp, #20]
 801670c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80167d0 <_svfiprintf_r+0x1f4>
 8016710:	7821      	ldrb	r1, [r4, #0]
 8016712:	2203      	movs	r2, #3
 8016714:	4650      	mov	r0, sl
 8016716:	f7e9 fd7b 	bl	8000210 <memchr>
 801671a:	b138      	cbz	r0, 801672c <_svfiprintf_r+0x150>
 801671c:	9b04      	ldr	r3, [sp, #16]
 801671e:	eba0 000a 	sub.w	r0, r0, sl
 8016722:	2240      	movs	r2, #64	@ 0x40
 8016724:	4082      	lsls	r2, r0
 8016726:	4313      	orrs	r3, r2
 8016728:	3401      	adds	r4, #1
 801672a:	9304      	str	r3, [sp, #16]
 801672c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016730:	4824      	ldr	r0, [pc, #144]	@ (80167c4 <_svfiprintf_r+0x1e8>)
 8016732:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016736:	2206      	movs	r2, #6
 8016738:	f7e9 fd6a 	bl	8000210 <memchr>
 801673c:	2800      	cmp	r0, #0
 801673e:	d036      	beq.n	80167ae <_svfiprintf_r+0x1d2>
 8016740:	4b21      	ldr	r3, [pc, #132]	@ (80167c8 <_svfiprintf_r+0x1ec>)
 8016742:	bb1b      	cbnz	r3, 801678c <_svfiprintf_r+0x1b0>
 8016744:	9b03      	ldr	r3, [sp, #12]
 8016746:	3307      	adds	r3, #7
 8016748:	f023 0307 	bic.w	r3, r3, #7
 801674c:	3308      	adds	r3, #8
 801674e:	9303      	str	r3, [sp, #12]
 8016750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016752:	4433      	add	r3, r6
 8016754:	9309      	str	r3, [sp, #36]	@ 0x24
 8016756:	e76a      	b.n	801662e <_svfiprintf_r+0x52>
 8016758:	fb0c 3202 	mla	r2, ip, r2, r3
 801675c:	460c      	mov	r4, r1
 801675e:	2001      	movs	r0, #1
 8016760:	e7a8      	b.n	80166b4 <_svfiprintf_r+0xd8>
 8016762:	2300      	movs	r3, #0
 8016764:	3401      	adds	r4, #1
 8016766:	9305      	str	r3, [sp, #20]
 8016768:	4619      	mov	r1, r3
 801676a:	f04f 0c0a 	mov.w	ip, #10
 801676e:	4620      	mov	r0, r4
 8016770:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016774:	3a30      	subs	r2, #48	@ 0x30
 8016776:	2a09      	cmp	r2, #9
 8016778:	d903      	bls.n	8016782 <_svfiprintf_r+0x1a6>
 801677a:	2b00      	cmp	r3, #0
 801677c:	d0c6      	beq.n	801670c <_svfiprintf_r+0x130>
 801677e:	9105      	str	r1, [sp, #20]
 8016780:	e7c4      	b.n	801670c <_svfiprintf_r+0x130>
 8016782:	fb0c 2101 	mla	r1, ip, r1, r2
 8016786:	4604      	mov	r4, r0
 8016788:	2301      	movs	r3, #1
 801678a:	e7f0      	b.n	801676e <_svfiprintf_r+0x192>
 801678c:	ab03      	add	r3, sp, #12
 801678e:	9300      	str	r3, [sp, #0]
 8016790:	462a      	mov	r2, r5
 8016792:	4b0e      	ldr	r3, [pc, #56]	@ (80167cc <_svfiprintf_r+0x1f0>)
 8016794:	a904      	add	r1, sp, #16
 8016796:	4638      	mov	r0, r7
 8016798:	f3af 8000 	nop.w
 801679c:	1c42      	adds	r2, r0, #1
 801679e:	4606      	mov	r6, r0
 80167a0:	d1d6      	bne.n	8016750 <_svfiprintf_r+0x174>
 80167a2:	89ab      	ldrh	r3, [r5, #12]
 80167a4:	065b      	lsls	r3, r3, #25
 80167a6:	f53f af2d 	bmi.w	8016604 <_svfiprintf_r+0x28>
 80167aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80167ac:	e72c      	b.n	8016608 <_svfiprintf_r+0x2c>
 80167ae:	ab03      	add	r3, sp, #12
 80167b0:	9300      	str	r3, [sp, #0]
 80167b2:	462a      	mov	r2, r5
 80167b4:	4b05      	ldr	r3, [pc, #20]	@ (80167cc <_svfiprintf_r+0x1f0>)
 80167b6:	a904      	add	r1, sp, #16
 80167b8:	4638      	mov	r0, r7
 80167ba:	f000 f879 	bl	80168b0 <_printf_i>
 80167be:	e7ed      	b.n	801679c <_svfiprintf_r+0x1c0>
 80167c0:	080e6f84 	.word	0x080e6f84
 80167c4:	080e6f8e 	.word	0x080e6f8e
 80167c8:	00000000 	.word	0x00000000
 80167cc:	08016525 	.word	0x08016525
 80167d0:	080e6f8a 	.word	0x080e6f8a

080167d4 <_printf_common>:
 80167d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167d8:	4616      	mov	r6, r2
 80167da:	4698      	mov	r8, r3
 80167dc:	688a      	ldr	r2, [r1, #8]
 80167de:	690b      	ldr	r3, [r1, #16]
 80167e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80167e4:	4293      	cmp	r3, r2
 80167e6:	bfb8      	it	lt
 80167e8:	4613      	movlt	r3, r2
 80167ea:	6033      	str	r3, [r6, #0]
 80167ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80167f0:	4607      	mov	r7, r0
 80167f2:	460c      	mov	r4, r1
 80167f4:	b10a      	cbz	r2, 80167fa <_printf_common+0x26>
 80167f6:	3301      	adds	r3, #1
 80167f8:	6033      	str	r3, [r6, #0]
 80167fa:	6823      	ldr	r3, [r4, #0]
 80167fc:	0699      	lsls	r1, r3, #26
 80167fe:	bf42      	ittt	mi
 8016800:	6833      	ldrmi	r3, [r6, #0]
 8016802:	3302      	addmi	r3, #2
 8016804:	6033      	strmi	r3, [r6, #0]
 8016806:	6825      	ldr	r5, [r4, #0]
 8016808:	f015 0506 	ands.w	r5, r5, #6
 801680c:	d106      	bne.n	801681c <_printf_common+0x48>
 801680e:	f104 0a19 	add.w	sl, r4, #25
 8016812:	68e3      	ldr	r3, [r4, #12]
 8016814:	6832      	ldr	r2, [r6, #0]
 8016816:	1a9b      	subs	r3, r3, r2
 8016818:	42ab      	cmp	r3, r5
 801681a:	dc26      	bgt.n	801686a <_printf_common+0x96>
 801681c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016820:	6822      	ldr	r2, [r4, #0]
 8016822:	3b00      	subs	r3, #0
 8016824:	bf18      	it	ne
 8016826:	2301      	movne	r3, #1
 8016828:	0692      	lsls	r2, r2, #26
 801682a:	d42b      	bmi.n	8016884 <_printf_common+0xb0>
 801682c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016830:	4641      	mov	r1, r8
 8016832:	4638      	mov	r0, r7
 8016834:	47c8      	blx	r9
 8016836:	3001      	adds	r0, #1
 8016838:	d01e      	beq.n	8016878 <_printf_common+0xa4>
 801683a:	6823      	ldr	r3, [r4, #0]
 801683c:	6922      	ldr	r2, [r4, #16]
 801683e:	f003 0306 	and.w	r3, r3, #6
 8016842:	2b04      	cmp	r3, #4
 8016844:	bf02      	ittt	eq
 8016846:	68e5      	ldreq	r5, [r4, #12]
 8016848:	6833      	ldreq	r3, [r6, #0]
 801684a:	1aed      	subeq	r5, r5, r3
 801684c:	68a3      	ldr	r3, [r4, #8]
 801684e:	bf0c      	ite	eq
 8016850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016854:	2500      	movne	r5, #0
 8016856:	4293      	cmp	r3, r2
 8016858:	bfc4      	itt	gt
 801685a:	1a9b      	subgt	r3, r3, r2
 801685c:	18ed      	addgt	r5, r5, r3
 801685e:	2600      	movs	r6, #0
 8016860:	341a      	adds	r4, #26
 8016862:	42b5      	cmp	r5, r6
 8016864:	d11a      	bne.n	801689c <_printf_common+0xc8>
 8016866:	2000      	movs	r0, #0
 8016868:	e008      	b.n	801687c <_printf_common+0xa8>
 801686a:	2301      	movs	r3, #1
 801686c:	4652      	mov	r2, sl
 801686e:	4641      	mov	r1, r8
 8016870:	4638      	mov	r0, r7
 8016872:	47c8      	blx	r9
 8016874:	3001      	adds	r0, #1
 8016876:	d103      	bne.n	8016880 <_printf_common+0xac>
 8016878:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801687c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016880:	3501      	adds	r5, #1
 8016882:	e7c6      	b.n	8016812 <_printf_common+0x3e>
 8016884:	18e1      	adds	r1, r4, r3
 8016886:	1c5a      	adds	r2, r3, #1
 8016888:	2030      	movs	r0, #48	@ 0x30
 801688a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801688e:	4422      	add	r2, r4
 8016890:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016894:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016898:	3302      	adds	r3, #2
 801689a:	e7c7      	b.n	801682c <_printf_common+0x58>
 801689c:	2301      	movs	r3, #1
 801689e:	4622      	mov	r2, r4
 80168a0:	4641      	mov	r1, r8
 80168a2:	4638      	mov	r0, r7
 80168a4:	47c8      	blx	r9
 80168a6:	3001      	adds	r0, #1
 80168a8:	d0e6      	beq.n	8016878 <_printf_common+0xa4>
 80168aa:	3601      	adds	r6, #1
 80168ac:	e7d9      	b.n	8016862 <_printf_common+0x8e>
	...

080168b0 <_printf_i>:
 80168b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80168b4:	7e0f      	ldrb	r7, [r1, #24]
 80168b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80168b8:	2f78      	cmp	r7, #120	@ 0x78
 80168ba:	4691      	mov	r9, r2
 80168bc:	4680      	mov	r8, r0
 80168be:	460c      	mov	r4, r1
 80168c0:	469a      	mov	sl, r3
 80168c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80168c6:	d807      	bhi.n	80168d8 <_printf_i+0x28>
 80168c8:	2f62      	cmp	r7, #98	@ 0x62
 80168ca:	d80a      	bhi.n	80168e2 <_printf_i+0x32>
 80168cc:	2f00      	cmp	r7, #0
 80168ce:	f000 80d2 	beq.w	8016a76 <_printf_i+0x1c6>
 80168d2:	2f58      	cmp	r7, #88	@ 0x58
 80168d4:	f000 80b9 	beq.w	8016a4a <_printf_i+0x19a>
 80168d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80168dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80168e0:	e03a      	b.n	8016958 <_printf_i+0xa8>
 80168e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80168e6:	2b15      	cmp	r3, #21
 80168e8:	d8f6      	bhi.n	80168d8 <_printf_i+0x28>
 80168ea:	a101      	add	r1, pc, #4	@ (adr r1, 80168f0 <_printf_i+0x40>)
 80168ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80168f0:	08016949 	.word	0x08016949
 80168f4:	0801695d 	.word	0x0801695d
 80168f8:	080168d9 	.word	0x080168d9
 80168fc:	080168d9 	.word	0x080168d9
 8016900:	080168d9 	.word	0x080168d9
 8016904:	080168d9 	.word	0x080168d9
 8016908:	0801695d 	.word	0x0801695d
 801690c:	080168d9 	.word	0x080168d9
 8016910:	080168d9 	.word	0x080168d9
 8016914:	080168d9 	.word	0x080168d9
 8016918:	080168d9 	.word	0x080168d9
 801691c:	08016a5d 	.word	0x08016a5d
 8016920:	08016987 	.word	0x08016987
 8016924:	08016a17 	.word	0x08016a17
 8016928:	080168d9 	.word	0x080168d9
 801692c:	080168d9 	.word	0x080168d9
 8016930:	08016a7f 	.word	0x08016a7f
 8016934:	080168d9 	.word	0x080168d9
 8016938:	08016987 	.word	0x08016987
 801693c:	080168d9 	.word	0x080168d9
 8016940:	080168d9 	.word	0x080168d9
 8016944:	08016a1f 	.word	0x08016a1f
 8016948:	6833      	ldr	r3, [r6, #0]
 801694a:	1d1a      	adds	r2, r3, #4
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	6032      	str	r2, [r6, #0]
 8016950:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016954:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016958:	2301      	movs	r3, #1
 801695a:	e09d      	b.n	8016a98 <_printf_i+0x1e8>
 801695c:	6833      	ldr	r3, [r6, #0]
 801695e:	6820      	ldr	r0, [r4, #0]
 8016960:	1d19      	adds	r1, r3, #4
 8016962:	6031      	str	r1, [r6, #0]
 8016964:	0606      	lsls	r6, r0, #24
 8016966:	d501      	bpl.n	801696c <_printf_i+0xbc>
 8016968:	681d      	ldr	r5, [r3, #0]
 801696a:	e003      	b.n	8016974 <_printf_i+0xc4>
 801696c:	0645      	lsls	r5, r0, #25
 801696e:	d5fb      	bpl.n	8016968 <_printf_i+0xb8>
 8016970:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016974:	2d00      	cmp	r5, #0
 8016976:	da03      	bge.n	8016980 <_printf_i+0xd0>
 8016978:	232d      	movs	r3, #45	@ 0x2d
 801697a:	426d      	negs	r5, r5
 801697c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016980:	4859      	ldr	r0, [pc, #356]	@ (8016ae8 <_printf_i+0x238>)
 8016982:	230a      	movs	r3, #10
 8016984:	e011      	b.n	80169aa <_printf_i+0xfa>
 8016986:	6821      	ldr	r1, [r4, #0]
 8016988:	6833      	ldr	r3, [r6, #0]
 801698a:	0608      	lsls	r0, r1, #24
 801698c:	f853 5b04 	ldr.w	r5, [r3], #4
 8016990:	d402      	bmi.n	8016998 <_printf_i+0xe8>
 8016992:	0649      	lsls	r1, r1, #25
 8016994:	bf48      	it	mi
 8016996:	b2ad      	uxthmi	r5, r5
 8016998:	2f6f      	cmp	r7, #111	@ 0x6f
 801699a:	4853      	ldr	r0, [pc, #332]	@ (8016ae8 <_printf_i+0x238>)
 801699c:	6033      	str	r3, [r6, #0]
 801699e:	bf14      	ite	ne
 80169a0:	230a      	movne	r3, #10
 80169a2:	2308      	moveq	r3, #8
 80169a4:	2100      	movs	r1, #0
 80169a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80169aa:	6866      	ldr	r6, [r4, #4]
 80169ac:	60a6      	str	r6, [r4, #8]
 80169ae:	2e00      	cmp	r6, #0
 80169b0:	bfa2      	ittt	ge
 80169b2:	6821      	ldrge	r1, [r4, #0]
 80169b4:	f021 0104 	bicge.w	r1, r1, #4
 80169b8:	6021      	strge	r1, [r4, #0]
 80169ba:	b90d      	cbnz	r5, 80169c0 <_printf_i+0x110>
 80169bc:	2e00      	cmp	r6, #0
 80169be:	d04b      	beq.n	8016a58 <_printf_i+0x1a8>
 80169c0:	4616      	mov	r6, r2
 80169c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80169c6:	fb03 5711 	mls	r7, r3, r1, r5
 80169ca:	5dc7      	ldrb	r7, [r0, r7]
 80169cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80169d0:	462f      	mov	r7, r5
 80169d2:	42bb      	cmp	r3, r7
 80169d4:	460d      	mov	r5, r1
 80169d6:	d9f4      	bls.n	80169c2 <_printf_i+0x112>
 80169d8:	2b08      	cmp	r3, #8
 80169da:	d10b      	bne.n	80169f4 <_printf_i+0x144>
 80169dc:	6823      	ldr	r3, [r4, #0]
 80169de:	07df      	lsls	r7, r3, #31
 80169e0:	d508      	bpl.n	80169f4 <_printf_i+0x144>
 80169e2:	6923      	ldr	r3, [r4, #16]
 80169e4:	6861      	ldr	r1, [r4, #4]
 80169e6:	4299      	cmp	r1, r3
 80169e8:	bfde      	ittt	le
 80169ea:	2330      	movle	r3, #48	@ 0x30
 80169ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80169f0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80169f4:	1b92      	subs	r2, r2, r6
 80169f6:	6122      	str	r2, [r4, #16]
 80169f8:	f8cd a000 	str.w	sl, [sp]
 80169fc:	464b      	mov	r3, r9
 80169fe:	aa03      	add	r2, sp, #12
 8016a00:	4621      	mov	r1, r4
 8016a02:	4640      	mov	r0, r8
 8016a04:	f7ff fee6 	bl	80167d4 <_printf_common>
 8016a08:	3001      	adds	r0, #1
 8016a0a:	d14a      	bne.n	8016aa2 <_printf_i+0x1f2>
 8016a0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016a10:	b004      	add	sp, #16
 8016a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a16:	6823      	ldr	r3, [r4, #0]
 8016a18:	f043 0320 	orr.w	r3, r3, #32
 8016a1c:	6023      	str	r3, [r4, #0]
 8016a1e:	4833      	ldr	r0, [pc, #204]	@ (8016aec <_printf_i+0x23c>)
 8016a20:	2778      	movs	r7, #120	@ 0x78
 8016a22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016a26:	6823      	ldr	r3, [r4, #0]
 8016a28:	6831      	ldr	r1, [r6, #0]
 8016a2a:	061f      	lsls	r7, r3, #24
 8016a2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8016a30:	d402      	bmi.n	8016a38 <_printf_i+0x188>
 8016a32:	065f      	lsls	r7, r3, #25
 8016a34:	bf48      	it	mi
 8016a36:	b2ad      	uxthmi	r5, r5
 8016a38:	6031      	str	r1, [r6, #0]
 8016a3a:	07d9      	lsls	r1, r3, #31
 8016a3c:	bf44      	itt	mi
 8016a3e:	f043 0320 	orrmi.w	r3, r3, #32
 8016a42:	6023      	strmi	r3, [r4, #0]
 8016a44:	b11d      	cbz	r5, 8016a4e <_printf_i+0x19e>
 8016a46:	2310      	movs	r3, #16
 8016a48:	e7ac      	b.n	80169a4 <_printf_i+0xf4>
 8016a4a:	4827      	ldr	r0, [pc, #156]	@ (8016ae8 <_printf_i+0x238>)
 8016a4c:	e7e9      	b.n	8016a22 <_printf_i+0x172>
 8016a4e:	6823      	ldr	r3, [r4, #0]
 8016a50:	f023 0320 	bic.w	r3, r3, #32
 8016a54:	6023      	str	r3, [r4, #0]
 8016a56:	e7f6      	b.n	8016a46 <_printf_i+0x196>
 8016a58:	4616      	mov	r6, r2
 8016a5a:	e7bd      	b.n	80169d8 <_printf_i+0x128>
 8016a5c:	6833      	ldr	r3, [r6, #0]
 8016a5e:	6825      	ldr	r5, [r4, #0]
 8016a60:	6961      	ldr	r1, [r4, #20]
 8016a62:	1d18      	adds	r0, r3, #4
 8016a64:	6030      	str	r0, [r6, #0]
 8016a66:	062e      	lsls	r6, r5, #24
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	d501      	bpl.n	8016a70 <_printf_i+0x1c0>
 8016a6c:	6019      	str	r1, [r3, #0]
 8016a6e:	e002      	b.n	8016a76 <_printf_i+0x1c6>
 8016a70:	0668      	lsls	r0, r5, #25
 8016a72:	d5fb      	bpl.n	8016a6c <_printf_i+0x1bc>
 8016a74:	8019      	strh	r1, [r3, #0]
 8016a76:	2300      	movs	r3, #0
 8016a78:	6123      	str	r3, [r4, #16]
 8016a7a:	4616      	mov	r6, r2
 8016a7c:	e7bc      	b.n	80169f8 <_printf_i+0x148>
 8016a7e:	6833      	ldr	r3, [r6, #0]
 8016a80:	1d1a      	adds	r2, r3, #4
 8016a82:	6032      	str	r2, [r6, #0]
 8016a84:	681e      	ldr	r6, [r3, #0]
 8016a86:	6862      	ldr	r2, [r4, #4]
 8016a88:	2100      	movs	r1, #0
 8016a8a:	4630      	mov	r0, r6
 8016a8c:	f7e9 fbc0 	bl	8000210 <memchr>
 8016a90:	b108      	cbz	r0, 8016a96 <_printf_i+0x1e6>
 8016a92:	1b80      	subs	r0, r0, r6
 8016a94:	6060      	str	r0, [r4, #4]
 8016a96:	6863      	ldr	r3, [r4, #4]
 8016a98:	6123      	str	r3, [r4, #16]
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016aa0:	e7aa      	b.n	80169f8 <_printf_i+0x148>
 8016aa2:	6923      	ldr	r3, [r4, #16]
 8016aa4:	4632      	mov	r2, r6
 8016aa6:	4649      	mov	r1, r9
 8016aa8:	4640      	mov	r0, r8
 8016aaa:	47d0      	blx	sl
 8016aac:	3001      	adds	r0, #1
 8016aae:	d0ad      	beq.n	8016a0c <_printf_i+0x15c>
 8016ab0:	6823      	ldr	r3, [r4, #0]
 8016ab2:	079b      	lsls	r3, r3, #30
 8016ab4:	d413      	bmi.n	8016ade <_printf_i+0x22e>
 8016ab6:	68e0      	ldr	r0, [r4, #12]
 8016ab8:	9b03      	ldr	r3, [sp, #12]
 8016aba:	4298      	cmp	r0, r3
 8016abc:	bfb8      	it	lt
 8016abe:	4618      	movlt	r0, r3
 8016ac0:	e7a6      	b.n	8016a10 <_printf_i+0x160>
 8016ac2:	2301      	movs	r3, #1
 8016ac4:	4632      	mov	r2, r6
 8016ac6:	4649      	mov	r1, r9
 8016ac8:	4640      	mov	r0, r8
 8016aca:	47d0      	blx	sl
 8016acc:	3001      	adds	r0, #1
 8016ace:	d09d      	beq.n	8016a0c <_printf_i+0x15c>
 8016ad0:	3501      	adds	r5, #1
 8016ad2:	68e3      	ldr	r3, [r4, #12]
 8016ad4:	9903      	ldr	r1, [sp, #12]
 8016ad6:	1a5b      	subs	r3, r3, r1
 8016ad8:	42ab      	cmp	r3, r5
 8016ada:	dcf2      	bgt.n	8016ac2 <_printf_i+0x212>
 8016adc:	e7eb      	b.n	8016ab6 <_printf_i+0x206>
 8016ade:	2500      	movs	r5, #0
 8016ae0:	f104 0619 	add.w	r6, r4, #25
 8016ae4:	e7f5      	b.n	8016ad2 <_printf_i+0x222>
 8016ae6:	bf00      	nop
 8016ae8:	080e6f95 	.word	0x080e6f95
 8016aec:	080e6fa6 	.word	0x080e6fa6

08016af0 <_realloc_r>:
 8016af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016af4:	4680      	mov	r8, r0
 8016af6:	4615      	mov	r5, r2
 8016af8:	460c      	mov	r4, r1
 8016afa:	b921      	cbnz	r1, 8016b06 <_realloc_r+0x16>
 8016afc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b00:	4611      	mov	r1, r2
 8016b02:	f7ff bb71 	b.w	80161e8 <_malloc_r>
 8016b06:	b92a      	cbnz	r2, 8016b14 <_realloc_r+0x24>
 8016b08:	f7ff fcc2 	bl	8016490 <_free_r>
 8016b0c:	2400      	movs	r4, #0
 8016b0e:	4620      	mov	r0, r4
 8016b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b14:	f000 f834 	bl	8016b80 <_malloc_usable_size_r>
 8016b18:	4285      	cmp	r5, r0
 8016b1a:	4606      	mov	r6, r0
 8016b1c:	d802      	bhi.n	8016b24 <_realloc_r+0x34>
 8016b1e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016b22:	d8f4      	bhi.n	8016b0e <_realloc_r+0x1e>
 8016b24:	4629      	mov	r1, r5
 8016b26:	4640      	mov	r0, r8
 8016b28:	f7ff fb5e 	bl	80161e8 <_malloc_r>
 8016b2c:	4607      	mov	r7, r0
 8016b2e:	2800      	cmp	r0, #0
 8016b30:	d0ec      	beq.n	8016b0c <_realloc_r+0x1c>
 8016b32:	42b5      	cmp	r5, r6
 8016b34:	462a      	mov	r2, r5
 8016b36:	4621      	mov	r1, r4
 8016b38:	bf28      	it	cs
 8016b3a:	4632      	movcs	r2, r6
 8016b3c:	f7ff fc9a 	bl	8016474 <memcpy>
 8016b40:	4621      	mov	r1, r4
 8016b42:	4640      	mov	r0, r8
 8016b44:	f7ff fca4 	bl	8016490 <_free_r>
 8016b48:	463c      	mov	r4, r7
 8016b4a:	e7e0      	b.n	8016b0e <_realloc_r+0x1e>

08016b4c <memmove>:
 8016b4c:	4288      	cmp	r0, r1
 8016b4e:	b510      	push	{r4, lr}
 8016b50:	eb01 0402 	add.w	r4, r1, r2
 8016b54:	d902      	bls.n	8016b5c <memmove+0x10>
 8016b56:	4284      	cmp	r4, r0
 8016b58:	4623      	mov	r3, r4
 8016b5a:	d807      	bhi.n	8016b6c <memmove+0x20>
 8016b5c:	1e43      	subs	r3, r0, #1
 8016b5e:	42a1      	cmp	r1, r4
 8016b60:	d008      	beq.n	8016b74 <memmove+0x28>
 8016b62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016b66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016b6a:	e7f8      	b.n	8016b5e <memmove+0x12>
 8016b6c:	4402      	add	r2, r0
 8016b6e:	4601      	mov	r1, r0
 8016b70:	428a      	cmp	r2, r1
 8016b72:	d100      	bne.n	8016b76 <memmove+0x2a>
 8016b74:	bd10      	pop	{r4, pc}
 8016b76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016b7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016b7e:	e7f7      	b.n	8016b70 <memmove+0x24>

08016b80 <_malloc_usable_size_r>:
 8016b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b84:	1f18      	subs	r0, r3, #4
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	bfbc      	itt	lt
 8016b8a:	580b      	ldrlt	r3, [r1, r0]
 8016b8c:	18c0      	addlt	r0, r0, r3
 8016b8e:	4770      	bx	lr

08016b90 <_init>:
 8016b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b92:	bf00      	nop
 8016b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b96:	bc08      	pop	{r3}
 8016b98:	469e      	mov	lr, r3
 8016b9a:	4770      	bx	lr

08016b9c <_fini>:
 8016b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b9e:	bf00      	nop
 8016ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016ba2:	bc08      	pop	{r3}
 8016ba4:	469e      	mov	lr, r3
 8016ba6:	4770      	bx	lr
